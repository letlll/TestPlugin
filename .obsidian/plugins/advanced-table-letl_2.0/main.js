/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/json5/dist/index.js
var require_dist = __commonJS({
  "node_modules/json5/dist/index.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.JSON5 = factory();
    })(exports, function() {
      "use strict";
      function createCommonjsModule(fn, module3) {
        return module3 = { exports: {} }, fn(module3, module3.exports), module3.exports;
      }
      var _global = createCommonjsModule(function(module3) {
        var global = module3.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
        if (typeof __g == "number") {
          __g = global;
        }
      });
      var _core = createCommonjsModule(function(module3) {
        var core = module3.exports = { version: "2.6.5" };
        if (typeof __e == "number") {
          __e = core;
        }
      });
      var _core_1 = _core.version;
      var _isObject = function(it) {
        return typeof it === "object" ? it !== null : typeof it === "function";
      };
      var _anObject = function(it) {
        if (!_isObject(it)) {
          throw TypeError(it + " is not an object!");
        }
        return it;
      };
      var _fails = function(exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
      var _descriptors = !_fails(function() {
        return Object.defineProperty({}, "a", { get: function() {
          return 7;
        } }).a != 7;
      });
      var document2 = _global.document;
      var is = _isObject(document2) && _isObject(document2.createElement);
      var _domCreate = function(it) {
        return is ? document2.createElement(it) : {};
      };
      var _ie8DomDefine = !_descriptors && !_fails(function() {
        return Object.defineProperty(_domCreate("div"), "a", { get: function() {
          return 7;
        } }).a != 7;
      });
      var _toPrimitive = function(it, S) {
        if (!_isObject(it)) {
          return it;
        }
        var fn, val;
        if (S && typeof (fn = it.toString) == "function" && !_isObject(val = fn.call(it))) {
          return val;
        }
        if (typeof (fn = it.valueOf) == "function" && !_isObject(val = fn.call(it))) {
          return val;
        }
        if (!S && typeof (fn = it.toString) == "function" && !_isObject(val = fn.call(it))) {
          return val;
        }
        throw TypeError("Can't convert object to primitive value");
      };
      var dP = Object.defineProperty;
      var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        _anObject(O);
        P = _toPrimitive(P, true);
        _anObject(Attributes);
        if (_ie8DomDefine) {
          try {
            return dP(O, P, Attributes);
          } catch (e) {
          }
        }
        if ("get" in Attributes || "set" in Attributes) {
          throw TypeError("Accessors not supported!");
        }
        if ("value" in Attributes) {
          O[P] = Attributes.value;
        }
        return O;
      };
      var _objectDp = {
        f
      };
      var _propertyDesc = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
      var _hide = _descriptors ? function(object, key2, value) {
        return _objectDp.f(object, key2, _propertyDesc(1, value));
      } : function(object, key2, value) {
        object[key2] = value;
        return object;
      };
      var hasOwnProperty = {}.hasOwnProperty;
      var _has = function(it, key2) {
        return hasOwnProperty.call(it, key2);
      };
      var id = 0;
      var px = Math.random();
      var _uid = function(key2) {
        return "Symbol(".concat(key2 === void 0 ? "" : key2, ")_", (++id + px).toString(36));
      };
      var _library = false;
      var _shared = createCommonjsModule(function(module3) {
        var SHARED = "__core-js_shared__";
        var store = _global[SHARED] || (_global[SHARED] = {});
        (module3.exports = function(key2, value) {
          return store[key2] || (store[key2] = value !== void 0 ? value : {});
        })("versions", []).push({
          version: _core.version,
          mode: _library ? "pure" : "global",
          copyright: "\xA9 2019 Denis Pushkarev (zloirock.ru)"
        });
      });
      var _functionToString = _shared("native-function-to-string", Function.toString);
      var _redefine = createCommonjsModule(function(module3) {
        var SRC = _uid("src");
        var TO_STRING = "toString";
        var TPL = ("" + _functionToString).split(TO_STRING);
        _core.inspectSource = function(it) {
          return _functionToString.call(it);
        };
        (module3.exports = function(O, key2, val, safe) {
          var isFunction = typeof val == "function";
          if (isFunction) {
            _has(val, "name") || _hide(val, "name", key2);
          }
          if (O[key2] === val) {
            return;
          }
          if (isFunction) {
            _has(val, SRC) || _hide(val, SRC, O[key2] ? "" + O[key2] : TPL.join(String(key2)));
          }
          if (O === _global) {
            O[key2] = val;
          } else if (!safe) {
            delete O[key2];
            _hide(O, key2, val);
          } else if (O[key2]) {
            O[key2] = val;
          } else {
            _hide(O, key2, val);
          }
        })(Function.prototype, TO_STRING, function toString() {
          return typeof this == "function" && this[SRC] || _functionToString.call(this);
        });
      });
      var _aFunction = function(it) {
        if (typeof it != "function") {
          throw TypeError(it + " is not a function!");
        }
        return it;
      };
      var _ctx = function(fn, that, length) {
        _aFunction(fn);
        if (that === void 0) {
          return fn;
        }
        switch (length) {
          case 1:
            return function(a) {
              return fn.call(that, a);
            };
          case 2:
            return function(a, b) {
              return fn.call(that, a, b);
            };
          case 3:
            return function(a, b, c2) {
              return fn.call(that, a, b, c2);
            };
        }
        return function() {
          return fn.apply(that, arguments);
        };
      };
      var PROTOTYPE = "prototype";
      var $export = function(type, name, source2) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
        var exports2 = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
        var expProto = exports2[PROTOTYPE] || (exports2[PROTOTYPE] = {});
        var key2, own, out, exp;
        if (IS_GLOBAL) {
          source2 = name;
        }
        for (key2 in source2) {
          own = !IS_FORCED && target && target[key2] !== void 0;
          out = (own ? target : source2)[key2];
          exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == "function" ? _ctx(Function.call, out) : out;
          if (target) {
            _redefine(target, key2, out, type & $export.U);
          }
          if (exports2[key2] != out) {
            _hide(exports2, key2, exp);
          }
          if (IS_PROTO && expProto[key2] != out) {
            expProto[key2] = out;
          }
        }
      };
      _global.core = _core;
      $export.F = 1;
      $export.G = 2;
      $export.S = 4;
      $export.P = 8;
      $export.B = 16;
      $export.W = 32;
      $export.U = 64;
      $export.R = 128;
      var _export = $export;
      var ceil = Math.ceil;
      var floor = Math.floor;
      var _toInteger = function(it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };
      var _defined = function(it) {
        if (it == void 0) {
          throw TypeError("Can't call method on  " + it);
        }
        return it;
      };
      var _stringAt = function(TO_STRING) {
        return function(that, pos2) {
          var s = String(_defined(that));
          var i = _toInteger(pos2);
          var l = s.length;
          var a, b;
          if (i < 0 || i >= l) {
            return TO_STRING ? "" : void 0;
          }
          a = s.charCodeAt(i);
          return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
        };
      };
      var $at = _stringAt(false);
      _export(_export.P, "String", {
        // 21.1.3.3 String.prototype.codePointAt(pos)
        codePointAt: function codePointAt2(pos2) {
          return $at(this, pos2);
        }
      });
      var codePointAt = _core.String.codePointAt;
      var max = Math.max;
      var min = Math.min;
      var _toAbsoluteIndex = function(index, length) {
        index = _toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };
      var fromCharCode = String.fromCharCode;
      var $fromCodePoint = String.fromCodePoint;
      _export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), "String", {
        // 21.1.2.2 String.fromCodePoint(...codePoints)
        fromCodePoint: function fromCodePoint2(x) {
          var arguments$1 = arguments;
          var res = [];
          var aLen = arguments.length;
          var i = 0;
          var code;
          while (aLen > i) {
            code = +arguments$1[i++];
            if (_toAbsoluteIndex(code, 1114111) !== code) {
              throw RangeError(code + " is not a valid code point");
            }
            res.push(
              code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320)
            );
          }
          return res.join("");
        }
      });
      var fromCodePoint = _core.String.fromCodePoint;
      var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
      var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
      var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
      var unicode = {
        Space_Separator,
        ID_Start,
        ID_Continue
      };
      var util = {
        isSpaceSeparator: function isSpaceSeparator(c2) {
          return typeof c2 === "string" && unicode.Space_Separator.test(c2);
        },
        isIdStartChar: function isIdStartChar(c2) {
          return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 === "$" || c2 === "_" || unicode.ID_Start.test(c2));
        },
        isIdContinueChar: function isIdContinueChar(c2) {
          return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || c2 === "$" || c2 === "_" || c2 === "\u200C" || c2 === "\u200D" || unicode.ID_Continue.test(c2));
        },
        isDigit: function isDigit(c2) {
          return typeof c2 === "string" && /[0-9]/.test(c2);
        },
        isHexDigit: function isHexDigit(c2) {
          return typeof c2 === "string" && /[0-9A-Fa-f]/.test(c2);
        }
      };
      var source;
      var parseState;
      var stack;
      var pos;
      var line;
      var column;
      var token;
      var key;
      var root;
      var parse2 = function parse3(text, reviver) {
        source = String(text);
        parseState = "start";
        stack = [];
        pos = 0;
        line = 1;
        column = 0;
        token = void 0;
        key = void 0;
        root = void 0;
        do {
          token = lex();
          parseStates[parseState]();
        } while (token.type !== "eof");
        if (typeof reviver === "function") {
          return internalize({ "": root }, "", reviver);
        }
        return root;
      };
      function internalize(holder, name, reviver) {
        var value = holder[name];
        if (value != null && typeof value === "object") {
          if (Array.isArray(value)) {
            for (var i = 0; i < value.length; i++) {
              var key2 = String(i);
              var replacement = internalize(value, key2, reviver);
              if (replacement === void 0) {
                delete value[key2];
              } else {
                Object.defineProperty(value, key2, {
                  value: replacement,
                  writable: true,
                  enumerable: true,
                  configurable: true
                });
              }
            }
          } else {
            for (var key$1 in value) {
              var replacement$1 = internalize(value, key$1, reviver);
              if (replacement$1 === void 0) {
                delete value[key$1];
              } else {
                Object.defineProperty(value, key$1, {
                  value: replacement$1,
                  writable: true,
                  enumerable: true,
                  configurable: true
                });
              }
            }
          }
        }
        return reviver.call(holder, name, value);
      }
      var lexState;
      var buffer;
      var doubleQuote;
      var sign;
      var c;
      function lex() {
        lexState = "default";
        buffer = "";
        doubleQuote = false;
        sign = 1;
        for (; ; ) {
          c = peek();
          var token2 = lexStates[lexState]();
          if (token2) {
            return token2;
          }
        }
      }
      function peek() {
        if (source[pos]) {
          return String.fromCodePoint(source.codePointAt(pos));
        }
      }
      function read() {
        var c2 = peek();
        if (c2 === "\n") {
          line++;
          column = 0;
        } else if (c2) {
          column += c2.length;
        } else {
          column++;
        }
        if (c2) {
          pos += c2.length;
        }
        return c2;
      }
      var lexStates = {
        default: function default$1() {
          switch (c) {
            case "	":
            case "\v":
            case "\f":
            case " ":
            case "\xA0":
            case "\uFEFF":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              read();
              return;
            case "/":
              read();
              lexState = "comment";
              return;
            case void 0:
              read();
              return newToken("eof");
          }
          if (util.isSpaceSeparator(c)) {
            read();
            return;
          }
          return lexStates[parseState]();
        },
        comment: function comment() {
          switch (c) {
            case "*":
              read();
              lexState = "multiLineComment";
              return;
            case "/":
              read();
              lexState = "singleLineComment";
              return;
          }
          throw invalidChar(read());
        },
        multiLineComment: function multiLineComment() {
          switch (c) {
            case "*":
              read();
              lexState = "multiLineCommentAsterisk";
              return;
            case void 0:
              throw invalidChar(read());
          }
          read();
        },
        multiLineCommentAsterisk: function multiLineCommentAsterisk() {
          switch (c) {
            case "*":
              read();
              return;
            case "/":
              read();
              lexState = "default";
              return;
            case void 0:
              throw invalidChar(read());
          }
          read();
          lexState = "multiLineComment";
        },
        singleLineComment: function singleLineComment() {
          switch (c) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              read();
              lexState = "default";
              return;
            case void 0:
              read();
              return newToken("eof");
          }
          read();
        },
        value: function value() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read());
            case "n":
              read();
              literal("ull");
              return newToken("null", null);
            case "t":
              read();
              literal("rue");
              return newToken("boolean", true);
            case "f":
              read();
              literal("alse");
              return newToken("boolean", false);
            case "-":
            case "+":
              if (read() === "-") {
                sign = -1;
              }
              lexState = "sign";
              return;
            case ".":
              buffer = read();
              lexState = "decimalPointLeading";
              return;
            case "0":
              buffer = read();
              lexState = "zero";
              return;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              buffer = read();
              lexState = "decimalInteger";
              return;
            case "I":
              read();
              literal("nfinity");
              return newToken("numeric", Infinity);
            case "N":
              read();
              literal("aN");
              return newToken("numeric", NaN);
            case '"':
            case "'":
              doubleQuote = read() === '"';
              buffer = "";
              lexState = "string";
              return;
          }
          throw invalidChar(read());
        },
        identifierNameStartEscape: function identifierNameStartEscape() {
          if (c !== "u") {
            throw invalidChar(read());
          }
          read();
          var u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
              break;
            default:
              if (!util.isIdStartChar(u)) {
                throw invalidIdentifier();
              }
              break;
          }
          buffer += u;
          lexState = "identifierName";
        },
        identifierName: function identifierName() {
          switch (c) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              buffer += read();
              return;
            case "\\":
              read();
              lexState = "identifierNameEscape";
              return;
          }
          if (util.isIdContinueChar(c)) {
            buffer += read();
            return;
          }
          return newToken("identifier", buffer);
        },
        identifierNameEscape: function identifierNameEscape() {
          if (c !== "u") {
            throw invalidChar(read());
          }
          read();
          var u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              break;
            default:
              if (!util.isIdContinueChar(u)) {
                throw invalidIdentifier();
              }
              break;
          }
          buffer += u;
          lexState = "identifierName";
        },
        sign: function sign$1() {
          switch (c) {
            case ".":
              buffer = read();
              lexState = "decimalPointLeading";
              return;
            case "0":
              buffer = read();
              lexState = "zero";
              return;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              buffer = read();
              lexState = "decimalInteger";
              return;
            case "I":
              read();
              literal("nfinity");
              return newToken("numeric", sign * Infinity);
            case "N":
              read();
              literal("aN");
              return newToken("numeric", NaN);
          }
          throw invalidChar(read());
        },
        zero: function zero() {
          switch (c) {
            case ".":
              buffer += read();
              lexState = "decimalPoint";
              return;
            case "e":
            case "E":
              buffer += read();
              lexState = "decimalExponent";
              return;
            case "x":
            case "X":
              buffer += read();
              lexState = "hexadecimal";
              return;
          }
          return newToken("numeric", sign * 0);
        },
        decimalInteger: function decimalInteger() {
          switch (c) {
            case ".":
              buffer += read();
              lexState = "decimalPoint";
              return;
            case "e":
            case "E":
              buffer += read();
              lexState = "decimalExponent";
              return;
          }
          if (util.isDigit(c)) {
            buffer += read();
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        decimalPointLeading: function decimalPointLeading() {
          if (util.isDigit(c)) {
            buffer += read();
            lexState = "decimalFraction";
            return;
          }
          throw invalidChar(read());
        },
        decimalPoint: function decimalPoint() {
          switch (c) {
            case "e":
            case "E":
              buffer += read();
              lexState = "decimalExponent";
              return;
          }
          if (util.isDigit(c)) {
            buffer += read();
            lexState = "decimalFraction";
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        decimalFraction: function decimalFraction() {
          switch (c) {
            case "e":
            case "E":
              buffer += read();
              lexState = "decimalExponent";
              return;
          }
          if (util.isDigit(c)) {
            buffer += read();
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        decimalExponent: function decimalExponent() {
          switch (c) {
            case "+":
            case "-":
              buffer += read();
              lexState = "decimalExponentSign";
              return;
          }
          if (util.isDigit(c)) {
            buffer += read();
            lexState = "decimalExponentInteger";
            return;
          }
          throw invalidChar(read());
        },
        decimalExponentSign: function decimalExponentSign() {
          if (util.isDigit(c)) {
            buffer += read();
            lexState = "decimalExponentInteger";
            return;
          }
          throw invalidChar(read());
        },
        decimalExponentInteger: function decimalExponentInteger() {
          if (util.isDigit(c)) {
            buffer += read();
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        hexadecimal: function hexadecimal() {
          if (util.isHexDigit(c)) {
            buffer += read();
            lexState = "hexadecimalInteger";
            return;
          }
          throw invalidChar(read());
        },
        hexadecimalInteger: function hexadecimalInteger() {
          if (util.isHexDigit(c)) {
            buffer += read();
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        string: function string() {
          switch (c) {
            case "\\":
              read();
              buffer += escape();
              return;
            case '"':
              if (doubleQuote) {
                read();
                return newToken("string", buffer);
              }
              buffer += read();
              return;
            case "'":
              if (!doubleQuote) {
                read();
                return newToken("string", buffer);
              }
              buffer += read();
              return;
            case "\n":
            case "\r":
              throw invalidChar(read());
            case "\u2028":
            case "\u2029":
              separatorChar(c);
              break;
            case void 0:
              throw invalidChar(read());
          }
          buffer += read();
        },
        start: function start() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read());
          }
          lexState = "value";
        },
        beforePropertyName: function beforePropertyName() {
          switch (c) {
            case "$":
            case "_":
              buffer = read();
              lexState = "identifierName";
              return;
            case "\\":
              read();
              lexState = "identifierNameStartEscape";
              return;
            case "}":
              return newToken("punctuator", read());
            case '"':
            case "'":
              doubleQuote = read() === '"';
              lexState = "string";
              return;
          }
          if (util.isIdStartChar(c)) {
            buffer += read();
            lexState = "identifierName";
            return;
          }
          throw invalidChar(read());
        },
        afterPropertyName: function afterPropertyName() {
          if (c === ":") {
            return newToken("punctuator", read());
          }
          throw invalidChar(read());
        },
        beforePropertyValue: function beforePropertyValue() {
          lexState = "value";
        },
        afterPropertyValue: function afterPropertyValue() {
          switch (c) {
            case ",":
            case "}":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        },
        beforeArrayValue: function beforeArrayValue() {
          if (c === "]") {
            return newToken("punctuator", read());
          }
          lexState = "value";
        },
        afterArrayValue: function afterArrayValue() {
          switch (c) {
            case ",":
            case "]":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        },
        end: function end() {
          throw invalidChar(read());
        }
      };
      function newToken(type, value) {
        return {
          type,
          value,
          line,
          column
        };
      }
      function literal(s) {
        for (var i = 0, list = s; i < list.length; i += 1) {
          var c2 = list[i];
          var p = peek();
          if (p !== c2) {
            throw invalidChar(read());
          }
          read();
        }
      }
      function escape() {
        var c2 = peek();
        switch (c2) {
          case "b":
            read();
            return "\b";
          case "f":
            read();
            return "\f";
          case "n":
            read();
            return "\n";
          case "r":
            read();
            return "\r";
          case "t":
            read();
            return "	";
          case "v":
            read();
            return "\v";
          case "0":
            read();
            if (util.isDigit(peek())) {
              throw invalidChar(read());
            }
            return "\0";
          case "x":
            read();
            return hexEscape();
          case "u":
            read();
            return unicodeEscape();
          case "\n":
          case "\u2028":
          case "\u2029":
            read();
            return "";
          case "\r":
            read();
            if (peek() === "\n") {
              read();
            }
            return "";
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            throw invalidChar(read());
          case void 0:
            throw invalidChar(read());
        }
        return read();
      }
      function hexEscape() {
        var buffer2 = "";
        var c2 = peek();
        if (!util.isHexDigit(c2)) {
          throw invalidChar(read());
        }
        buffer2 += read();
        c2 = peek();
        if (!util.isHexDigit(c2)) {
          throw invalidChar(read());
        }
        buffer2 += read();
        return String.fromCodePoint(parseInt(buffer2, 16));
      }
      function unicodeEscape() {
        var buffer2 = "";
        var count = 4;
        while (count-- > 0) {
          var c2 = peek();
          if (!util.isHexDigit(c2)) {
            throw invalidChar(read());
          }
          buffer2 += read();
        }
        return String.fromCodePoint(parseInt(buffer2, 16));
      }
      var parseStates = {
        start: function start() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          push();
        },
        beforePropertyName: function beforePropertyName() {
          switch (token.type) {
            case "identifier":
            case "string":
              key = token.value;
              parseState = "afterPropertyName";
              return;
            case "punctuator":
              pop();
              return;
            case "eof":
              throw invalidEOF();
          }
        },
        afterPropertyName: function afterPropertyName() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          parseState = "beforePropertyValue";
        },
        beforePropertyValue: function beforePropertyValue() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          push();
        },
        beforeArrayValue: function beforeArrayValue() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          if (token.type === "punctuator" && token.value === "]") {
            pop();
            return;
          }
          push();
        },
        afterPropertyValue: function afterPropertyValue() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          switch (token.value) {
            case ",":
              parseState = "beforePropertyName";
              return;
            case "}":
              pop();
          }
        },
        afterArrayValue: function afterArrayValue() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          switch (token.value) {
            case ",":
              parseState = "beforeArrayValue";
              return;
            case "]":
              pop();
          }
        },
        end: function end() {
        }
      };
      function push() {
        var value;
        switch (token.type) {
          case "punctuator":
            switch (token.value) {
              case "{":
                value = {};
                break;
              case "[":
                value = [];
                break;
            }
            break;
          case "null":
          case "boolean":
          case "numeric":
          case "string":
            value = token.value;
            break;
        }
        if (root === void 0) {
          root = value;
        } else {
          var parent = stack[stack.length - 1];
          if (Array.isArray(parent)) {
            parent.push(value);
          } else {
            Object.defineProperty(parent, key, {
              value,
              writable: true,
              enumerable: true,
              configurable: true
            });
          }
        }
        if (value !== null && typeof value === "object") {
          stack.push(value);
          if (Array.isArray(value)) {
            parseState = "beforeArrayValue";
          } else {
            parseState = "beforePropertyName";
          }
        } else {
          var current = stack[stack.length - 1];
          if (current == null) {
            parseState = "end";
          } else if (Array.isArray(current)) {
            parseState = "afterArrayValue";
          } else {
            parseState = "afterPropertyValue";
          }
        }
      }
      function pop() {
        stack.pop();
        var current = stack[stack.length - 1];
        if (current == null) {
          parseState = "end";
        } else if (Array.isArray(current)) {
          parseState = "afterArrayValue";
        } else {
          parseState = "afterPropertyValue";
        }
      }
      function invalidChar(c2) {
        if (c2 === void 0) {
          return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
        }
        return syntaxError("JSON5: invalid character '" + formatChar(c2) + "' at " + line + ":" + column);
      }
      function invalidEOF() {
        return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
      }
      function invalidIdentifier() {
        column -= 5;
        return syntaxError("JSON5: invalid identifier character at " + line + ":" + column);
      }
      function separatorChar(c2) {
        console.warn("JSON5: '" + formatChar(c2) + "' in strings is not valid ECMAScript; consider escaping");
      }
      function formatChar(c2) {
        var replacements = {
          "'": "\\'",
          '"': '\\"',
          "\\": "\\\\",
          "\b": "\\b",
          "\f": "\\f",
          "\n": "\\n",
          "\r": "\\r",
          "	": "\\t",
          "\v": "\\v",
          "\0": "\\0",
          "\u2028": "\\u2028",
          "\u2029": "\\u2029"
        };
        if (replacements[c2]) {
          return replacements[c2];
        }
        if (c2 < " ") {
          var hexString = c2.charCodeAt(0).toString(16);
          return "\\x" + ("00" + hexString).substring(hexString.length);
        }
        return c2;
      }
      function syntaxError(message) {
        var err = new SyntaxError(message);
        err.lineNumber = line;
        err.columnNumber = column;
        return err;
      }
      var stringify = function stringify2(value, replacer, space) {
        var stack2 = [];
        var indent = "";
        var propertyList;
        var replacerFunc;
        var gap = "";
        var quote;
        if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
          space = replacer.space;
          quote = replacer.quote;
          replacer = replacer.replacer;
        }
        if (typeof replacer === "function") {
          replacerFunc = replacer;
        } else if (Array.isArray(replacer)) {
          propertyList = [];
          for (var i = 0, list = replacer; i < list.length; i += 1) {
            var v = list[i];
            var item = void 0;
            if (typeof v === "string") {
              item = v;
            } else if (typeof v === "number" || v instanceof String || v instanceof Number) {
              item = String(v);
            }
            if (item !== void 0 && propertyList.indexOf(item) < 0) {
              propertyList.push(item);
            }
          }
        }
        if (space instanceof Number) {
          space = Number(space);
        } else if (space instanceof String) {
          space = String(space);
        }
        if (typeof space === "number") {
          if (space > 0) {
            space = Math.min(10, Math.floor(space));
            gap = "          ".substr(0, space);
          }
        } else if (typeof space === "string") {
          gap = space.substr(0, 10);
        }
        return serializeProperty("", { "": value });
        function serializeProperty(key2, holder) {
          var value2 = holder[key2];
          if (value2 != null) {
            if (typeof value2.toJSON5 === "function") {
              value2 = value2.toJSON5(key2);
            } else if (typeof value2.toJSON === "function") {
              value2 = value2.toJSON(key2);
            }
          }
          if (replacerFunc) {
            value2 = replacerFunc.call(holder, key2, value2);
          }
          if (value2 instanceof Number) {
            value2 = Number(value2);
          } else if (value2 instanceof String) {
            value2 = String(value2);
          } else if (value2 instanceof Boolean) {
            value2 = value2.valueOf();
          }
          switch (value2) {
            case null:
              return "null";
            case true:
              return "true";
            case false:
              return "false";
          }
          if (typeof value2 === "string") {
            return quoteString(value2, false);
          }
          if (typeof value2 === "number") {
            return String(value2);
          }
          if (typeof value2 === "object") {
            return Array.isArray(value2) ? serializeArray(value2) : serializeObject(value2);
          }
          return void 0;
        }
        function quoteString(value2) {
          var quotes = {
            "'": 0.1,
            '"': 0.2
          };
          var replacements = {
            "'": "\\'",
            '"': '\\"',
            "\\": "\\\\",
            "\b": "\\b",
            "\f": "\\f",
            "\n": "\\n",
            "\r": "\\r",
            "	": "\\t",
            "\v": "\\v",
            "\0": "\\0",
            "\u2028": "\\u2028",
            "\u2029": "\\u2029"
          };
          var product = "";
          for (var i2 = 0; i2 < value2.length; i2++) {
            var c2 = value2[i2];
            switch (c2) {
              case "'":
              case '"':
                quotes[c2]++;
                product += c2;
                continue;
              case "\0":
                if (util.isDigit(value2[i2 + 1])) {
                  product += "\\x00";
                  continue;
                }
            }
            if (replacements[c2]) {
              product += replacements[c2];
              continue;
            }
            if (c2 < " ") {
              var hexString = c2.charCodeAt(0).toString(16);
              product += "\\x" + ("00" + hexString).substring(hexString.length);
              continue;
            }
            product += c2;
          }
          var quoteChar = quote || Object.keys(quotes).reduce(function(a, b) {
            return quotes[a] < quotes[b] ? a : b;
          });
          product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]);
          return quoteChar + product + quoteChar;
        }
        function serializeObject(value2) {
          if (stack2.indexOf(value2) >= 0) {
            throw TypeError("Converting circular structure to JSON5");
          }
          stack2.push(value2);
          var stepback = indent;
          indent = indent + gap;
          var keys = propertyList || Object.keys(value2);
          var partial = [];
          for (var i2 = 0, list2 = keys; i2 < list2.length; i2 += 1) {
            var key2 = list2[i2];
            var propertyString = serializeProperty(key2, value2);
            if (propertyString !== void 0) {
              var member = serializeKey(key2) + ":";
              if (gap !== "") {
                member += " ";
              }
              member += propertyString;
              partial.push(member);
            }
          }
          var final;
          if (partial.length === 0) {
            final = "{}";
          } else {
            var properties;
            if (gap === "") {
              properties = partial.join(",");
              final = "{" + properties + "}";
            } else {
              var separator = ",\n" + indent;
              properties = partial.join(separator);
              final = "{\n" + indent + properties + ",\n" + stepback + "}";
            }
          }
          stack2.pop();
          indent = stepback;
          return final;
        }
        function serializeKey(key2) {
          if (key2.length === 0) {
            return quoteString(key2, true);
          }
          var firstChar = String.fromCodePoint(key2.codePointAt(0));
          if (!util.isIdStartChar(firstChar)) {
            return quoteString(key2, true);
          }
          for (var i2 = firstChar.length; i2 < key2.length; i2++) {
            if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i2)))) {
              return quoteString(key2, true);
            }
          }
          return key2;
        }
        function serializeArray(value2) {
          if (stack2.indexOf(value2) >= 0) {
            throw TypeError("Converting circular structure to JSON5");
          }
          stack2.push(value2);
          var stepback = indent;
          indent = indent + gap;
          var partial = [];
          for (var i2 = 0; i2 < value2.length; i2++) {
            var propertyString = serializeProperty(String(i2), value2);
            partial.push(propertyString !== void 0 ? propertyString : "null");
          }
          var final;
          if (partial.length === 0) {
            final = "[]";
          } else {
            if (gap === "") {
              var properties = partial.join(",");
              final = "[" + properties + "]";
            } else {
              var separator = ",\n" + indent;
              var properties$1 = partial.join(separator);
              final = "[\n" + indent + properties$1 + ",\n" + stepback + "]";
            }
          }
          stack2.pop();
          indent = stepback;
          return final;
        }
      };
      var JSON52 = {
        parse: parse2,
        stringify
      };
      var lib = JSON52;
      var es5 = lib;
      return es5;
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  ObsidianSpreadsheet: () => ObsidianSpreadsheet,
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian10 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var SheetSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Advanced Table XT \u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u539F\u751F\u8868\u683C\u540E\u5904\u7406").setDesc("\u542F\u7528\u6B64\u8BBE\u7F6E\u4EE5\u4F7F\u7528Obsidian Sheets\u7684\u6E32\u67D3\u5668").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.nativeProcessing).onChange(async (value) => {
        var _a, _b;
        this.plugin.settings.nativeProcessing = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.activeLeaf) == null ? void 0 : _a.rebuildView();
        (_b = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _b.previewMode.rerender(true);
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u5728\u5355\u5143\u683C\u4E2D\u4F7F\u7528\u6BB5\u843D").setDesc("\u542F\u7528\u6B64\u8BBE\u7F6E\u4EE5\u5728\u8868\u683C\u5355\u5143\u683C\u4E2D\u4F7F\u7528\u6BB5\u843D").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.paragraphs).onChange(async (value) => {
        var _a, _b;
        this.plugin.settings.paragraphs = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.activeLeaf) == null ? void 0 : _a.rebuildView();
        (_b = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _b.previewMode.rerender(true);
      })
    );
    containerEl.createEl("h3", { text: "\u5DE5\u5177\u680F\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u8868\u683C\u5DE5\u5177\u680F").setDesc("\u542F\u7528\u6216\u7981\u7528\u8868\u683C\u5DE5\u5177\u680F\u529F\u80FD").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.toolbarEnabled).onChange(async (value) => {
        this.plugin.settings.toolbarEnabled = value;
        await this.plugin.saveSettings();
        if (value) {
          this.plugin.createToolbar();
        } else {
          document.querySelectorAll(".advanced-table-toolbar-container").forEach((container) => {
            container.remove();
          });
        }
      })
    );
    containerEl.createEl("h3", { text: "\u7F16\u8F91\u6A21\u5F0F\u64CD\u4F5C" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u7F16\u8F91\u6A21\u5F0F\u4E0B\u7684\u8868\u683C\u64CD\u4F5C").setDesc("\u5141\u8BB8\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u76F4\u63A5\u4FEE\u6539 Markdown \u6E90\u7801\u4E2D\u7684\u8868\u683C").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableEditModeOperations).onChange(async (value) => {
        this.plugin.settings.enableEditModeOperations = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "\u5355\u5143\u683C\u5408\u5E76" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u5355\u5143\u683C\u5408\u5E76").setDesc("\u542F\u7528\u4F7F\u7528 < \u548C ^ \u6807\u8BB0\u8FDB\u884C\u5355\u5143\u683C\u5408\u5E76\u7684\u529F\u80FD").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableCellMerging).onChange(async (value) => {
        var _a;
        this.plugin.settings.enableCellMerging = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.previewMode.rerender(true);
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u5408\u5E76\u975E\u7A7A\u5355\u5143\u683C\u65F6\u786E\u8BA4").setDesc("\u5F53\u5408\u5E76\u5305\u542B\u5185\u5BB9\u7684\u5355\u5143\u683C\u65F6\u663E\u793A\u786E\u8BA4\u5BF9\u8BDD\u6846").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.confirmMergeNonEmpty).onChange(async (value) => {
        this.plugin.settings.confirmMergeNonEmpty = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u81EA\u52A8\u5C45\u4E2D\u5408\u5E76\u5355\u5143\u683C").setDesc("\u81EA\u52A8\u5C06\u5408\u5E76\u5355\u5143\u683C\u4E2D\u7684\u5185\u5BB9\u5C45\u4E2D\u663E\u793A").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoCenterMergedCells).onChange(async (value) => {
        var _a;
        this.plugin.settings.autoCenterMergedCells = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.previewMode.rerender(true);
      })
    );
    containerEl.createEl("h3", { text: "\u8868\u683CID\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u8868\u683CID").setDesc("\u81EA\u52A8\u4E3A\u8868\u683C\u6DFB\u52A0ID\u4F5C\u4E3AHTML\u6CE8\u91CA").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableTableIds).onChange(async (value) => {
        this.plugin.settings.enableTableIds = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u4F7F\u7528\u8868\u683C\u6CE8\u91CA\u5939\u6A21\u5F0F").setDesc('\u5728\u8868\u683C\u524D\u540E\u6DFB\u52A0\u914D\u5BF9\u7684HTML\u6CE8\u91CA\uFF0C\u5F62\u6210"\u6CE8\u91CA\u5939"\uFF0C\u63D0\u9AD8\u8868\u683CID\u8BC6\u522B\u7684\u51C6\u786E\u6027').addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useTableWrapperComments).onChange(async (value) => {
        this.plugin.settings.useTableWrapperComments = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u8868\u683CID\u524D\u7F00").setDesc("\u751F\u6210\u7684\u8868\u683CID\u524D\u7F00").addText(
      (text) => text.setValue(this.plugin.settings.idPrefix).onChange(async (value) => {
        this.plugin.settings.idPrefix = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u8868\u683C\u7279\u5F81\u5339\u914D\u76F8\u4F3C\u5EA6\u9608\u503C").setDesc("\u5F53\u901A\u8FC7\u7279\u5F81\u5339\u914D\u8868\u683C\u65F6\uFF0C\u9700\u8981\u8FBE\u5230\u7684\u6700\u5C0F\u76F8\u4F3C\u5EA6\uFF080-1\u4E4B\u95F4\uFF0C\u9ED8\u8BA40.7\uFF09").addSlider(
      (slider) => slider.setLimits(0.5, 1, 0.05).setValue(this.plugin.settings.featureSimilarityThreshold || 0.7).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.featureSimilarityThreshold = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u4F18\u5148\u4F7F\u7528\u8868\u683C\u7279\u5F81\u5339\u914D").setDesc("\u542F\u7528\u540E\uFF0C\u5C06\u4F18\u5148\u4F7F\u7528\u7279\u5F81\u5339\u914D\u800C\u975E\u4F4D\u7F6E\u5339\u914D\u6765\u8BC6\u522B\u8868\u683CID").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.preferFeatureMatching || false).onChange(async (value) => {
        this.plugin.settings.preferFeatureMatching = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "\u6570\u636E\u5B58\u50A8\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u4F18\u5148\u4F7F\u7528\u6587\u4EF6\u5B58\u50A8").setDesc("\u542F\u7528\u540E\uFF0C\u8868\u683C\u6570\u636E\u5C06\u4F18\u5148\u5B58\u50A8\u5728Markdown\u6587\u4EF6\u4E2D\uFF0C\u800C\u4E0D\u662Fdata.json\u6587\u4EF6\u4E2D").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.preferFileStorage || false).onChange(async (value) => {
        this.plugin.settings.preferFileStorage = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u81EA\u52A8\u5BFC\u51FA\u5230\u6587\u4EF6").setDesc("\u542F\u7528\u540E\uFF0C\u5373\u4F7F\u4F7F\u7528data.json\u5B58\u50A8\u6570\u636E\uFF0C\u4E5F\u4F1A\u81EA\u52A8\u5C06\u6570\u636E\u5BFC\u51FA\u5230Markdown\u6587\u4EF6\u4E2D").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoExportToFile || false).onChange(async (value) => {
        this.plugin.settings.autoExportToFile = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/sheetElement.ts
var import_obsidian2 = require("obsidian");
var JSON5 = __toESM(require_dist());
var MERGE_UP_SIGNIFIER = "^";
var MERGE_LEFT_SIGNIFIER = "<";
var HEADER_DELIMETER = "-";
var META_DELIMETER = "---";
var SheetElement = class extends import_obsidian2.MarkdownRenderChild {
  constructor(el, source, ctx, app, plugin) {
    super(el);
    this.el = el;
    this.source = source;
    this.ctx = ctx;
    this.app = app;
    this.plugin = plugin;
    this.globalStyle = {};
    this.cellMaxLength = 0;
    this.rowMaxLength = 0;
    this.rowStyles = [];
    this.colStyles = [];
    this.domGrid = [];
  }
  async onload() {
    this.metaRE = new RegExp(String.raw`^${META_DELIMETER}\s*?(?:~(.*?))?\s*?\n+`, "mg");
    this.newLineRE = new RegExp(String.raw`\n`);
    this.cellBorderRE = new RegExp(String.raw`(?<!\\)\|`);
    this.headerRE = new RegExp(String.raw`^\s*?(:)?(?:${HEADER_DELIMETER})+?(:)?\s*?(?:(?<!\\)~(.*?))?$`);
    this.parseInputToGrid();
    this.validateInput();
    this.normalizeGrid();
    this.table = this.el;
    this.table.id = "obsidian-sheets-parsed";
    this.tableHead = this.table.createEl("thead");
    this.tableBody = this.table.createEl("tbody");
    this.getHeaderBoundaries();
    this.getHeaderStyles();
    this.buildDomTable();
  }
  onunload() {
  }
  displayError(error) {
    this.el.createDiv({
      text: `
Error: \`${error}\`

`,
      cls: "obs-sheets_error"
    });
    this.unload();
  }
  parseInputToGrid() {
    var _a;
    if (!this.metaRE.test(this.source))
      return this.contentGrid = this.source.split(this.newLineRE).filter((row) => this.cellBorderRE.test(row)).map((row) => row.split(this.cellBorderRE).map((cell) => cell.trim()));
    const [meta, unparsedStyle, source] = this.source.split(this.metaRE);
    this.parseMetadata(meta);
    if (unparsedStyle) {
      let cellStyle = {};
      const cls = unparsedStyle.match(/\.\S+/g) || [];
      cls.forEach((cssClass) => {
        var _a2;
        cellStyle = { ...cellStyle, ...((_a2 = this.styles) == null ? void 0 : _a2[cssClass.slice(1)]) || {} };
      });
      const inlineStyle = ((_a = unparsedStyle.match(/\{.*\}/)) == null ? void 0 : _a[0]) || "{}";
      try {
        cellStyle = { ...cellStyle, ...JSON5.parse(inlineStyle) };
      } catch (e) {
        console.error(`Invalid cell style \`${inlineStyle}\``);
      }
      this.globalStyle = cellStyle;
    }
    return this.contentGrid = source.split(this.newLineRE).map((row) => row.split(this.cellBorderRE).map((cell) => cell.trim()));
  }
  parseMetadata(meta) {
    let metadata;
    try {
      metadata = JSON5.parse(meta);
    } catch (error) {
      return this.displayError("Metadata is not proper JSON");
    }
    this.metadata = metadata;
    if (metadata.classes) {
      this.styles = metadata.classes;
    }
  }
  validateInput() {
    if (!this.contentGrid.every(
      (row) => {
        var _a, _b;
        return !((_a = row.pop()) == null ? void 0 : _a.trim()) && !((_b = row.shift()) == null ? void 0 : _b.trim());
      }
    ))
      return this.displayError("Malformed table");
  }
  normalizeGrid() {
    for (let rowIndex = 0; rowIndex < this.contentGrid.length; rowIndex++) {
      const row = this.contentGrid[rowIndex];
      if (this.rowMaxLength < row.length)
        this.rowMaxLength = row.length;
      for (let colIndex = 0; colIndex < row.length; colIndex++)
        if (this.cellMaxLength < row[colIndex].trim().length)
          this.cellMaxLength = row[colIndex].trim().length;
    }
    this.contentGrid = this.contentGrid.map(
      (line) => Array.from(
        { ...line, length: this.rowMaxLength },
        (cell) => cell || ""
      )
    );
  }
  getHeaderBoundaries() {
    this.headerRow = this.contentGrid.findIndex(
      (headerRow) => headerRow.every((headerCol) => this.headerRE.test(headerCol))
    );
    this.headerCol = this.contentGrid[0].map(
      (_, i) => this.contentGrid.map((row) => row[i])
    ).findIndex(
      (headerCol) => headerCol.every((headerCol2) => this.headerRE.test(headerCol2))
    );
  }
  getHeaderStyles() {
    if (this.headerRow !== -1)
      this.colStyles = this.contentGrid[this.headerRow].map((rowHead) => {
        var _a, _b;
        let styles = {};
        const alignment = rowHead.match(this.headerRE);
        if (!alignment)
          return { classes: [], styles };
        else if (alignment[1] && alignment[2])
          styles["textAlign"] = "center";
        else if (alignment[1])
          styles["textAlign"] = "left";
        else if (alignment[2])
          styles["textAlign"] = "right";
        const classes = ((_b = (_a = alignment[3]) == null ? void 0 : _a.match(/\.\S+/g)) == null ? void 0 : _b.map(String)) || [];
        classes.forEach(
          (cssClass) => {
            var _a2;
            return styles = {
              ...styles,
              ...((_a2 = this.styles) == null ? void 0 : _a2[cssClass.slice(1)]) || {}
            };
          }
        );
        return { classes, styles };
      });
    if (this.headerCol !== -1)
      this.rowStyles = this.contentGrid[0].map(
        (_, i) => this.contentGrid.map((row) => row[i])
      )[this.headerCol].map((rowHead) => {
        var _a, _b;
        let styles = {};
        const alignment = rowHead.match(this.headerRE);
        if (!alignment)
          return { classes: [], styles };
        else if (alignment[1] && alignment[2])
          styles["textAlign"] = "center";
        else if (alignment[1])
          styles["textAlign"] = "left";
        else if (alignment[2])
          styles["textAlign"] = "right";
        const classes = ((_b = (_a = alignment[3]) == null ? void 0 : _a.match(/\.\S+/g)) == null ? void 0 : _b.map(String)) || [];
        classes.forEach(
          (cssClass) => {
            var _a2;
            return styles = {
              ...styles,
              ...((_a2 = this.styles) == null ? void 0 : _a2[cssClass.slice(1)]) || {}
            };
          }
        );
        return { classes, styles };
      });
  }
  buildDomTable() {
    for (let rowIndex = 0; rowIndex < this.contentGrid.length; rowIndex++)
      this.buildDomRow(rowIndex);
  }
  buildDomRow(rowIndex) {
    const rowContents = this.contentGrid[rowIndex];
    let rowNode = this.tableBody.createEl("tr");
    if (rowIndex < this.headerRow)
      rowNode = this.tableHead.createEl("tr");
    else if (rowIndex === this.headerRow)
      return;
    this.domGrid[rowIndex] = [];
    for (let columnIndex = 0; columnIndex < rowContents.length; columnIndex++)
      this.buildDomCell(rowIndex, columnIndex, rowNode);
  }
  async buildDomCell(rowIndex, columnIndex, rowNode) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    const [
      cellContent,
      cellStyles
    ] = this.contentGrid[rowIndex][columnIndex].split(/(?<![\\~])~(?!~)/);
    let cls = [];
    let cellStyle = this.globalStyle;
    if (this.rowStyles[rowIndex]) {
      cellStyle = { ...cellStyle, ...this.rowStyles[rowIndex].styles };
      cls.push(...this.rowStyles[rowIndex].classes);
    }
    if (this.colStyles[columnIndex]) {
      cellStyle = { ...cellStyle, ...this.colStyles[columnIndex].styles };
      cls.push(...this.colStyles[columnIndex].classes);
    }
    if (cellStyles) {
      cls = cellStyles.match(/(?<=\.)\S+/g) || [];
      cls.forEach((cssClass) => {
        var _a2;
        cellStyle = { ...cellStyle, ...((_a2 = this.styles) == null ? void 0 : _a2[cssClass]) || {} };
      });
      const inlineStyle = ((_a = cellStyles.match(/\{.*\}/)) == null ? void 0 : _a[0]) || "{}";
      try {
        cellStyle = { ...cellStyle, ...JSON5.parse(inlineStyle) };
      } catch (e) {
        console.error(`Invalid cell style \`${inlineStyle}\``);
      }
    }
    let cellTag = "td";
    let cell;
    if (columnIndex === this.headerCol || rowIndex === this.headerRow)
      return;
    else if (columnIndex < this.headerCol || rowIndex < this.headerRow)
      cellTag = "th";
    if (cellContent == MERGE_LEFT_SIGNIFIER && ((_c = (_b = this.domGrid) == null ? void 0 : _b[rowIndex]) == null ? void 0 : _c[columnIndex - 1])) {
      cell = this.domGrid[rowIndex][columnIndex - 1];
      (cell == null ? void 0 : cell.colSpan) || Object.assign(cell, { colSpan: 1 });
      cell.colSpan = columnIndex - parseInt(cell.getAttribute("col-index") || columnIndex.toString()) + 1;
    } else if (cellContent == MERGE_UP_SIGNIFIER && ((_e = (_d = this.domGrid) == null ? void 0 : _d[rowIndex - 1]) == null ? void 0 : _e[columnIndex])) {
      cell = this.domGrid[rowIndex - 1][columnIndex];
      (cell == null ? void 0 : cell.rowSpan) || Object.assign(cell, { rowSpan: 1 });
      cell.rowSpan = rowIndex - parseInt(cell.getAttribute("row-index") || "0") + 1;
    } else if (((_g = (_f = this.domGrid) == null ? void 0 : _f[rowIndex - 1]) == null ? void 0 : _g[columnIndex]) && ((_i = (_h = this.domGrid) == null ? void 0 : _h[rowIndex]) == null ? void 0 : _i[columnIndex - 1]) && this.domGrid[rowIndex][columnIndex - 1] === this.domGrid[rowIndex - 1][columnIndex])
      cell = this.domGrid[rowIndex][columnIndex - 1];
    else {
      cell = rowNode.createEl(cellTag, { cls });
      cell.setAttribute("row-index", rowIndex.toString());
      cell.setAttribute("col-index", columnIndex.toString());
      import_obsidian2.MarkdownRenderer.render(
        this.app,
        "\u200B " + (cellContent || "\u200B"),
        // Make sure markdown that requires to be at the start of a line is not rendered
        cell,
        "",
        this
      ).then(() => {
        cell.innerHTML = cell.children[0].innerHTML.replace(/^\u200B /g, "");
      });
      Object.assign(cell.style, cellStyle);
    }
    return this.domGrid[rowIndex][columnIndex] = cell;
  }
};

// src/markdownTableDetector.ts
var import_obsidian3 = require("obsidian");
var ConfirmModal = class extends import_obsidian3.Modal {
  constructor(app, message, onClose) {
    super(app);
    this.result = false;
    this.message = message;
    this.onClose = onClose;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "\u786E\u8BA4\u64CD\u4F5C" });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    buttonContainer.createEl("button", { text: "\u53D6\u6D88" }).addEventListener("click", () => {
      this.result = false;
      this.close();
    });
    buttonContainer.createEl("button", { text: "\u786E\u8BA4", cls: "mod-cta" }).addEventListener("click", () => {
      this.result = true;
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.onClose(this.result);
  }
};
var MarkdownTableDetector = class {
  // 辅助方法，获取app对象
  getApp() {
    return this.plugin.app;
  }
  constructor(plugin) {
    this.plugin = plugin;
    console.log("MarkdownTableDetector initialized");
  }
  /**
   * 显示确认对话框
   * @param message 确认消息
   * @returns 用户是否确认
   */
  async showConfirmDialog(message) {
    return new Promise((resolve) => {
      const modal = new ConfirmModal(this.getApp(), message, (result) => {
        resolve(result);
      });
      modal.open();
    });
  }
  /**
   * 检查是否为HTML格式的表格（而非Markdown生成的表格）
   * @param table 表格HTML元素
   * @returns 是否为HTML格式的表格
   */
  isHtmlFormattedTable(table) {
    try {
      if (table.hasAttribute("border") || table.hasAttribute("cellpadding") || table.hasAttribute("cellspacing") || table.hasAttribute("width") || table.hasAttribute("height") || table.hasAttribute("bgcolor")) {
        return true;
      }
      const style = table.getAttribute("style");
      if (style && (style.includes("border-collapse") || style.includes("text-align") || style.includes("font-family") || style.includes("background-color"))) {
        return true;
      }
      const cells = table.querySelectorAll("td, th");
      for (const cell of Array.from(cells).slice(0, 10)) {
        const html = cell.innerHTML || "";
        if (html.includes("<") && html.includes(">") && !html.match(/^<(em|strong|s|code|a|span)[^>]*>.*<\/(em|strong|s|code|a|span)>$/)) {
          return true;
        }
      }
      const rows = table.querySelectorAll("tr");
      if (rows.length > 1) {
        const secondRow = rows[1];
        const separatorCells = secondRow.querySelectorAll("td, th");
        let isSeparatorRow = true;
        for (const cell of Array.from(separatorCells)) {
          const text = cell.textContent || "";
          if (!text.match(/^:?-+:?$/)) {
            isSeparatorRow = false;
            break;
          }
        }
        if (!isSeparatorRow) {
          return true;
        }
      }
      return false;
    } catch (error) {
      console.error("\u68C0\u6D4BHTML\u8868\u683C\u65F6\u51FA\u9519:", error);
      return false;
    }
  }
  /**
   * 设置表格行列索引
   * @param table 表格HTML元素
   */
  setupTableIndices(table) {
    try {
      const rows = table.querySelectorAll("tr");
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        const cells = row.querySelectorAll("td, th");
        for (let colIndex = 0; colIndex < cells.length; colIndex++) {
          const cell = cells[colIndex];
          cell.dataset.rowIndex = rowIndex.toString();
          cell.dataset.colIndex = colIndex.toString();
          cell.setAttribute("row-index", rowIndex.toString());
          cell.setAttribute("col-index", colIndex.toString());
          cell.classList.add("advanced-table-cell");
          if (cell.tagName.toLowerCase() === "th") {
            cell.classList.add("advanced-table-header");
          }
          if (!cell.innerHTML.trim()) {
            cell.innerHTML = "&nbsp;";
          }
        }
      }
    } catch (error) {
      console.error("\u8BBE\u7F6E\u8868\u683C\u7D22\u5F15\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 检查单元格内容是否为合并标记
   * @param cell 单元格元素
   * @param marker 标记符号类型 ('^' 或 '<')
   * @returns 是否为指定类型的合并标记
   */
  isMergeMarker(cell, marker) {
    var _a;
    const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
    if (marker === "^") {
      return /^(\^+|\\\^|\s*\^+\s*)$/.test(content);
    } else if (marker === "<") {
      return /^(<+|\\<|\s*<+\s*)$/.test(content);
    }
    return false;
  }
  /**
   * 检查单元格是否非空且有有效内容
   * @param cell 单元格元素
   * @returns 是否有有效内容
   */
  hasMeaningfulContent(cell) {
    var _a;
    const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
    return content !== "" && content !== "&nbsp;" && !/^(\^+|\\\^|\s*\^+\s*)$/.test(content) && !/^(<+|\\<|\s*<+\s*)$/.test(content);
  }
  /**
   * 解析表格的合并标记
   * @param table 表格HTML元素
   */
  async parseMergeCellMarkers(table) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!this.plugin.settings.enableCellMerging)
      return;
    try {
      const rows = table.querySelectorAll("tr");
      const mergeUp = [];
      const mergeLeft = [];
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        const cells = row.querySelectorAll("td, th");
        for (let colIndex = 0; colIndex < cells.length; colIndex++) {
          const cell = cells[colIndex];
          const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
          const upMatch = content.match(/^(\^+)$/);
          if (upMatch) {
            const count = upMatch[1].length;
            console.log(`\u53D1\u73B0\u5411\u4E0A\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u6807\u8BB0\u6570\u91CF=${count}, \u5185\u5BB9="${content}"`);
            mergeUp.push({ cell, count });
            continue;
          }
          const leftMatch = content.match(/^(<+)$/);
          if (leftMatch) {
            const count = leftMatch[1].length;
            console.log(`\u53D1\u73B0\u5411\u5DE6\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u6807\u8BB0\u6570\u91CF=${count}, \u5185\u5BB9="${content}"`);
            mergeLeft.push({ cell, count });
            continue;
          }
          if (content === "\\^" || content === " ^ " || content === " \\^ ") {
            console.log(`\u53D1\u73B0\u8F6C\u4E49\u5411\u4E0A\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u5185\u5BB9="${content}"`);
            mergeUp.push({ cell, count: 1 });
          } else if (content === "\\<" || content === " < " || content === " \\< ") {
            console.log(`\u53D1\u73B0\u8F6C\u4E49\u5411\u5DE6\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u5185\u5BB9="${content}"`);
            mergeLeft.push({ cell, count: 1 });
          }
        }
      }
      for (const { cell, count } of mergeUp) {
        const rowIndex = parseInt(cell.getAttribute("row-index") || cell.dataset.rowIndex || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || cell.dataset.colIndex || "0");
        console.log(`\u5904\u7406\u5411\u4E0A\u5408\u5E76: \u884C=${rowIndex}, \u5217=${colIndex}, \u5408\u5E76\u6570\u91CF=${count}`);
        if (rowIndex >= count) {
          const targetRowIndex = rowIndex - count;
          const targetRow = rows[targetRowIndex];
          if (targetRow) {
            const targetCells = targetRow.querySelectorAll("td, th");
            if (colIndex < targetCells.length) {
              const targetCell = targetCells[colIndex];
              if (this.hasMeaningfulContent(targetCell)) {
                const cellsToMerge = [];
                if (this.hasMeaningfulContent(cell)) {
                  cellsToMerge.push({
                    rowIndex,
                    colIndex,
                    content: ((_b = cell.textContent) == null ? void 0 : _b.trim()) || ""
                  });
                }
                for (let i = 1; i < count; i++) {
                  const midRowIndex = rowIndex - i;
                  if (midRowIndex > targetRowIndex) {
                    const midRow = rows[midRowIndex];
                    const midCells = midRow.querySelectorAll("td, th");
                    if (colIndex < midCells.length) {
                      const midCell = midCells[colIndex];
                      if (this.hasMeaningfulContent(midCell)) {
                        cellsToMerge.push({
                          rowIndex: midRowIndex,
                          colIndex,
                          content: ((_c = midCell.textContent) == null ? void 0 : _c.trim()) || ""
                        });
                      }
                    }
                  }
                }
                if (this.plugin.settings.confirmMergeNonEmpty && cellsToMerge.length > 0) {
                  const cellContents = cellsToMerge.map(
                    (c) => `[${c.rowIndex + 1},${c.colIndex + 1}]: "${c.content}"`
                  ).join("\n");
                  const confirmMerge = await this.showConfirmDialog(
                    `\u4EE5\u4E0B\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9\u5C06\u88AB\u8986\u76D6:
${cellContents}

\u786E\u5B9A\u8981\u5408\u5E76\u8FD9\u4E9B\u5355\u5143\u683C\u5417\uFF1F`
                  );
                  if (!confirmMerge) {
                    console.log("\u7528\u6237\u53D6\u6D88\u4E86\u5355\u5143\u683C\u5408\u5E76");
                    continue;
                  }
                }
                let rowSpan = parseInt(targetCell.getAttribute("rowspan") || "1");
                rowSpan = rowSpan + count;
                console.log(`\u8BBE\u7F6Erowspan: \u76EE\u6807\u5355\u5143\u683C(${targetRowIndex},${colIndex}), rowspan=${rowSpan}`);
                targetCell.setAttribute("rowspan", rowSpan.toString());
                targetCell.rowSpan = rowSpan;
                targetCell.classList.add("obs-merged-cell");
                cell.style.display = "none";
              } else {
                console.warn("\u5411\u4E0A\u5408\u5E76\u5931\u8D25: \u76EE\u6807\u5355\u5143\u683C\u6CA1\u6709\u6709\u6548\u5185\u5BB9", targetCell);
              }
            }
          }
        }
      }
      for (const { cell, count } of mergeLeft) {
        const rowIndex = parseInt(cell.getAttribute("row-index") || cell.dataset.rowIndex || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || cell.dataset.colIndex || "0");
        console.log(`\u5904\u7406\u5411\u5DE6\u5408\u5E76: \u884C=${rowIndex}, \u5217=${colIndex}, \u5408\u5E76\u6570\u91CF=${count}`);
        if (colIndex >= count) {
          const targetColIndex = colIndex - count;
          const targetCell = (_d = rows[rowIndex]) == null ? void 0 : _d.querySelectorAll("td, th")[targetColIndex];
          if (targetCell) {
            if (this.hasMeaningfulContent(targetCell)) {
              const cellsToMerge = [];
              if (this.hasMeaningfulContent(cell)) {
                cellsToMerge.push({
                  rowIndex,
                  colIndex,
                  content: ((_e = cell.textContent) == null ? void 0 : _e.trim()) || ""
                });
              }
              for (let i = 1; i < count; i++) {
                const midColIndex = colIndex - i;
                if (midColIndex > targetColIndex) {
                  const midCell = (_f = rows[rowIndex]) == null ? void 0 : _f.querySelectorAll("td, th")[midColIndex];
                  if (midCell && this.hasMeaningfulContent(midCell)) {
                    cellsToMerge.push({
                      rowIndex,
                      colIndex: midColIndex,
                      content: ((_g = midCell.textContent) == null ? void 0 : _g.trim()) || ""
                    });
                  }
                }
              }
              if (this.plugin.settings.confirmMergeNonEmpty && cellsToMerge.length > 0) {
                const cellContents = cellsToMerge.map(
                  (c) => `[${c.rowIndex + 1},${c.colIndex + 1}]: "${c.content}"`
                ).join("\n");
                const confirmMerge = await this.showConfirmDialog(
                  `\u4EE5\u4E0B\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9\u5C06\u88AB\u8986\u76D6:
${cellContents}

\u786E\u5B9A\u8981\u5408\u5E76\u8FD9\u4E9B\u5355\u5143\u683C\u5417\uFF1F`
                );
                if (!confirmMerge) {
                  console.log("\u7528\u6237\u53D6\u6D88\u4E86\u5355\u5143\u683C\u5408\u5E76");
                  continue;
                }
              }
              let colSpan = parseInt(targetCell.getAttribute("colspan") || "1");
              colSpan = colSpan + count;
              console.log(`\u8BBE\u7F6Ecolspan: \u76EE\u6807\u5355\u5143\u683C(${rowIndex},${targetColIndex}), colspan=${colSpan}`);
              targetCell.setAttribute("colspan", colSpan.toString());
              targetCell.colSpan = colSpan;
              targetCell.classList.add("obs-merged-cell");
              cell.style.display = "none";
            } else {
              console.warn("\u5411\u5DE6\u5408\u5E76\u5931\u8D25: \u76EE\u6807\u5355\u5143\u683C\u6CA1\u6709\u6709\u6548\u5185\u5BB9", targetCell);
            }
          }
        }
      }
      if (this.plugin.settings.autoCenterMergedCells) {
        const mergedCells = table.querySelectorAll("[rowspan], [colspan]");
        mergedCells.forEach((cell) => {
          const htmlCell = cell;
          if (parseInt(htmlCell.getAttribute("rowspan") || "1") > 1 || parseInt(htmlCell.getAttribute("colspan") || "1") > 1) {
            htmlCell.style.textAlign = "center";
            htmlCell.style.verticalAlign = "middle";
            htmlCell.classList.add("obs-merged-cell");
          }
        });
      }
    } catch (error) {
      console.error("\u89E3\u6790\u5355\u5143\u683C\u5408\u5E76\u6807\u8BB0\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 应用表格合并标记到Markdown
   * @param table 表格HTML元素
   */
  applyMergeCellsMarkers(table) {
    var _a;
    try {
      if (table.dataset.tableMergeProcessed === "true") {
        return;
      }
      const rows = table.querySelectorAll("tr");
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        const cells = row.querySelectorAll("td, th");
        for (let colIndex = 0; colIndex < cells.length; colIndex++) {
          const cell = cells[colIndex];
          const cellContent = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
          const leftMatch = cellContent.match(/^(<+|\\<|\s*<+\s*)$/);
          if (leftMatch && colIndex > 0) {
            let mergeCount = 1;
            if (cellContent.match(/^<+$/)) {
              mergeCount = cellContent.length;
            }
            console.log(`\u5E94\u7528\u5411\u5DE6\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u6807\u8BB0\u6570\u91CF=${mergeCount}, \u5185\u5BB9="${cellContent}"`);
            const targetColIndex = colIndex - mergeCount;
            if (targetColIndex >= 0) {
              const leftCell = cells[targetColIndex];
              const colSpan2 = mergeCount + 1;
              console.log(`\u8BBE\u7F6Ecolspan: \u76EE\u6807\u5355\u5143\u683C(${rowIndex},${targetColIndex}), colspan=${colSpan2}`);
              leftCell.colSpan = colSpan2;
              leftCell.setAttribute("colspan", colSpan2.toString());
              cell.style.display = "none";
              if (this.plugin.settings.autoCenterMergedCells) {
                leftCell.style.textAlign = "center";
                leftCell.style.verticalAlign = "middle";
              }
              leftCell.classList.add("obs-merged-cell");
            }
            continue;
          }
          const upMatch = cellContent.match(/^(\^+|\\\^|\s*\^+\s*)$/);
          if (upMatch && rowIndex > 0) {
            let mergeCount = 1;
            if (cellContent.match(/^\^+$/)) {
              mergeCount = cellContent.length;
            }
            console.log(`\u5E94\u7528\u5411\u4E0A\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u6807\u8BB0\u6570\u91CF=${mergeCount}, \u5185\u5BB9="${cellContent}"`);
            const targetRowIndex = rowIndex - mergeCount;
            if (targetRowIndex >= 0) {
              const aboveRow = rows[targetRowIndex];
              const aboveCells = aboveRow.querySelectorAll("td, th");
              if (colIndex < aboveCells.length) {
                const aboveCell = aboveCells[colIndex];
                const rowSpan2 = mergeCount + 1;
                console.log(`\u8BBE\u7F6Erowspan: \u76EE\u6807\u5355\u5143\u683C(${targetRowIndex},${colIndex}), rowspan=${rowSpan2}`);
                aboveCell.rowSpan = rowSpan2;
                aboveCell.setAttribute("rowspan", rowSpan2.toString());
                cell.style.display = "none";
                if (this.plugin.settings.autoCenterMergedCells) {
                  aboveCell.style.textAlign = "center";
                  aboveCell.style.verticalAlign = "middle";
                }
                aboveCell.classList.add("obs-merged-cell");
              }
            }
            continue;
          }
          const rowSpan = parseInt(cell.getAttribute("rowspan") || "1");
          const colSpan = parseInt(cell.getAttribute("colspan") || "1");
          if (rowSpan > 1) {
            for (let i = 1; i < rowSpan; i++) {
              if (rowIndex + i < rows.length) {
                const targetRow = rows[rowIndex + i];
                const targetCells = targetRow.querySelectorAll("td, th");
                if (colIndex < targetCells.length) {
                  const targetCell = targetCells[colIndex];
                  const markerText = "^".repeat(i);
                  console.log(`\u6DFB\u52A0\u5411\u4E0A\u5408\u5E76\u6807\u8BB0: \u4F4D\u7F6E(${rowIndex + i},${colIndex}), \u6807\u8BB0="${markerText}"`);
                  targetCell.textContent = markerText;
                  targetCell.classList.add("merge-marker");
                }
              }
            }
          }
          if (colSpan > 1) {
            for (let i = 1; i < colSpan; i++) {
              if (colIndex + i < cells.length) {
                const targetCell = cells[colIndex + i];
                const markerText = "<".repeat(i);
                console.log(`\u6DFB\u52A0\u5411\u5DE6\u5408\u5E76\u6807\u8BB0: \u4F4D\u7F6E(${rowIndex},${colIndex + i}), \u6807\u8BB0="${markerText}"`);
                targetCell.textContent = markerText;
                targetCell.classList.add("merge-marker");
              }
            }
          }
        }
      }
      table.dataset.tableMergeProcessed = "true";
      console.log(`\u8868\u683C\u5904\u7406\u5B8C\u6210\uFF0C\u5DF2\u6DFB\u52A0\u5408\u5E76\u6807\u8BB0`);
    } catch (error) {
      console.error("\u5E94\u7528\u5408\u5E76\u5355\u5143\u683C\u6807\u8BB0\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 处理多选单元格合并
   * @param table 表格元素
   * @param selectedCells 选中的单元格数组
   * @returns 是否成功合并
   */
  async mergeSelectedCells(table, selectedCells) {
    var _a;
    if (!selectedCells || selectedCells.length < 2) {
      new import_obsidian3.Notice("\u8BF7\u9009\u62E9\u81F3\u5C112\u4E2A\u5355\u5143\u683C\u8FDB\u884C\u5408\u5E76");
      return false;
    }
    try {
      let minRow = Number.MAX_SAFE_INTEGER;
      let maxRow = 0;
      let minCol = Number.MAX_SAFE_INTEGER;
      let maxCol = 0;
      for (const cell of selectedCells) {
        const rowIndex = parseInt(cell.getAttribute("row-index") || cell.dataset.rowIndex || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || cell.dataset.colIndex || "0");
        minRow = Math.min(minRow, rowIndex);
        maxRow = Math.max(maxRow, rowIndex);
        minCol = Math.min(minCol, colIndex);
        maxCol = Math.max(maxCol, colIndex);
      }
      const expectedCellCount = (maxRow - minRow + 1) * (maxCol - minCol + 1);
      if (expectedCellCount !== selectedCells.length) {
        new import_obsidian3.Notice("\u53EA\u80FD\u5408\u5E76\u5F62\u6210\u5B8C\u6574\u77E9\u5F62\u7684\u5355\u5143\u683C");
        return false;
      }
      const mainCell = table.querySelector(`[row-index="${minRow}"][col-index="${minCol}"]`);
      if (!mainCell) {
        new import_obsidian3.Notice("\u65E0\u6CD5\u627E\u5230\u4E3B\u5355\u5143\u683C");
        return false;
      }
      if (this.plugin.settings.confirmMergeNonEmpty) {
        const nonEmptyCells = [];
        for (const cell of selectedCells) {
          if (cell === mainCell)
            continue;
          if (this.hasMeaningfulContent(cell)) {
            const rowIndex = parseInt(cell.getAttribute("row-index") || cell.dataset.rowIndex || "0");
            const colIndex = parseInt(cell.getAttribute("col-index") || cell.dataset.colIndex || "0");
            nonEmptyCells.push({
              rowIndex,
              colIndex,
              content: ((_a = cell.textContent) == null ? void 0 : _a.trim()) || ""
            });
          }
        }
        if (nonEmptyCells.length > 0) {
          const cellContents = nonEmptyCells.map(
            (c) => `[${c.rowIndex + 1},${c.colIndex + 1}]: "${c.content}"`
          ).join("\n");
          const confirmMerge = await this.showConfirmDialog(
            `\u4EE5\u4E0B\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9\u5C06\u88AB\u8986\u76D6:
${cellContents}

\u786E\u5B9A\u8981\u5408\u5E76\u8FD9\u4E9B\u5355\u5143\u683C\u5417\uFF1F`
          );
          if (!confirmMerge) {
            new import_obsidian3.Notice("\u5DF2\u53D6\u6D88\u5408\u5E76\u64CD\u4F5C");
            return false;
          }
        }
      }
      const rowSpanValue = maxRow - minRow + 1;
      const colSpanValue = maxCol - minCol + 1;
      mainCell.setAttribute("rowspan", rowSpanValue.toString());
      mainCell.setAttribute("colspan", colSpanValue.toString());
      mainCell.rowSpan = rowSpanValue;
      mainCell.colSpan = colSpanValue;
      mainCell.classList.add("obs-merged-cell");
      if (this.plugin.settings.autoCenterMergedCells) {
        mainCell.style.textAlign = "center";
        mainCell.style.verticalAlign = "middle";
      }
      for (const cell of selectedCells) {
        if (cell !== mainCell) {
          cell.style.display = "none";
        }
      }
      this.applyMergeCellsMarkersForArea(table, minRow, minCol, maxRow, maxCol);
      return true;
    } catch (error) {
      console.error("\u5408\u5E76\u9009\u4E2D\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      return false;
    }
  }
  /**
   * 为特定区域应用合并标记
   * @param table 表格元素
   * @param startRow 起始行
   * @param startCol 起始列
   * @param endRow 结束行
   * @param endCol 结束列
   */
  applyMergeCellsMarkersForArea(table, startRow, startCol, endRow, endCol) {
    try {
      const rows = table.querySelectorAll("tr");
      for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
        if (rowIndex < rows.length) {
          const row = rows[rowIndex];
          const cells = row.querySelectorAll("td, th");
          for (let colIndex = startCol; colIndex <= endCol; colIndex++) {
            if (colIndex < cells.length && !(rowIndex === startRow && colIndex === startCol)) {
              const cell = cells[colIndex];
              if (colIndex === startCol) {
                cell.textContent = "^";
                cell.classList.add("merge-marker");
              } else if (rowIndex === startRow) {
                cell.textContent = "<";
                cell.classList.add("merge-marker");
              } else {
                cell.textContent = Math.random() > 0.5 ? "^" : "<";
                cell.classList.add("merge-marker", "hidden-marker");
              }
            }
          }
        }
      }
    } catch (error) {
      console.error("\u5E94\u7528\u533A\u57DF\u5408\u5E76\u6807\u8BB0\u65F6\u51FA\u9519:", error);
    }
  }
};

// src/tableIdManager.ts
var import_obsidian4 = require("obsidian");
var _TableIdManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    console.log("TableIdManager initialized");
  }
  // 辅助方法，获取app对象
  getApp() {
    return this.plugin.app;
  }
  /**
   * 获取表格标识符
   * @param table 表格HTML元素
   * @param useFallback 是否在未找到HTML注释ID时使用其他ID来源
   * @returns 表格ID或null
   */
  getTableIdentifier(table, useFallback = false) {
    try {
      if (_TableIdManager.isProcessingTableId)
        return null;
      _TableIdManager.isProcessingTableId = true;
      console.log("\u5F00\u59CB\u83B7\u53D6\u8868\u683CID");
      const currentDomId = table.getAttribute("data-table-id");
      if (currentDomId) {
        console.log(`\u8868\u683C\u5F53\u524DDOM\u5C5E\u6027ID: ${currentDomId}`);
      }
      const tableFeature = this.extractTableFeature(table);
      if (tableFeature) {
        console.log(`\u63D0\u53D6\u7684\u8868\u683C\u7279\u5F81:`, tableFeature);
      }
      let commentId = this.getTableIdFromComment(table);
      if (commentId) {
        console.log(`\u4ECEHTML\u6CE8\u91CA\u83B7\u53D6\u5230\u8868\u683CID: ${commentId}`);
        if (currentDomId && currentDomId !== commentId) {
          console.log(`\u8B66\u544A: DOM\u4E2D\u7684ID(${currentDomId})\u4E0EHTML\u6CE8\u91CA\u4E2D\u7684ID(${commentId})\u4E0D\u5339\u914D`);
          console.log(`\u6B63\u5728\u66F4\u65B0DOM\u5C5E\u6027\uFF0C\u4F7F\u7528HTML\u6CE8\u91CA\u4E2D\u7684ID: ${commentId}`);
          table.setAttribute("data-table-id", commentId);
        } else if (!currentDomId) {
          console.log(`\u8BBE\u7F6EDOM\u5C5E\u6027ID: ${commentId}`);
          table.setAttribute("data-table-id", commentId);
        }
        if (tableFeature) {
          table.setAttribute("data-table-feature", JSON.stringify(tableFeature));
        }
        _TableIdManager.isProcessingTableId = false;
        return commentId;
      }
      if (useFallback && currentDomId) {
        console.log(`\u672A\u5728HTML\u6CE8\u91CA\u4E2D\u627E\u5230\u8868\u683CID\uFF0C\u56DE\u9000\u4F7F\u7528DOM\u5C5E\u6027ID: ${currentDomId}`);
        if (tableFeature) {
          table.setAttribute("data-table-feature", JSON.stringify(tableFeature));
        }
        _TableIdManager.isProcessingTableId = false;
        return currentDomId;
      }
      console.log("\u672A\u5728HTML\u6CE8\u91CA\u4E2D\u627E\u5230\u8868\u683CID\uFF0C\u4E0D\u4F7F\u7528\u5176\u4ED6ID\u6765\u6E90");
      if (!useFallback && currentDomId) {
        console.log(`\u8B66\u544A: \u8868\u683CDOM\u4E2D\u6709ID(${currentDomId})\uFF0C\u4F46\u672A\u5728HTML\u6CE8\u91CA\u4E2D\u627E\u5230\u5BF9\u5E94ID`);
        console.log("\u6E05\u9664DOM\u4E2D\u7684ID\u5C5E\u6027\uFF0C\u4EE5\u907F\u514D\u4F7F\u7528\u8FC7\u65F6\u6216\u4E0D\u6B63\u786E\u7684ID");
        table.removeAttribute("data-table-id");
      }
      _TableIdManager.isProcessingTableId = false;
      return null;
    } catch (error) {
      console.error("\u83B7\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      _TableIdManager.isProcessingTableId = false;
      return null;
    }
  }
  /**
   * 获取或创建表格ID
   * @param table 表格HTML元素
   * @returns 表格ID
   */
  getOrCreateTableId(table) {
    try {
      if (_TableIdManager.isCreatingTableId)
        return "";
      _TableIdManager.isCreatingTableId = true;
      let tableId = this.getTableIdentifier(table, true);
      if (!tableId) {
        console.log("\u672A\u627E\u5230\u8868\u683CID\uFF0C\u53EF\u4EE5\u4F7F\u7528confirmAndCreateTableId\u65B9\u6CD5\u521B\u5EFA\u65B0ID");
        new import_obsidian4.Notice('\u672A\u627E\u5230\u8868\u683CID\uFF0C\u8BF7\u4F7F\u7528\u8868\u683C\u5DE5\u5177\u680F\u4E2D\u7684"\u8BBE\u7F6E\u8868\u683CID"\u529F\u80FD\u521B\u5EFA\u65B0ID');
      }
      _TableIdManager.isCreatingTableId = false;
      return tableId || "";
    } catch (error) {
      console.error("\u83B7\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      _TableIdManager.isCreatingTableId = false;
      return "";
    }
  }
  /**
   * 确认并创建表格ID
   * @param table 表格HTML元素
   * @returns 创建的表格ID
   */
  confirmAndCreateTableId(table) {
    try {
      const existingId = this.getTableIdentifier(table, true);
      if (existingId) {
        console.log(`\u8868\u683C\u5DF2\u6709ID: ${existingId}\uFF0C\u4E0D\u9700\u8981\u521B\u5EFA\u65B0ID`);
        new import_obsidian4.Notice(`\u8868\u683C\u5DF2\u6709ID: ${existingId}`);
        return existingId;
      }
      const newId = this.generateTableId();
      console.log(`\u4E3A\u8868\u683C\u751F\u6210\u65B0ID: ${newId}`);
      this.addTableIdComment(table, newId);
      return newId;
    } catch (error) {
      console.error("\u786E\u8BA4\u5E76\u521B\u5EFA\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return "";
    }
  }
  /**
   * 从HTML注释中获取表格ID
   * @param table 表格HTML元素
   * @returns 表格ID或null
   */
  getTableIdFromComment(table) {
    var _a, _b;
    try {
      console.log("\u5F00\u59CB\u4ECEHTML\u6CE8\u91CA\u4E2D\u67E5\u627E\u8868\u683CID");
      console.log("\u8868\u683CDOM:", table.outerHTML.substring(0, 100) + "...");
      try {
        const activeFile = this.getApp().workspace.getActiveFile();
        if (activeFile) {
          console.log(`\u5C1D\u8BD5\u4ECE\u6587\u4EF6\u5185\u5BB9\u4E2D\u67E5\u627E\u8868\u683CID: ${activeFile.path}`);
          const tablePosition = this.getTablePositionInDOM(table);
          if (tablePosition) {
            console.log(`\u8868\u683C\u4F4D\u7F6E: \u7B2C${tablePosition.index}\u4E2A\u8868\u683C`);
            this.getApp().vault.read(activeFile).then((content) => {
              const tableInfos = this.extractTableIdsFromMarkdown(content);
              console.log(`\u4ECEMarkdown\u5185\u5BB9\u4E2D\u63D0\u53D6\u7684\u8868\u683CID:`, tableInfos);
              if (tableInfos.length > tablePosition.index) {
                const { id } = tableInfos[tablePosition.index];
                if (id) {
                  console.log(`\u4ECEMarkdown\u5185\u5BB9\u4E2D\u627E\u5230\u8868\u683CID: ${id}`);
                  table.setAttribute("data-table-id", id);
                  return id;
                }
              }
            }).catch((err) => {
              console.error("\u8BFB\u53D6\u6587\u4EF6\u5185\u5BB9\u65F6\u51FA\u9519:", err);
            });
          }
        }
      } catch (error) {
        console.error("\u4ECE\u6587\u4EF6\u5185\u5BB9\u67E5\u627E\u8868\u683CID\u65F6\u51FA\u9519:", error);
      }
      let node = table.previousSibling;
      let nodeCount = 0;
      console.log("\u5F00\u59CB\u904D\u5386\u524D\u7F6E\u8282\u70B9...");
      while (node && nodeCount < 30) {
        nodeCount++;
        const nodeType = node.nodeType;
        const nodeTypeStr = nodeType === Node.COMMENT_NODE ? "COMMENT" : nodeType === Node.TEXT_NODE ? "TEXT" : nodeType === Node.ELEMENT_NODE ? "ELEMENT" : "OTHER";
        console.log(`\u68C0\u67E5\u8282\u70B9 #${nodeCount}: \u7C7B\u578B=${nodeTypeStr}`);
        if (nodeType === Node.COMMENT_NODE) {
          const commentText = ((_a = node.textContent) == null ? void 0 : _a.trim()) || "";
          console.log(`\u53D1\u73B0\u6CE8\u91CA\u8282\u70B9: "${commentText}"`);
          const beginMatch = commentText.match(/table-begin:\s*([a-zA-Z0-9_\-:.]+)/i);
          if (beginMatch && beginMatch[1]) {
            const commentId = beginMatch[1];
            console.log(`\u4ECE\u8868\u683C\u5F00\u59CB\u6CE8\u91CA\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const idMatch = commentText.match(/table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)/i);
          if (idMatch && idMatch[1]) {
            const commentId = idMatch[1];
            console.log(`\u4ECEHTML\u6CE8\u91CA\u4E2D\u6210\u529F\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const altIdMatch = commentText.match(/id:?\s*([a-zA-Z0-9_\-:.]+)/i);
          if (altIdMatch && altIdMatch[1]) {
            const commentId = altIdMatch[1];
            console.log(`\u4ECE\u66FF\u4EE3\u683C\u5F0FHTML\u6CE8\u91CA\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const tblMatch = commentText.match(/(tbl|table):?\s*([a-zA-Z0-9_\-:.]+)/i);
          if (tblMatch && tblMatch[2]) {
            const commentId = tblMatch[2];
            console.log(`\u4ECEtbl/table\u683C\u5F0FHTML\u6CE8\u91CA\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
        } else if (nodeType === Node.TEXT_NODE) {
          const textContent = node.textContent || "";
          console.log(`\u6587\u672C\u8282\u70B9\u5185\u5BB9: "${textContent.substring(0, 30)}${textContent.length > 30 ? "..." : ""}"`);
          const htmlCommentMatch = textContent.match(/<!--\s*table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
          if (htmlCommentMatch && htmlCommentMatch[1]) {
            const commentId = htmlCommentMatch[1];
            console.log(`\u4ECE\u6587\u672C\u8282\u70B9\u4E2D\u7684HTML\u6CE8\u91CA\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const altHtmlCommentMatch = textContent.match(/<!--\s*id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
          if (altHtmlCommentMatch && altHtmlCommentMatch[1]) {
            const commentId = altHtmlCommentMatch[1];
            console.log(`\u4ECE\u6587\u672C\u8282\u70B9\u4E2D\u7684\u66FF\u4EE3HTML\u6CE8\u91CA\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const tblHtmlCommentMatch = textContent.match(/<!--\s*(tbl|table):?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
          if (tblHtmlCommentMatch && tblHtmlCommentMatch[2]) {
            const commentId = tblHtmlCommentMatch[2];
            console.log(`\u4ECE\u6587\u672C\u8282\u70B9\u4E2D\u7684tbl/table HTML\u6CE8\u91CA\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          if (textContent.trim() === "") {
            node = node.previousSibling;
            continue;
          }
        } else if (nodeType === Node.ELEMENT_NODE) {
          const tagName = node.tagName;
          console.log(`\u5143\u7D20\u8282\u70B9: <${tagName.toLowerCase()}>`);
          const elemDataId = node.getAttribute("data-id") || node.getAttribute("data-table-id");
          if (elemDataId) {
            console.log(`\u4ECE\u5143\u7D20\u5C5E\u6027\u4E2D\u627E\u5230ID: ${elemDataId}`);
            return elemDataId;
          }
          const elemContent = node.innerHTML || "";
          if (elemContent.includes("<!--") && elemContent.includes("-->")) {
            console.log(`\u5143\u7D20\u5185\u5BB9\u5305\u542BHTML\u6CE8\u91CA: "${elemContent.substring(0, 50)}${elemContent.length > 50 ? "..." : ""}"`);
            const htmlCommentMatch = elemContent.match(/<!--\s*table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
            if (htmlCommentMatch && htmlCommentMatch[1]) {
              const commentId = htmlCommentMatch[1];
              console.log(`\u4ECE\u5143\u7D20\u5185\u5BB9\u4E2D\u7684HTML\u6CE8\u91CA\u8BC6\u522B\u8868\u683CID: ${commentId}`);
              return commentId;
            }
          }
          if (["BR", "HR", "P", "DIV", "SPAN"].includes(tagName)) {
            node = node.previousSibling;
            continue;
          }
          console.log(`\u9047\u5230\u5143\u7D20\u8282\u70B9 ${tagName}\uFF0C\u505C\u6B62\u67E5\u627E`);
          break;
        }
        node = node.previousSibling;
      }
      if (table.parentElement) {
        console.log("\u5C1D\u8BD5\u68C0\u67E5\u7236\u5143\u7D20\u53CA\u5176\u524D\u7F6E\u8282\u70B9...");
        const parentDataId = table.parentElement.getAttribute("data-id") || table.parentElement.getAttribute("data-table-id");
        if (parentDataId) {
          console.log(`\u4ECE\u7236\u5143\u7D20\u5C5E\u6027\u4E2D\u627E\u5230ID: ${parentDataId}`);
          return parentDataId;
        }
        if (table.parentElement.previousSibling) {
          let parentPrevNode = table.parentElement.previousSibling;
          if (parentPrevNode) {
            if (parentPrevNode.nodeType === Node.COMMENT_NODE) {
              const commentText = ((_b = parentPrevNode.textContent) == null ? void 0 : _b.trim()) || "";
              console.log(`\u53D1\u73B0\u7236\u5143\u7D20\u524D\u7684\u6CE8\u91CA\u8282\u70B9: "${commentText}"`);
              const idMatch = commentText.match(/table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)/i);
              if (idMatch && idMatch[1]) {
                const commentId = idMatch[1];
                console.log(`\u4ECE\u7236\u5143\u7D20\u524D\u7684HTML\u6CE8\u91CA\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
                return commentId;
              }
            } else if (parentPrevNode.nodeType === Node.TEXT_NODE) {
              const textContent = parentPrevNode.textContent || "";
              const htmlCommentMatch = textContent.match(/<!--\s*table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
              if (htmlCommentMatch && htmlCommentMatch[1]) {
                const commentId = htmlCommentMatch[1];
                console.log(`\u4ECE\u7236\u5143\u7D20\u524D\u7684\u6587\u672C\u8282\u70B9\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
                return commentId;
              }
            }
          }
        }
        if (table.parentElement.parentElement) {
          const grandParentDataId = table.parentElement.parentElement.getAttribute("data-id") || table.parentElement.parentElement.getAttribute("data-table-id");
          if (grandParentDataId) {
            console.log(`\u4ECE\u7956\u7236\u5143\u7D20\u5C5E\u6027\u4E2D\u627E\u5230ID: ${grandParentDataId}`);
            return grandParentDataId;
          }
        }
      }
      console.log("\u672A\u5728HTML\u6CE8\u91CA\u4E2D\u627E\u5230\u8868\u683CID");
      return null;
    } catch (error) {
      console.error("\u4ECE\u6CE8\u91CA\u83B7\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 为表格添加ID注释
   * @param table 表格HTML元素
   * @param id 表格ID
   */
  addTableIdComment(table, id) {
    var _a, _b, _c, _d, _e, _f;
    try {
      const tableFeature = this.extractTableFeature(table);
      const featureJson = JSON.stringify(tableFeature);
      const useWrapperComments = this.plugin.settings.useTableWrapperComments;
      const previousNode = table.previousSibling;
      if (previousNode && previousNode.nodeType === Node.COMMENT_NODE) {
        const comment = previousNode.nodeValue || "";
        if (comment.includes("table-id:") || comment.includes("table-begin:")) {
          (_a = previousNode.parentNode) == null ? void 0 : _a.removeChild(previousNode);
        }
      }
      const nextNode = table.nextSibling;
      if (nextNode && nextNode.nodeType === Node.COMMENT_NODE) {
        const comment = nextNode.nodeValue || "";
        if (comment.includes("table-end:") || comment.includes("table-id-end:")) {
          (_b = nextNode.parentNode) == null ? void 0 : _b.removeChild(nextNode);
        }
      }
      if (useWrapperComments) {
        const beginCommentContent = `table-begin: ${id} feature: ${featureJson}`;
        const beginComment = document.createComment(` ${beginCommentContent} `);
        const endCommentContent = `table-end: ${id}`;
        const endComment = document.createComment(` ${endCommentContent} `);
        (_c = table.parentNode) == null ? void 0 : _c.insertBefore(beginComment, table);
        if (table.nextSibling) {
          (_d = table.parentNode) == null ? void 0 : _d.insertBefore(endComment, table.nextSibling);
        } else {
          (_e = table.parentNode) == null ? void 0 : _e.appendChild(endComment);
        }
        console.log(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0\u6CE8\u91CA\u5939: ${id} \u7279\u5F81:`, tableFeature);
      } else {
        const commentContent = `table-id: ${id} feature: ${featureJson}`;
        const comment = document.createComment(` ${commentContent} `);
        (_f = table.parentNode) == null ? void 0 : _f.insertBefore(comment, table);
        console.log(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID\u6CE8\u91CA: ${id} \u7279\u5F81:`, tableFeature);
      }
      table.setAttribute("data-table-id", id);
      table.setAttribute("data-table-feature", JSON.stringify(tableFeature));
      new import_obsidian4.Notice(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID: ${id}`);
    } catch (error) {
      console.error("\u6DFB\u52A0\u8868\u683CID\u6CE8\u91CA\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 提取表格特征
   * @param table 表格HTML元素或Markdown字符串
   * @returns 表格特征对象
   */
  extractTableFeature(table) {
    try {
      let rows = 0;
      let cols = 0;
      let headers = "";
      let firstRowContent = "";
      let lastRowContent = "";
      let mergePattern = "";
      let position = void 0;
      let fileInfo = void 0;
      const activeFile = this.getApp().workspace.getActiveFile();
      if (activeFile) {
        fileInfo = {
          path: activeFile.path,
          name: activeFile.basename
        };
      }
      if (typeof table === "string") {
        const lines = table.split("\n");
        const tableLines = lines.filter((line) => line.trim().startsWith("|"));
        rows = tableLines.length;
        if (rows > 0) {
          const cells = tableLines[0].split("|").filter((cell) => cell.trim() !== "");
          cols = cells.length;
          headers = cells.map((c) => c.trim()).join("-");
          firstRowContent = tableLines[0];
          lastRowContent = tableLines[rows - 1];
        }
        mergePattern = this.extractMergePattern(tableLines);
        const firstLineIndex = lines.findIndex((line) => line === tableLines[0]);
        if (firstLineIndex >= 0) {
          position = {
            startLine: firstLineIndex,
            endLine: firstLineIndex + rows - 1
          };
        }
      } else {
        const tableRows = table.querySelectorAll("tr");
        rows = tableRows.length;
        if (rows > 0) {
          const firstRowCells = tableRows[0].querySelectorAll("th, td");
          cols = firstRowCells.length;
          headers = Array.from(firstRowCells).map((cell) => {
            var _a;
            return ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
          }).join("-");
          firstRowContent = tableRows[0].textContent || "";
          lastRowContent = tableRows[rows - 1].textContent || "";
        }
        mergePattern = this.extractMergePatterFromDOM(table);
        const positionData = table.getAttribute("data-table-position");
        if (positionData) {
          try {
            position = JSON.parse(positionData);
          } catch (e) {
            console.error("\u89E3\u6790\u8868\u683C\u4F4D\u7F6E\u6570\u636E\u65F6\u51FA\u9519:", e);
          }
        }
      }
      return {
        rows,
        cols,
        headers,
        firstRowContent,
        lastRowContent,
        mergePattern,
        position,
        fileInfo
      };
    } catch (error) {
      console.error("\u63D0\u53D6\u8868\u683C\u7279\u5F81\u65F6\u51FA\u9519:", error);
      return {
        rows: 0,
        cols: 0,
        headers: "",
        firstRowContent: "",
        lastRowContent: "",
        mergePattern: ""
      };
    }
  }
  /**
   * 从Markdown内容中提取合并单元格模式
   */
  extractMergePattern(lines) {
    let pattern = "";
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const cells = line.split("|").filter((cell) => cell.trim() !== "");
      for (let j = 0; j < cells.length; j++) {
        const cell = cells[j].trim();
        if (cell === "^") {
          pattern += `^${i}-${j};`;
        } else if (cell === "<") {
          pattern += `<${i}-${j};`;
        }
      }
    }
    return pattern;
  }
  /**
   * 从DOM中提取合并单元格模式
   */
  extractMergePatterFromDOM(table) {
    let pattern = "";
    const rows = table.querySelectorAll("tr");
    for (let i = 0; i < rows.length; i++) {
      const cells = rows[i].querySelectorAll("th, td");
      for (let j = 0; j < cells.length; j++) {
        const cell = cells[j];
        const rowspan = cell.getAttribute("rowspan");
        const colspan = cell.getAttribute("colspan");
        if (rowspan && parseInt(rowspan) > 1) {
          pattern += `r${i}-${j}-${rowspan};`;
        }
        if (colspan && parseInt(colspan) > 1) {
          pattern += `c${i}-${j}-${colspan};`;
        }
      }
    }
    return pattern;
  }
  /**
   * 计算两个表格特征的相似度
   * @param feature1 第一个表格特征
   * @param feature2 第二个表格特征
   * @returns 相似度分数（0-1之间）
   */
  calculateFeatureSimilarity(feature1, feature2) {
    var _a, _b;
    if (!feature1 || !feature2)
      return 0;
    let score = 0;
    let totalWeight = 0;
    const pathWeight = 5;
    if (((_a = feature1.fileInfo) == null ? void 0 : _a.path) && ((_b = feature2.fileInfo) == null ? void 0 : _b.path) && feature1.fileInfo.path === feature2.fileInfo.path) {
      score += pathWeight;
    }
    totalWeight += pathWeight;
    const rowWeight = 3;
    const colWeight = 3;
    if (feature1.rows === feature2.rows) {
      score += rowWeight;
    } else {
      const rowDiff = Math.abs(feature1.rows - feature2.rows);
      if (rowDiff <= 1)
        score += rowWeight * (1 - rowDiff / 2);
    }
    totalWeight += rowWeight;
    if (feature1.cols === feature2.cols) {
      score += colWeight;
    } else {
      const colDiff = Math.abs(feature1.cols - feature2.cols);
      if (colDiff <= 1)
        score += colWeight * (1 - colDiff / 2);
    }
    totalWeight += colWeight;
    const headerWeight = 4;
    if (feature1.headers && feature2.headers) {
      const headerSimilarity = this.calculateTextSimilarity(feature1.headers, feature2.headers);
      score += headerWeight * headerSimilarity;
    }
    totalWeight += headerWeight;
    const positionWeight = 2;
    if (feature1.position && feature2.position) {
      const startLineDiff = Math.abs(feature1.position.startLine - feature2.position.startLine);
      const positionSimilarity = Math.max(0, 1 - startLineDiff / 10);
      score += positionWeight * positionSimilarity;
    }
    totalWeight += positionWeight;
    const firstRowWeight = 2;
    if (feature1.firstRowContent && feature2.firstRowContent) {
      const firstRowSimilarity = this.calculateTextSimilarity(
        feature1.firstRowContent,
        feature2.firstRowContent
      );
      score += firstRowWeight * firstRowSimilarity;
    }
    totalWeight += firstRowWeight;
    const lastRowWeight = 2;
    if (feature1.lastRowContent && feature2.lastRowContent) {
      const lastRowSimilarity = this.calculateTextSimilarity(
        feature1.lastRowContent,
        feature2.lastRowContent
      );
      score += lastRowWeight * lastRowSimilarity;
    }
    totalWeight += lastRowWeight;
    const mergeWeight = 1;
    if (feature1.mergePattern && feature2.mergePattern) {
      const mergeSimilarity = this.calculateTextSimilarity(
        feature1.mergePattern,
        feature2.mergePattern
      );
      score += mergeWeight * mergeSimilarity;
    }
    totalWeight += mergeWeight;
    const similarity = totalWeight > 0 ? score / totalWeight : 0;
    console.log(`\u8868\u683C\u7279\u5F81\u76F8\u4F3C\u5EA6: ${similarity.toFixed(2)}`);
    return similarity;
  }
  /**
   * 计算两个文本的相似度
   * @param str1 第一个文本
   * @param str2 第二个文本
   * @returns 相似度分数（0-1之间）
   */
  calculateTextSimilarity(str1, str2) {
    if (!str1 || !str2)
      return 0;
    if (str1 === str2)
      return 1;
    const maxLen = Math.max(str1.length, str2.length);
    if (maxLen === 0)
      return 1;
    let matches = 0;
    const minLen = Math.min(str1.length, str2.length);
    for (let i = 0; i < minLen; i++) {
      if (str1[i] === str2[i])
        matches++;
      else
        break;
    }
    for (let i = 1; i <= minLen - matches; i++) {
      if (str1[str1.length - i] === str2[str2.length - i])
        matches++;
      else
        break;
    }
    matches = Math.min(matches, minLen);
    return matches / maxLen;
  }
  /**
   * 获取表格在DOM中的位置
   * @param table 表格元素
   * @returns 表格位置信息或null
   */
  getTablePositionInDOM(table) {
    try {
      const allTables = Array.from(document.querySelectorAll("table"));
      const tableId = table.getAttribute("data-table-id");
      if (tableId) {
        for (let i = 0; i < allTables.length; i++) {
          const currentId = allTables[i].getAttribute("data-table-id");
          if (currentId === tableId) {
            console.log(`\u901A\u8FC7ID\u5339\u914D\u627E\u5230\u8868\u683C\u4F4D\u7F6E: \u7B2C${i}\u4E2A\u8868\u683C\uFF08ID: ${tableId}\uFF09`);
            return { index: i, id: tableId };
          }
        }
      }
      const tableFeature = this.extractTableFeature(table);
      if (tableFeature) {
        for (let i = 0; i < allTables.length; i++) {
          const currentFeature = this.extractTableFeature(allTables[i]);
          if (tableFeature.contentHash === currentFeature.contentHash && tableFeature.headers === currentFeature.headers && tableFeature.rows === currentFeature.rows && tableFeature.cols === currentFeature.cols) {
            console.log(`\u901A\u8FC7\u7279\u5F81\u7CBE\u786E\u5339\u914D\u627E\u5230\u8868\u683C\u4F4D\u7F6E: \u7B2C${i}\u4E2A\u8868\u683C`);
            return { index: i };
          }
        }
      }
      let bestMatchIndex = -1;
      let bestMatchScore = 0;
      let bestMatchId = "";
      for (let i = 0; i < allTables.length; i++) {
        const currentTable = allTables[i];
        const currentFeature = this.extractTableFeature(currentTable);
        const currentId = currentTable.getAttribute("data-table-id");
        const similarityScore = this.calculateFeatureSimilarity(tableFeature, currentFeature);
        if (similarityScore > bestMatchScore) {
          bestMatchScore = similarityScore;
          bestMatchIndex = i;
          bestMatchId = currentId || "";
        }
      }
      if (bestMatchIndex !== -1 && bestMatchScore > 0.7) {
        console.log(`\u901A\u8FC7\u7279\u5F81\u76F8\u4F3C\u5EA6\u5339\u914D\u627E\u5230\u8868\u683C\u4F4D\u7F6E: \u7B2C${bestMatchIndex}\u4E2A\u8868\u683C\uFF08\u76F8\u4F3C\u5EA6: ${bestMatchScore.toFixed(2)}\uFF09`);
        return { index: bestMatchIndex, id: bestMatchId };
      }
      const index = allTables.indexOf(table);
      if (index !== -1) {
        console.log(`\u8868\u683C\u5728DOM\u4E2D\u7684\u4F4D\u7F6E: \u7B2C${index}\u4E2A\u8868\u683C\uFF08\u5171${allTables.length}\u4E2A\uFF09`);
        return { index };
      }
      console.warn("\u65E0\u6CD5\u786E\u5B9A\u8868\u683C\u5728DOM\u4E2D\u7684\u4F4D\u7F6E");
      return null;
    } catch (error) {
      console.error("\u83B7\u53D6\u8868\u683C\u4F4D\u7F6E\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 计算字符串的简单哈希值
   * @param str 输入字符串
   * @returns 哈希值字符串
   */
  simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return Math.abs(hash).toString(16).substring(0, 8);
  }
  /**
   * 确保表格有ID，如果没有则创建一个
   * @param table 表格元素
   * @param autoCreate 是否自动创建ID（不推荐，应使用confirmAndCreateTableId）
   * @returns 表格ID
   */
  ensureTableHasId(table, autoCreate = false) {
    if (!table)
      return "";
    const tableId = this.getTableIdentifier(table, true);
    if (tableId) {
      if (!table.getAttribute("data-table-id")) {
        table.setAttribute("data-table-id", tableId);
      }
      return tableId;
    }
    if (autoCreate) {
      console.log("\u672A\u627E\u5230\u8868\u683CID\uFF0C\u81EA\u52A8\u521B\u5EFA\u65B0ID");
      return this.confirmAndCreateTableId(table);
    }
    console.log("\u672A\u627E\u5230\u8868\u683CID\uFF0C\u4E0D\u81EA\u52A8\u521B\u5EFAID");
    return "";
  }
  /**
   * 生成唯一的表格ID
   * @returns 表格ID字符串
   */
  generateTableId() {
    try {
      const prefix = this.plugin.settings.idPrefix || "tbl";
      const date = new Date();
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const day = String(date.getDate()).padStart(2, "0");
      const activeFile = this.getApp().workspace.getActiveFile();
      let fileCode = "doc";
      if (activeFile) {
        const fileName = activeFile.basename;
        if (fileName && fileName.length >= 2) {
          fileCode = fileName.substring(0, 2).toLowerCase();
        }
      }
      const randomChars = "abcdefghijklmnopqrstuvwxyz";
      let randomStr = "";
      for (let i = 0; i < 6; i++) {
        randomStr += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
      }
      const tableId = `${prefix}-${year}${month}${day}-${fileCode}${randomStr}`;
      console.log(`\u751F\u6210\u8868\u683CID: ${tableId}`);
      return tableId;
    } catch (error) {
      console.error("\u751F\u6210\u8868\u683CID\u65F6\u51FA\u9519:", error);
      const timestamp = new Date().getTime();
      const random = Math.floor(Math.random() * 1e4);
      return `${this.plugin.settings.idPrefix || "tbl"}-${timestamp}-${random}`;
    }
  }
  /**
   * 从Markdown内容中提取表格ID和特征
   * @param content Markdown内容
   * @returns 表格ID和特征数组
   */
  extractTableIdsFromMarkdown(content) {
    try {
      const result = [];
      const lines = content.split("\n");
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        let tableId = "";
        let tableFeature = {};
        const beginMatch = line.match(/<!--\s*table-begin:\s*([a-zA-Z0-9_\-:.]+)\s*(?:feature:\s*(\{.*\}))?\s*-->/);
        if (beginMatch) {
          tableId = beginMatch[1];
          if (beginMatch[2]) {
            try {
              tableFeature = JSON.parse(beginMatch[2]);
            } catch (e) {
              console.error("\u89E3\u6790\u8868\u683C\u7279\u5F81JSON\u65F6\u51FA\u9519:", e);
            }
          }
          let tableContent = "";
          let tableStartLine = -1;
          let tableEndLine = -1;
          for (let j = i + 1; j < lines.length; j++) {
            if (lines[j].trim().startsWith("|")) {
              tableStartLine = j;
              break;
            }
          }
          if (tableStartLine >= 0) {
            for (let j = tableStartLine; j < lines.length; j++) {
              if (!lines[j].trim().startsWith("|")) {
                tableEndLine = j - 1;
                break;
              }
              if (j === lines.length - 1) {
                tableEndLine = j;
              }
            }
            if (tableEndLine >= tableStartLine) {
              tableContent = lines.slice(tableStartLine, tableEndLine + 1).join("\n");
              const feature = this.extractTableFeature(tableContent);
              feature.position = {
                startLine: tableStartLine,
                endLine: tableEndLine
              };
              const activeFile = this.getApp().workspace.getActiveFile();
              if (activeFile) {
                feature.fileInfo = {
                  path: activeFile.path,
                  name: activeFile.basename
                };
              }
              const mergedFeature = { ...feature, ...tableFeature, id: tableId };
              result.push({
                id: tableId,
                feature: mergedFeature
              });
            }
          }
          continue;
        }
        const idMatch = line.match(/<!--\s*table-id:\s*([a-zA-Z0-9_\-:.]+)\s*(?:feature:\s*(\{.*\}))?\s*-->/);
        if (idMatch) {
          tableId = idMatch[1];
          if (idMatch[2]) {
            try {
              tableFeature = JSON.parse(idMatch[2]);
            } catch (e) {
              console.error("\u89E3\u6790\u8868\u683C\u7279\u5F81JSON\u65F6\u51FA\u9519:", e);
            }
          }
          let tableContent = "";
          let tableStartLine = -1;
          let tableEndLine = -1;
          for (let j = i + 1; j < lines.length; j++) {
            if (lines[j].trim().startsWith("|")) {
              tableStartLine = j;
              break;
            }
          }
          if (tableStartLine >= 0) {
            for (let j = tableStartLine; j < lines.length; j++) {
              if (!lines[j].trim().startsWith("|")) {
                tableEndLine = j - 1;
                break;
              }
              if (j === lines.length - 1) {
                tableEndLine = j;
              }
            }
            if (tableEndLine >= tableStartLine) {
              tableContent = lines.slice(tableStartLine, tableEndLine + 1).join("\n");
              const feature = this.extractTableFeature(tableContent);
              feature.position = {
                startLine: tableStartLine,
                endLine: tableEndLine
              };
              const activeFile = this.plugin.app.workspace.getActiveFile();
              if (activeFile) {
                feature.fileInfo = {
                  path: activeFile.path,
                  name: activeFile.basename
                };
              }
              const mergedFeature = { ...feature, ...tableFeature, id: tableId };
              result.push({
                id: tableId,
                feature: mergedFeature
              });
            }
          }
        }
      }
      return result;
    } catch (error) {
      console.error("\u4ECEMarkdown\u5185\u5BB9\u63D0\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return [];
    }
  }
};
var TableIdManager = _TableIdManager;
TableIdManager.isProcessingTableId = false;
TableIdManager.isCreatingTableId = false;

// src/tableToolbar.ts
var import_obsidian5 = require("obsidian");
var import_obsidian6 = require("obsidian");
var TableToolbar = class {
  constructor(plugin) {
    this.activeTable = null;
    this.selectedCells = [];
    this.isDragging = false;
    this.dragStartX = 0;
    this.dragStartY = 0;
    this.isCollapsed = false;
    this.initialPosition = { left: "50%", top: "10px" };
    this.editModeTableInfo = null;
    this.applyToEntireTable = false;
    this.plugin = plugin;
    console.log("TableToolbar initialized");
  }
  // 辅助方法，获取app对象
  getApp() {
    return this.plugin.app;
  }
  /**
   * 创建表格工具栏
   * @param containerEl 容器元素
   */
  createToolbar(containerEl) {
    var _a, _b, _c;
    this.containerEl = containerEl;
    containerEl.style.position = "fixed";
    containerEl.style.zIndex = "1000";
    containerEl.style.left = "50%";
    containerEl.style.top = "10px";
    containerEl.style.transform = "translateX(-50%)";
    containerEl.style.display = "block";
    this.toolbar = containerEl.createEl("div", {
      cls: "advanced-table-toolbar"
    });
    this.toolbar.style.display = "flex";
    this.toolbar.style.flexDirection = "row";
    this.toolbar.style.gap = "5px";
    this.toolbar.style.padding = "5px";
    this.toolbar.style.margin = "5px 0";
    this.toolbar.style.borderRadius = "5px";
    this.toolbar.style.backgroundColor = "var(--background-secondary)";
    this.toolbar.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.15)";
    this.toolbar.style.userSelect = "none";
    this.toolbar.style.position = "relative";
    this.dragHandle = this.toolbar.createEl("div", {
      cls: "advanced-table-toolbar-drag-handle"
    });
    this.dragHandle.style.cursor = "grab";
    this.dragHandle.style.padding = "0 5px";
    this.dragHandle.style.display = "flex";
    this.dragHandle.style.alignItems = "center";
    this.dragHandle.style.marginRight = "5px";
    this.dragHandle.style.height = "28px";
    this.dragHandle.style.borderRadius = "3px";
    this.dragHandle.addEventListener("mouseover", () => {
      this.dragHandle.style.backgroundColor = "var(--background-modifier-hover)";
    });
    this.dragHandle.addEventListener("mouseout", () => {
      this.dragHandle.style.backgroundColor = "transparent";
    });
    (0, import_obsidian5.setIcon)(this.dragHandle, "grip-vertical");
    this.toolbarContent = this.toolbar.createEl("div", {
      cls: "advanced-table-toolbar-content"
    });
    this.toolbarContent.style.display = "flex";
    this.toolbarContent.style.flexDirection = "row";
    this.toolbarContent.style.gap = "5px";
    this.toolbarContent.style.flexGrow = "1";
    this.createButtonGroup("\u5BF9\u9F50", [
      { id: "align-left", tooltip: "\u5DE6\u5BF9\u9F50", icon: "align-left" },
      { id: "align-center", tooltip: "\u5C45\u4E2D\u5BF9\u9F50", icon: "align-center" },
      { id: "align-right", tooltip: "\u53F3\u5BF9\u9F50", icon: "align-right" },
      { id: "align-top", tooltip: "\u9876\u90E8\u5BF9\u9F50", icon: "align-top" },
      { id: "align-middle", tooltip: "\u5782\u76F4\u5C45\u4E2D", icon: "align-middle" },
      { id: "align-bottom", tooltip: "\u5E95\u90E8\u5BF9\u9F50", icon: "align-bottom" },
      { id: "align-all", tooltip: "\u5168\u90E8\u5C45\u4E2D", icon: "align-all" }
    ]);
    this.createSeparator();
    this.createButtonGroup("\u5408\u5E76", [
      { id: "merge-cells", tooltip: "\u5408\u5E76\u9009\u4E2D\u5355\u5143\u683C", icon: "merge-cells" },
      { id: "merge-right", tooltip: "\u5411\u53F3\u5408\u5E76", icon: "merge-right" },
      { id: "merge-down", tooltip: "\u5411\u4E0B\u5408\u5E76", icon: "merge-down" },
      { id: "split", tooltip: "\u62C6\u5206\u5355\u5143\u683C", icon: "split" }
    ]);
    this.createSeparator();
    this.createButtonGroup("\u8868\u683C", [
      { id: "table-id", tooltip: "\u751F\u6210\u8868\u683CID", icon: "table-id" },
      { id: "table-row-add", tooltip: "\u6DFB\u52A0\u884C", icon: "table-row-add" },
      { id: "table-style", tooltip: "\u8868\u683C\u6837\u5F0F", icon: "table-style" }
    ]);
    this.collapseButton = this.toolbar.createEl("button", {
      cls: "advanced-table-toolbar-collapse-button",
      attr: { "aria-label": "\u6536\u8D77/\u5C55\u5F00\u5DE5\u5177\u680F", "title": "\u6536\u8D77\u5DE5\u5177\u680F" }
    });
    this.collapseButton.style.display = "flex";
    this.collapseButton.style.justifyContent = "center";
    this.collapseButton.style.alignItems = "center";
    this.collapseButton.style.width = "28px";
    this.collapseButton.style.height = "28px";
    this.collapseButton.style.padding = "3px";
    this.collapseButton.style.border = "none";
    this.collapseButton.style.borderRadius = "3px";
    this.collapseButton.style.backgroundColor = "transparent";
    this.collapseButton.style.cursor = "pointer";
    this.collapseButton.style.marginLeft = "5px";
    (0, import_obsidian5.setIcon)(this.collapseButton, "chevron-left");
    this.collapseButton.addEventListener("mouseover", () => {
      this.collapseButton.style.backgroundColor = "var(--background-modifier-hover)";
    });
    this.collapseButton.addEventListener("mouseout", () => {
      this.collapseButton.style.backgroundColor = "transparent";
    });
    this.collapseButton.addEventListener("click", () => {
      this.toggleCollapse();
    });
    this.setupDraggable();
    console.log("\u5DE5\u5177\u680F\u5DF2\u521B\u5EFA\uFF0C\u62D6\u62FD\u624B\u67C4\u72B6\u6001:", {
      dragHandleExists: !!this.dragHandle,
      dragHandleParent: (_a = this.dragHandle) == null ? void 0 : _a.parentElement,
      dragHandleDisplay: (_b = this.dragHandle) == null ? void 0 : _b.style.display,
      dragHandleIcon: (_c = this.dragHandle) == null ? void 0 : _c.innerHTML,
      toolbarChildren: Array.from(this.toolbar.children).map((child) => child.className)
    });
  }
  /**
   * 设置工具栏可拖拽
   */
  setupDraggable() {
    const container = this.containerEl;
    this.dragHandle.addEventListener("mousedown", (e) => {
      if (e.button !== 0)
        return;
      this.isDragging = true;
      this.dragStartX = e.clientX;
      this.dragStartY = e.clientY;
      const rect = container.getBoundingClientRect();
      this.initialPosition = {
        left: container.style.left || "50%",
        top: container.style.top || "10px"
      };
      this.dragHandle.style.cursor = "grabbing";
      document.body.style.cursor = "grabbing";
      e.preventDefault();
      e.stopPropagation();
    });
    const mouseMoveHandler = (e) => {
      if (!this.isDragging)
        return;
      const deltaX = e.clientX - this.dragStartX;
      const deltaY = e.clientY - this.dragStartY;
      const rect = container.getBoundingClientRect();
      let newLeft;
      if (this.initialPosition.left.endsWith("%")) {
        const viewportWidth = document.documentElement.clientWidth;
        const initialLeftPx = parseFloat(this.initialPosition.left) / 100 * viewportWidth;
        newLeft = `${initialLeftPx + deltaX}px`;
      } else {
        const initialLeftPx = parseFloat(this.initialPosition.left);
        newLeft = `${initialLeftPx + deltaX}px`;
      }
      const newTop = `${parseFloat(this.initialPosition.top) + deltaY}px`;
      container.style.left = newLeft;
      container.style.top = newTop;
      container.style.transform = "none";
      e.preventDefault();
      e.stopPropagation();
    };
    const mouseUpHandler = (e) => {
      if (!this.isDragging)
        return;
      this.isDragging = false;
      this.dragHandle.style.cursor = "grab";
      document.body.style.cursor = "";
      e.stopPropagation();
    };
    document.addEventListener("mousemove", mouseMoveHandler);
    document.addEventListener("mouseup", mouseUpHandler);
    this.plugin.registerDomEvent(document, "mousemove", mouseMoveHandler);
    this.plugin.registerDomEvent(document, "mouseup", mouseUpHandler);
  }
  /**
   * 切换工具栏的收起/展开状态
   */
  toggleCollapse() {
    this.isCollapsed = !this.isCollapsed;
    if (this.isCollapsed) {
      this.toolbarContent.style.display = "none";
      (0, import_obsidian5.setIcon)(this.collapseButton, "chevron-right");
      this.toolbar.style.width = "auto";
      this.toolbar.classList.add("collapsed");
      this.containerEl.style.width = "auto";
      this.containerEl.style.height = "auto";
      this.collapseButton.setAttribute("title", "\u5C55\u5F00\u5DE5\u5177\u680F");
    } else {
      this.toolbarContent.style.display = "flex";
      (0, import_obsidian5.setIcon)(this.collapseButton, "chevron-left");
      this.toolbar.style.width = "";
      this.toolbar.classList.remove("collapsed");
      this.containerEl.style.width = "";
      this.containerEl.style.height = "";
      this.collapseButton.setAttribute("title", "\u6536\u8D77\u5DE5\u5177\u680F");
    }
  }
  /**
   * 创建按钮组
   * @param groupName 组名
   * @param buttons 按钮配置
   */
  createButtonGroup(groupName, buttons) {
    const group = this.toolbarContent.createEl("div", {
      cls: "advanced-table-toolbar-group"
    });
    group.style.display = "flex";
    group.style.flexDirection = "row";
    group.style.alignItems = "center";
    const label = group.createEl("span", {
      text: groupName,
      cls: "advanced-table-toolbar-group-label"
    });
    label.style.fontSize = "12px";
    label.style.marginRight = "5px";
    label.style.opacity = "0.7";
    buttons.forEach((btn) => {
      const button = group.createEl("button", {
        cls: `advanced-table-toolbar-button ${btn.id}`,
        attr: { "aria-label": btn.tooltip }
      });
      button.style.display = "flex";
      button.style.justifyContent = "center";
      button.style.alignItems = "center";
      button.style.width = "28px";
      button.style.height = "28px";
      button.style.padding = "3px";
      button.style.border = "none";
      button.style.borderRadius = "3px";
      button.style.backgroundColor = "transparent";
      button.style.cursor = "pointer";
      (0, import_obsidian5.setIcon)(button, btn.icon);
      button.addEventListener("mouseover", () => {
        button.style.backgroundColor = "var(--background-modifier-hover)";
      });
      button.addEventListener("mouseout", () => {
        button.style.backgroundColor = "transparent";
      });
      button.addEventListener("click", () => {
        this.handleButtonClick(btn.id);
      });
      button.setAttribute("title", btn.tooltip);
    });
  }
  /**
   * 创建分隔线
   */
  createSeparator() {
    const separator = this.toolbarContent.createEl("div", {
      cls: "advanced-table-toolbar-separator"
    });
    separator.style.width = "1px";
    separator.style.height = "24px";
    separator.style.margin = "0 5px";
    separator.style.backgroundColor = "var(--background-modifier-border)";
  }
  /**
   * 处理按钮点击事件
   * @param buttonId 按钮ID
   */
  handleButtonClick(buttonId) {
    try {
      console.log(`\u70B9\u51FB\u4E86\u6309\u94AE: ${buttonId}`);
      const isEditMode = this.isInEditMode();
      switch (buttonId) {
        case "align-left":
          this.applyAlignmentToSelectedCells("left");
          break;
        case "align-center":
          this.applyAlignmentToSelectedCells("center");
          break;
        case "align-right":
          this.applyAlignmentToSelectedCells("right");
          break;
        case "align-top":
          this.applyAlignmentToSelectedCells(void 0, "top");
          break;
        case "align-middle":
          this.applyAlignmentToSelectedCells(void 0, "middle");
          break;
        case "align-bottom":
          this.applyAlignmentToSelectedCells(void 0, "bottom");
          break;
        case "align-all":
          this.applyAlignmentToSelectedCells("center", "middle");
          break;
        case "merge-cells":
          if (isEditMode && this.plugin.settings.enableEditModeOperations) {
            new import_obsidian5.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u6682\u4E0D\u652F\u6301\u591A\u9009\u5408\u5E76\uFF0C\u8BF7\u4F7F\u7528\u5411\u53F3\u6216\u5411\u4E0B\u5408\u5E76");
          } else {
            this.mergeCells();
          }
          break;
        case "merge-right":
          this.mergeRight();
          break;
        case "merge-down":
          this.mergeDown();
          break;
        case "split":
          if (isEditMode && this.plugin.settings.enableEditModeOperations) {
            this.plugin.markdownSourceEditor.splitMergedCells().then((success) => {
              if (success) {
                this.clearCellSelection();
              }
            }).catch((error) => {
              console.error("\u62C6\u5206\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
              new import_obsidian5.Notice(`\u62C6\u5206\u5355\u5143\u683C\u65F6\u51FA\u9519: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
            });
          } else {
            this.splitCell();
          }
          break;
        case "table-id":
          this.generateTableId();
          break;
        case "table-row-add":
          if (isEditMode && this.plugin.settings.enableEditModeOperations) {
            new import_obsidian5.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u6682\u4E0D\u652F\u6301\u901A\u8FC7\u5DE5\u5177\u680F\u6DFB\u52A0\u884C\uFF0C\u8BF7\u76F4\u63A5\u7F16\u8F91Markdown\u6E90\u7801");
          } else {
            this.showRowAddMenu();
          }
          break;
        case "table-style":
          if (isEditMode && this.plugin.settings.enableEditModeOperations) {
            new import_obsidian5.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u6682\u4E0D\u652F\u6301\u6837\u5F0F\u8BBE\u7F6E");
          } else {
            this.showStyleMenu();
          }
          break;
        default:
          console.log(`\u672A\u5904\u7406\u7684\u6309\u94AEID: ${buttonId}`);
      }
    } catch (error) {
      console.error(`\u5904\u7406\u6309\u94AE\u70B9\u51FB\u65F6\u51FA\u9519: ${buttonId}`, error);
    }
  }
  /**
   * 记录调试信息
   */
  logDebugInfo() {
    const allTables = document.querySelectorAll("table").length;
    const selectedTableElements = document.querySelectorAll('table[data-table-selected="true"]').length;
    console.log("\u5F53\u524D\u72B6\u6001:", {
      activeTable: this.activeTable,
      allTables,
      selectedCells: this.selectedCells,
      selectedTableElements,
      toolbarContainer: this.containerEl
    });
  }
  /**
   * 应用对齐样式到选中的单元格
   * @param horizontalAlign 水平对齐方式
   * @param verticalAlign 垂直对齐方式
   */
  applyAlignmentToSelectedCells(horizontalAlign, verticalAlign) {
    try {
      console.log("\u5E94\u7528\u5BF9\u9F50:", { horizontalAlign, verticalAlign });
      this.applyAlignmentStylesOnly(horizontalAlign, verticalAlign);
      if (!this.activeTable || this.selectedCells.length === 0 && !this.applyToEntireTable) {
        console.warn("\u6CA1\u6709\u9009\u4E2D\u5355\u5143\u683C\u6216\u6D3B\u52A8\u8868\u683C");
        return;
      }
      this.plugin.readTableIdFromMarkdown(this.activeTable).then((tableId) => {
        console.log(`\u4ECEMarkdown\u6587\u4EF6\u4E2D\u83B7\u53D6\u8868\u683CID: ${tableId}`);
        if (!tableId) {
          console.warn("\u672A\u627E\u5230HTML\u6CE8\u91CA\u4E2D\u5B9A\u4E49\u7684\u8868\u683CID\uFF0C\u5C06\u53EA\u5E94\u7528\u6837\u5F0F\u4F46\u4E0D\u4FDD\u5B58\u6570\u636E");
          new import_obsidian5.Notice("\u672A\u627E\u5230\u8868\u683CID\uFF0C\u6837\u5F0F\u5DF2\u5E94\u7528\u4F46\u672A\u4FDD\u5B58\u5230\u6570\u636E\u6587\u4EF6");
          return;
        }
        if (this.activeTable) {
          const activeTable = this.activeTable;
          const activeFile = this.getApp().workspace.getActiveFile();
          if (!activeFile) {
            console.warn("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6\u8DEF\u5F84");
            return;
          }
          const selectedCellPositions = this.getSelectedCellPositions();
          console.log("\u9009\u4E2D\u5355\u5143\u683C\u4F4D\u7F6E:", selectedCellPositions);
          this.plugin.loadData().then((existingData) => {
            var _a;
            if (!existingData.tables) {
              existingData.tables = {};
            }
            let tableData = existingData.tables[tableId];
            if (!tableData) {
              console.log(`\u521B\u5EFA\u65B0\u7684\u8868\u683C\u6570\u636E: ${tableId}`);
              const rows = activeTable.querySelectorAll("tr");
              const rowCount = rows.length;
              let colCount = 0;
              if (rowCount > 0) {
                const firstRow = rows[0];
                colCount = firstRow.querySelectorAll("td, th").length;
              }
              tableData = {
                id: tableId,
                locations: [
                  {
                    path: activeFile.path,
                    isActive: true
                  }
                ],
                structure: {
                  rowCount,
                  colCount,
                  hasHeaders: rows.length > 0 && rows[0].querySelectorAll("th").length > 0
                },
                styling: {
                  rowHeights: Array(rowCount).fill("auto"),
                  colWidths: Array(colCount).fill("auto"),
                  alignment: Array(colCount).fill("left"),
                  cellStyles: []
                  // 新增：用于存储单元格样式
                }
              };
              existingData.tables[tableId] = tableData;
              console.log(`\u5DF2\u521B\u5EFA\u65B0\u7684\u8868\u683C\u6570\u636E\u8BB0\u5F55: ${tableId}`, tableData);
            } else {
              console.log(`\u627E\u5230\u73B0\u6709\u8868\u683C\u6570\u636E: ${tableId}`, tableData);
              if (!tableData.structure) {
                const rows = activeTable.querySelectorAll("tr");
                const rowCount = rows.length;
                let colCount = 0;
                if (rowCount > 0) {
                  const firstRow = rows[0];
                  colCount = firstRow.querySelectorAll("td, th").length;
                }
                tableData.structure = {
                  rowCount,
                  colCount,
                  hasHeaders: rows.length > 0 && rows[0].querySelectorAll("th").length > 0
                };
              }
              if (!tableData.styling) {
                tableData.styling = {
                  rowHeights: Array(tableData.structure.rowCount).fill("auto"),
                  colWidths: Array(tableData.structure.colCount).fill("auto"),
                  alignment: Array(tableData.structure.colCount).fill("left"),
                  cellStyles: []
                  // 新增：用于存储单元格样式
                };
              }
              if (!tableData.styling.cellStyles) {
                tableData.styling.cellStyles = [];
              }
              if (!tableData.locations) {
                tableData.locations = [{
                  path: activeFile.path,
                  isActive: true
                }];
              } else {
                const filePathExists = tableData.locations.some((loc) => loc.path === activeFile.path);
                if (!filePathExists) {
                  tableData.locations.push({
                    path: activeFile.path,
                    isActive: true
                  });
                }
              }
            }
            if (this.selectedCells.length === 0 || this.applyToEntireTable) {
              if (horizontalAlign) {
                tableData.styling = tableData.styling || {};
                tableData.styling.alignment = tableData.styling.alignment || [];
                const colCount = ((_a = tableData.structure) == null ? void 0 : _a.colCount) || 0;
                for (let i = 0; i < colCount; i++) {
                  tableData.styling.alignment[i] = horizontalAlign;
                }
                console.log(`\u66F4\u65B0\u8868\u683C\u5BF9\u9F50\u6570\u636E: ${tableId}`, tableData.styling.alignment);
              }
            } else {
              selectedCellPositions.forEach((pos) => {
                const existingStyleIndex = tableData.styling.cellStyles.findIndex(
                  (style) => style.row === pos.row && style.col === pos.col
                );
                if (existingStyleIndex !== -1) {
                  if (horizontalAlign) {
                    tableData.styling.cellStyles[existingStyleIndex].textAlign = horizontalAlign;
                  }
                  if (verticalAlign) {
                    tableData.styling.cellStyles[existingStyleIndex].verticalAlign = verticalAlign;
                  }
                } else {
                  const newStyle = { row: pos.row, col: pos.col };
                  if (horizontalAlign) {
                    newStyle.textAlign = horizontalAlign;
                  }
                  if (verticalAlign) {
                    newStyle.verticalAlign = verticalAlign;
                  }
                  tableData.styling.cellStyles.push(newStyle);
                }
              });
              console.log(`\u66F4\u65B0\u5355\u5143\u683C\u6837\u5F0F\u6570\u636E: ${tableId}`, tableData.styling.cellStyles);
            }
            this.plugin.saveData(existingData);
            console.log(`\u5DF2\u4FDD\u5B58\u8868\u683C\u6570\u636E: ${tableId}`);
            new import_obsidian5.Notice(`\u5DF2\u5C06${horizontalAlign || ""}${horizontalAlign && verticalAlign ? "\u548C" : ""}${verticalAlign || ""}\u5BF9\u9F50\u5E94\u7528\u5230${this.selectedCells.length > 0 ? "\u9009\u4E2D\u5355\u5143\u683C" : "\u6574\u4E2A\u8868\u683C"}\u5E76\u4FDD\u5B58\u5230\u6570\u636E\u6587\u4EF6`);
          }).catch((err) => {
            console.error("\u4FDD\u5B58\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", err);
            new import_obsidian5.Notice(`\u4FDD\u5B58\u8868\u683C\u6570\u636E\u5931\u8D25: ${err.message || "\u672A\u77E5\u9519\u8BEF"}`);
          });
        } else {
          console.warn("\u4FDD\u5B58\u6570\u636E\u65F6\u8868\u683C\u4E0D\u518D\u5B58\u5728");
        }
      }).catch((error) => {
        console.error("\u83B7\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
        new import_obsidian5.Notice(`\u83B7\u53D6\u8868\u683CID\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      });
      console.log("\u5BF9\u9F50\u5E94\u7528\u5B8C\u6210");
    } catch (error) {
      console.error("\u5E94\u7528\u5BF9\u9F50\u5931\u8D25:", error);
      new import_obsidian5.Notice(`\u5E94\u7528\u5BF9\u9F50\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 获取选中单元格的位置信息（行列索引）
   * @returns 选中单元格的位置数组
   */
  getSelectedCellPositions() {
    const positions = [];
    if (!this.activeTable || this.selectedCells.length === 0) {
      return positions;
    }
    this.selectedCells.forEach((cell) => {
      const row = cell.closest("tr");
      if (!row)
        return;
      const rowIndex = Array.from(this.activeTable.querySelectorAll("tr")).indexOf(row);
      if (rowIndex === -1)
        return;
      const colIndex = Array.from(row.querySelectorAll("td, th")).indexOf(cell);
      if (colIndex === -1)
        return;
      positions.push({ row: rowIndex, col: colIndex });
    });
    return positions;
  }
  /**
   * 仅应用对齐样式，不保存数据
   * @param horizontalAlign 水平对齐方式
   * @param verticalAlign 垂直对齐方式
   */
  applyAlignmentStylesOnly(horizontalAlign, verticalAlign) {
    if (this.selectedCells.length === 0 && this.activeTable) {
      const cells = this.activeTable.querySelectorAll("td, th");
      cells.forEach((cell) => {
        const cellEl = cell;
        if (horizontalAlign) {
          cellEl.style.textAlign = horizontalAlign;
        }
        if (verticalAlign) {
          cellEl.style.verticalAlign = verticalAlign;
        }
      });
      new import_obsidian5.Notice(`\u5DF2\u5C06${horizontalAlign || ""}${horizontalAlign && verticalAlign ? "\u548C" : ""}${verticalAlign || ""}\u5BF9\u9F50\u5E94\u7528\u5230\u6574\u4E2A\u8868\u683C`);
    } else {
      this.selectedCells.forEach((cell) => {
        if (horizontalAlign) {
          cell.style.textAlign = horizontalAlign;
        }
        if (verticalAlign) {
          cell.style.verticalAlign = verticalAlign;
        }
      });
      new import_obsidian5.Notice(`\u5DF2\u5C06${horizontalAlign || ""}${horizontalAlign && verticalAlign ? "\u548C" : ""}${verticalAlign || ""}\u5BF9\u9F50\u5E94\u7528\u5230\u9009\u4E2D\u5355\u5143\u683C`);
    }
  }
  /**
   * 合并选中的单元格
   */
  async mergeCells() {
    var _a;
    try {
      console.log("\u5C1D\u8BD5\u5408\u5E76\u9009\u4E2D\u7684\u5355\u5143\u683C");
      const activeView = this.getApp().workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (!activeView) {
        new import_obsidian5.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      console.log(`\u5F53\u524D\u6A21\u5F0F: ${isEditMode ? "\u7F16\u8F91\u6A21\u5F0F" : "\u9884\u89C8\u6A21\u5F0F"}`);
      if (isEditMode && this.plugin.settings.enableEditModeOperations) {
        console.log("\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u4F7F\u7528 MarkdownSourceEditor \u5408\u5E76\u5355\u5143\u683C");
        const success = await this.plugin.markdownSourceEditor.mergeCells("right");
        if (success) {
          this.clearCellSelection();
          console.log("\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
        } else {
          console.log("\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25");
        }
      } else {
        if (this.selectedCells.length < 2) {
          new import_obsidian5.Notice("\u8BF7\u9009\u62E9\u81F3\u5C112\u4E2A\u5355\u5143\u683C\u8FDB\u884C\u5408\u5E76");
          return;
        }
        const boundary = this.getSelectedCellsBoundary();
        if (!boundary) {
          new import_obsidian5.Notice("\u65E0\u6CD5\u786E\u5B9A\u9009\u4E2D\u5355\u5143\u683C\u7684\u8FB9\u754C");
          return;
        }
        const { minRow, maxRow, minCol, maxCol } = boundary;
        const expectedCellCount = (maxRow - minRow + 1) * (maxCol - minCol + 1);
        if (expectedCellCount !== this.selectedCells.length) {
          new import_obsidian5.Notice("\u53EA\u80FD\u5408\u5E76\u5F62\u6210\u5B8C\u6574\u77E9\u5F62\u7684\u5355\u5143\u683C");
          return;
        }
        const mainCell = (_a = this.activeTable) == null ? void 0 : _a.querySelector(`[row-index="${minRow}"][col-index="${minCol}"]`);
        if (!mainCell) {
          new import_obsidian5.Notice("\u65E0\u6CD5\u627E\u5230\u4E3B\u5355\u5143\u683C");
          return;
        }
        if (this.plugin.settings.confirmMergeNonEmpty) {
          const nonEmptyCells = this.selectedCells.filter((cell) => {
            var _a2;
            if (cell === mainCell)
              return false;
            const content = ((_a2 = cell.textContent) == null ? void 0 : _a2.trim()) || "";
            return content !== "" && content !== "<" && content !== "^";
          });
          if (nonEmptyCells.length > 0) {
            const cellContents = nonEmptyCells.map((cell) => {
              var _a2;
              return `"${((_a2 = cell.textContent) == null ? void 0 : _a2.trim()) || "(\u7A7A)"}"`;
            }).join(", ");
            const confirmMerge = await this.showConfirmDialog(
              `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9${cellContents}\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
            );
            if (!confirmMerge)
              return;
          }
        }
        const rowSpanValue = maxRow - minRow + 1;
        const colSpanValue = maxCol - minCol + 1;
        if (rowSpanValue > 1) {
          mainCell.setAttribute("rowspan", rowSpanValue.toString());
        }
        if (colSpanValue > 1) {
          mainCell.setAttribute("colspan", colSpanValue.toString());
        }
        for (const cell of this.selectedCells) {
          if (cell === mainCell)
            continue;
          const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
          const colIndex = parseInt(cell.getAttribute("col-index") || "0");
          if (rowIndex === minRow) {
            const markerCount = colIndex - minCol;
            cell.textContent = "<".repeat(markerCount);
            cell.setAttribute("data-merged", "true");
            cell.setAttribute("data-merge-direction", "left");
            cell.setAttribute("data-merge-count", markerCount.toString());
          } else if (colIndex === minCol) {
            const markerCount = rowIndex - minRow;
            cell.textContent = "^".repeat(markerCount);
            cell.setAttribute("data-merged", "true");
            cell.setAttribute("data-merge-direction", "up");
            cell.setAttribute("data-merge-count", markerCount.toString());
          } else {
            if (rowIndex > minRow && colIndex > minCol) {
              const markerCount = colIndex - minCol;
              cell.textContent = "<".repeat(markerCount);
              cell.setAttribute("data-merged", "true");
              cell.setAttribute("data-merge-direction", "left");
              cell.setAttribute("data-merge-count", markerCount.toString());
            }
          }
          cell.style.display = "none";
        }
        this.applyMergedCellStyles(mainCell, this.selectedCells.filter((cell) => cell !== mainCell));
        new import_obsidian5.Notice(`\u5DF2\u6210\u529F\u5408\u5E76${this.selectedCells.length}\u4E2A\u5355\u5143\u683C`);
        console.log("\u9884\u89C8\u6A21\u5F0F\u4E0B\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
        this.clearCellSelection();
      }
    } catch (error) {
      console.error("\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian5.Notice(`\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 向右合并单元格
   */
  async mergeRight() {
    var _a, _b;
    try {
      console.log("\u5C1D\u8BD5\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C");
      const activeView = this.getApp().workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (!activeView) {
        new import_obsidian5.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      console.log(`\u5F53\u524D\u6A21\u5F0F: ${isEditMode ? "\u7F16\u8F91\u6A21\u5F0F" : "\u9884\u89C8\u6A21\u5F0F"}`);
      if (isEditMode && this.plugin.settings.enableEditModeOperations) {
        console.log("\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u4F7F\u7528 MarkdownSourceEditor \u5408\u5E76\u5355\u5143\u683C");
        const success = await this.plugin.markdownSourceEditor.mergeCells("right");
        if (success) {
          this.clearCellSelection();
          console.log("\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
        } else {
          console.log("\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25");
        }
      } else {
        if (this.selectedCells.length === 0) {
          new import_obsidian5.Notice("\u8BF7\u5148\u9009\u62E9\u8981\u5408\u5E76\u7684\u5355\u5143\u683C");
          return;
        }
        if (this.selectedCells.length > 1) {
          const rowIndices = /* @__PURE__ */ new Set();
          for (const cell2 of this.selectedCells) {
            const rowIndex2 = parseInt(cell2.getAttribute("row-index") || "0");
            rowIndices.add(rowIndex2);
          }
          if (rowIndices.size !== 1) {
            new import_obsidian5.Notice("\u5411\u53F3\u5408\u5E76\u9700\u8981\u9009\u62E9\u540C\u4E00\u884C\u7684\u5355\u5143\u683C");
            return;
          }
          const cellsWithIndices = this.selectedCells.map((cell2) => {
            return {
              cell: cell2,
              colIndex: parseInt(cell2.getAttribute("col-index") || "0")
            };
          }).sort((a, b) => a.colIndex - b.colIndex);
          for (let i = 1; i < cellsWithIndices.length; i++) {
            if (cellsWithIndices[i].colIndex !== cellsWithIndices[i - 1].colIndex + 1) {
              new import_obsidian5.Notice("\u9700\u8981\u9009\u62E9\u8FDE\u7EED\u7684\u5355\u5143\u683C\u8FDB\u884C\u5408\u5E76");
              return;
            }
          }
          const mainCell = cellsWithIndices[0].cell;
          const mergeCount = cellsWithIndices.length - 1;
          if (this.plugin.settings.confirmMergeNonEmpty) {
            const nonEmptyCells = cellsWithIndices.slice(1).filter((item) => {
              var _a2;
              const content = ((_a2 = item.cell.textContent) == null ? void 0 : _a2.trim()) || "";
              return content !== "" && content !== "<" && content !== "^";
            });
            if (nonEmptyCells.length > 0) {
              const cellContents = nonEmptyCells.map((item) => {
                var _a2;
                return `"${((_a2 = item.cell.textContent) == null ? void 0 : _a2.trim()) || "(\u7A7A)"}"`;
              }).join(", ");
              const confirmMerge = await this.showConfirmDialog(
                `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9${cellContents}\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
              );
              if (!confirmMerge)
                return;
            }
          }
          for (let i = 1; i < cellsWithIndices.length; i++) {
            const cell2 = cellsWithIndices[i].cell;
            cell2.textContent = "<".repeat(i);
            cell2.setAttribute("data-merged", "true");
            cell2.setAttribute("data-merge-direction", "left");
            cell2.setAttribute("data-merge-count", i.toString());
          }
          this.applyMergedCellStyles(mainCell, cellsWithIndices.slice(1).map((item) => item.cell));
          new import_obsidian5.Notice(`\u5DF2\u5411\u53F3\u5408\u5E76${mergeCount}\u4E2A\u5355\u5143\u683C`);
          console.log(`\u9884\u89C8\u6A21\u5F0F\u4E0B\u5411\u53F3\u5408\u5E76${mergeCount}\u4E2A\u5355\u5143\u683C\u6210\u529F`);
          this.clearCellSelection();
          return;
        }
        const cell = this.selectedCells[0];
        if (!cell) {
          console.log("\u672A\u627E\u5230\u9009\u4E2D\u7684\u5355\u5143\u683C");
          return;
        }
        const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || "0");
        console.log(`\u9009\u4E2D\u5355\u5143\u683C\u4F4D\u7F6E: \u884C=${rowIndex}, \u5217=${colIndex}`);
        const rightCell = (_a = this.activeTable) == null ? void 0 : _a.querySelector(`[row-index="${rowIndex}"][col-index="${colIndex + 1}"]`);
        if (!rightCell) {
          new import_obsidian5.Notice("\u53F3\u4FA7\u6CA1\u6709\u5355\u5143\u683C\u53EF\u5408\u5E76");
          return;
        }
        const rightContent = (_b = rightCell.textContent) == null ? void 0 : _b.trim();
        if (this.plugin.settings.confirmMergeNonEmpty && rightContent && rightContent !== "<" && rightContent !== "^") {
          const confirmed = await this.showConfirmDialog(
            `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9"${rightContent}"\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
          );
          if (!confirmed)
            return;
        }
        rightCell.textContent = "<";
        rightCell.setAttribute("data-merged", "true");
        rightCell.setAttribute("data-merge-direction", "left");
        this.applyMergedCellStyles(cell, [rightCell]);
        new import_obsidian5.Notice("\u5DF2\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C");
        console.log("\u9884\u89C8\u6A21\u5F0F\u4E0B\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
      }
    } catch (error) {
      console.error("\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian5.Notice(`\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 向下合并单元格
   */
  async mergeDown() {
    var _a, _b;
    try {
      console.log("\u5C1D\u8BD5\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C");
      const activeView = this.getApp().workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (!activeView) {
        new import_obsidian5.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      console.log(`\u5F53\u524D\u6A21\u5F0F: ${isEditMode ? "\u7F16\u8F91\u6A21\u5F0F" : "\u9884\u89C8\u6A21\u5F0F"}`);
      if (isEditMode && this.plugin.settings.enableEditModeOperations) {
        console.log("\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u4F7F\u7528 MarkdownSourceEditor \u5408\u5E76\u5355\u5143\u683C");
        const success = await this.plugin.markdownSourceEditor.mergeCells("down");
        if (success) {
          this.clearCellSelection();
          console.log("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
        } else {
          console.log("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25");
        }
      } else {
        if (this.selectedCells.length === 0) {
          new import_obsidian5.Notice("\u8BF7\u5148\u9009\u62E9\u8981\u5408\u5E76\u7684\u5355\u5143\u683C");
          return;
        }
        if (this.selectedCells.length > 1) {
          const colIndices = /* @__PURE__ */ new Set();
          for (const cell2 of this.selectedCells) {
            const colIndex2 = parseInt(cell2.getAttribute("col-index") || "0");
            colIndices.add(colIndex2);
          }
          if (colIndices.size !== 1) {
            new import_obsidian5.Notice("\u5411\u4E0B\u5408\u5E76\u9700\u8981\u9009\u62E9\u540C\u4E00\u5217\u7684\u5355\u5143\u683C");
            return;
          }
          const cellsWithIndices = this.selectedCells.map((cell2) => {
            return {
              cell: cell2,
              rowIndex: parseInt(cell2.getAttribute("row-index") || "0")
            };
          }).sort((a, b) => a.rowIndex - b.rowIndex);
          for (let i = 1; i < cellsWithIndices.length; i++) {
            if (cellsWithIndices[i].rowIndex !== cellsWithIndices[i - 1].rowIndex + 1) {
              new import_obsidian5.Notice("\u9700\u8981\u9009\u62E9\u8FDE\u7EED\u7684\u5355\u5143\u683C\u8FDB\u884C\u5408\u5E76");
              return;
            }
          }
          const mainCell = cellsWithIndices[0].cell;
          const mergeCount = cellsWithIndices.length - 1;
          if (this.plugin.settings.confirmMergeNonEmpty) {
            const nonEmptyCells = cellsWithIndices.slice(1).filter((item) => {
              var _a2;
              const content = ((_a2 = item.cell.textContent) == null ? void 0 : _a2.trim()) || "";
              return content !== "" && content !== "<" && content !== "^";
            });
            if (nonEmptyCells.length > 0) {
              const cellContents = nonEmptyCells.map((item) => {
                var _a2;
                return `"${((_a2 = item.cell.textContent) == null ? void 0 : _a2.trim()) || "(\u7A7A)"}"`;
              }).join(", ");
              const confirmMerge = await this.showConfirmDialog(
                `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9${cellContents}\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
              );
              if (!confirmMerge)
                return;
            }
          }
          for (let i = 1; i < cellsWithIndices.length; i++) {
            const cell2 = cellsWithIndices[i].cell;
            cell2.textContent = "^".repeat(i);
            cell2.setAttribute("data-merged", "true");
            cell2.setAttribute("data-merge-direction", "up");
            cell2.setAttribute("data-merge-count", i.toString());
          }
          this.applyMergedCellStyles(mainCell, cellsWithIndices.slice(1).map((item) => item.cell));
          new import_obsidian5.Notice(`\u5DF2\u5411\u4E0B\u5408\u5E76${mergeCount}\u4E2A\u5355\u5143\u683C`);
          console.log(`\u9884\u89C8\u6A21\u5F0F\u4E0B\u5411\u4E0B\u5408\u5E76${mergeCount}\u4E2A\u5355\u5143\u683C\u6210\u529F`);
          this.clearCellSelection();
          return;
        }
        const cell = this.selectedCells[0];
        if (!cell) {
          console.log("\u672A\u627E\u5230\u9009\u4E2D\u7684\u5355\u5143\u683C");
          return;
        }
        const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || "0");
        console.log(`\u9009\u4E2D\u5355\u5143\u683C\u4F4D\u7F6E: \u884C=${rowIndex}, \u5217=${colIndex}`);
        const belowCell = (_a = this.activeTable) == null ? void 0 : _a.querySelector(`[row-index="${rowIndex + 1}"][col-index="${colIndex}"]`);
        if (!belowCell) {
          new import_obsidian5.Notice("\u4E0B\u65B9\u6CA1\u6709\u5355\u5143\u683C\u53EF\u5408\u5E76");
          return;
        }
        const belowContent = (_b = belowCell.textContent) == null ? void 0 : _b.trim();
        if (this.plugin.settings.confirmMergeNonEmpty && belowContent && belowContent !== "<" && belowContent !== "^") {
          const confirmed = await this.showConfirmDialog(
            `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9"${belowContent}"\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
          );
          if (!confirmed)
            return;
        }
        belowCell.textContent = "^";
        belowCell.setAttribute("data-merged", "true");
        belowCell.setAttribute("data-merge-direction", "up");
        this.applyMergedCellStyles(cell, [belowCell]);
        new import_obsidian5.Notice("\u5DF2\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C");
        console.log("\u9884\u89C8\u6A21\u5F0F\u4E0B\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
      }
    } catch (error) {
      console.error("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian5.Notice(`\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 拆分单元格
   */
  splitCell() {
    try {
      if (this.selectedCells.length !== 1) {
        console.log("\u9700\u8981\u9009\u62E9\u4E00\u4E2A\u5355\u5143\u683C\u8FDB\u884C\u62C6\u5206");
        new import_obsidian5.Notice("\u8BF7\u9009\u62E9\u4E00\u4E2A\u5355\u5143\u683C\u8FDB\u884C\u62C6\u5206");
        return;
      }
      console.log("\u5F00\u59CB\u62C6\u5206\u5355\u5143\u683C");
      const cell = this.selectedCells[0];
      const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
      const colIndex = parseInt(cell.getAttribute("col-index") || "0");
      const colSpan = cell.getAttribute("colspan");
      const rowSpan = cell.getAttribute("rowspan");
      const table = cell.closest("table");
      let hasMergeMarkers = false;
      if (table) {
        const rightCell = table.querySelector(`[row-index="${rowIndex}"][col-index="${colIndex + 1}"]`);
        if (rightCell && rightCell.textContent) {
          const rightContent = rightCell.textContent.trim();
          if (rightContent === "<" || rightContent === "^") {
            hasMergeMarkers = true;
            rightCell.textContent = "";
            console.log("\u5DF2\u6E05\u9664\u53F3\u4FA7\u5355\u5143\u683C\u7684\u5408\u5E76\u6807\u8BB0");
          }
        }
        const belowCell = table.querySelector(`[row-index="${rowIndex + 1}"][col-index="${colIndex}"]`);
        if (belowCell && belowCell.textContent) {
          const belowContent = belowCell.textContent.trim();
          if (belowContent === "<" || belowContent === "^") {
            hasMergeMarkers = true;
            belowCell.textContent = "";
            console.log("\u5DF2\u6E05\u9664\u4E0B\u65B9\u5355\u5143\u683C\u7684\u5408\u5E76\u6807\u8BB0");
          }
        }
        for (let i = colIndex + 1; i < colIndex + 10; i++) {
          const nextCell = table.querySelector(`[row-index="${rowIndex}"][col-index="${i}"]`);
          if (nextCell && nextCell.textContent && nextCell.textContent.trim() === "<") {
            nextCell.textContent = "";
            hasMergeMarkers = true;
            console.log(`\u5DF2\u6E05\u9664\u4F4D\u7F6E (${rowIndex}, ${i}) \u7684\u6C34\u5E73\u5408\u5E76\u6807\u8BB0`);
          } else {
            break;
          }
        }
        for (let i = rowIndex + 1; i < rowIndex + 10; i++) {
          const nextCell = table.querySelector(`[row-index="${i}"][col-index="${colIndex}"]`);
          if (nextCell && nextCell.textContent && nextCell.textContent.trim() === "^") {
            nextCell.textContent = "";
            hasMergeMarkers = true;
            console.log(`\u5DF2\u6E05\u9664\u4F4D\u7F6E (${i}, ${colIndex}) \u7684\u5782\u76F4\u5408\u5E76\u6807\u8BB0`);
          } else {
            break;
          }
        }
      }
      if (!colSpan && !rowSpan && !hasMergeMarkers) {
        console.log("\u9009\u4E2D\u7684\u5355\u5143\u683C\u6CA1\u6709\u5408\u5E76\u5C5E\u6027\uFF0C\u65E0\u9700\u62C6\u5206");
        new import_obsidian5.Notice("\u9009\u4E2D\u7684\u5355\u5143\u683C\u6CA1\u6709\u5408\u5E76\u5C5E\u6027\uFF0C\u65E0\u9700\u62C6\u5206");
        return;
      }
      if (colSpan) {
        cell.removeAttribute("colspan");
      }
      if (rowSpan) {
        cell.removeAttribute("rowspan");
      }
      if (table) {
        const hiddenCells = table.querySelectorAll('td[style*="display: none"], th[style*="display: none"]');
        hiddenCells.forEach((hiddenCell) => {
          hiddenCell.style.display = "";
        });
      }
      new import_obsidian5.Notice("\u5DF2\u62C6\u5206\u5355\u5143\u683C");
      console.log("\u5355\u5143\u683C\u62C6\u5206\u5B8C\u6210");
      this.clearCellSelection();
    } catch (error) {
      console.error("\u62C6\u5206\u5355\u5143\u683C\u5931\u8D25:", error);
      new import_obsidian5.Notice(`\u62C6\u5206\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 生成表格ID
   */
  generateTableId() {
    try {
      const activeView = this.getApp().workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (!activeView) {
        new import_obsidian5.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      if (isEditMode && this.plugin.settings.enableEditModeOperations) {
        this.showConfirmDialog("\u662F\u5426\u4E3A\u5F53\u524D\u8868\u683C\u521B\u5EFAID\uFF1F\u521B\u5EFA\u540E\u5C06\u5728\u8868\u683C\u524D\u6DFB\u52A0HTML\u6CE8\u91CA\u3002").then((confirmed) => {
          if (!confirmed) {
            return;
          }
          const editor = activeView.editor;
          const tableInfo = this.plugin.markdownSourceEditor.locateTableInMarkdown(editor);
          if (tableInfo) {
            if (tableInfo.tableId) {
              new import_obsidian5.Notice(`\u8868\u683C\u5DF2\u6709ID: ${tableInfo.tableId}`);
              return;
            }
            const newId = this.generateUniqueTableId();
            const tableStartLine = tableInfo.startLine;
            const currentPos = editor.getCursor();
            editor.replaceRange(`<!-- table-id: ${newId} -->
`, { line: tableStartLine, ch: 0 });
            editor.setCursor(currentPos);
            new import_obsidian5.Notice(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID: ${newId}`);
            console.log("\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID:", newId);
          } else {
            new import_obsidian5.Notice("\u672A\u627E\u5230\u8868\u683C\uFF0C\u8BF7\u786E\u4FDD\u5149\u6807\u5728\u8868\u683C\u5185");
          }
        });
      } else {
        if (!this.activeTable) {
          new import_obsidian5.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
          return;
        }
        this.showConfirmDialog("\u662F\u5426\u4E3A\u5F53\u524D\u8868\u683C\u521B\u5EFAID\uFF1F").then((confirmed) => {
          if (!confirmed) {
            return;
          }
          const tableId = this.activeTable ? this.plugin.tableIdManager.confirmAndCreateTableId(this.activeTable) : "";
          if (tableId) {
            const activeView2 = this.getApp().workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
            if (activeView2) {
              activeView2.previewMode.rerender(true);
            }
            console.log("\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID:", tableId);
          } else {
            console.error("\u521B\u5EFA\u8868\u683CID\u5931\u8D25");
            new import_obsidian5.Notice("\u521B\u5EFA\u8868\u683CID\u5931\u8D25\uFF0C\u8BF7\u624B\u52A8\u6DFB\u52A0");
          }
        });
      }
    } catch (error) {
      console.error("\u751F\u6210\u8868\u683CID\u65F6\u51FA\u9519:", error);
      new import_obsidian5.Notice(`\u751F\u6210\u8868\u683CID\u65F6\u51FA\u9519: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 生成唯一的表格ID
   * @returns 格式为 tbl-YYYYMMDD-xxxxxxxx 的唯一ID
   */
  generateUniqueTableId() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const dateStr = `${year}${month}${day}`;
    const randomChars = "abcdefghijklmnopqrstuvwxyz0123456789";
    let randomStr = "";
    for (let i = 0; i < 8; i++) {
      randomStr += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
    }
    return `tbl-${dateStr}-${randomStr}`;
  }
  /**
   * 检查表格是否已有ID
   * @param editor 编辑器实例
   * @returns 已有ID或null
   */
  checkExistingTableId(editor) {
    const content = editor.getValue();
    const lines = content.split("\n");
    let tableStartLine = -1;
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].trim().startsWith("|") && lines[i].includes("|")) {
        if (i + 1 < lines.length && lines[i + 1].trim().match(/^\|[-:\s|]*\|$/)) {
          tableStartLine = i;
          break;
        }
      }
    }
    if (tableStartLine === -1) {
      return null;
    }
    let idCommentLine = tableStartLine - 1;
    while (idCommentLine >= 0 && (lines[idCommentLine].trim() === "" || lines[idCommentLine].trim().startsWith("<!--"))) {
      const line = lines[idCommentLine].trim();
      if (line.includes("table-id:")) {
        const match = line.match(/table-id:\s*([^\s>]+)/);
        return match ? match[1] : null;
      }
      idCommentLine--;
    }
    return null;
  }
  /**
   * 提取并存储表格信息
   * @param tableId 表格ID
   * @param tableElement 表格元素
   * @param filePath 文件路径
   */
  extractAndStoreTableInfo(tableId, tableElement, filePath) {
    try {
      const rows = tableElement.querySelectorAll("tr");
      const rowCount = rows.length;
      let colCount = 0;
      let hasHeaders = false;
      if (rowCount > 0) {
        const firstRow = rows[0];
        const headerCells = firstRow.querySelectorAll("th");
        hasHeaders = headerCells.length > 0;
        for (const row of Array.from(rows)) {
          const cellCount = row.querySelectorAll("td, th").length;
          colCount = Math.max(colCount, cellCount);
        }
      }
      const mergeInfo = this.extractMergeInfo(tableElement);
      console.log(`\u63D0\u53D6\u8868\u683C\u5408\u5E76\u4FE1\u606F:`, mergeInfo);
      const tableInfo = {
        id: tableId,
        locations: [
          {
            path: filePath,
            isActive: true
          }
        ],
        structure: {
          rowCount,
          colCount,
          hasHeaders
        },
        styling: {
          rowHeights: Array(rowCount).fill("auto"),
          colWidths: Array(colCount).fill("auto"),
          alignment: Array(colCount).fill("left")
        }
      };
      console.log(`\u4FDD\u5B58\u8868\u683C\u4FE1\u606F: ID=${tableId}, \u884C\u6570=${rowCount}, \u5217\u6570=${colCount}, \u8868\u5934=${hasHeaders}`);
      this.plugin.saveTableData(tableInfo);
    } catch (error) {
      console.error("\u63D0\u53D6\u8868\u683C\u4FE1\u606F\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 提取表格的合并信息
   * @param tableElement 表格元素
   * @returns 合并信息对象
   */
  extractMergeInfo(tableElement) {
    var _a;
    const mergeInfo = {
      horizontal: [],
      vertical: []
    };
    const rows = tableElement.querySelectorAll("tr");
    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
      const row = rows[rowIndex];
      const cells = row.querySelectorAll("td, th");
      for (let colIndex = 0; colIndex < cells.length; colIndex++) {
        const cell = cells[colIndex];
        const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
        const leftMatch = content.match(/^(<+)$/);
        if (leftMatch) {
          const count = leftMatch[1].length;
          mergeInfo.horizontal.push({
            row: rowIndex,
            col: colIndex,
            count,
            content
          });
        }
        const upMatch = content.match(/^(\^+)$/);
        if (upMatch) {
          const count = upMatch[1].length;
          mergeInfo.vertical.push({
            row: rowIndex,
            col: colIndex,
            count,
            content
          });
        }
        const colspan = parseInt(cell.getAttribute("colspan") || "1");
        const rowspan = parseInt(cell.getAttribute("rowspan") || "1");
        if (colspan > 1 || rowspan > 1) {
          console.log(`\u53D1\u73B0\u5408\u5E76\u5355\u5143\u683C: \u4F4D\u7F6E(${rowIndex},${colIndex}), colspan=${colspan}, rowspan=${rowspan}`);
        }
      }
    }
    return mergeInfo;
  }
  /**
   * 显示添加行菜单
   */
  showRowAddMenu() {
    try {
      if (!this.activeTable) {
        console.log("\u65E0\u6D3B\u52A8\u8868\u683C\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u884C");
        new import_obsidian5.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
        return;
      }
      console.log("\u663E\u793A\u6DFB\u52A0\u884C\u83DC\u5355");
      const menu = new import_obsidian5.Menu();
      menu.addItem(
        (item) => item.setTitle("\u5728\u4E0A\u65B9\u6DFB\u52A0\u884C").setIcon("arrow-up").onClick(() => this.addRow("above"))
      );
      menu.addItem(
        (item) => item.setTitle("\u5728\u4E0B\u65B9\u6DFB\u52A0\u884C").setIcon("arrow-down").onClick(() => this.addRow("below"))
      );
      const toolbarEl = this.toolbar;
      if (toolbarEl) {
        const rect = toolbarEl.getBoundingClientRect();
        menu.showAtPosition({ x: rect.left, y: rect.bottom });
      } else {
        menu.showAtMouseEvent(event);
      }
    } catch (error) {
      console.error("\u663E\u793A\u6DFB\u52A0\u884C\u83DC\u5355\u5931\u8D25:", error);
      new import_obsidian5.Notice(`\u663E\u793A\u6DFB\u52A0\u884C\u83DC\u5355\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 添加行
   * @param position 位置，above 或 below
   */
  addRow(position) {
    var _a, _b;
    try {
      if (!this.activeTable) {
        console.log("\u65E0\u6D3B\u52A8\u8868\u683C\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u884C");
        new import_obsidian5.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
        return;
      }
      console.log("\u5F00\u59CB\u6DFB\u52A0\u884C:", position);
      let targetRow = null;
      if (this.selectedCells.length > 0) {
        targetRow = this.selectedCells[0].closest("tr");
      } else {
        targetRow = this.activeTable.querySelector("tr");
      }
      if (!targetRow) {
        console.error("\u65E0\u6CD5\u627E\u5230\u76EE\u6807\u884C");
        new import_obsidian5.Notice("\u65E0\u6CD5\u627E\u5230\u76EE\u6807\u884C");
        return;
      }
      const cellCount = targetRow.querySelectorAll("td, th").length;
      const newRow = document.createElement("tr");
      for (let i = 0; i < cellCount; i++) {
        const cell = document.createElement("td");
        cell.textContent = "";
        newRow.appendChild(cell);
      }
      if (position === "above") {
        (_a = targetRow.parentNode) == null ? void 0 : _a.insertBefore(newRow, targetRow);
      } else {
        (_b = targetRow.parentNode) == null ? void 0 : _b.insertBefore(newRow, targetRow.nextSibling);
      }
      new import_obsidian5.Notice(`\u5DF2\u5728${position === "above" ? "\u4E0A\u65B9" : "\u4E0B\u65B9"}\u6DFB\u52A0\u884C`);
      console.log("\u6DFB\u52A0\u884C\u5B8C\u6210:", position);
    } catch (error) {
      console.error("\u6DFB\u52A0\u884C\u5931\u8D25:", error);
      new import_obsidian5.Notice(`\u6DFB\u52A0\u884C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 更新行索引
   */
  updateRowIndices() {
    if (!this.activeTable)
      return;
    const rows = this.activeTable.querySelectorAll("tr");
    rows.forEach((row, rowIndex) => {
      const cells = row.querySelectorAll("td, th");
      cells.forEach((cell, colIndex) => {
        cell.setAttribute("row-index", rowIndex.toString());
        cell.setAttribute("col-index", colIndex.toString());
      });
    });
  }
  /**
   * 显示样式菜单
   */
  showStyleMenu() {
    const menu = new import_obsidian5.Menu();
    menu.addItem(
      (item) => item.setTitle("\u8BBE\u7F6E\u8868\u683C\u6837\u5F0F").setIcon("brush").onClick(() => {
        new import_obsidian5.Notice("\u6837\u5F0F\u8BBE\u7F6E\u529F\u80FD\u6B63\u5728\u5F00\u53D1\u4E2D");
      })
    );
    menu.addItem(
      (item) => item.setTitle("\u8BBE\u7F6E\u6761\u7EB9\u6837\u5F0F").setIcon("lines").onClick(() => this.applyStripedStyle())
    );
    menu.addItem(
      (item) => item.setTitle("\u8BBE\u7F6E\u8FB9\u6846\u6837\u5F0F").setIcon("box").onClick(() => this.applyBorderedStyle())
    );
    const button = this.toolbar.querySelector(".table-style");
    const rect = button.getBoundingClientRect();
    menu.showAtPosition({ x: rect.left, y: rect.bottom });
  }
  /**
   * 应用条纹样式
   */
  applyStripedStyle() {
    if (!this.activeTable) {
      new import_obsidian5.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
      return;
    }
    const rows = this.activeTable.querySelectorAll("tr");
    rows.forEach((row, index) => {
      if (index > 0 && index % 2 === 1) {
        const cells = row.querySelectorAll("td");
        cells.forEach((cell) => {
          cell.style.backgroundColor = "var(--background-secondary)";
        });
      }
    });
    new import_obsidian5.Notice("\u5DF2\u5E94\u7528\u6761\u7EB9\u6837\u5F0F");
  }
  /**
   * 应用边框样式
   */
  applyBorderedStyle() {
    if (!this.activeTable) {
      new import_obsidian5.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
      return;
    }
    this.activeTable.style.borderCollapse = "collapse";
    const cells = this.activeTable.querySelectorAll("td, th");
    cells.forEach((cell) => {
      cell.style.border = "1px solid var(--background-modifier-border)";
      cell.style.padding = "4px 8px";
    });
    new import_obsidian5.Notice("\u5DF2\u5E94\u7528\u8FB9\u6846\u6837\u5F0F");
  }
  /**
   * 设置活动表格
   * @param table 表格HTML元素
   */
  setActiveTable(table) {
    var _a, _b;
    try {
      console.log("\u8BBE\u7F6E\u6D3B\u52A8\u8868\u683C");
      console.log("\u8868\u683CDOM\u7ED3\u6784:", table.outerHTML.substring(0, 200) + "...");
      const tableId = this.plugin.tableIdManager.getTableIdentifier(table);
      console.log(`\u8868\u683CID\u68C0\u67E5\u7ED3\u679C: ${tableId || "\u672A\u627E\u5230"}`);
      let prevNode = table.previousSibling;
      let nodeCount = 0;
      console.log("\u8868\u683C\u524D\u7F6E\u8282\u70B9\u68C0\u67E5:");
      while (prevNode && nodeCount < 5) {
        nodeCount++;
        const nodeType = prevNode.nodeType;
        const nodeTypeStr = nodeType === Node.COMMENT_NODE ? "COMMENT" : nodeType === Node.TEXT_NODE ? "TEXT" : nodeType === Node.ELEMENT_NODE ? "ELEMENT" : "OTHER";
        if (nodeType === Node.COMMENT_NODE) {
          console.log(`  \u524D\u7F6E\u8282\u70B9#${nodeCount}: \u7C7B\u578B=${nodeTypeStr}, \u5185\u5BB9="${((_a = prevNode.textContent) == null ? void 0 : _a.trim()) || ""}"`);
        } else if (nodeType === Node.TEXT_NODE) {
          const text = ((_b = prevNode.textContent) == null ? void 0 : _b.trim()) || "";
          console.log(`  \u524D\u7F6E\u8282\u70B9#${nodeCount}: \u7C7B\u578B=${nodeTypeStr}, \u5185\u5BB9="${text.substring(0, 20)}${text.length > 20 ? "..." : ""}"`);
        } else if (nodeType === Node.ELEMENT_NODE) {
          console.log(`  \u524D\u7F6E\u8282\u70B9#${nodeCount}: \u7C7B\u578B=${nodeTypeStr}, \u6807\u7B7E=<${prevNode.tagName.toLowerCase()}>`);
        }
        prevNode = prevNode.previousSibling;
      }
      this.activeTable = table;
      this.plugin.removeAllTableHighlights();
      this.plugin.highlightSelectedTable(table);
      this.setupCellSelection();
      console.log("\u6D3B\u52A8\u8868\u683C\u8BBE\u7F6E\u5B8C\u6210");
    } catch (error) {
      console.error("\u8BBE\u7F6E\u6D3B\u52A8\u8868\u683C\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置编辑模式下的活动表格
   * @param tableInfo 表格信息
   */
  setActiveEditModeTable(tableInfo) {
    try {
      if (this.activeTable) {
        this.clearCellSelection();
        this.activeTable.dataset.tableSelected = "false";
        this.activeTable.style.outline = "";
        this.activeTable.style.outlineOffset = "";
        this.activeTable = null;
      }
      this.editModeTableInfo = tableInfo;
      console.log("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u9009\u62E9\u4E86\u8868\u683C:", tableInfo);
    } catch (error) {
      console.error("\u8BBE\u7F6E\u7F16\u8F91\u6A21\u5F0F\u6D3B\u52A8\u8868\u683C\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 检查当前是否在编辑模式下
   * @returns 是否在编辑模式下
   */
  isInEditMode() {
    const activeView = this.getApp().workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
    return activeView ? activeView.getMode() === "source" : false;
  }
  /**
   * 设置单元格选择功能
   */
  setupCellSelection() {
    if (!this.activeTable)
      return;
    const cells = this.activeTable.querySelectorAll("td, th");
    cells.forEach((cell) => {
      const cellEl = cell;
      cellEl.onclick = (event2) => this.handleCellClick(cellEl, event2);
    });
  }
  /**
   * 处理单元格点击事件
   * @param cell 单元格元素
   * @param event 事件对象
   */
  handleCellClick(cell, event2) {
    event2.stopPropagation();
    if (!event2.ctrlKey && !event2.metaKey) {
      this.clearCellSelection();
    }
    const index = this.selectedCells.indexOf(cell);
    if (index === -1) {
      this.selectedCells.push(cell);
      cell.classList.add("selected-cell");
      cell.style.backgroundColor = "var(--text-selection)";
      const position = this.selectedCells.length > 1 ? "\u591A\u9009\u6A21\u5F0F" : "\u5DF2\u9009\u62E9\u5355\u5143\u683C";
      new import_obsidian5.Notice(`${position} (${this.selectedCells.length})`, 1e3);
    } else {
      this.selectedCells.splice(index, 1);
      cell.classList.remove("selected-cell");
      cell.style.backgroundColor = "";
      if (this.selectedCells.length > 0) {
        new import_obsidian5.Notice(`\u5DF2\u9009\u62E9 ${this.selectedCells.length} \u4E2A\u5355\u5143\u683C`, 1e3);
      }
    }
    console.log("\u5DF2\u9009\u62E9\u5355\u5143\u683C:", this.selectedCells.length);
  }
  /**
   * 清除单元格选择
   */
  clearCellSelection() {
    this.selectedCells.forEach((cell) => {
      cell.classList.remove("selected-cell");
      cell.style.backgroundColor = "";
    });
    this.selectedCells = [];
  }
  /**
   * 显示确认对话框
   * @param message 确认消息
   * @returns 用户是否确认
   */
  async showConfirmDialog(message) {
    return new Promise((resolve) => {
      const notice = new import_obsidian5.Notice(message, 0);
      const buttonContainer = document.createElement("div");
      buttonContainer.style.display = "flex";
      buttonContainer.style.justifyContent = "space-between";
      buttonContainer.style.marginTop = "10px";
      const cancelButton = document.createElement("button");
      cancelButton.textContent = "\u53D6\u6D88";
      cancelButton.onclick = () => {
        notice.hide();
        resolve(false);
      };
      const confirmButton = document.createElement("button");
      confirmButton.textContent = "\u786E\u5B9A";
      confirmButton.style.marginLeft = "10px";
      confirmButton.onclick = () => {
        notice.hide();
        resolve(true);
      };
      buttonContainer.appendChild(cancelButton);
      buttonContainer.appendChild(confirmButton);
      notice.noticeEl.appendChild(buttonContainer);
    });
  }
  /**
   * 应用合并单元格的样式
   * @param mainCell 主单元格（保留的单元格）
   * @param mergedCells 被合并的单元格（将被隐藏）
   */
  applyMergedCellStyles(mainCell, mergedCells) {
    mainCell.classList.add("obs-merged-cell-main");
    if (this.plugin.settings.autoCenterMergedCells) {
      mainCell.style.textAlign = "center";
      mainCell.style.verticalAlign = "middle";
    }
    for (const cell of mergedCells) {
      cell.style.display = "none";
    }
    mainCell.setAttribute("data-merged-main", "true");
  }
  /**
   * 清除表格选择
   */
  clearSelection() {
    try {
      this.clearCellSelection();
      if (this.activeTable) {
        this.activeTable.dataset.tableSelected = "false";
        this.activeTable.style.outline = "";
        this.activeTable.style.outlineOffset = "";
        this.activeTable = null;
      }
      this.editModeTableInfo = null;
      console.log("\u5DF2\u6E05\u9664\u8868\u683C\u9009\u62E9");
    } catch (error) {
      console.error("\u6E05\u9664\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 获取选中单元格的边界
   * @returns 边界信息 {minRow, maxRow, minCol, maxCol}
   */
  getSelectedCellsBoundary() {
    if (!this.selectedCells || this.selectedCells.length === 0) {
      return null;
    }
    let minRow = Number.MAX_SAFE_INTEGER;
    let maxRow = 0;
    let minCol = Number.MAX_SAFE_INTEGER;
    let maxCol = 0;
    for (const cell of this.selectedCells) {
      const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
      const colIndex = parseInt(cell.getAttribute("col-index") || "0");
      minRow = Math.min(minRow, rowIndex);
      maxRow = Math.max(maxRow, rowIndex);
      minCol = Math.min(minCol, colIndex);
      maxCol = Math.max(maxCol, colIndex);
    }
    return { minRow, maxRow, minCol, maxCol };
  }
};

// src/markdownSourceEditor.ts
var import_obsidian7 = require("obsidian");
var MarkdownSourceEditor = class {
  // 辅助方法，获取app对象
  getApp() {
    return this.plugin.app;
  }
  constructor(plugin) {
    this.plugin = plugin;
    console.log("MarkdownSourceEditor initialized");
  }
  /**
   * 获取当前活动的编辑器
   * @returns 编辑器实例或null
   */
  getActiveEditor() {
    const activeView = this.getApp().workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
    if (activeView && activeView.editor) {
      return activeView.editor;
    }
    return null;
  }
  /**
   * 在Markdown源码中定位表格
   * @param editor 编辑器实例
   * @returns 表格信息或null
   */
  locateTableInMarkdown(editor) {
    try {
      const content = editor.getValue();
      const cursor = editor.getCursor();
      const lines = content.split("\n");
      const cursorLine = lines[cursor.line];
      const isInTableRow = cursorLine && cursorLine.trim().startsWith("|") && cursorLine.trim().endsWith("|");
      if (!isInTableRow)
        return null;
      let startLine = cursor.line;
      while (startLine > 0 && lines[startLine - 1].trim().startsWith("|")) {
        startLine--;
      }
      let endLine = cursor.line;
      while (endLine < lines.length - 1 && lines[endLine + 1].trim().startsWith("|")) {
        endLine++;
      }
      if (!this.isValidTable(lines.slice(startLine, endLine + 1))) {
        return null;
      }
      const tableId = this.findTableIdAbove(editor, startLine);
      return {
        startLine,
        endLine,
        content: lines.slice(startLine, endLine + 1).join("\n"),
        tableId
      };
    } catch (error) {
      console.error("\u5B9A\u4F4DMarkdown\u8868\u683C\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 在表格上方查找表格ID
   * @param editor 编辑器实例
   * @param tableLine 表格起始行
   * @returns 表格ID或undefined
   */
  findTableIdAbove(editor, tableLine) {
    console.log(`\u67E5\u627E\u8868\u683CID: \u8868\u683C\u8D77\u59CB\u884C=${tableLine}`);
    const maxLinesToCheck = 10;
    let currentLine = tableLine - 1;
    const minLine = Math.max(0, tableLine - maxLinesToCheck);
    while (currentLine >= minLine) {
      const line = editor.getLine(currentLine);
      if (!line)
        break;
      console.log(`\u68C0\u67E5\u884C ${currentLine}: "${line}"`);
      const standardIdMatch = line.match(/<!--\s*table-id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (standardIdMatch && standardIdMatch[1]) {
        const id = standardIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u6807\u51C6\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const noHyphenIdMatch = line.match(/<!--\s*tableid:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (noHyphenIdMatch && noHyphenIdMatch[1]) {
        const id = noHyphenIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u65E0\u8FDE\u5B57\u7B26\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const simpleIdMatch = line.match(/<!--\s*id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (simpleIdMatch && simpleIdMatch[1]) {
        const id = simpleIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u7B80\u5316\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const tableNameIdMatch = line.match(/<!--\s*(table|tbl):\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (tableNameIdMatch && tableNameIdMatch[2]) {
        const id = tableNameIdMatch[2];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u8868\u683C\u540D\u79F0\u683C\u5F0FID: ${id}`);
        return id;
      }
      const noSpaceIdMatch = line.match(/<!--table-id:([a-zA-Z0-9_\-:.]+)-->/i);
      if (noSpaceIdMatch && noSpaceIdMatch[1]) {
        const id = noSpaceIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u65E0\u7A7A\u683C\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      if (line.trim() !== "" && !line.trim().startsWith("<!--") && !line.trim().startsWith("//")) {
        console.log(`\u5728\u884C ${currentLine} \u9047\u5230\u975E\u7A7A\u975E\u6CE8\u91CA\u884C\uFF0C\u505C\u6B62\u641C\u7D22`);
        break;
      }
      currentLine--;
    }
    console.log("\u672A\u627E\u5230\u8868\u683CID");
    return void 0;
  }
  /**
   * 验证Markdown表格结构是否有效
   * @param lines 表格行数组
   * @returns 是否为有效表格
   */
  isValidTable(lines) {
    if (lines.length < 2)
      return false;
    const firstLine = lines[0].trim();
    if (!firstLine.startsWith("|") || !firstLine.endsWith("|"))
      return false;
    const secondLine = lines[1].trim();
    if (!secondLine.startsWith("|") || !secondLine.endsWith("|"))
      return false;
    const separatorCells = secondLine.split("|").slice(1, -1);
    for (const cell of separatorCells) {
      const trimmedCell = cell.trim();
      if (!trimmedCell.match(/^:?-+:?$/)) {
        return false;
      }
    }
    for (let i = 2; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line.startsWith("|") || !line.endsWith("|")) {
        return false;
      }
    }
    return true;
  }
  /**
   * 为Markdown表格添加ID
   * @returns 添加的表格ID或null
   */
  async addTableIdToMarkdown() {
    try {
      const editor = this.getActiveEditor();
      if (!editor) {
        new import_obsidian7.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return null;
      }
      const tableInfo = this.locateTableInMarkdown(editor);
      if (!tableInfo) {
        new import_obsidian7.Notice("\u672A\u627E\u5230\u8868\u683C\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return null;
      }
      const tableId = this.checkExistingTableId(editor, tableInfo.startLine);
      if (tableId) {
        new import_obsidian7.Notice(`\u8868\u683C\u5DF2\u6709ID: ${tableId}`);
        return tableId;
      }
      const newTableId = this.generateUniqueTableId();
      console.log(`\u4E3A\u8868\u683C\u6DFB\u52A0\u65B0ID: ${newTableId}, \u8868\u683C\u8D77\u59CB\u884C: ${tableInfo.startLine}`);
      let insertPosition = { line: tableInfo.startLine, ch: 0 };
      let insertContent = `<!-- table-id: ${newTableId} -->
`;
      if (tableInfo.startLine > 0) {
        const prevLine = editor.getLine(tableInfo.startLine - 1);
        if (prevLine && prevLine.trim() !== "") {
          insertContent = `
<!-- table-id: ${newTableId} -->
`;
        }
      }
      editor.replaceRange(insertContent, insertPosition);
      this.saveTableInfo(newTableId, tableInfo);
      console.log(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID: ${newTableId}`);
      new import_obsidian7.Notice(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID: ${newTableId}`);
      return newTableId;
    } catch (error) {
      console.error("\u6DFB\u52A0\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 保存表格信息到插件数据
   * @param tableId 表格ID
   * @param tableInfo 表格信息
   */
  saveTableInfo(tableId, tableInfo) {
    try {
      const activeView = this.getApp().workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
      if (!activeView || !activeView.file)
        return;
      const filePath = activeView.file.path;
      const { rows, hasHeader } = this.parseTableStructure(tableInfo.content);
      const tableData = {
        id: tableId,
        locations: [
          {
            path: filePath,
            isActive: true
          }
        ],
        structure: {
          rowCount: rows.length,
          colCount: rows.length > 0 ? rows[0].length : 0,
          hasHeaders: hasHeader
        },
        styling: {
          rowHeights: Array(rows.length).fill("auto"),
          colWidths: rows.length > 0 ? Array(rows[0].length).fill("auto") : [],
          alignment: rows.length > 0 ? Array(rows[0].length).fill("left") : []
        }
      };
      this.plugin.saveTableData(tableData);
    } catch (error) {
      console.error("\u4FDD\u5B58\u8868\u683C\u4FE1\u606F\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 检查表格是否已有ID
   * @param editor 编辑器实例
   * @param tableLine 表格起始行
   * @returns 表格ID或null
   */
  checkExistingTableId(editor, tableLine) {
    if (tableLine <= 0)
      return null;
    console.log(`\u68C0\u67E5\u8868\u683C\u662F\u5426\u5DF2\u6709ID: \u8868\u683C\u8D77\u59CB\u884C=${tableLine}`);
    const maxLinesToCheck = 10;
    let currentLine = tableLine - 1;
    const minLine = Math.max(0, tableLine - maxLinesToCheck);
    while (currentLine >= minLine) {
      const line = editor.getLine(currentLine);
      if (!line)
        break;
      console.log(`\u68C0\u67E5\u884C ${currentLine}: "${line}"`);
      const standardIdMatch = line.match(/<!--\s*table-id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (standardIdMatch && standardIdMatch[1]) {
        const id = standardIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u6807\u51C6\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const noHyphenIdMatch = line.match(/<!--\s*tableid:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (noHyphenIdMatch && noHyphenIdMatch[1]) {
        const id = noHyphenIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u65E0\u8FDE\u5B57\u7B26\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const simpleIdMatch = line.match(/<!--\s*id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (simpleIdMatch && simpleIdMatch[1]) {
        const id = simpleIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u7B80\u5316\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const tableNameIdMatch = line.match(/<!--\s*(table|tbl):\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (tableNameIdMatch && tableNameIdMatch[2]) {
        const id = tableNameIdMatch[2];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u8868\u683C\u540D\u79F0\u683C\u5F0FID: ${id}`);
        return id;
      }
      const noSpaceIdMatch = line.match(/<!--table-id:([a-zA-Z0-9_\-:.]+)-->/i);
      if (noSpaceIdMatch && noSpaceIdMatch[1]) {
        const id = noSpaceIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u65E0\u7A7A\u683C\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      if (line.trim() !== "" && !line.trim().startsWith("<!--") && !line.trim().startsWith("//")) {
        console.log(`\u5728\u884C ${currentLine} \u9047\u5230\u975E\u7A7A\u975E\u6CE8\u91CA\u884C\uFF0C\u505C\u6B62\u641C\u7D22`);
        break;
      }
      currentLine--;
    }
    console.log("\u672A\u627E\u5230\u8868\u683CID");
    return null;
  }
  /**
   * 生成唯一的表格ID
   * @returns 表格ID字符串
   */
  generateUniqueTableId() {
    const prefix = this.plugin.settings.idPrefix || "tbl";
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, "");
    const randomId = Math.random().toString(36).substring(2, 8);
    return `${prefix}-${timestamp}-${randomId}`;
  }
  /**
   * 解析表格结构
   * @param tableContent 表格内容字符串
   * @returns 解析后的表格数据
   */
  parseTableStructure(tableContent) {
    const lines = tableContent.split("\n");
    const rows = [];
    let hasHeader = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line.startsWith("|"))
        continue;
      if (line.includes("-") && i === 1) {
        hasHeader = true;
        continue;
      }
      const cells = line.split("|").filter((cell, index, array) => index > 0 && index < array.length - 1).map((cell) => cell.trim());
      rows.push(cells);
    }
    return { rows, hasHeader };
  }
  /**
   * 获取单元格内容
   * @param tableRows 表格行数组
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @returns 单元格内容
   */
  getCellContent(tableRows, rowIndex, colIndex) {
    if (rowIndex >= 0 && rowIndex < tableRows.length && colIndex >= 0 && colIndex < tableRows[rowIndex].length) {
      return tableRows[rowIndex][colIndex];
    }
    return "";
  }
  /**
   * 设置单元格内容
   * @param editor 编辑器实例
   * @param tableInfo 表格信息
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @param content 新内容
   */
  setCellContent(editor, tableInfo, rowIndex, colIndex, content) {
    try {
      const lineIndex = tableInfo.startLine + rowIndex;
      if (lineIndex > tableInfo.endLine)
        return;
      const line = editor.getLine(lineIndex);
      if (!line)
        return;
      const cells = line.split("|");
      if (colIndex + 1 >= cells.length - 1)
        return;
      cells[colIndex + 1] = ` ${content} `;
      editor.replaceRange(
        cells.join("|"),
        { line: lineIndex, ch: 0 },
        { line: lineIndex, ch: line.length }
      );
    } catch (error) {
      console.error("\u8BBE\u7F6E\u5355\u5143\u683C\u5185\u5BB9\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 合并单元格
   * @param direction 合并方向 ('right' 或 'down')
   */
  async mergeCells(direction) {
    try {
      console.log(`\u5C1D\u8BD5${direction === "right" ? "\u5411\u53F3" : "\u5411\u4E0B"}\u5408\u5E76\u5355\u5143\u683C`);
      const editor = this.getActiveEditor();
      if (!editor) {
        console.log("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        new import_obsidian7.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return false;
      }
      const cellPosition = this.getCellPosition(editor);
      if (!cellPosition) {
        console.log("\u672A\u627E\u5230\u8868\u683C\u6216\u65E0\u6CD5\u786E\u5B9A\u5355\u5143\u683C\u4F4D\u7F6E");
        new import_obsidian7.Notice("\u672A\u627E\u5230\u8868\u683C\u6216\u65E0\u6CD5\u786E\u5B9A\u5355\u5143\u683C\u4F4D\u7F6E\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return false;
      }
      const { tableInfo, rowIndex, colIndex } = cellPosition;
      console.log(`\u51C6\u5907${direction === "right" ? "\u5411\u53F3" : "\u5411\u4E0B"}\u5408\u5E76\u5355\u5143\u683C: \u884C=${rowIndex}, \u5217=${colIndex}`);
      let result = false;
      if (direction === "right") {
        result = await this.mergeCellsRight(editor, tableInfo, rowIndex, colIndex);
      } else if (direction === "down") {
        result = await this.mergeCellsDown(editor, tableInfo, rowIndex, colIndex);
      }
      if (result) {
        console.log(`${direction === "right" ? "\u5411\u53F3" : "\u5411\u4E0B"}\u5408\u5E76\u5355\u5143\u683C\u6210\u529F`);
      } else {
        console.log(`${direction === "right" ? "\u5411\u53F3" : "\u5411\u4E0B"}\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25`);
      }
      return result;
    } catch (error) {
      console.error(`\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519(${direction}):`, error);
      new import_obsidian7.Notice(`\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  }
  /**
   * 获取光标所在的列索引
   * @param line 行文本
   * @param cursorCh 光标字符位置
   * @returns 列索引或-1
   */
  getCursorColumnIndex(line, cursorCh) {
    try {
      if (!line.trim().startsWith("|") || !line.trim().endsWith("|")) {
        console.log("\u884C\u4E0D\u662F\u6709\u6548\u7684\u8868\u683C\u884C:", line);
        return -1;
      }
      const cells = line.split("|");
      if (cells[0].trim() === "")
        cells.shift();
      if (cells[cells.length - 1].trim() === "")
        cells.pop();
      let currentPos = line.indexOf("|");
      for (let i = 0; i < cells.length; i++) {
        const cellWidth = cells[i].length + 1;
        const nextPos = currentPos + cellWidth;
        console.log(`\u68C0\u67E5\u5355\u5143\u683C ${i}: \u8303\u56F4=${currentPos}-${nextPos}, \u5185\u5BB9="${cells[i]}"`);
        if (cursorCh > currentPos && cursorCh <= nextPos) {
          console.log(`\u5149\u6807\u5728\u5355\u5143\u683C ${i} \u5185: \u4F4D\u7F6E=${cursorCh}`);
          return i;
        }
        currentPos = nextPos;
      }
      console.log(`\u672A\u627E\u5230\u5149\u6807\u6240\u5728\u5355\u5143\u683C: cursorCh=${cursorCh}, line="${line}"`);
      return -1;
    } catch (error) {
      console.error("\u83B7\u53D6\u5149\u6807\u6240\u5728\u5217\u7D22\u5F15\u65F6\u51FA\u9519:", error);
      return -1;
    }
  }
  /**
   * 获取单元格位置信息
   * @param editor 编辑器实例
   * @returns 单元格位置信息或null
   */
  getCellPosition(editor) {
    try {
      const tableInfo = this.locateTableInMarkdown(editor);
      if (!tableInfo) {
        console.log("\u672A\u627E\u5230\u8868\u683C");
        return null;
      }
      const cursor = editor.getCursor();
      const rowIndex = cursor.line - tableInfo.startLine;
      if (rowIndex < 0 || rowIndex > tableInfo.endLine - tableInfo.startLine) {
        console.log(`\u884C\u7D22\u5F15\u8D85\u51FA\u8303\u56F4: rowIndex=${rowIndex}, tableRange=${tableInfo.startLine}-${tableInfo.endLine}`);
        return null;
      }
      const line = editor.getLine(cursor.line);
      if (!line) {
        console.log("\u65E0\u6CD5\u83B7\u53D6\u884C\u5185\u5BB9");
        return null;
      }
      if (!line.trim().startsWith("|") || !line.trim().endsWith("|")) {
        console.log("\u5F53\u524D\u884C\u4E0D\u662F\u6709\u6548\u7684\u8868\u683C\u884C");
        return null;
      }
      const colIndex = this.getCursorColumnIndex(line, cursor.ch);
      if (colIndex === -1) {
        console.log("\u65E0\u6CD5\u786E\u5B9A\u5149\u6807\u6240\u5728\u5217");
        return null;
      }
      console.log(`\u6210\u529F\u83B7\u53D6\u5355\u5143\u683C\u4F4D\u7F6E: \u884C=${rowIndex}, \u5217=${colIndex}, \u8868\u683C\u8303\u56F4=${tableInfo.startLine}-${tableInfo.endLine}`);
      return {
        tableInfo,
        rowIndex,
        colIndex
      };
    } catch (error) {
      console.error("\u83B7\u53D6\u5355\u5143\u683C\u4F4D\u7F6E\u4FE1\u606F\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 向右合并单元格
   * @param editor 编辑器实例
   * @param tableInfo 表格信息
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @param mergeCount 已合并的单元格数量，默认为0
   * @returns 是否成功
   */
  async mergeCellsRight(editor, tableInfo, rowIndex, colIndex, mergeCount = 0) {
    try {
      const lineIndex = tableInfo.startLine + rowIndex;
      const line = editor.getLine(lineIndex);
      if (!line) {
        console.log(`\u65E0\u6CD5\u83B7\u53D6\u884C\u5185\u5BB9: lineIndex=${lineIndex}`);
        return false;
      }
      console.log(`\u5C1D\u8BD5\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C: \u884C=${lineIndex}, \u5217=${colIndex}, \u5DF2\u5408\u5E76=${mergeCount}, \u884C\u5185\u5BB9="${line}"`);
      const cells = line.split("|");
      if (colIndex + 2 >= cells.length) {
        console.log(`\u5217\u7D22\u5F15\u8D85\u51FA\u8303\u56F4: colIndex=${colIndex}, cells.length=${cells.length}`);
        new import_obsidian7.Notice("\u53F3\u4FA7\u6CA1\u6709\u5355\u5143\u683C\u53EF\u5408\u5E76");
        return false;
      }
      const mainContent = cells[colIndex + 1].trim();
      const targetContent = cells[colIndex + 2].trim();
      console.log(`\u4E3B\u5355\u5143\u683C\u5185\u5BB9="${mainContent}", \u76EE\u6807\u5355\u5143\u683C\u5185\u5BB9="${targetContent}"`);
      const isMergeMarker = /^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(targetContent);
      console.log(`\u76EE\u6807\u5355\u5143\u683C\u662F\u5426\u4E3A\u5408\u5E76\u6807\u8BB0: ${isMergeMarker}`);
      let mergeAction = "replace";
      if (targetContent && !isMergeMarker) {
        if (this.plugin.settings.confirmMergeNonEmpty) {
          mergeAction = await this.showMergeCellOptionsDialog(mainContent, targetContent);
          console.log(`\u7528\u6237\u9009\u62E9\u7684\u5408\u5E76\u64CD\u4F5C: ${mergeAction}`);
          if (mergeAction === "cancel") {
            console.log("\u7528\u6237\u53D6\u6D88\u4E86\u5408\u5E76\u64CD\u4F5C");
            return false;
          }
        }
      }
      if (mergeAction === "merge" && mainContent && targetContent && !isMergeMarker) {
        cells[colIndex + 1] = ` ${mainContent} ${targetContent} `;
        console.log(`\u5408\u5E76\u5185\u5BB9: \u65B0\u4E3B\u5355\u5143\u683C\u5185\u5BB9="${cells[colIndex + 1]}"`);
      }
      const mergeDistance = mergeCount + 1;
      const mergeMarker = "<".repeat(mergeDistance);
      console.log(`\u751F\u6210\u5408\u5E76\u6807\u8BB0: \u8DDD\u79BB=${mergeDistance}, \u6807\u8BB0="${mergeMarker}"`);
      cells[colIndex + 2] = ` ${mergeMarker} `;
      const newLine = cells.join("|");
      console.log(`\u65B0\u884C\u5185\u5BB9="${newLine}"`);
      editor.replaceRange(
        newLine,
        { line: lineIndex, ch: 0 },
        { line: lineIndex, ch: line.length }
      );
      if (colIndex + 3 < cells.length) {
        const nextCellContent = cells[colIndex + 3].trim();
        console.log(`\u68C0\u67E5\u4E0B\u4E00\u4E2A\u5355\u5143\u683C\u662F\u5426\u4E3A\u5408\u5E76\u6807\u8BB0: \u5185\u5BB9="${nextCellContent}"`);
        if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(nextCellContent)) {
          console.log("\u68C0\u6D4B\u5230\u53F3\u4FA7\u6709\u8FDE\u7EED\u5408\u5E76\u5355\u5143\u683C\uFF0C\u7EE7\u7EED\u5408\u5E76");
          await this.mergeCellsRight(editor, tableInfo, rowIndex, colIndex + 1, mergeDistance);
        }
      }
      new import_obsidian7.Notice("\u5DF2\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C");
      return true;
    } catch (error) {
      console.error("\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian7.Notice(`\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  }
  /**
   * 向下合并单元格
   * @param editor 编辑器实例
   * @param tableInfo 表格信息
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @param mergeCount 已合并的单元格数量，默认为0
   * @returns 是否成功
   */
  async mergeCellsDown(editor, tableInfo, rowIndex, colIndex, mergeCount = 0) {
    try {
      const currentLineIndex = tableInfo.startLine + rowIndex;
      const nextLineIndex = currentLineIndex + 1;
      if (nextLineIndex > tableInfo.endLine) {
        console.log(`\u4E0B\u4E00\u884C\u8D85\u51FA\u8868\u683C\u8303\u56F4: nextLineIndex=${nextLineIndex}, tableEndLine=${tableInfo.endLine}`);
        new import_obsidian7.Notice("\u4E0B\u65B9\u6CA1\u6709\u5355\u5143\u683C\u53EF\u5408\u5E76");
        return false;
      }
      const currentLine = editor.getLine(currentLineIndex);
      const nextLine = editor.getLine(nextLineIndex);
      if (!currentLine || !nextLine) {
        console.log(`\u65E0\u6CD5\u83B7\u53D6\u884C\u5185\u5BB9: currentLine=${!!currentLine}, nextLine=${!!nextLine}`);
        return false;
      }
      console.log(`\u5C1D\u8BD5\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C: \u5F53\u524D\u884C=${currentLineIndex}, \u4E0B\u4E00\u884C=${nextLineIndex}, \u5217=${colIndex}, \u5DF2\u5408\u5E76=${mergeCount}`);
      console.log(`\u5F53\u524D\u884C\u5185\u5BB9="${currentLine}"`);
      console.log(`\u4E0B\u4E00\u884C\u5185\u5BB9="${nextLine}"`);
      const currentCells = currentLine.split("|");
      const nextCells = nextLine.split("|");
      if (colIndex + 1 >= currentCells.length || colIndex + 1 >= nextCells.length) {
        console.log(`\u5217\u7D22\u5F15\u8D85\u51FA\u8303\u56F4: colIndex=${colIndex}, currentCells.length=${currentCells.length}, nextCells.length=${nextCells.length}`);
        new import_obsidian7.Notice("\u65E0\u6CD5\u5408\u5E76\u5355\u5143\u683C\uFF0C\u5217\u7D22\u5F15\u8D85\u51FA\u8303\u56F4");
        return false;
      }
      const mainContent = currentCells[colIndex + 1].trim();
      const targetContent = nextCells[colIndex + 1].trim();
      console.log(`\u4E3B\u5355\u5143\u683C\u5185\u5BB9="${mainContent}", \u76EE\u6807\u5355\u5143\u683C\u5185\u5BB9="${targetContent}"`);
      const isMergeMarker = /^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(targetContent);
      console.log(`\u76EE\u6807\u5355\u5143\u683C\u662F\u5426\u4E3A\u5408\u5E76\u6807\u8BB0: ${isMergeMarker}`);
      let mergeAction = "replace";
      if (targetContent && !isMergeMarker) {
        if (this.plugin.settings.confirmMergeNonEmpty) {
          mergeAction = await this.showMergeCellOptionsDialog(mainContent, targetContent);
          console.log(`\u7528\u6237\u9009\u62E9\u7684\u5408\u5E76\u64CD\u4F5C: ${mergeAction}`);
          if (mergeAction === "cancel") {
            console.log("\u7528\u6237\u53D6\u6D88\u4E86\u5408\u5E76\u64CD\u4F5C");
            return false;
          }
        }
      }
      if (mergeAction === "merge" && mainContent && targetContent && !isMergeMarker) {
        currentCells[colIndex + 1] = ` ${mainContent} ${targetContent} `;
        console.log(`\u5408\u5E76\u5185\u5BB9: \u65B0\u4E3B\u5355\u5143\u683C\u5185\u5BB9="${currentCells[colIndex + 1]}"`);
        editor.replaceRange(
          currentCells.join("|"),
          { line: currentLineIndex, ch: 0 },
          { line: currentLineIndex, ch: currentLine.length }
        );
      }
      const mergeDistance = mergeCount + 1;
      const mergeMarker = "^".repeat(mergeDistance);
      console.log(`\u751F\u6210\u5408\u5E76\u6807\u8BB0: \u8DDD\u79BB=${mergeDistance}, \u6807\u8BB0="${mergeMarker}"`);
      nextCells[colIndex + 1] = ` ${mergeMarker} `;
      const newNextLine = nextCells.join("|");
      console.log(`\u65B0\u4E0B\u4E00\u884C\u5185\u5BB9="${newNextLine}"`);
      editor.replaceRange(
        newNextLine,
        { line: nextLineIndex, ch: 0 },
        { line: nextLineIndex, ch: nextLine.length }
      );
      if (nextLineIndex + 1 <= tableInfo.endLine) {
        const nextNextLine = editor.getLine(nextLineIndex + 1);
        if (nextNextLine) {
          const nextNextCells = nextNextLine.split("|");
          if (colIndex + 1 < nextNextCells.length) {
            const nextNextCellContent = nextNextCells[colIndex + 1].trim();
            console.log(`\u68C0\u67E5\u4E0B\u4E00\u884C\u5355\u5143\u683C\u662F\u5426\u4E3A\u5408\u5E76\u6807\u8BB0: \u5185\u5BB9="${nextNextCellContent}"`);
            if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(nextNextCellContent)) {
              console.log("\u68C0\u6D4B\u5230\u4E0B\u65B9\u6709\u8FDE\u7EED\u5408\u5E76\u5355\u5143\u683C\uFF0C\u7EE7\u7EED\u5408\u5E76");
              await this.mergeCellsDown(editor, tableInfo, rowIndex + 1, colIndex, mergeDistance);
            }
          }
        }
      }
      new import_obsidian7.Notice("\u5DF2\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C");
      return true;
    } catch (error) {
      console.error("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian7.Notice(`\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  }
  /**
   * 显示确认对话框
   * @param message 确认消息
   * @returns 用户是否确认
   */
  async showConfirmDialog(message) {
    return new Promise((resolve) => {
      const notice = new import_obsidian7.Notice(message, 0);
      const buttonContainer = document.createElement("div");
      buttonContainer.style.display = "flex";
      buttonContainer.style.justifyContent = "space-between";
      buttonContainer.style.marginTop = "10px";
      const cancelButton = document.createElement("button");
      cancelButton.textContent = "\u53D6\u6D88";
      cancelButton.onclick = () => {
        notice.hide();
        resolve(false);
      };
      const confirmButton = document.createElement("button");
      confirmButton.textContent = "\u786E\u5B9A";
      confirmButton.style.marginLeft = "10px";
      confirmButton.onclick = () => {
        notice.hide();
        resolve(true);
      };
      buttonContainer.appendChild(cancelButton);
      buttonContainer.appendChild(confirmButton);
      notice.noticeEl.appendChild(buttonContainer);
    });
  }
  /**
   * 显示合并单元格选项对话框
   * @param mainContent 主单元格内容
   * @param targetContent 目标单元格内容
   * @returns 选择的操作：'merge'=合并并保留两个内容, 'replace'=仅使用合并标记, 'cancel'=取消操作
   */
  async showMergeCellOptionsDialog(mainContent, targetContent) {
    return new Promise((resolve) => {
      const notice = new import_obsidian7.Notice("\u5408\u5E76\u5355\u5143\u683C\u9009\u9879", 0);
      const contentContainer = document.createElement("div");
      contentContainer.style.marginBottom = "10px";
      contentContainer.innerHTML = `
                <p>\u76EE\u6807\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9\uFF1A"${targetContent}"</p>
                <p>\u8BF7\u9009\u62E9\u5408\u5E76\u65B9\u5F0F\uFF1A</p>
            `;
      const buttonContainer = document.createElement("div");
      buttonContainer.style.display = "flex";
      buttonContainer.style.flexDirection = "column";
      buttonContainer.style.gap = "5px";
      const mergeButton = document.createElement("button");
      mergeButton.textContent = "\u5408\u5E76\u5E76\u4FDD\u7559\u5185\u5BB9";
      mergeButton.onclick = () => {
        notice.hide();
        resolve("merge");
      };
      const replaceButton = document.createElement("button");
      replaceButton.textContent = "\u4EC5\u4F7F\u7528\u5408\u5E76\u6807\u8BB0";
      replaceButton.onclick = () => {
        notice.hide();
        resolve("replace");
      };
      const cancelButton = document.createElement("button");
      cancelButton.textContent = "\u53D6\u6D88";
      cancelButton.onclick = () => {
        notice.hide();
        resolve("cancel");
      };
      buttonContainer.appendChild(mergeButton);
      buttonContainer.appendChild(replaceButton);
      buttonContainer.appendChild(cancelButton);
      notice.noticeEl.appendChild(contentContainer);
      notice.noticeEl.appendChild(buttonContainer);
    });
  }
  /**
   * 检测并修复表格合并标记
   * @returns 是否进行了修复
   */
  async detectAndFixMergeMarkers() {
    try {
      const editor = this.getActiveEditor();
      if (!editor) {
        new import_obsidian7.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return false;
      }
      const tableInfo = this.locateTableInMarkdown(editor);
      if (!tableInfo) {
        new import_obsidian7.Notice("\u672A\u627E\u5230\u8868\u683C\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return false;
      }
      let hasFixedMarkers = false;
      for (let i = tableInfo.startLine; i <= tableInfo.endLine; i++) {
        const line = editor.getLine(i);
        if (!line)
          continue;
        const cells = line.split("|");
        let hasChanges = false;
        for (let j = 1; j < cells.length - 1; j++) {
          const cell = cells[j];
          const trimmedCell = cell.trim();
          if (trimmedCell === "\\<" || trimmedCell === "<") {
            cells[j] = " < ";
            hasChanges = true;
          } else if (trimmedCell === "\\^" || trimmedCell === "^") {
            cells[j] = " ^ ";
            hasChanges = true;
          }
        }
        if (hasChanges) {
          const updatedLine = cells.join("|");
          editor.replaceRange(
            updatedLine,
            { line: i, ch: 0 },
            { line: i, ch: line.length }
          );
          hasFixedMarkers = true;
        }
      }
      if (hasFixedMarkers) {
        new import_obsidian7.Notice("\u5DF2\u7EDF\u4E00\u8868\u683C\u5408\u5E76\u6807\u8BB0\u683C\u5F0F");
      } else {
        new import_obsidian7.Notice("\u672A\u53D1\u73B0\u9700\u8981\u4FEE\u590D\u7684\u5408\u5E76\u6807\u8BB0");
      }
      return hasFixedMarkers;
    } catch (error) {
      console.error("\u68C0\u6D4B\u548C\u4FEE\u590D\u8868\u683C\u5408\u5E76\u6807\u8BB0\u65F6\u51FA\u9519:", error);
      return false;
    }
  }
  /**
   * 拆分合并的单元格
   * @returns 是否成功
   */
  async splitMergedCells() {
    try {
      const editor = this.getActiveEditor();
      if (!editor) {
        new import_obsidian7.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return false;
      }
      const cellPosition = this.getCellPosition(editor);
      if (!cellPosition) {
        new import_obsidian7.Notice("\u672A\u627E\u5230\u8868\u683C\u6216\u65E0\u6CD5\u786E\u5B9A\u5355\u5143\u683C\u4F4D\u7F6E\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return false;
      }
      const { tableInfo, rowIndex, colIndex } = cellPosition;
      const lineIndex = tableInfo.startLine + rowIndex;
      console.log(`\u5C1D\u8BD5\u62C6\u5206\u5355\u5143\u683C: \u884C=${rowIndex}, \u5217=${colIndex}, \u8868\u683C\u8303\u56F4=${tableInfo.startLine}-${tableInfo.endLine}`);
      const line = editor.getLine(lineIndex);
      if (!line)
        return false;
      let hasSplitCells = false;
      if (colIndex + 1 < line.split("|").length - 1) {
        const cells = line.split("|");
        const rightCell = cells[colIndex + 2];
        const rightCellTrimmed = rightCell.trim();
        console.log(`\u53F3\u4FA7\u5355\u5143\u683C\u5185\u5BB9: "${rightCellTrimmed}"`);
        if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(rightCellTrimmed)) {
          cells[colIndex + 2] = "  ";
          editor.replaceRange(
            cells.join("|"),
            { line: lineIndex, ch: 0 },
            { line: lineIndex, ch: line.length }
          );
          console.log("\u5DF2\u62C6\u5206\u53F3\u4FA7\u5408\u5E76\u5355\u5143\u683C");
          hasSplitCells = true;
        }
      }
      if (lineIndex < tableInfo.endLine) {
        const belowLine = editor.getLine(lineIndex + 1);
        if (belowLine) {
          const belowCells = belowLine.split("|");
          if (colIndex + 1 < belowCells.length) {
            const belowCell = belowCells[colIndex + 1];
            const belowCellTrimmed = belowCell.trim();
            console.log(`\u4E0B\u65B9\u5355\u5143\u683C\u5185\u5BB9: "${belowCellTrimmed}"`);
            if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(belowCellTrimmed)) {
              belowCells[colIndex + 1] = "  ";
              editor.replaceRange(
                belowCells.join("|"),
                { line: lineIndex + 1, ch: 0 },
                { line: lineIndex + 1, ch: belowLine.length }
              );
              console.log("\u5DF2\u62C6\u5206\u4E0B\u65B9\u5408\u5E76\u5355\u5143\u683C");
              hasSplitCells = true;
            }
          }
        }
      }
      const recursiveSplit = await this.recursiveSplitMergedCells(editor, tableInfo, rowIndex, colIndex);
      if (recursiveSplit) {
        hasSplitCells = true;
      }
      if (hasSplitCells) {
        new import_obsidian7.Notice("\u5DF2\u6210\u529F\u62C6\u5206\u5408\u5E76\u5355\u5143\u683C");
        return true;
      } else {
        new import_obsidian7.Notice("\u672A\u627E\u5230\u53EF\u62C6\u5206\u7684\u5408\u5E76\u5355\u5143\u683C\uFF0C\u8BF7\u786E\u4FDD\u5149\u6807\u4F4D\u4E8E\u5408\u5E76\u5355\u5143\u683C\u5185");
        return false;
      }
    } catch (error) {
      console.error("\u62C6\u5206\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian7.Notice(`\u62C6\u5206\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  }
  /**
   * 递归拆分合并单元格
   * 查找与当前单元格相关的所有合并单元格并拆分它们
   * @param editor 编辑器实例
   * @param tableInfo 表格信息
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @returns 是否进行了拆分
   */
  async recursiveSplitMergedCells(editor, tableInfo, rowIndex, colIndex) {
    let hasSplitCells = false;
    const maxSearchDepth = 10;
    for (let col = colIndex + 1; col < colIndex + maxSearchDepth; col++) {
      const lineIndex = tableInfo.startLine + rowIndex;
      const line = editor.getLine(lineIndex);
      if (!line)
        break;
      const cells = line.split("|");
      if (col + 1 >= cells.length)
        break;
      const cellContent = cells[col + 1].trim();
      if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(cellContent)) {
        cells[col + 1] = "  ";
        editor.replaceRange(
          cells.join("|"),
          { line: lineIndex, ch: 0 },
          { line: lineIndex, ch: line.length }
        );
        hasSplitCells = true;
        console.log(`\u5DF2\u62C6\u5206\u4F4D\u4E8E (${rowIndex}, ${col}) \u7684\u6C34\u5E73\u5408\u5E76\u5355\u5143\u683C`);
      } else {
        break;
      }
    }
    for (let row = rowIndex + 1; row < rowIndex + maxSearchDepth && row + tableInfo.startLine <= tableInfo.endLine; row++) {
      const lineIndex = tableInfo.startLine + row;
      const line = editor.getLine(lineIndex);
      if (!line)
        break;
      const cells = line.split("|");
      if (colIndex + 1 >= cells.length)
        break;
      const cellContent = cells[colIndex + 1].trim();
      if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(cellContent)) {
        cells[colIndex + 1] = "  ";
        editor.replaceRange(
          cells.join("|"),
          { line: lineIndex, ch: 0 },
          { line: lineIndex, ch: line.length }
        );
        hasSplitCells = true;
        console.log(`\u5DF2\u62C6\u5206\u4F4D\u4E8E (${row}, ${colIndex}) \u7684\u5782\u76F4\u5408\u5E76\u5355\u5143\u683C`);
      } else {
        break;
      }
    }
    return hasSplitCells;
  }
  /**
   * 获取当前光标所在表格的ID
   * @returns 表格ID或null
   */
  async getCurrentTableId() {
    try {
      const editor = this.getActiveEditor();
      if (!editor) {
        console.warn("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return null;
      }
      const tableInfo = this.locateTableInMarkdown(editor);
      if (!tableInfo) {
        console.warn("\u672A\u627E\u5230\u8868\u683C\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return null;
      }
      let tableId = tableInfo.tableId;
      if (!tableId) {
        console.log("\u5728tableInfo\u4E2D\u672A\u627E\u5230ID\uFF0C\u5C1D\u8BD5\u4F7F\u7528checkExistingTableId\u67E5\u627E");
        tableId = this.checkExistingTableId(editor, tableInfo.startLine) || void 0;
      }
      if (tableId) {
        console.log(`\u627E\u5230\u8868\u683CID: ${tableId}`);
        return tableId;
      }
      console.warn("\u672A\u627E\u5230\u8868\u683CID");
      return null;
    } catch (error) {
      console.error("\u83B7\u53D6\u5F53\u524D\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
};

// src/icons.ts
var import_obsidian8 = require("obsidian");
function loadIcons() {
  (0, import_obsidian8.addIcon)("align-left", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M25,30 L75,30 M25,50 L60,50 M25,70 L70,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("align-center", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M25,30 L75,30 M35,50 L65,50 M30,70 L70,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("align-right", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M25,30 L75,30 M40,50 L75,50 M30,70 L75,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("align-top", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M30,25 L30,75 M50,25 L50,60 M70,25 L70,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("align-middle", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M30,25 L30,75 M50,35 L50,65 M70,30 L70,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("align-bottom", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M30,25 L30,75 M50,40 L50,75 M70,30 L70,75" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("align-all", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="20" width="60" height="60" fill="none" stroke="currentColor" stroke-width="3"/>
        <circle cx="50" cy="50" r="15" fill="none" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("merge-cells", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="10" y="10" width="30" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="60" y="10" width="30" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="10" y="60" width="30" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="60" y="60" width="30" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M50,45 L50,55 M45,50 L55,50" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("merge-right", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="30" width="30" height="40" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="55" y="30" width="30" height="40" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M45,50 L55,50 M50,45 L55,50 L50,55" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("merge-down", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="30" y="15" width="40" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="30" y="55" width="40" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M50,45 L50,55 M45,50 L50,55 L55,50" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("split", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="20" width="60" height="60" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M50,20 L50,80 M20,50 L80,50" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("table-id", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="30" width="60" height="50" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M20,30 L80,30" stroke="currentColor" stroke-width="5"/>
        <rect x="35" y="15" width="30" height="15" fill="none" stroke="currentColor" stroke-width="2"/>
        <path d="M45,45 L45,65 M55,45 L55,65 M45,55 L55,55" stroke="currentColor" stroke-width="2"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("table-row-add", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="20" width="60" height="60" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M20,50 L80,50" stroke="currentColor" stroke-width="3"/>
        <circle cx="85" cy="50" r="10" fill="none" stroke="currentColor" stroke-width="2"/>
        <path d="M85,45 L85,55 M80,50 L90,50" stroke="currentColor" stroke-width="2"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("table-style", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="20" width="60" height="60" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M20,40 L80,40 M20,60 L80,60 M40,20 L40,80 M60,20 L60,80" stroke="currentColor" stroke-width="2"/>
        <path d="M65,25 L75,35 M65,35 L75,25" stroke="currentColor" stroke-width="2"/>
        <path d="M25,45 L35,55 M35,45 L25,55" stroke="currentColor" stroke-width="2"/>
        <circle cx="50" cy="50" r="5" fill="currentColor"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("table-toolbar-toggle", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M15,35 L85,35 M15,65 L85,65" stroke="currentColor" stroke-width="2"/>
        <path d="M35,15 L35,85 M65,15 L65,85" stroke="currentColor" stroke-width="2"/>
        <rect x="40" y="5" width="20" height="10" fill="currentColor"/>
        <rect x="40" y="85" width="20" height="10" fill="currentColor"/>
        <rect x="5" y="40" width="10" height="20" fill="currentColor"/>
        <rect x="85" y="40" width="10" height="20" fill="currentColor"/>
    </svg>`);
  (0, import_obsidian8.addIcon)("table-edit-mode", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="25" width="70" height="50" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M15,45 L85,45" stroke="currentColor" stroke-width="2"/>
        <path d="M35,25 L35,75" stroke="currentColor" stroke-width="2"/>
        <path d="M55,25 L55,75" stroke="currentColor" stroke-width="2"/>
        <path d="M75,10 L90,25 L80,35 L65,20 Z" fill="none" stroke="currentColor" stroke-width="2"/>
        <path d="M65,20 L80,35" stroke="currentColor" stroke-width="2"/>
    </svg>`);
}

// src/tableStyleRenderer.ts
var import_obsidian9 = require("obsidian");
var TableStyleRenderer = class extends import_obsidian9.MarkdownRenderChild {
  /**
   * 构造函数
   * @param el 表格元素
   * @param tableId 表格ID
   * @param styling 样式数据
   * @param plugin 插件实例
   */
  constructor(el, tableId, styling, plugin) {
    super(el);
    this.tableId = tableId;
    this.styling = styling;
    this.plugin = plugin;
  }
  /**
   * 辅助方法，获取app对象
   */
  getApp() {
    return this.plugin.app;
  }
  /**
   * 加载时应用样式
   */
  onload() {
    console.log(`\u8868\u683C\u6837\u5F0F\u6E32\u67D3\u5668\u52A0\u8F7D: \u8868\u683CID=${this.tableId}`);
    this.applyStyles();
    this.containerEl.classList.add(`table-${this.tableId}`);
    this.containerEl.setAttribute("data-table-styles-applied", "true");
  }
  /**
   * 应用所有样式
   */
  applyStyles() {
    if (!this.styling)
      return;
    if (this.styling.alignment && Array.isArray(this.styling.alignment)) {
      this.applyColumnAlignment(this.styling.alignment);
    }
    if (this.styling.cellStyles && Array.isArray(this.styling.cellStyles)) {
      this.applyCellStyles(this.styling.cellStyles);
    }
    if (this.styling.rowHeights && Array.isArray(this.styling.rowHeights)) {
      this.applyRowHeights(this.styling.rowHeights);
    }
    if (this.styling.colWidths && Array.isArray(this.styling.colWidths)) {
      this.applyColumnWidths(this.styling.colWidths);
    }
  }
  /**
   * 应用列对齐样式
   * @param alignments 列对齐数据
   */
  applyColumnAlignment(alignments) {
    const rows = this.containerEl.querySelectorAll("tr");
    rows.forEach((row) => {
      const cells = row.querySelectorAll("td, th");
      cells.forEach((cell, colIndex) => {
        if (alignments[colIndex]) {
          cell.style.textAlign = alignments[colIndex];
        }
      });
    });
  }
  /**
   * 应用单元格样式
   * @param cellStyles 单元格样式数据
   */
  applyCellStyles(cellStyles) {
    cellStyles.forEach((style) => {
      if (typeof style.row !== "number" || typeof style.col !== "number") {
        return;
      }
      const cell = this.findCell(style.row, style.col);
      if (!cell)
        return;
      if (style.textAlign)
        cell.style.textAlign = style.textAlign;
      if (style.verticalAlign)
        cell.style.verticalAlign = style.verticalAlign;
      if (style.backgroundColor)
        cell.style.backgroundColor = style.backgroundColor;
      if (style.color)
        cell.style.color = style.color;
      if (style.fontWeight)
        cell.style.fontWeight = style.fontWeight;
      if (style.fontStyle)
        cell.style.fontStyle = style.fontStyle;
    });
  }
  /**
   * 应用行高
   * @param heights 行高数据
   */
  applyRowHeights(heights) {
    console.log(`\u5E94\u7528\u884C\u9AD8: ${JSON.stringify(heights)}`);
    const rows = this.containerEl.querySelectorAll("tr");
    rows.forEach((row, rowIndex) => {
      if (rowIndex < heights.length && heights[rowIndex] && heights[rowIndex] !== "auto") {
        row.style.height = heights[rowIndex];
        console.log(`\u8BBE\u7F6E\u7B2C${rowIndex + 1}\u884C\u9AD8\u5EA6: ${heights[rowIndex]}`);
      }
    });
  }
  /**
   * 应用列宽
   * @param widths 列宽数据
   */
  applyColumnWidths(widths) {
    console.log(`\u5E94\u7528\u5217\u5BBD: ${JSON.stringify(widths)}`);
    let colgroup = this.containerEl.querySelector("colgroup");
    if (!colgroup) {
      colgroup = document.createElement("colgroup");
      this.containerEl.prepend(colgroup);
    } else {
      colgroup.innerHTML = "";
    }
    widths.forEach((width, index) => {
      const col = document.createElement("col");
      if (width && width !== "auto") {
        col.style.width = width;
        console.log(`\u8BBE\u7F6E\u7B2C${index + 1}\u5217\u5BBD\u5EA6: ${width}`);
      }
      if (colgroup) {
        colgroup.appendChild(col);
      }
    });
  }
  /**
   * 查找特定位置的单元格
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @returns 单元格元素或null
   */
  findCell(rowIndex, colIndex) {
    const rows = this.containerEl.querySelectorAll("tr");
    if (!rows || rows.length <= rowIndex)
      return null;
    const cells = rows[rowIndex].querySelectorAll("td, th");
    if (!cells || cells.length <= colIndex)
      return null;
    return cells[colIndex];
  }
  /**
   * 卸载时的清理工作
   */
  onunload() {
    console.log(`\u8868\u683C ${this.tableId} \u7684\u6837\u5F0F\u6E32\u67D3\u5668\u5DF2\u5378\u8F7D`);
  }
  /**
   * 应用表格样式
   */
  async applyTableStyles(tableElement, tableId) {
    var _a;
    try {
      if (tableElement.getAttribute("data-table-styles-applied") === "true") {
        return;
      }
      const data = await this.plugin.loadData();
      const tableData = (_a = data == null ? void 0 : data.tables) == null ? void 0 : _a[tableId];
      if (!tableData || !tableData.styling) {
        console.log(`\u6CA1\u6709\u627E\u5230\u5339\u914D\u7684\u8868\u683C\u6837\u5F0F\u6570\u636E\uFF1A${tableId}`);
        return;
      }
      console.log(`\u5E94\u7528\u8868\u683C\u6837\u5F0F - ID=${tableId}`, tableData.styling);
      if (tableData.styling.rowHeights && tableData.styling.rowHeights.length > 0) {
        const rows = tableElement.querySelectorAll("tr");
        tableData.styling.rowHeights.forEach((height, index) => {
          if (index < rows.length && height && height !== "auto") {
            rows[index].style.height = height;
            console.log(`\u5E94\u7528\u884C\u9AD8 - \u7D22\u5F15=${index}, \u9AD8\u5EA6=${height}`);
          }
        });
      }
      if (tableData.styling.colWidths && tableData.styling.colWidths.length > 0) {
        let colgroup = tableElement.querySelector("colgroup");
        if (!colgroup) {
          colgroup = document.createElement("colgroup");
          tableElement.insertBefore(colgroup, tableElement.firstChild);
        } else {
          colgroup.innerHTML = "";
        }
        tableData.styling.colWidths.forEach((width, index) => {
          const col = document.createElement("col");
          if (width && width !== "auto") {
            col.style.width = width;
            console.log(`\u5E94\u7528\u5217\u5BBD - \u7D22\u5F15=${index}, \u5BBD\u5EA6=${width}`);
          }
          if (colgroup) {
            colgroup.appendChild(col);
          }
        });
      }
      if (tableData.styling.alignment && tableData.styling.alignment.length > 0) {
        const rows = tableElement.querySelectorAll("tr");
        rows.forEach((row) => {
          const cells = row.querySelectorAll("th, td");
          cells.forEach((cell, cellIndex) => {
            if (cellIndex < tableData.styling.alignment.length) {
              const alignment = tableData.styling.alignment[cellIndex];
              if (alignment) {
                cell.style.textAlign = alignment;
              }
            }
          });
        });
      }
      if (tableData.styling.cellStyles && tableData.styling.cellStyles.length > 0) {
        tableData.styling.cellStyles.forEach((cellStyle) => {
          if (cellStyle.row !== void 0 && cellStyle.col !== void 0) {
            const rows = tableElement.querySelectorAll("tr");
            if (cellStyle.row < rows.length) {
              const row = rows[cellStyle.row];
              const cells = row.querySelectorAll("th, td");
              if (cellStyle.col < cells.length) {
                const cell = cells[cellStyle.col];
                if (cellStyle.backgroundColor) {
                  cell.style.backgroundColor = cellStyle.backgroundColor;
                }
                if (cellStyle.textColor) {
                  cell.style.color = cellStyle.textColor;
                }
                if (cellStyle.fontWeight) {
                  cell.style.fontWeight = cellStyle.fontWeight;
                }
                if (cellStyle.fontStyle) {
                  cell.style.fontStyle = cellStyle.fontStyle;
                }
              }
            }
          }
        });
      }
      tableElement.setAttribute("data-table-styles-applied", "true");
      tableElement.classList.add(`table-${tableId}`);
      console.log(`\u8868\u683C\u6837\u5F0F\u5E94\u7528\u5B8C\u6210 - ID=${tableId}`);
    } catch (error) {
      console.error("\u5E94\u7528\u8868\u683C\u6837\u5F0F\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 应用预览模式下的表格样式
   */
  async applyPreviewModeStyles(containerEl) {
    try {
      console.log("\u9884\u89C8\u6A21\u5F0F\u6FC0\u6D3B\uFF0C\u5F00\u59CB\u5E94\u7528\u4FDD\u5B58\u7684\u8868\u683C\u6837\u5F0F");
      const tables = containerEl.querySelectorAll("table");
      console.log(`\u627E\u5230 ${tables.length} \u4E2A\u8868\u683C\u9700\u8981\u5E94\u7528\u6837\u5F0F`);
      if (!tables.length)
        return;
      const activeFile = this.getApp().workspace.getActiveFile();
      if (!activeFile) {
        console.log("\u672A\u627E\u5230\u6D3B\u52A8\u6587\u4EF6");
        return;
      }
      const content = await this.getApp().vault.read(activeFile);
      const tableInfos = this.plugin.tableIdManager.extractTableIdsFromMarkdown(content);
      console.log(`\u4ECE\u6587\u4EF6\u4E2D\u63D0\u53D6\u7684\u8868\u683C\u4FE1\u606F: ${tableInfos.length} \u4E2A\u8868\u683CID`);
      for (let index = 0; index < tables.length; index++) {
        const tableElement = tables[index];
        let tableId = tableElement.getAttribute("data-table-id");
        if (!tableId) {
          tableId = this.plugin.tableIdManager.getTableIdFromComment(tableElement);
          if (!tableId && index < tableInfos.length && tables.length === tableInfos.length) {
            tableId = tableInfos[index].id;
            if (tableId) {
              console.log(`\u901A\u8FC7\u4F4D\u7F6E\u5339\u914D\u627E\u5230\u8868\u683CID: ${tableId}`);
              tableElement.setAttribute("data-table-id", tableId);
            }
          }
          if (!tableId) {
            const tableFeature = this.plugin.tableIdManager.extractTableFeature(tableElement);
            let bestMatchId = "";
            let bestMatchScore = 0;
            for (const info of tableInfos) {
              const { id, feature } = info;
              if (!id)
                continue;
              const score = this.plugin.tableIdManager.calculateFeatureSimilarity(tableFeature, feature);
              console.log(`\u8868\u683CID ${id} \u7684\u7279\u5F81\u76F8\u4F3C\u5EA6: ${score.toFixed(2)}`);
              if (score > bestMatchScore) {
                bestMatchScore = score;
                bestMatchId = id;
              }
            }
            if (bestMatchId && bestMatchScore > 0.7) {
              console.log(`\u901A\u8FC7\u7279\u5F81\u76F8\u4F3C\u5EA6\u5339\u914D\u627E\u5230\u8868\u683CID: ${bestMatchId}\uFF08\u76F8\u4F3C\u5EA6: ${bestMatchScore.toFixed(2)}\uFF09`);
              tableId = bestMatchId;
              tableElement.setAttribute("data-table-id", tableId);
            }
          }
        }
        if (tableId) {
          console.log(`\u4E3A\u8868\u683C\u5E94\u7528\u6837\u5F0F - \u7D22\u5F15=${index}, ID=${tableId}`);
          await this.applyTableStyles(tableElement, tableId);
        } else {
          console.log(`\u65E0\u6CD5\u4E3A\u8868\u683C\u5E94\u7528\u6837\u5F0F - \u7D22\u5F15=${index}, \u672A\u627E\u5230ID`);
        }
      }
    } catch (error) {
      console.error("\u5E94\u7528\u9884\u89C8\u6A21\u5F0F\u8868\u683C\u6837\u5F0F\u65F6\u51FA\u9519:", error);
    }
  }
};
async function renderTablesWithStoredStyles(plugin) {
  var _a;
  function getApp() {
    return plugin.app;
  }
  try {
    console.log("\u5F00\u59CB\u6E32\u67D3\u8868\u683C\u6837\u5F0F");
    const activeView = getApp().workspace.getActiveViewOfType(import_obsidian9.MarkdownView);
    if (!activeView) {
      console.log("\u672A\u627E\u5230\u6D3B\u52A8\u89C6\u56FE\uFF0C\u65E0\u6CD5\u6E32\u67D3\u8868\u683C\u6837\u5F0F");
      return;
    }
    const activeFile = activeView.file;
    if (!activeFile) {
      console.log("\u672A\u627E\u5230\u6D3B\u52A8\u6587\u4EF6\uFF0C\u65E0\u6CD5\u6E32\u67D3\u8868\u683C\u6837\u5F0F");
      return;
    }
    const filePath = activeFile.path;
    console.log(`\u5F53\u524D\u6587\u4EF6\u8DEF\u5F84: ${filePath}`);
    let tables = {};
    if (plugin.tableDataExtractor) {
      tables = await plugin.tableDataExtractor.extractTableDataFromFile(activeFile);
      console.log(`\u4ECEMarkdown\u6587\u4EF6\u4E2D\u63D0\u53D6\u5230 ${Object.keys(tables).length} \u4E2A\u8868\u683C\u6570\u636E`);
    }
    if (Object.keys(tables).length === 0) {
      console.log("\u4ECEMarkdown\u6587\u4EF6\u4E2D\u672A\u63D0\u53D6\u5230\u8868\u683C\u6570\u636E\uFF0C\u5C1D\u8BD5\u4ECEdata.json\u83B7\u53D6");
      const pluginData = await plugin.loadData() || {};
      tables = pluginData.tables || {};
      if (!tables || Object.keys(tables).length === 0) {
        console.log("\u6CA1\u6709\u5B58\u50A8\u7684\u8868\u683C\u6570\u636E");
        return;
      }
    }
    const allTables = document.querySelectorAll("table");
    if (!allTables.length) {
      console.log("\u5F53\u524D\u6587\u4EF6\u4E2D\u6CA1\u6709\u8868\u683C");
      return;
    }
    console.log(`\u5F53\u524D\u6587\u4EF6\u4E2D\u6709 ${allTables.length} \u4E2A\u8868\u683C`);
    const renderQueue = [];
    const fileContent = await plugin.app.vault.read(activeFile);
    const tableInfos = plugin.tableIdManager.extractTableIdsFromMarkdown(fileContent);
    console.log(`\u4ECE\u6587\u4EF6\u5185\u5BB9\u4E2D\u63D0\u53D6\u5230 ${tableInfos.length} \u4E2A\u8868\u683C\u4FE1\u606F`);
    for (let i = 0; i < allTables.length; i++) {
      const table = allTables[i];
      let tableId = table.getAttribute("data-table-id");
      if (!tableId && i < tableInfos.length && allTables.length === tableInfos.length) {
        tableId = tableInfos[i].id;
        if (tableId) {
          console.log(`\u901A\u8FC7\u4F4D\u7F6E\u5339\u914D\u627E\u5230\u8868\u683CID: ${tableId}`);
          table.setAttribute("data-table-id", tableId);
        }
      }
      if (!tableId) {
        const tableFeature = plugin.tableIdManager.extractTableFeature(table);
        let bestMatchId = "";
        let bestMatchScore = 0;
        let matchedIndex = -1;
        for (let j = 0; j < tableInfos.length; j++) {
          const { id, feature } = tableInfos[j];
          if (!id)
            continue;
          const score = plugin.tableIdManager.calculateFeatureSimilarity(tableFeature, feature);
          console.log(`\u8868\u683CID ${id} \u7684\u7279\u5F81\u76F8\u4F3C\u5EA6: ${score.toFixed(2)}`);
          if (score > bestMatchScore) {
            bestMatchScore = score;
            bestMatchId = id;
            matchedIndex = j;
          }
        }
        if (bestMatchId && bestMatchScore > 0.7) {
          console.log(`\u901A\u8FC7\u7279\u5F81\u76F8\u4F3C\u5EA6\u5339\u914D\u627E\u5230\u8868\u683CID: ${bestMatchId}\uFF08\u76F8\u4F3C\u5EA6: ${bestMatchScore.toFixed(2)}\uFF09`);
          tableId = bestMatchId;
          table.setAttribute("data-table-id", tableId);
          if (matchedIndex >= 0) {
            tableInfos.splice(matchedIndex, 1);
          }
        }
      }
      if (tableId && tables[tableId]) {
        const tableData = tables[tableId];
        const isInCurrentFile = (_a = tableData.locations) == null ? void 0 : _a.some((loc) => loc.path === filePath);
        if (isInCurrentFile) {
          console.log(`\u4E3A\u8868\u683C ${tableId} \u6DFB\u52A0\u6E32\u67D3\u4EFB\u52A1`);
          renderQueue.push({
            table,
            tableId,
            tableData
          });
        }
      }
    }
    if (renderQueue.length > 0) {
      console.log(`\u5F00\u59CB\u5904\u7406 ${renderQueue.length} \u4E2A\u8868\u683C\u6E32\u67D3\u4EFB\u52A1`);
      await processRenderQueue(renderQueue, plugin);
    } else {
      console.log("\u6CA1\u6709\u9700\u8981\u6E32\u67D3\u7684\u8868\u683C");
    }
  } catch (error) {
    console.error("\u6E32\u67D3\u8868\u683C\u6837\u5F0F\u65F6\u51FA\u9519:", error);
  }
}
async function processRenderQueue(queue, plugin) {
  const batchSize = 3;
  let processedCount = 0;
  let successCount = 0;
  console.log(`\u5F00\u59CB\u5904\u7406\u6E32\u67D3\u961F\u5217\uFF0C\u5171 ${queue.length} \u4E2A\u8868\u683C`);
  const processBatch = async () => {
    try {
      const endIndex = Math.min(processedCount + batchSize, queue.length);
      for (let i = processedCount; i < endIndex; i++) {
        const { table, tableId, tableData } = queue[i];
        console.log(`\u5904\u7406\u961F\u5217\u4E2D\u7684\u8868\u683C ${i + 1}/${queue.length} - ID=${tableId}`);
        try {
          const success = await renderTableWithStyles(table, tableId, tableData, plugin);
          if (success) {
            successCount++;
          }
        } catch (error) {
          console.error(`\u5904\u7406\u8868\u683C ${tableId} \u65F6\u51FA\u9519:`, error);
        }
      }
      processedCount = endIndex;
      if (processedCount < queue.length) {
        return new Promise((resolve) => {
          window.requestAnimationFrame(() => {
            processBatch().then(resolve);
          });
        });
      }
    } catch (error) {
      console.error("\u5904\u7406\u8868\u683C\u6279\u6B21\u65F6\u51FA\u9519:", error);
    }
  };
  await processBatch();
  console.log(`\u5B8C\u6210\u4E86 ${processedCount} \u4E2A\u8868\u683C\u7684\u5904\u7406\uFF0C\u6210\u529F\u5E94\u7528\u6837\u5F0F: ${successCount}`);
}
async function renderTableWithStyles(table, tableId, tableData, plugin) {
  try {
    console.log(`\u5F00\u59CB\u4E3A\u8868\u683C ${tableId} \u5E94\u7528\u6837\u5F0F`);
    if (table.getAttribute("data-table-styles-applied") === "true") {
      console.log(`\u8868\u683C ${tableId} \u5DF2\u7ECF\u5E94\u7528\u4E86\u6837\u5F0F\uFF0C\u8DF3\u8FC7`);
      return true;
    }
    if (!tableData.styling) {
      console.log(`\u8868\u683C ${tableId} \u6CA1\u6709\u6709\u6548\u7684\u6837\u5F0F\u6570\u636E`);
      return false;
    }
    const ctx = getContextForTable(table, plugin);
    if (ctx) {
      try {
        ctx.addChild(new TableStyleRenderer(table, tableId, tableData.styling, plugin));
        console.log(`\u8868\u683C ${tableId} \u5DF2\u4F7F\u7528RenderChild\u5E94\u7528\u6837\u5F0F`);
      } catch (error) {
        console.error(`\u4F7F\u7528RenderChild\u5E94\u7528\u6837\u5F0F\u65F6\u51FA\u9519:`, error);
        applyStylesDirectly(table, tableData.styling);
        console.log(`\u8868\u683C ${tableId} \u56DE\u9000\u5230\u76F4\u63A5\u5E94\u7528\u6837\u5F0F`);
      }
    } else {
      applyStylesDirectly(table, tableData.styling);
      console.log(`\u8868\u683C ${tableId} \u5DF2\u76F4\u63A5\u5E94\u7528\u6837\u5F0F`);
    }
    table.setAttribute("data-table-styles-applied", "true");
    if (!table.classList.contains(`table-${tableId}`)) {
      table.classList.add(`table-${tableId}`);
    }
    console.log(`\u8868\u683C ${tableId} \u6837\u5F0F\u5E94\u7528\u5B8C\u6210`);
    return true;
  } catch (error) {
    console.error(`\u4E3A\u8868\u683C ${tableId} \u5E94\u7528\u6837\u5F0F\u65F6\u51FA\u9519:`, error);
    return false;
  }
}
function getContextForTable(table, plugin) {
  var _a, _b, _c;
  const activeView = plugin.app.workspace.getActiveViewOfType(import_obsidian9.MarkdownView);
  if (!activeView || activeView.getMode() !== "preview")
    return null;
  try {
    const sectionEl = table.closest("[data-section-id]");
    if (sectionEl) {
      const sectionId = sectionEl.getAttribute("data-section-id");
      if (sectionId && activeView.previewMode) {
        const sections = (_a = activeView.previewMode.renderer) == null ? void 0 : _a.sections;
        if (sections && sections[sectionId]) {
          return sections[sectionId];
        }
      }
    }
    if (activeView.previewMode) {
      const sectionInfo = (_c = (_b = activeView.previewMode.renderer) == null ? void 0 : _b.getSectionInfo) == null ? void 0 : _c.call(_b, table);
      if (sectionInfo && sectionInfo.section) {
        return sectionInfo.section;
      }
    }
    return null;
  } catch (e) {
    console.warn("\u83B7\u53D6\u8868\u683C\u6E32\u67D3\u4E0A\u4E0B\u6587\u5931\u8D25:", e);
    return null;
  }
}
function applyStylesDirectly(table, styling) {
  if (!styling)
    return;
  if (styling.rowHeights && Array.isArray(styling.rowHeights)) {
    const rows = table.querySelectorAll("tr");
    styling.rowHeights.forEach((height, index) => {
      if (index < rows.length && height && height !== "auto") {
        rows[index].style.height = height;
        console.log(`\u76F4\u63A5\u5E94\u7528\u884C\u9AD8 - \u7D22\u5F15=${index}, \u9AD8\u5EA6=${height}`);
      }
    });
  }
  if (styling.colWidths && Array.isArray(styling.colWidths)) {
    let colgroup = table.querySelector("colgroup");
    if (!colgroup) {
      colgroup = document.createElement("colgroup");
      table.insertBefore(colgroup, table.firstChild);
    } else {
      colgroup.innerHTML = "";
    }
    styling.colWidths.forEach((width, index) => {
      const col = document.createElement("col");
      if (width && width !== "auto") {
        col.style.width = width;
        console.log(`\u76F4\u63A5\u5E94\u7528\u5217\u5BBD - \u7D22\u5F15=${index}, \u5BBD\u5EA6=${width}`);
      }
      if (colgroup) {
        colgroup.appendChild(col);
      }
    });
  }
  if (styling.alignment && Array.isArray(styling.alignment)) {
    const rows = table.querySelectorAll("tr");
    rows.forEach((row) => {
      const cells = row.querySelectorAll("td, th");
      cells.forEach((cell, colIndex) => {
        if (styling.alignment[colIndex]) {
          cell.style.textAlign = styling.alignment[colIndex];
        }
      });
    });
  }
  if (styling.cellStyles && Array.isArray(styling.cellStyles)) {
    styling.cellStyles.forEach((style) => {
      if (typeof style.row !== "number" || typeof style.col !== "number") {
        return;
      }
      const rows = table.querySelectorAll("tr");
      if (!rows || rows.length <= style.row)
        return;
      const cells = rows[style.row].querySelectorAll("td, th");
      if (!cells || cells.length <= style.col)
        return;
      const cell = cells[style.col];
      if (style.textAlign)
        cell.style.textAlign = style.textAlign;
      if (style.verticalAlign)
        cell.style.verticalAlign = style.verticalAlign;
      if (style.backgroundColor)
        cell.style.backgroundColor = style.backgroundColor;
      if (style.color)
        cell.style.color = style.color;
      if (style.fontWeight)
        cell.style.fontWeight = style.fontWeight;
      if (style.fontStyle)
        cell.style.fontStyle = style.fontStyle;
    });
  }
  const tableId = table.getAttribute("data-table-id");
  if (tableId) {
    table.classList.add(`table-${tableId}`);
  }
}

// src/setupPreviewModeTableSelection.ts
function findMergeMarkers(table) {
  var _a;
  const cells = table.querySelectorAll("td, th");
  for (const cell of Array.from(cells)) {
    const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
    if (content === "^" || content === "<") {
      return true;
    }
  }
  return false;
}
function setupPreviewModeTableSelection(plugin) {
  try {
    plugin.currentEditingTable = null;
    const tables = document.querySelectorAll("table");
    if (!tables.length)
      return;
    console.log(`\u9884\u89C8\u6A21\u5F0F\u4E0B\u627E\u5230 ${tables.length} \u4E2A\u8868\u683C`);
    tables.forEach((table, index) => {
      table.removeEventListener("click", plugin.handleTableClick);
      table.addEventListener("click", plugin.handleTableClick);
      plugin.tableDetector.setupTableIndices(table);
      table.setAttribute("data-table-index", index.toString());
      const tableFeature = plugin.tableIdManager.extractTableFeature(table);
      if (tableFeature) {
        table.setAttribute("data-table-feature", JSON.stringify(tableFeature));
        table.setAttribute("data-rows", tableFeature.rows.toString());
        table.setAttribute("data-cols", tableFeature.cols.toString());
        if (tableFeature.position) {
          table.setAttribute("data-table-position", JSON.stringify(tableFeature.position));
        }
      }
      plugin.readTableIdFromMarkdown(table).then((tableId) => {
        if (tableId) {
          table.setAttribute("data-table-id", tableId);
          console.log(`\u8868\u683CID\u5DF2\u8BBE\u7F6E: ${tableId}`);
          if (tableFeature) {
            tableFeature.id = tableId;
            table.setAttribute("data-table-feature", JSON.stringify(tableFeature));
          }
        }
      }).catch((error) => {
        console.error("\u8BFB\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      });
      if (plugin.settings.enableCellMerging !== false) {
        if (table.dataset.tableMergeProcessed !== "true") {
          const hasMergeMarkers = findMergeMarkers(table);
          if (hasMergeMarkers) {
            console.log(`\u8868\u683C\u5305\u542B\u5408\u5E76\u6807\u8BB0\uFF0C\u5E94\u7528\u5408\u5E76\u5355\u5143\u683C\u6E32\u67D3`);
            plugin.tableDetector.applyMergeCellsMarkers(table);
          }
        }
      }
    });
    renderTablesWithStoredStyles(plugin);
    console.log("\u9884\u89C8\u6A21\u5F0F\u4E0B\u8BBE\u7F6E\u4E86\u8868\u683C\u9009\u62E9");
  } catch (error) {
    console.error("\u8BBE\u7F6E\u9884\u89C8\u6A21\u5F0F\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
  }
}

// src/tableResizer.ts
var TableResizer = class {
  /**
   * 构造函数
   * @param plugin 插件实例
   */
  constructor(plugin) {
    this.activeTable = null;
    this.resizeHandles = [];
    this.isResizing = false;
    this.currentHandle = null;
    this.startX = 0;
    this.startY = 0;
    this.startWidth = 0;
    this.startHeight = 0;
    this.columnIndex = -1;
    this.tableWidth = 0;
    this.targetIndex = -1;
    this.resizeType = "column";
    this.resizeGuide = null;
    this.plugin = plugin;
    console.log("TableResizer: \u521D\u59CB\u5316\u8868\u683C\u5927\u5C0F\u8C03\u6574\u5668");
  }
  // 辅助方法，获取app对象
  getApp() {
    return this.plugin.app;
  }
  /**
   * 为表格添加拖拽调整大小的功能
   * @param table 表格元素
   */
  setupTableResize(table) {
    try {
      console.log("TableResizer: \u4E3A\u8868\u683C\u8BBE\u7F6E\u5927\u5C0F\u8C03\u6574\u529F\u80FD");
      this.removeResizeHandles();
      this.activeTable = table;
      this.addResizeHandles(table);
      console.log("TableResizer: \u8868\u683C\u5927\u5C0F\u8C03\u6574\u529F\u80FD\u8BBE\u7F6E\u5B8C\u6210");
    } catch (error) {
      console.error("TableResizer: \u8BBE\u7F6E\u8868\u683C\u5927\u5C0F\u8C03\u6574\u529F\u80FD\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 为表格添加拖拽调整大小的句柄
   * @param table 表格元素
   */
  addResizeHandles(table) {
    console.log("TableResizer: \u6DFB\u52A0\u62D6\u62FD\u53E5\u67C4");
    table.style.position = "relative";
    const rows = table.querySelectorAll("tr");
    if (rows.length === 0) {
      console.warn("TableResizer: \u8868\u683C\u6CA1\u6709\u884C");
      return;
    }
    const firstRowCells = rows[0].querySelectorAll("th, td");
    if (firstRowCells.length === 0) {
      console.warn("TableResizer: \u8868\u683C\u7B2C\u4E00\u884C\u6CA1\u6709\u5355\u5143\u683C");
      return;
    }
    console.log(`TableResizer: \u8868\u683C\u6709 ${rows.length} \u884C, ${firstRowCells.length} \u5217`);
    for (let i = 0; i < firstRowCells.length - 1; i++) {
      const cell = firstRowCells[i];
      const nextCell = firstRowCells[i + 1];
      const cellRect = cell.getBoundingClientRect();
      const tableRect = table.getBoundingClientRect();
      const handleLeft = cell.offsetLeft + cell.offsetWidth;
      const colHandle = document.createElement("div");
      colHandle.className = "table-resize-handle-col";
      colHandle.style.position = "absolute";
      colHandle.style.top = "0";
      colHandle.style.left = `${handleLeft}px`;
      colHandle.style.width = "5px";
      colHandle.style.height = "100%";
      colHandle.style.cursor = "col-resize";
      colHandle.style.zIndex = "100";
      colHandle.dataset.index = i.toString();
      colHandle.dataset.type = "column";
      console.log(`TableResizer: \u6DFB\u52A0\u5217\u62D6\u62FD\u53E5\u67C4 - \u7D22\u5F15=${i}, \u4F4D\u7F6E=${handleLeft}px`);
      this.addHandleEventListeners(colHandle);
      table.appendChild(colHandle);
      this.resizeHandles.push(colHandle);
    }
    for (let i = 0; i < rows.length - 1; i++) {
      const row = rows[i];
      const nextRow = rows[i + 1];
      const rowRect = row.getBoundingClientRect();
      const tableRect = table.getBoundingClientRect();
      const handleTop = row.offsetTop + row.offsetHeight;
      const rowHandle = document.createElement("div");
      rowHandle.className = "table-resize-handle-row";
      rowHandle.style.position = "absolute";
      rowHandle.style.left = "0";
      rowHandle.style.top = `${handleTop}px`;
      rowHandle.style.height = "5px";
      rowHandle.style.width = "100%";
      rowHandle.style.cursor = "row-resize";
      rowHandle.style.zIndex = "100";
      rowHandle.dataset.index = i.toString();
      rowHandle.dataset.type = "row";
      console.log(`TableResizer: \u6DFB\u52A0\u884C\u62D6\u62FD\u53E5\u67C4 - \u7D22\u5F15=${i}, \u4F4D\u7F6E=${handleTop}px`);
      this.addHandleEventListeners(rowHandle);
      table.appendChild(rowHandle);
      this.resizeHandles.push(rowHandle);
    }
  }
  /**
   * 为拖拽句柄添加事件监听器
   * @param handle 拖拽句柄元素
   */
  addHandleEventListeners(handle) {
    handle.addEventListener("mousedown", this.handleMouseDown.bind(this));
    handle.addEventListener("mouseenter", () => {
      handle.style.backgroundColor = "var(--interactive-accent)";
    });
    handle.addEventListener("mouseleave", () => {
      if (!this.isResizing || this.currentHandle !== handle) {
        handle.style.backgroundColor = "transparent";
      }
    });
  }
  /**
   * 处理鼠标按下事件
   * @param event 鼠标事件
   */
  handleMouseDown(event2) {
    if (!this.activeTable)
      return;
    event2.stopPropagation();
    event2.preventDefault();
    const handle = event2.target;
    this.currentHandle = handle;
    this.resizeType = handle.dataset.type;
    this.targetIndex = parseInt(handle.dataset.index || "-1");
    console.log(`TableResizer: \u5F00\u59CB\u62D6\u62FD - \u7C7B\u578B=${this.resizeType}, \u7D22\u5F15=${this.targetIndex}`);
    this.startX = event2.clientX;
    this.startY = event2.clientY;
    if (this.resizeType === "column") {
      const cells = this.activeTable.querySelectorAll(`tr:first-child > *:nth-child(${this.targetIndex + 1})`);
      if (cells.length > 0) {
        const cell = cells[0];
        this.startWidth = cell.offsetWidth;
        console.log(`TableResizer: \u5217\u521D\u59CB\u5BBD\u5EA6=${this.startWidth}px`);
      }
    } else {
      const rows = this.activeTable.querySelectorAll(`tr:nth-child(${this.targetIndex + 1})`);
      if (rows.length > 0) {
        const row = rows[0];
        this.startHeight = row.offsetHeight;
        console.log(`TableResizer: \u884C\u521D\u59CB\u9AD8\u5EA6=${this.startHeight}px`);
      }
    }
    this.createResizeGuide();
    this.isResizing = true;
    document.addEventListener("mousemove", this.handleMouseMove.bind(this));
    document.addEventListener("mouseup", this.handleMouseUp.bind(this));
  }
  /**
   * 创建调整大小的辅助线
   */
  createResizeGuide() {
    if (!this.activeTable || !this.currentHandle)
      return;
    const guide = document.createElement("div");
    guide.className = `table-resize-guide table-resize-guide-${this.resizeType}`;
    guide.style.position = "absolute";
    guide.style.backgroundColor = "var(--interactive-accent)";
    guide.style.zIndex = "1000";
    if (this.resizeType === "column") {
      guide.style.width = "2px";
      guide.style.height = "100%";
      guide.style.top = "0";
      guide.style.left = this.currentHandle.style.left;
    } else {
      guide.style.height = "2px";
      guide.style.width = "100%";
      guide.style.left = "0";
      guide.style.top = this.currentHandle.style.top;
    }
    this.activeTable.appendChild(guide);
    this.resizeGuide = guide;
    console.log("TableResizer: \u521B\u5EFA\u8C03\u6574\u5927\u5C0F\u8F85\u52A9\u7EBF");
  }
  /**
   * 处理鼠标移动事件
   * @param event 鼠标事件
   */
  handleMouseMove(event2) {
    if (!this.isResizing || !this.activeTable || !this.currentHandle || !this.resizeGuide)
      return;
    const deltaX = event2.clientX - this.startX;
    const deltaY = event2.clientY - this.startY;
    if (this.resizeType === "column") {
      const newLeft = parseInt(this.currentHandle.style.left) + deltaX;
      this.resizeGuide.style.left = `${newLeft}px`;
      console.log(`TableResizer: \u8C03\u6574\u5217\u8F85\u52A9\u7EBF - \u4F4D\u7F6E=${newLeft}px`);
    } else {
      const newTop = parseInt(this.currentHandle.style.top) + deltaY;
      this.resizeGuide.style.top = `${newTop}px`;
      console.log(`TableResizer: \u8C03\u6574\u884C\u8F85\u52A9\u7EBF - \u4F4D\u7F6E=${newTop}px`);
    }
  }
  /**
   * 处理鼠标松开事件
   * @param event 鼠标事件
   */
  handleMouseUp(event2) {
    if (!this.isResizing || !this.activeTable)
      return;
    console.log("TableResizer: \u7ED3\u675F\u62D6\u62FD");
    const deltaX = event2.clientX - this.startX;
    const deltaY = event2.clientY - this.startY;
    if (this.resizeType === "column" && this.targetIndex >= 0) {
      const newWidth = Math.max(20, this.startWidth + deltaX);
      this.applyColumnWidth(this.targetIndex, newWidth);
      console.log(`TableResizer: \u5E94\u7528\u65B0\u5217\u5BBD - \u7D22\u5F15=${this.targetIndex}, \u5BBD\u5EA6=${newWidth}px`);
    } else if (this.resizeType === "row" && this.targetIndex >= 0) {
      const newHeight = Math.max(20, this.startHeight + deltaY);
      this.applyRowHeight(this.targetIndex, newHeight);
      console.log(`TableResizer: \u5E94\u7528\u65B0\u884C\u9AD8 - \u7D22\u5F15=${this.targetIndex}, \u9AD8\u5EA6=${newHeight}px`);
    }
    this.saveTableSizeData();
    if (this.resizeGuide) {
      this.resizeGuide.remove();
      this.resizeGuide = null;
    }
    this.isResizing = false;
    this.currentHandle = null;
    document.removeEventListener("mousemove", this.handleMouseMove.bind(this));
    document.removeEventListener("mouseup", this.handleMouseUp.bind(this));
  }
  /**
   * 应用列宽
   * @param colIndex 列索引
   * @param width 宽度
   */
  applyColumnWidth(colIndex, width) {
    if (!this.activeTable)
      return;
    let colgroup = this.activeTable.querySelector("colgroup");
    if (!colgroup) {
      colgroup = document.createElement("colgroup");
      const firstRow = this.activeTable.querySelector("tr");
      if (firstRow) {
        const cellCount = firstRow.querySelectorAll("th, td").length;
        for (let i = 0; i < cellCount; i++) {
          const col = document.createElement("col");
          colgroup.appendChild(col);
        }
      }
      this.activeTable.prepend(colgroup);
    }
    const cols = colgroup.querySelectorAll("col");
    if (colIndex < cols.length) {
      const col = cols[colIndex];
      col.style.width = `${width}px`;
    }
  }
  /**
   * 应用行高
   * @param rowIndex 行索引
   * @param height 高度
   */
  applyRowHeight(rowIndex, height) {
    if (!this.activeTable)
      return;
    const rows = this.activeTable.querySelectorAll("tr");
    if (rowIndex < rows.length) {
      const row = rows[rowIndex];
      row.style.height = `${height}px`;
    }
  }
  /**
   * 保存表格尺寸数据
   */
  async saveTableSizeData() {
    if (!this.activeTable)
      return;
    try {
      const tableId = this.activeTable.getAttribute("data-table-id");
      if (!tableId) {
        console.warn("TableResizer: \u65E0\u6CD5\u4FDD\u5B58\u8868\u683C\u5C3A\u5BF8\u6570\u636E\uFF0C\u8868\u683C\u6CA1\u6709ID");
        return;
      }
      console.log(`TableResizer: \u4FDD\u5B58\u8868\u683C\u5C3A\u5BF8\u6570\u636E - \u8868\u683CID=${tableId}`);
      const colWidths = [];
      const colgroup = this.activeTable.querySelector("colgroup");
      if (colgroup) {
        const cols = colgroup.querySelectorAll("col");
        cols.forEach((col) => {
          const width = col.style.width || "auto";
          colWidths.push(width);
        });
      }
      if (colWidths.length === 0) {
        const firstRow = this.activeTable.querySelector("tr");
        if (firstRow) {
          const cellCount = firstRow.querySelectorAll("th, td").length;
          for (let i = 0; i < cellCount; i++) {
            colWidths.push("auto");
          }
        }
      }
      const rowHeights = [];
      const rows = this.activeTable.querySelectorAll("tr");
      rows.forEach((row) => {
        const height = row.style.height || "auto";
        rowHeights.push(height);
      });
      console.log("TableResizer: \u6536\u96C6\u7684\u5C3A\u5BF8\u6570\u636E", { colWidths, rowHeights });
      let allData = await this.plugin.loadData() || {};
      if (!allData.tables) {
        allData.tables = {};
      }
      const activeFile = this.getApp().workspace.getActiveFile();
      if (!activeFile) {
        console.warn("TableResizer: \u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6\u8DEF\u5F84");
        return;
      }
      if (!allData.tables[tableId]) {
        allData.tables[tableId] = {
          id: tableId,
          locations: [{
            path: activeFile.path,
            isActive: true
          }],
          structure: {
            rowCount: rows.length,
            colCount: colWidths.length,
            hasHeaders: rows.length > 0 && rows[0].querySelectorAll("th").length > 0
          },
          styling: {
            rowHeights,
            colWidths,
            alignment: Array(colWidths.length).fill("left"),
            cellStyles: []
          }
        };
        console.log(`TableResizer: \u521B\u5EFA\u4E86\u65B0\u7684\u8868\u683C\u6570\u636E - ID=${tableId}`, allData.tables[tableId]);
      } else {
        if (!allData.tables[tableId].styling) {
          allData.tables[tableId].styling = {};
        }
        if (!allData.tables[tableId].locations) {
          allData.tables[tableId].locations = [{
            path: activeFile.path,
            isActive: true
          }];
        } else {
          const filePathExists = allData.tables[tableId].locations.some(
            (loc) => loc.path === activeFile.path
          );
          if (!filePathExists) {
            allData.tables[tableId].locations.push({
              path: activeFile.path,
              isActive: true
            });
          }
        }
        allData.tables[tableId].styling.rowHeights = rowHeights;
        allData.tables[tableId].styling.colWidths = colWidths;
        allData.tables[tableId].structure = {
          rowCount: rows.length,
          colCount: colWidths.length,
          hasHeaders: rows.length > 0 && rows[0].querySelectorAll("th").length > 0
        };
        console.log(`TableResizer: \u66F4\u65B0\u4E86\u73B0\u6709\u8868\u683C\u6570\u636E - ID=${tableId}`, allData.tables[tableId]);
      }
      await this.plugin.saveData(allData);
      if (this.plugin.settings.preferFileStorage && activeFile) {
        await this.plugin.tableDataExtractor.exportTableDataToFile(activeFile, tableId, allData.tables[tableId]);
        console.log(`TableResizer: \u5DF2\u5C06\u8868\u683C\u5927\u5C0F\u6570\u636E\u5BFC\u51FA\u5230\u6587\u4EF6 ${activeFile.path}`);
      }
      console.log("TableResizer: \u8868\u683C\u5C3A\u5BF8\u6570\u636E\u4FDD\u5B58\u6210\u529F");
      this.applyCurrentSizes();
    } catch (error) {
      console.error("TableResizer: \u4FDD\u5B58\u8868\u683C\u5C3A\u5BF8\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 立即应用当前尺寸到表格
   */
  applyCurrentSizes() {
    if (!this.activeTable)
      return;
    try {
      const colgroup = this.activeTable.querySelector("colgroup");
      if (colgroup) {
        const cols = colgroup.querySelectorAll("col");
        cols.forEach((col, index) => {
          const width = col.style.width;
          if (width) {
            console.log(`TableResizer: \u7ACB\u5373\u5E94\u7528\u5217\u5BBD - \u7D22\u5F15=${index}, \u5BBD\u5EA6=${width}`);
          }
        });
      }
      const rows = this.activeTable.querySelectorAll("tr");
      rows.forEach((row, index) => {
        const height = row.style.height;
        if (height) {
          console.log(`TableResizer: \u7ACB\u5373\u5E94\u7528\u884C\u9AD8 - \u7D22\u5F15=${index}, \u9AD8\u5EA6=${height}`);
        }
      });
    } catch (error) {
      console.error("TableResizer: \u5E94\u7528\u5F53\u524D\u5C3A\u5BF8\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 移除所有拖拽句柄
   */
  removeResizeHandles() {
    console.log("TableResizer: \u79FB\u9664\u62D6\u62FD\u53E5\u67C4");
    this.resizeHandles.forEach((handle) => {
      handle.remove();
    });
    this.resizeHandles = [];
    if (this.resizeGuide) {
      this.resizeGuide.remove();
      this.resizeGuide = null;
    }
  }
  /**
   * 清理资源
   */
  cleanup() {
    console.log("TableResizer: \u6E05\u7406\u8D44\u6E90");
    this.removeResizeHandles();
    this.activeTable = null;
    this.isResizing = false;
    this.currentHandle = null;
  }
};

// src/tableDataExtractor.ts
var TableDataExtractor = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  // 辅助方法，获取app对象
  getApp() {
    return this.plugin.app;
  }
  /**
   * 从文件中提取表格数据
   * @param file 文件对象
   * @returns 表格数据对象，键为表格ID
   */
  async extractTableDataFromFile(file) {
    try {
      const fileContent = await this.getApp().vault.read(file);
      const result = {};
      const jsonCodeBlockRegex = /```json:table-data\s*\n([\s\S]*?)\n```/g;
      let jsonMatch;
      while ((jsonMatch = jsonCodeBlockRegex.exec(fileContent)) !== null) {
        try {
          const jsonStr = jsonMatch[1].trim();
          const jsonData = JSON.parse(jsonStr);
          if (Array.isArray(jsonData)) {
            for (const tableData of jsonData) {
              if (tableData.id) {
                this.processTableDataObject(tableData, result);
              }
            }
          } else if (jsonData.id) {
            this.processTableDataObject(jsonData, result);
          }
        } catch (error) {
          console.error("\u89E3\u6790JSON\u8868\u683C\u6570\u636E\u4EE3\u7801\u5757\u65F6\u51FA\u9519:", error);
        }
      }
      const csvCodeBlockRegex = /```csv:table-data\s*\n([\s\S]*?)\n```/g;
      let csvMatch;
      while ((csvMatch = csvCodeBlockRegex.exec(fileContent)) !== null) {
        try {
          const csvStr = csvMatch[1].trim();
          const csvLines = csvStr.split("\n");
          if (csvLines.length > 1) {
            const headers = csvLines[0].split(",");
            for (let i = 1; i < csvLines.length; i++) {
              const values = csvLines[i].split(",");
              const tableData = {};
              for (let j = 0; j < headers.length && j < values.length; j++) {
                if (values[j]) {
                  try {
                    tableData[headers[j]] = JSON.parse(values[j]);
                  } catch (e) {
                    tableData[headers[j]] = values[j];
                  }
                }
              }
              if (tableData.id) {
                this.processTableDataObject(tableData, result);
              }
            }
          }
        } catch (error) {
          console.error("\u89E3\u6790CSV\u8868\u683C\u6570\u636E\u4EE3\u7801\u5757\u65F6\u51FA\u9519:", error);
        }
      }
      const customCodeBlockRegex = /```table-data\s*\n([\s\S]*?)\n```/g;
      let customMatch;
      while ((customMatch = customCodeBlockRegex.exec(fileContent)) !== null) {
        try {
          const customStr = customMatch[1].trim();
          const customLines = customStr.split("\n");
          for (const line of customLines) {
            const tableData = this.parseCustomTableDataFormat(line);
            if (tableData && tableData.id) {
              result[tableData.id] = tableData;
            }
          }
        } catch (error) {
          console.error("\u89E3\u6790\u81EA\u5B9A\u4E49\u8868\u683C\u6570\u636E\u4EE3\u7801\u5757\u65F6\u51FA\u9519:", error);
        }
      }
      this.extractTableDataFromComments(fileContent, result);
      return result;
    } catch (error) {
      console.error("\u4ECE\u6587\u4EF6\u63D0\u53D6\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", error);
      return {};
    }
  }
  /**
   * 从HTML注释中提取表格ID和数据
   * @param fileContent 文件内容
   * @param result 结果对象
   */
  extractTableDataFromComments(fileContent, result) {
    try {
      const commentRegex = /<!--\s*table-id:\s*([\w-]+)(?:\s*\|\s*([^>]*))?\s*-->/g;
      let match;
      while ((match = commentRegex.exec(fileContent)) !== null) {
        const tableId = match[1].trim();
        const dataString = match[2] ? match[2].trim() : null;
        if (tableId && dataString) {
          const tableData = this.parseCustomTableDataFormat(`${tableId}|${dataString}`);
          if (tableData && tableData.id) {
            result[tableData.id] = tableData;
          }
        } else if (tableId && !result[tableId]) {
          result[tableId] = this.createEmptyTableData(tableId);
        }
      }
    } catch (error) {
      console.error("\u4ECEHTML\u6CE8\u91CA\u63D0\u53D6\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 创建空的表格数据结构
   * @param tableId 表格ID
   * @returns 表格数据对象
   */
  createEmptyTableData(tableId) {
    return {
      id: tableId,
      locations: [],
      structure: {
        rowCount: 0,
        colCount: 0,
        hasHeaders: false
      },
      styling: {
        rowHeights: [],
        colWidths: [],
        alignment: []
      }
    };
  }
  /**
   * 处理表格数据对象
   * @param tableData 表格数据对象
   * @param result 结果对象
   */
  processTableDataObject(tableData, result) {
    try {
      if (!tableData.structure) {
        tableData.structure = {
          rowCount: 0,
          colCount: 0,
          hasHeaders: false
        };
      }
      if (!tableData.styling) {
        tableData.styling = {
          rowHeights: [],
          colWidths: [],
          alignment: []
        };
      }
      if (!tableData.locations) {
        tableData.locations = [];
      }
      result[tableData.id] = tableData;
    } catch (error) {
      console.error("\u5904\u7406\u8868\u683C\u6570\u636E\u5BF9\u8C61\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 解析自定义表格数据格式
   * 格式: tableId|key1:value1|key2:value2,...
   * @param line 自定义格式数据行
   * @returns 表格数据对象
   */
  parseCustomTableDataFormat(line) {
    try {
      const parts = line.split("|");
      if (parts.length < 1)
        return null;
      const tableId = parts[0].trim();
      if (!tableId)
        return null;
      const tableData = this.createEmptyTableData(tableId);
      console.log(`\u89E3\u6790\u81EA\u5B9A\u4E49\u8868\u683C\u6570\u636E\u683C\u5F0F: ${line} \u8868\u683CID: ${tableId}`);
      for (let i = 1; i < parts.length; i++) {
        const keyValue = parts[i].split(":");
        if (keyValue.length !== 2)
          continue;
        const key = keyValue[0].trim();
        const value = keyValue[1].trim();
        console.log(`\u5904\u7406\u952E\u503C\u5BF9: ${key}:${value}`);
        switch (key) {
          case "wrapper":
            tableData.structure.useTableWrapper = value === "true";
            console.log(`\u8BBE\u7F6E\u8868\u683C ${tableId} \u5305\u88C5\u5668: ${value}`);
            break;
          case "width":
            tableData.styling.colWidths = value.split(",").map((w) => w.trim());
            console.log(`\u8BBE\u7F6E\u8868\u683C ${tableId} \u5217\u5BBD: ${tableData.styling.colWidths.join(", ")}`);
            break;
          case "align":
            tableData.styling.alignment = value.split(",").map((a) => a.trim());
            console.log(`\u8BBE\u7F6E\u8868\u683C ${tableId} \u5BF9\u9F50\u65B9\u5F0F: ${tableData.styling.alignment.join(", ")}`);
            break;
          case "height":
            tableData.styling.rowHeights = value.split(",").map((h) => h.trim());
            console.log(`\u8BBE\u7F6E\u8868\u683C ${tableId} \u884C\u9AD8: ${tableData.styling.rowHeights.join(", ")}`);
            break;
        }
      }
      console.log(`\u89E3\u6790\u5B8C\u6210\u7684\u8868\u683C\u6570\u636E ${tableId}:`, tableData);
      return tableData;
    } catch (error) {
      console.error("\u89E3\u6790\u81EA\u5B9A\u4E49\u8868\u683C\u6570\u636E\u683C\u5F0F\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 完善表格数据，根据实际表格内容自动填充缺失的结构信息
   * @param table 表格元素
   * @param tableData 表格数据
   * @returns 完善后的表格数据
   */
  enhanceTableData(table, tableData) {
    const enhancedData = JSON.parse(JSON.stringify(tableData));
    const rows = table.querySelectorAll("tr");
    const rowCount = rows.length;
    let colCount = 0;
    const hasHeaderRow = table.querySelector("thead") !== null;
    rows.forEach((row) => {
      const cellCount = row.querySelectorAll("td, th").length;
      colCount = Math.max(colCount, cellCount);
    });
    if (!enhancedData.structure.rowCount || enhancedData.structure.rowCount === 0) {
      enhancedData.structure.rowCount = rowCount;
    }
    if (!enhancedData.structure.colCount || enhancedData.structure.colCount === 0) {
      enhancedData.structure.colCount = colCount;
    }
    if (enhancedData.structure.hasHeaders === void 0) {
      enhancedData.structure.hasHeaders = hasHeaderRow;
    }
    if (!enhancedData.styling.rowHeights || enhancedData.styling.rowHeights.length === 0) {
      enhancedData.styling.rowHeights = Array(rowCount).fill("auto");
    }
    if (!enhancedData.styling.colWidths || enhancedData.styling.colWidths.length === 0) {
      enhancedData.styling.colWidths = Array(colCount).fill("auto");
    }
    if (!enhancedData.styling.alignment || enhancedData.styling.alignment.length === 0) {
      enhancedData.styling.alignment = Array(colCount).fill("right");
      if (colCount > 0)
        enhancedData.styling.alignment[0] = "left";
    }
    return enhancedData;
  }
  /**
   * 将表格数据导出到Markdown文件
   * @param file 文件对象
   * @param tableId 表格ID
   * @param tableData 表格数据
   */
  async exportTableDataToFile(file, tableId, tableData) {
    try {
      if (!file || !tableId || !tableData)
        return;
      let fileContent = await this.getApp().vault.read(file);
      const tableIds = /* @__PURE__ */ new Set();
      const commentRegex = /<!-- table-id: ([\w-]+) -->/g;
      let match;
      while ((match = commentRegex.exec(fileContent)) !== null) {
        tableIds.add(match[1]);
      }
      tableIds.add(tableId);
      const existingTableData = await this.extractTableDataFromFile(file);
      existingTableData[tableId] = tableData;
      const tableDataArray = Array.from(tableIds).filter((id) => existingTableData[id]).map((id) => existingTableData[id]);
      const dataToExport = JSON.stringify(tableDataArray, null, 2);
      const jsonBlockRegex = /```json:table-data\s*\n([\s\S]*?)\n```/g;
      const codeBlocks = [];
      while ((match = jsonBlockRegex.exec(fileContent)) !== null) {
        codeBlocks.push({
          start: match.index,
          end: match.index + match[0].length
        });
      }
      if (codeBlocks.length > 0) {
        for (let i = codeBlocks.length - 1; i >= 0; i--) {
          const block = codeBlocks[i];
          fileContent = fileContent.substring(0, block.start) + fileContent.substring(block.end);
        }
      }
      if (!fileContent.endsWith("\n\n")) {
        if (fileContent.endsWith("\n")) {
          fileContent += "\n";
        } else {
          fileContent += "\n\n";
        }
      }
      fileContent += "```json:table-data\n" + dataToExport + "\n```";
      await this.getApp().vault.modify(file, fileContent);
      console.log(`\u5DF2\u5C06\u6240\u6709\u8868\u683C\u6570\u636E\u5BFC\u51FA\u5230\u6587\u4EF6\u672B\u5C3E: ${file.path}, \u8868\u683C\u6570\u91CF: ${tableDataArray.length}`);
    } catch (error) {
      console.error("\u5BFC\u51FA\u8868\u683C\u6570\u636E\u5230\u6587\u4EF6\u65F6\u51FA\u9519:", error);
    }
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  nativeProcessing: true,
  paragraphs: true,
  enableCellMerging: true,
  confirmMergeNonEmpty: true,
  enableTableIds: true,
  idPrefix: "tbl",
  autoCenterMergedCells: true,
  toolbarEnabled: true,
  enableEditModeOperations: true,
  useTableWrapperComments: false,
  // 默认不使用注释夹模式
  featureSimilarityThreshold: 0.7,
  // 默认相似度阈值70%
  preferFeatureMatching: false,
  // 默认不优先使用特征匹配
  preferFileStorage: true,
  // 默认优先使用文件存储
  autoExportToFile: false
  // 默认不自动导出到文件
};
var ObsidianSpreadsheet = class extends import_obsidian10.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.currentEditingTable = null;
    // 添加视图模式状态跟踪
    this.lastPreviewModeState = false;
    /**
     * 处理表格点击事件
     */
    this.handleTableClick = (event2) => {
      try {
        const table = event2.currentTarget;
        if (!table)
          return;
        this.removeAllTableHighlights();
        this.highlightSelectedTable(table);
        if (this.settings.toolbarEnabled) {
          this.tableToolbar.setActiveTable(table);
        }
        this.tableResizer.setupTableResize(table);
        console.log("\u8868\u683C\u70B9\u51FB\u4E8B\u4EF6\u5DF2\u5904\u7406");
      } catch (error) {
        console.error("\u5904\u7406\u8868\u683C\u70B9\u51FB\u4E8B\u4EF6\u65F6\u51FA\u9519:", error);
      }
    };
    /**
     * 处理文档点击事件
     * @param event 点击事件
     */
    this.handleDocumentClick = (event2) => {
      var _a;
      try {
        const isClickInToolbar = event2.target instanceof Node && ((_a = document.querySelector(".advanced-table-toolbar-container")) == null ? void 0 : _a.contains(event2.target));
        const isClickInTable = event2.target instanceof Node && event2.target.closest("table") !== null;
        if (!isClickInToolbar && !isClickInTable) {
          if (this.tableToolbar.activeTable) {
            this.tableToolbar.clearSelection();
          }
        }
      } catch (error) {
        console.error("\u5904\u7406\u6587\u6863\u70B9\u51FB\u4E8B\u4EF6\u65F6\u51FA\u9519:", error);
      }
    };
    this.handleTableClick = this.handleTableClick.bind(this);
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
  }
  // 移除文档点击事件处理函数
  async onload() {
    try {
      console.log("Loading Advanced Table XT plugin");
      await this.loadSettings();
      if (this.settings.toolbarEnabled === void 0) {
        this.settings.toolbarEnabled = true;
        await this.saveSettings();
      }
      if (this.settings.enableEditModeOperations === void 0) {
        this.settings.enableEditModeOperations = true;
        await this.saveSettings();
      }
      if (this.settings.preferFileStorage === void 0) {
        this.settings.preferFileStorage = true;
        await this.saveSettings();
      }
      if (this.settings.autoExportToFile === void 0) {
        this.settings.autoExportToFile = false;
        await this.saveSettings();
      }
      loadIcons();
      console.log("Initializing plugin components");
      this.tableIdManager = new TableIdManager(this);
      this.markdownSourceEditor = new MarkdownSourceEditor(this);
      this.tableDetector = new MarkdownTableDetector(this);
      this.tableToolbar = new TableToolbar(this);
      this.tableResizer = new TableResizer(this);
      this.tableDataExtractor = new TableDataExtractor(this);
      this.ribbonIcon = this.addRibbonIcon("table-toolbar-toggle", "\u8868\u683C\u5DE5\u5177\u680F", (evt) => {
        this.toggleToolbarState();
      });
      this.addRibbonIcon("table-edit-mode", "\u7F16\u8F91\u6A21\u5F0F\u8868\u683C\u64CD\u4F5C", (evt) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
        if (!activeView) {
          new import_obsidian10.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u89C6\u56FE");
          return;
        }
        const isEditMode = activeView.getMode() === "source";
        if (!isEditMode) {
          new import_obsidian10.Notice("\u8BF7\u5207\u6362\u5230\u7F16\u8F91\u6A21\u5F0F\u4F7F\u7528\u6B64\u529F\u80FD");
          return;
        }
        const menu = new import_obsidian10.Menu();
        menu.addItem((item) => {
          item.setTitle("\u4E3A\u8868\u683C\u6DFB\u52A0ID").setIcon("table-id").onClick(async () => {
            await this.markdownSourceEditor.addTableIdToMarkdown();
          });
        });
        menu.addItem((item) => {
          item.setTitle("\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C").setIcon("merge-right").onClick(async () => {
            await this.markdownSourceEditor.mergeCells("right");
          });
        });
        menu.addItem((item) => {
          item.setTitle("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C").setIcon("merge-down").onClick(async () => {
            await this.markdownSourceEditor.mergeCells("down");
          });
        });
        menu.showAtMouseEvent(evt);
      });
      this.updateRibbonIcon();
      if (this.settings.toolbarEnabled) {
        this.createToolbar();
      }
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", () => {
          if (this.settings.toolbarEnabled) {
            setTimeout(() => {
              this.setupTableSelection();
            }, 300);
          }
        })
      );
      this.registerEvent(
        this.app.workspace.on("layout-change", () => {
          if (this.settings.toolbarEnabled) {
            setTimeout(() => {
              this.setupTableSelection();
            }, 300);
          }
        })
      );
      this.registerEvent(
        this.app.workspace.on("editor-change", (editor, view) => {
          if (this.settings.toolbarEnabled && this.settings.enableEditModeOperations) {
            if (view instanceof import_obsidian10.MarkdownView && view.getMode() === "source") {
              this.debounce(() => {
                const tableInfo = this.markdownSourceEditor.locateTableInMarkdown(editor);
                if (tableInfo) {
                  this.setupEditModeTableSelection(editor);
                }
              }, 500)();
            }
          }
        })
      );
      this.registerDomEvent(document, "click", (evt) => {
        if (this.settings.toolbarEnabled && this.settings.enableEditModeOperations) {
          const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
          if (activeView && activeView.getMode() === "source") {
            setTimeout(() => {
              const editor = activeView.editor;
              const tableInfo = this.markdownSourceEditor.locateTableInMarkdown(editor);
              if (tableInfo) {
                this.setupEditModeTableSelection(editor);
              }
            }, 100);
          }
        }
      });
      this.addCommand({
        id: "add-table-id-in-edit-mode",
        name: "\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u4E3A\u8868\u683C\u6DFB\u52A0ID",
        editorCallback: async (editor) => {
          if (this.settings.enableEditModeOperations) {
            await this.markdownSourceEditor.addTableIdToMarkdown();
          } else {
            new import_obsidian10.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u7684\u8868\u683C\u64CD\u4F5C\u5DF2\u7981\u7528\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u542F\u7528");
          }
        }
      });
      this.addCommand({
        id: "merge-cell-right-in-edit-mode",
        name: "\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C",
        editorCallback: async (editor) => {
          if (this.settings.enableEditModeOperations) {
            await this.markdownSourceEditor.mergeCells("right");
          } else {
            new import_obsidian10.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u7684\u8868\u683C\u64CD\u4F5C\u5DF2\u7981\u7528\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u542F\u7528");
          }
        }
      });
      this.addCommand({
        id: "merge-cell-down-in-edit-mode",
        name: "\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C",
        editorCallback: async (editor) => {
          if (this.settings.enableEditModeOperations) {
            await this.markdownSourceEditor.mergeCells("down");
          } else {
            new import_obsidian10.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u7684\u8868\u683C\u64CD\u4F5C\u5DF2\u7981\u7528\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u542F\u7528");
          }
        }
      });
      this.addCommand({
        id: "show-current-table-id",
        name: "\u663E\u793A\u5F53\u524D\u8868\u683CID",
        callback: async () => {
          await this.showCurrentTableId();
        }
      });
      this.addCommand({
        id: "split-merged-cells",
        name: "\u62C6\u5206\u5DF2\u5408\u5E76\u7684\u5355\u5143\u683C",
        editorCallback: async (editor) => {
          if (this.settings.enableEditModeOperations) {
            await this.markdownSourceEditor.splitMergedCells();
          } else {
            new import_obsidian10.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u7684\u8868\u683C\u64CD\u4F5C\u5DF2\u7981\u7528\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u542F\u7528");
          }
        }
      });
      this.addCommand({
        id: "fix-merge-markers",
        name: "\u4FEE\u590D\u8868\u683C\u5408\u5E76\u6807\u8BB0",
        editorCallback: async (editor) => {
          if (this.settings.enableEditModeOperations) {
            await this.markdownSourceEditor.detectAndFixMergeMarkers();
          } else {
            new import_obsidian10.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u7684\u8868\u683C\u64CD\u4F5C\u5DF2\u7981\u7528\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u542F\u7528");
          }
        }
      });
      this.registerMarkdownCodeBlockProcessor(
        "sheet",
        async (source, el, ctx) => {
          source = source.trim();
          ctx.addChild(
            new SheetElement(
              el,
              source,
              ctx,
              this.app,
              this
            )
          );
        }
      );
      this.registerMarkdownPostProcessor(async (el, ctx) => {
        var _a;
        if (!this.settings.nativeProcessing)
          return;
        if (((_a = ctx.frontmatter) == null ? void 0 : _a["disable-sheet"]) === true)
          return;
        const tableEls = el.querySelectorAll("table");
        if (tableEls.length) {
          for (const tableEl of Array.from(tableEls)) {
            if (!tableEl)
              return;
            if ((tableEl == null ? void 0 : tableEl.id) === "obsidian-sheets-parsed")
              return;
            if (this.settings.enableTableIds) {
              this.tableIdManager.ensureTableHasId(tableEl);
            }
            if (this.settings.enableCellMerging !== false) {
              this.renderMergedCells(tableEl, ctx);
              if (tableEl.querySelector("[rowspan], [colspan]")) {
                this.tableDetector.applyMergeCellsMarkers(tableEl);
              }
            }
          }
        }
      });
      this.addSettingTab(new SheetSettingsTab(this.app, this));
      console.log("Advanced Table XT plugin loaded successfully");
    } catch (error) {
      console.error("Error loading Advanced Table XT plugin:", error);
    }
    this.setupViewModeChangeListener();
    this.checkAndRenderTables();
    console.log("Advanced Table XT \u63D2\u4EF6\u5DF2\u52A0\u8F7D");
  }
  /**
   * 防抖函数
   * @param func 要执行的函数
   * @param wait 等待时间（毫秒）
   */
  debounce(func, wait) {
    let timeout = null;
    return function(...args) {
      const context = this;
      const later = function() {
        timeout = null;
        func.apply(context, args);
      };
      if (timeout)
        clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  // 创建工具栏 - 新方法，只在需要时创建工具栏
  createToolbar() {
    try {
      document.querySelectorAll(".advanced-table-toolbar-container").forEach((container) => {
        container.remove();
      });
      const toolbarContainer = document.createElement("div");
      toolbarContainer.className = "advanced-table-toolbar-container";
      document.body.appendChild(toolbarContainer);
      this.tableToolbar.createToolbar(toolbarContainer);
      document.addEventListener("click", this.handleDocumentClick);
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (activeView) {
        const isEditMode = activeView.getMode() === "source";
        if (isEditMode) {
          const tableInfo = this.markdownSourceEditor.locateTableInMarkdown(activeView.editor);
          if (tableInfo) {
            this.setupEditModeTableSelection(activeView.editor);
          }
        } else {
          this.setupPreviewModeTableSelection();
        }
      }
      console.log("\u5DE5\u5177\u680F\u5DF2\u521B\u5EFA");
    } catch (error) {
      console.error("\u521B\u5EFA\u5DE5\u5177\u680F\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置表格选择功能
   */
  setupTableSelection() {
    try {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (!activeView)
        return;
      const isEditMode = activeView.getMode() === "source";
      if (isEditMode) {
        this.setupEditModeTableSelection(activeView.editor);
      } else {
        this.setupPreviewModeTableSelection();
      }
    } catch (error) {
      console.error("\u8BBE\u7F6E\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置编辑模式下的表格选择功能
   * @param editor 编辑器实例
   */
  setupEditModeTableSelection(editor) {
    try {
      const cursor = editor.getCursor();
      console.log(`\u7F16\u8F91\u6A21\u5F0F\u4E0B\u5149\u6807\u4F4D\u7F6E: \u884C=${cursor.line}, \u5217=${cursor.ch}`);
      const tableInfo = this.markdownSourceEditor.locateTableInMarkdown(editor);
      if (!tableInfo) {
        console.log("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u672A\u627E\u5230\u8868\u683C");
        if (this.currentEditingTable) {
          this.currentEditingTable = null;
          if (this.tableToolbar) {
            this.tableToolbar.clearSelection();
          }
        }
        return;
      }
      console.log(`\u7F16\u8F91\u6A21\u5F0F\u4E0B\u627E\u5230\u8868\u683C: \u8303\u56F4=${tableInfo.startLine}-${tableInfo.endLine}`);
      if (!document.querySelector(".advanced-table-toolbar-container")) {
        this.createToolbar();
      }
      this.currentEditingTable = {
        startLine: tableInfo.startLine,
        endLine: tableInfo.endLine,
        content: tableInfo.content
      };
      this.tableToolbar.setActiveEditModeTable(this.currentEditingTable);
      const cellPosition = this.markdownSourceEditor.getCellPosition(editor);
      if (cellPosition) {
        console.log(`\u7F16\u8F91\u6A21\u5F0F\u4E0B\u5149\u6807\u4F4D\u4E8E\u5355\u5143\u683C: \u884C=${cellPosition.rowIndex}, \u5217=${cellPosition.colIndex}`);
      } else {
        console.log("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u65E0\u6CD5\u786E\u5B9A\u5149\u6807\u6240\u5728\u5355\u5143\u683C");
      }
      console.log("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u9009\u62E9\u4E86\u8868\u683C:", this.currentEditingTable);
    } catch (error) {
      console.error("\u8BBE\u7F6E\u7F16\u8F91\u6A21\u5F0F\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置预览模式下的表格选择功能
   */
  setupPreviewModeTableSelection() {
    try {
      setupPreviewModeTableSelection(this);
    } catch (error) {
      console.error("\u8BBE\u7F6E\u9884\u89C8\u6A21\u5F0F\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
    }
  }
  onunload() {
    console.log("\u5378\u8F7D Advanced Table XT \u63D2\u4EF6");
    document.querySelectorAll(".advanced-table-toolbar-container").forEach((container) => {
      container.remove();
    });
    this.removeAllTableHighlights();
    this.tableResizer.cleanup();
    document.querySelectorAll("table[data-table-processed]").forEach((table) => {
      const tableEl = table;
      delete tableEl.dataset.tableProcessed;
      delete tableEl.dataset.tableSelected;
      tableEl.style.outline = "";
      tableEl.style.outlineOffset = "";
      tableEl.onclick = null;
    });
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  highlightSelectedTable(table) {
    this.removeAllTableHighlights();
    table.style.outline = "2px solid var(--interactive-accent)";
    table.style.outlineOffset = "2px";
    table.dataset.tableSelected = "true";
  }
  removeAllTableHighlights() {
    document.querySelectorAll('table[data-table-selected="true"]').forEach((table) => {
      const tableEl = table;
      tableEl.style.outline = "";
      tableEl.style.outlineOffset = "";
      delete tableEl.dataset.tableSelected;
    });
  }
  createTableData(table, tableId) {
    var _a;
    try {
      const commentId = this.tableIdManager.getTableIdentifier(table);
      if (!commentId || commentId !== tableId) {
        console.warn(`\u8868\u683CID\u9A8C\u8BC1\u5931\u8D25: \u4F20\u5165ID=${tableId}, HTML\u6CE8\u91CAID=${commentId || "\u65E0"}`);
        console.warn("\u53EA\u6709\u5728HTML\u6CE8\u91CA\u4E2D\u660E\u786E\u5B9A\u4E49\u7684\u8868\u683CID\u624D\u80FD\u521B\u5EFA\u6570\u636E");
        return;
      }
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (!activeView) {
        console.warn("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE\uFF0C\u4E0D\u521B\u5EFA\u8868\u683C\u6570\u636E");
        return;
      }
      const filePath = (_a = activeView.file) == null ? void 0 : _a.path;
      if (!filePath) {
        console.warn("\u65E0\u6CD5\u83B7\u53D6\u6587\u4EF6\u8DEF\u5F84\uFF0C\u4E0D\u521B\u5EFA\u8868\u683C\u6570\u636E");
        return;
      }
      console.log(`\u4E3A\u6709\u6548\u7684HTML\u6CE8\u91CAID\u521B\u5EFA\u8868\u683C\u6570\u636E: ${tableId}`);
      this.tableToolbar.extractAndStoreTableInfo(tableId, table, filePath);
    } catch (error) {
      console.error("\u521B\u5EFA\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  async saveTableData(tableData) {
    try {
      if (!tableData || !tableData.id) {
        console.warn("\u65E0\u6548\u7684\u8868\u683C\u6570\u636E\uFF0C\u7F3A\u5C11ID");
        return;
      }
      console.log(`\u51C6\u5907\u4FDD\u5B58\u8868\u683C\u6570\u636E: ${tableData.id}`);
      const activeFile = this.app.workspace.getActiveFile();
      let savedToFile = false;
      if (this.settings.preferFileStorage && activeFile && this.tableDataExtractor) {
        try {
          await this.tableDataExtractor.exportTableDataToFile(activeFile, tableData.id, tableData);
          console.log(`\u5DF2\u5C06\u8868\u683C\u6570\u636E\u4FDD\u5B58\u5230\u6587\u4EF6: ${activeFile.path}`);
          savedToFile = true;
        } catch (fileError) {
          console.error("\u4FDD\u5B58\u5230\u6587\u4EF6\u5931\u8D25\uFF0C\u5C06\u56DE\u9000\u5230data.json:", fileError);
          savedToFile = false;
        }
      }
      if (!savedToFile) {
        const existingData = await this.loadData() || {};
        if (!existingData.tables) {
          existingData.tables = {};
        }
        existingData.tables[tableData.id] = tableData;
        await this.saveData(existingData);
        console.log(`\u5DF2\u4FDD\u5B58\u8868\u683C\u6570\u636E\u5230data.json: ${tableData.id}`);
        if (!savedToFile && this.settings.autoExportToFile && this.tableDataExtractor && activeFile) {
          try {
            await this.tableDataExtractor.exportTableDataToFile(activeFile, tableData.id, tableData);
            console.log(`\u5DF2\u81EA\u52A8\u5C06\u8868\u683C\u6570\u636E\u5BFC\u51FA\u5230\u6587\u4EF6: ${activeFile.path}`);
          } catch (exportError) {
            console.error("\u81EA\u52A8\u5BFC\u51FA\u5230\u6587\u4EF6\u5931\u8D25:", exportError);
          }
        }
      }
    } catch (error) {
      console.error("\u4FDD\u5B58\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  updateRibbonIcon() {
    if (!this.ribbonIcon)
      return;
    this.ribbonIcon.empty();
    if (this.settings.toolbarEnabled) {
      const iconEl = this.ribbonIcon.createEl("div", {
        cls: "ribbon-icon-active"
      });
      iconEl.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="3" y1="15" x2="21" y2="15"></line><line x1="9" y1="3" x2="9" y2="21"></line><line x1="15" y1="3" x2="15" y2="21"></line></svg>`;
      iconEl.style.color = "var(--interactive-accent)";
    } else {
      const iconEl = this.ribbonIcon.createEl("div");
      iconEl.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="3" y1="15" x2="21" y2="15"></line><line x1="9" y1="3" x2="9" y2="21"></line><line x1="15" y1="3" x2="15" y2="21"></line></svg>`;
    }
  }
  toggleToolbarState() {
    this.settings.toolbarEnabled = !this.settings.toolbarEnabled;
    this.saveSettings();
    this.updateRibbonIcon();
    if (this.settings.toolbarEnabled) {
      this.createToolbar();
      new import_obsidian10.Notice("\u8868\u683C\u5DE5\u5177\u680F\u5DF2\u542F\u7528");
    } else {
      document.querySelectorAll(".advanced-table-toolbar-container").forEach((container) => {
        container.remove();
      });
      new import_obsidian10.Notice("\u8868\u683C\u5DE5\u5177\u680F\u5DF2\u7981\u7528");
    }
  }
  /**
   * 显示当前表格ID
   */
  async showCurrentTableId() {
    try {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (!activeView) {
        new import_obsidian10.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      let tableId = null;
      if (isEditMode) {
        tableId = await this.markdownSourceEditor.getCurrentTableId();
      } else {
        if (this.tableToolbar.activeTable) {
          tableId = this.tableIdManager.getTableIdentifier(this.tableToolbar.activeTable);
        }
      }
      if (tableId) {
        new import_obsidian10.Notice(`\u5F53\u524D\u8868\u683CID: ${tableId}`);
        console.log("\u5F53\u524D\u8868\u683CID:", tableId);
      } else {
        new import_obsidian10.Notice("\u672A\u627E\u5230\u8868\u683CID\uFF0C\u8BF7\u786E\u4FDD\u5149\u6807\u5728\u8868\u683C\u5185\u6216\u5DF2\u9009\u62E9\u8868\u683C");
      }
    } catch (error) {
      console.error("\u663E\u793A\u5F53\u524D\u8868\u683CID\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 渲染合并单元格
   * @param tableEl 表格元素
   * @param ctx Markdown处理上下文
   */
  renderMergedCells(tableEl, ctx) {
    var _a;
    try {
      if (tableEl.dataset.tableMergeProcessed === "true") {
        return;
      }
      const rawMarkdown = ((_a = ctx.getSectionInfo(tableEl)) == null ? void 0 : _a.text) || (0, import_obsidian10.htmlToMarkdown)(tableEl);
      if (!rawMarkdown)
        return;
      const lines = rawMarkdown.split("\n");
      const tableLines = lines.filter((line) => line.trim().startsWith("|") && line.trim().endsWith("|"));
      if (tableLines.length < 2)
        return;
      const contentLines = [tableLines[0]].concat(tableLines.slice(2));
      const rows = [];
      for (const line of contentLines) {
        const cells = line.split("|").filter((_, i, arr) => i > 0 && i < arr.length - 1).map((cell) => cell.trim());
        rows.push(cells);
      }
      const domRows = tableEl.querySelectorAll("tr");
      if (domRows.length !== rows.length)
        return;
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const rowCells = rows[rowIndex];
        const domRow = domRows[rowIndex];
        const domCells = domRow.querySelectorAll("th, td");
        if (domCells.length !== rowCells.length)
          continue;
        for (let colIndex = 0; colIndex < rowCells.length; colIndex++) {
          const cellContent = rowCells[colIndex];
          const domCell = domCells[colIndex];
          if ((cellContent === "<" || cellContent === "\\<" || cellContent === " < " || cellContent === " \\< ") && colIndex > 0) {
            const leftCell = domCells[colIndex - 1];
            leftCell.colSpan = (leftCell.colSpan || 1) + 1;
            domCell.style.display = "none";
            if (this.settings.autoCenterMergedCells) {
              leftCell.style.textAlign = "center";
              leftCell.style.verticalAlign = "middle";
            }
            leftCell.classList.add("obs-merged-cell");
          } else if ((cellContent === "^" || cellContent === "\\^" || cellContent === " ^ " || cellContent === " \\^ ") && rowIndex > 0) {
            const aboveRow = domRows[rowIndex - 1];
            const aboveCells = aboveRow.querySelectorAll("th, td");
            if (colIndex < aboveCells.length) {
              const aboveCell = aboveCells[colIndex];
              aboveCell.rowSpan = (aboveCell.rowSpan || 1) + 1;
              domCell.style.display = "none";
              if (this.settings.autoCenterMergedCells) {
                aboveCell.style.textAlign = "center";
                aboveCell.style.verticalAlign = "middle";
              }
              aboveCell.classList.add("obs-merged-cell");
            }
          }
        }
      }
      tableEl.dataset.tableMergeProcessed = "true";
      console.log("\u5DF2\u6E32\u67D3\u8868\u683C\u5408\u5E76\u5355\u5143\u683C");
    } catch (error) {
      console.error("\u6E32\u67D3\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 从Markdown文件中读取表格ID
   * 这是一个更可靠的方法，因为它不依赖于DOM结构
   * @param table 表格元素
   * @returns Promise<string | null>
   */
  async readTableIdFromMarkdown(table) {
    try {
      const existingId = table.getAttribute("data-table-id");
      if (existingId) {
        console.log(`\u4ECE\u8868\u683C\u5143\u7D20\u5C5E\u6027\u4E2D\u83B7\u53D6ID: ${existingId}`);
        return existingId;
      }
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (!activeView) {
        console.log("\u672A\u627E\u5230\u6D3B\u52A8\u89C6\u56FE");
        return null;
      }
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        console.log("\u672A\u627E\u5230\u6D3B\u52A8\u6587\u4EF6");
        return null;
      }
      console.log(`\u5C1D\u8BD5\u4ECE\u6587\u4EF6\u5185\u5BB9\u4E2D\u67E5\u627E\u8868\u683CID: ${activeFile.path}`);
      const content = await this.app.vault.read(activeFile);
      const tableFeature = this.tableIdManager.extractTableFeature(table);
      console.log(`\u5F53\u524D\u8868\u683C\u7279\u5F81:`, tableFeature);
      const tableInfos = this.tableIdManager.extractTableIdsFromMarkdown(content);
      console.log(`\u4ECE\u6587\u4EF6\u4E2D\u63D0\u53D6\u7684\u8868\u683C\u4FE1\u606F:`, tableInfos);
      const allTables = Array.from(document.querySelectorAll("table"));
      const tableIndex = allTables.indexOf(table);
      console.log(`\u8868\u683C\u5728DOM\u4E2D\u7684\u4F4D\u7F6E: \u7B2C${tableIndex}\u4E2A\u8868\u683C\uFF08\u5171${allTables.length}\u4E2A\uFF09`);
      const similarityThreshold = this.settings.featureSimilarityThreshold || 0.7;
      if (this.settings.preferFeatureMatching) {
        if (tableFeature) {
          let bestMatchId = "";
          let bestMatchScore = 0;
          for (const { id, feature } of tableInfos) {
            if (!id)
              continue;
            const score = this.tableIdManager.calculateFeatureSimilarity(tableFeature, feature);
            console.log(`\u8868\u683CID ${id} \u7684\u7279\u5F81\u76F8\u4F3C\u5EA6: ${score.toFixed(2)}`);
            if (score > bestMatchScore) {
              bestMatchScore = score;
              bestMatchId = id;
            }
          }
          if (bestMatchId && bestMatchScore > similarityThreshold) {
            console.log(`\u901A\u8FC7\u7279\u5F81\u76F8\u4F3C\u5EA6\u5339\u914D\u627E\u5230\u8868\u683CID: ${bestMatchId}\uFF08\u76F8\u4F3C\u5EA6: ${bestMatchScore.toFixed(2)}\uFF09`);
            table.setAttribute("data-table-id", bestMatchId);
            return bestMatchId;
          }
        }
        if (tableIndex !== -1 && tableIndex < tableInfos.length) {
          const { id } = tableInfos[tableIndex];
          if (id) {
            console.log(`\u901A\u8FC7\u4F4D\u7F6E\u5339\u914D\u627E\u5230\u8868\u683CID: ${id}`);
            table.setAttribute("data-table-id", id);
            return id;
          }
        }
      } else {
        if (tableIndex !== -1 && tableIndex < tableInfos.length) {
          const { id } = tableInfos[tableIndex];
          if (id) {
            console.log(`\u901A\u8FC7\u4F4D\u7F6E\u7CBE\u786E\u5339\u914D\u627E\u5230\u8868\u683CID: ${id}`);
            table.setAttribute("data-table-id", id);
            return id;
          }
        }
        if (tableFeature) {
          let bestMatchId = "";
          let bestMatchScore = 0;
          for (const { id, feature } of tableInfos) {
            if (!id)
              continue;
            const score = this.tableIdManager.calculateFeatureSimilarity(tableFeature, feature);
            console.log(`\u8868\u683CID ${id} \u7684\u7279\u5F81\u76F8\u4F3C\u5EA6: ${score.toFixed(2)}`);
            if (score > bestMatchScore) {
              bestMatchScore = score;
              bestMatchId = id;
            }
          }
          if (bestMatchId && bestMatchScore > similarityThreshold) {
            console.log(`\u901A\u8FC7\u7279\u5F81\u76F8\u4F3C\u5EA6\u5339\u914D\u627E\u5230\u8868\u683CID: ${bestMatchId}\uFF08\u76F8\u4F3C\u5EA6: ${bestMatchScore.toFixed(2)}\uFF09`);
            table.setAttribute("data-table-id", bestMatchId);
            return bestMatchId;
          }
        }
      }
      if (tableFeature) {
        for (const { id, feature } of tableInfos) {
          if (!id)
            continue;
          if (feature.rows === tableFeature.rows && feature.cols === tableFeature.cols) {
            console.log(`\u901A\u8FC7\u8868\u683C\u7ED3\u6784\u5339\u914D\u627E\u5230\u8868\u683CID: ${id}`);
            table.setAttribute("data-table-id", id);
            return id;
          }
        }
      }
      if (this.settings.enableTableIds) {
        const newId = this.tableIdManager.generateTableId();
        console.log(`\u672A\u627E\u5230\u8868\u683CID\uFF0C\u751F\u6210\u65B0ID: ${newId}`);
        table.setAttribute("data-table-id", newId);
        return newId;
      }
      console.log("\u672A\u5728Markdown\u5185\u5BB9\u4E2D\u627E\u5230\u8868\u683CID\uFF0C\u4E14\u8868\u683CID\u529F\u80FD\u5DF2\u7981\u7528");
      return null;
    } catch (error) {
      console.error("\u4ECEMarkdown\u5185\u5BB9\u8BFB\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 设置视图模式变化监听
   */
  setupViewModeChangeListener() {
    if (this.viewModeChangeHandler) {
      this.app.workspace.off("active-leaf-change", this.viewModeChangeHandler);
      this.app.workspace.off("layout-change", this.viewModeChangeHandler);
    }
    this.viewModeChangeHandler = () => {
      this.checkAndRenderTables();
    };
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", this.viewModeChangeHandler)
    );
    this.registerEvent(
      this.app.workspace.on("layout-change", this.viewModeChangeHandler)
    );
    console.log("\u5DF2\u8BBE\u7F6E\u89C6\u56FE\u6A21\u5F0F\u53D8\u5316\u76D1\u542C\u5668");
  }
  /**
   * 检查当前模式并在需要时渲染表格
   */
  checkAndRenderTables() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
    if (!activeView)
      return;
    const isPreviewMode = activeView.getMode() === "preview";
    if (isPreviewMode && !this.lastPreviewModeState) {
      setTimeout(() => {
        renderTablesWithStoredStyles(this);
      }, 300);
    }
    this.lastPreviewModeState = isPreviewMode;
  }
};
var main_default = ObsidianSpreadsheet;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2pzb241L2Rpc3QvaW5kZXguanMiLCAic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy9zaGVldEVsZW1lbnQudHMiLCAic3JjL21hcmtkb3duVGFibGVEZXRlY3Rvci50cyIsICJzcmMvdGFibGVJZE1hbmFnZXIudHMiLCAic3JjL3RhYmxlVG9vbGJhci50cyIsICJzcmMvbWFya2Rvd25Tb3VyY2VFZGl0b3IudHMiLCAic3JjL2ljb25zLnRzIiwgInNyYy90YWJsZVN0eWxlUmVuZGVyZXIudHMiLCAic3JjL3NldHVwUHJldmlld01vZGVUYWJsZVNlbGVjdGlvbi50cyIsICJzcmMvdGFibGVSZXNpemVyLnRzIiwgInNyYy90YWJsZURhdGFFeHRyYWN0b3IudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5KU09ONSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuXHRmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdFx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xuXHR9XG5cblx0dmFyIF9nbG9iYWwgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5cdHZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuXHQgID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG5cdCAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG5cdCAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHRpZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgeyBfX2cgPSBnbG9iYWw7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXHR9KTtcblxuXHR2YXIgX2NvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdHZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNScgfTtcblx0aWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIHsgX19lID0gY29yZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cdH0pO1xuXHR2YXIgX2NvcmVfMSA9IF9jb3JlLnZlcnNpb247XG5cblx0dmFyIF9pc09iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG5cdH07XG5cblx0dmFyIF9hbk9iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIGlmICghX2lzT2JqZWN0KGl0KSkgeyB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7IH1cblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cblx0dmFyIF9mYWlscyA9IGZ1bmN0aW9uIChleGVjKSB7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiAhIWV4ZWMoKTtcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdH07XG5cblx0Ly8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxuXHR2YXIgX2Rlc2NyaXB0b3JzID0gIV9mYWlscyhmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG5cdH0pO1xuXG5cdHZhciBkb2N1bWVudCA9IF9nbG9iYWwuZG9jdW1lbnQ7XG5cdC8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxuXHR2YXIgaXMgPSBfaXNPYmplY3QoZG9jdW1lbnQpICYmIF9pc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblx0dmFyIF9kb21DcmVhdGUgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xuXHR9O1xuXG5cdHZhciBfaWU4RG9tRGVmaW5lID0gIV9kZXNjcmlwdG9ycyAmJiAhX2ZhaWxzKGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9kb21DcmVhdGUoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcblx0fSk7XG5cblx0Ly8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG5cblx0Ly8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcblx0Ly8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcblx0dmFyIF90b1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIChpdCwgUykge1xuXHQgIGlmICghX2lzT2JqZWN0KGl0KSkgeyByZXR1cm4gaXQ7IH1cblx0ICB2YXIgZm4sIHZhbDtcblx0ICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIV9pc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHsgcmV0dXJuIHZhbDsgfVxuXHQgIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgeyByZXR1cm4gdmFsOyB9XG5cdCAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgeyByZXR1cm4gdmFsOyB9XG5cdCAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuXHR9O1xuXG5cdHZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuXHR2YXIgZiA9IF9kZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcblx0ICBfYW5PYmplY3QoTyk7XG5cdCAgUCA9IF90b1ByaW1pdGl2ZShQLCB0cnVlKTtcblx0ICBfYW5PYmplY3QoQXR0cmlidXRlcyk7XG5cdCAgaWYgKF9pZThEb21EZWZpbmUpIHsgdHJ5IHtcblx0ICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcblx0ICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH0gfVxuXHQgIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHsgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTsgfVxuXHQgIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIHsgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7IH1cblx0ICByZXR1cm4gTztcblx0fTtcblxuXHR2YXIgX29iamVjdERwID0ge1xuXHRcdGY6IGZcblx0fTtcblxuXHR2YXIgX3Byb3BlcnR5RGVzYyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG5cdCAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG5cdCAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcblx0ICAgIHZhbHVlOiB2YWx1ZVxuXHQgIH07XG5cdH07XG5cblx0dmFyIF9oaWRlID0gX2Rlc2NyaXB0b3JzID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuXHQgIHJldHVybiBfb2JqZWN0RHAuZihvYmplY3QsIGtleSwgX3Byb3BlcnR5RGVzYygxLCB2YWx1ZSkpO1xuXHR9IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuXHQgIG9iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fTtcblxuXHR2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIF9oYXMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuXHQgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xuXHR9O1xuXG5cdHZhciBpZCA9IDA7XG5cdHZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5cdHZhciBfdWlkID0gZnVuY3Rpb24gKGtleSkge1xuXHQgIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG5cdH07XG5cblx0dmFyIF9saWJyYXJ5ID0gZmFsc2U7XG5cblx0dmFyIF9zaGFyZWQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdHZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcblx0dmFyIHN0b3JlID0gX2dsb2JhbFtTSEFSRURdIHx8IChfZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cblx0KG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0ICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcblx0fSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuXHQgIHZlcnNpb246IF9jb3JlLnZlcnNpb24sXG5cdCAgbW9kZTogX2xpYnJhcnkgPyAncHVyZScgOiAnZ2xvYmFsJyxcblx0ICBjb3B5cmlnaHQ6ICdcdTAwQTkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcblx0fSk7XG5cdH0pO1xuXG5cdHZhciBfZnVuY3Rpb25Ub1N0cmluZyA9IF9zaGFyZWQoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG5cblx0dmFyIF9yZWRlZmluZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcblx0dmFyIFNSQyA9IF91aWQoJ3NyYycpO1xuXG5cdHZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xuXHR2YXIgVFBMID0gKCcnICsgX2Z1bmN0aW9uVG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cblx0X2NvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiBfZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcblx0fTtcblxuXHQobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcblx0ICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcblx0ICBpZiAoaXNGdW5jdGlvbikgeyBfaGFzKHZhbCwgJ25hbWUnKSB8fCBfaGlkZSh2YWwsICduYW1lJywga2V5KTsgfVxuXHQgIGlmIChPW2tleV0gPT09IHZhbCkgeyByZXR1cm47IH1cblx0ICBpZiAoaXNGdW5jdGlvbikgeyBfaGFzKHZhbCwgU1JDKSB8fCBfaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpOyB9XG5cdCAgaWYgKE8gPT09IF9nbG9iYWwpIHtcblx0ICAgIE9ba2V5XSA9IHZhbDtcblx0ICB9IGVsc2UgaWYgKCFzYWZlKSB7XG5cdCAgICBkZWxldGUgT1trZXldO1xuXHQgICAgX2hpZGUoTywga2V5LCB2YWwpO1xuXHQgIH0gZWxzZSBpZiAoT1trZXldKSB7XG5cdCAgICBPW2tleV0gPSB2YWw7XG5cdCAgfSBlbHNlIHtcblx0ICAgIF9oaWRlKE8sIGtleSwgdmFsKTtcblx0ICB9XG5cdC8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxuXHR9KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8IF9mdW5jdGlvblRvU3RyaW5nLmNhbGwodGhpcyk7XG5cdH0pO1xuXHR9KTtcblxuXHR2YXIgX2FGdW5jdGlvbiA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgeyB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpOyB9XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG5cdC8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xuXG5cdHZhciBfY3R4ID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcblx0ICBfYUZ1bmN0aW9uKGZuKTtcblx0ICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmbjsgfVxuXHQgIHN3aXRjaCAobGVuZ3RoKSB7XG5cdCAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcblx0ICAgIH07XG5cdCAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcblx0ICAgIH07XG5cdCAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcblx0ICAgIH07XG5cdCAgfVxuXHQgIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuXHQgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG5cdCAgfTtcblx0fTtcblxuXHR2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cblx0dmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG5cdCAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG5cdCAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG5cdCAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG5cdCAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcblx0ICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG5cdCAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IF9nbG9iYWwgOiBJU19TVEFUSUMgPyBfZ2xvYmFsW25hbWVdIHx8IChfZ2xvYmFsW25hbWVdID0ge30pIDogKF9nbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG5cdCAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBfY29yZSA6IF9jb3JlW25hbWVdIHx8IChfY29yZVtuYW1lXSA9IHt9KTtcblx0ICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcblx0ICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuXHQgIGlmIChJU19HTE9CQUwpIHsgc291cmNlID0gbmFtZTsgfVxuXHQgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuXHQgICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG5cdCAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuXHQgICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcblx0ICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG5cdCAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuXHQgICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBfY3R4KG91dCwgX2dsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBfY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG5cdCAgICAvLyBleHRlbmQgZ2xvYmFsXG5cdCAgICBpZiAodGFyZ2V0KSB7IF9yZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTsgfVxuXHQgICAgLy8gZXhwb3J0XG5cdCAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgeyBfaGlkZShleHBvcnRzLCBrZXksIGV4cCk7IH1cblx0ICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgeyBleHBQcm90b1trZXldID0gb3V0OyB9XG5cdCAgfVxuXHR9O1xuXHRfZ2xvYmFsLmNvcmUgPSBfY29yZTtcblx0Ly8gdHlwZSBiaXRtYXBcblx0JGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcblx0JGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcblx0JGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcblx0JGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuXHQkZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcblx0JGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG5cdCRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuXHQkZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcblx0dmFyIF9leHBvcnQgPSAkZXhwb3J0O1xuXG5cdC8vIDcuMS40IFRvSW50ZWdlclxuXHR2YXIgY2VpbCA9IE1hdGguY2VpbDtcblx0dmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblx0dmFyIF90b0ludGVnZXIgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcblx0fTtcblxuXHQvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxuXHR2YXIgX2RlZmluZWQgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB7IHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTsgfVxuXHQgIHJldHVybiBpdDtcblx0fTtcblxuXHQvLyB0cnVlICAtPiBTdHJpbmcjYXRcblx0Ly8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5cdHZhciBfc3RyaW5nQXQgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcblx0ICAgIHZhciBzID0gU3RyaW5nKF9kZWZpbmVkKHRoYXQpKTtcblx0ICAgIHZhciBpID0gX3RvSW50ZWdlcihwb3MpO1xuXHQgICAgdmFyIGwgPSBzLmxlbmd0aDtcblx0ICAgIHZhciBhLCBiO1xuXHQgICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgeyByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7IH1cblx0ICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG5cdCAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuXHQgICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuXHQgICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcblx0ICB9O1xuXHR9O1xuXG5cdHZhciAkYXQgPSBfc3RyaW5nQXQoZmFsc2UpO1xuXHRfZXhwb3J0KF9leHBvcnQuUCwgJ1N0cmluZycsIHtcblx0ICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcblx0ICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG5cdCAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG5cdCAgfVxuXHR9KTtcblxuXHR2YXIgY29kZVBvaW50QXQgPSBfY29yZS5TdHJpbmcuY29kZVBvaW50QXQ7XG5cblx0dmFyIG1heCA9IE1hdGgubWF4O1xuXHR2YXIgbWluID0gTWF0aC5taW47XG5cdHZhciBfdG9BYnNvbHV0ZUluZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcblx0ICBpbmRleCA9IF90b0ludGVnZXIoaW5kZXgpO1xuXHQgIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xuXHR9O1xuXG5cdHZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXHR2YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuXHQvLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG5cdF9leHBvcnQoX2V4cG9ydC5TICsgX2V4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuXHQgIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG5cdCAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7XG5cdCAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cdCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cdCAgICB2YXIgcmVzID0gW107XG5cdCAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICB2YXIgaSA9IDA7XG5cdCAgICB2YXIgY29kZTtcblx0ICAgIHdoaWxlIChhTGVuID4gaSkge1xuXHQgICAgICBjb2RlID0gK2FyZ3VtZW50cyQxW2krK107XG5cdCAgICAgIGlmIChfdG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgeyB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTsgfVxuXHQgICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuXHQgICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG5cdCAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuXHQgICAgICApO1xuXHQgICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuXHQgIH1cblx0fSk7XG5cblx0dmFyIGZyb21Db2RlUG9pbnQgPSBfY29yZS5TdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuXHQvLyBUaGlzIGlzIGEgZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0LlxuXHR2YXIgU3BhY2VfU2VwYXJhdG9yID0gL1tcXHUxNjgwXFx1MjAwMC1cXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXS87XG5cdHZhciBJRF9TdGFydCA9IC9bXFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NkFcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTA5RkNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZFRS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4ODRcXHUxODg3LVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUM4MC1cXHUxQzg4XFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE2MC1cXHUyMTg4XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0VFXFx1MkNGMlxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDgwLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyRTJGXFx1MzAwNS1cXHUzMDA3XFx1MzAyMS1cXHUzMDI5XFx1MzAzMS1cXHUzMDM1XFx1MzAzOC1cXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJFXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkVBXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RUZcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QUVcXHVBN0IwLVxcdUE3QjdcXHVBN0Y3LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE5MEEtXFx1QTkyNVxcdUE5MzAtXFx1QTk0NlxcdUE5NjAtXFx1QTk3Q1xcdUE5ODQtXFx1QTlCMlxcdUE5Q0ZcXHVBOUUwLVxcdUE5RTRcXHVBOUU2LVxcdUE5RUZcXHVBOUZBLVxcdUE5RkVcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTYwLVxcdUFBNzZcXHVBQTdBXFx1QUE3RS1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUFcXHVBQUYyLVxcdUFBRjRcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjVcXHVBQjcwLVxcdUFCRTJcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERDQwLVxcdURENzRcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERjAwLVxcdURGMUZcXHVERjJELVxcdURGNEFcXHVERjUwLVxcdURGNzVcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZcXHVERkQxLVxcdURGRDVdfFxcdUQ4MDFbXFx1REMwMC1cXHVEQzlEXFx1RENCMC1cXHVEQ0QzXFx1RENEOC1cXHVEQ0ZCXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMFxcdURFMTAtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzM1xcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNFxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDRbXFx1REMwMy1cXHVEQzM3XFx1REM4My1cXHVEQ0FGXFx1RENEMC1cXHVEQ0U4XFx1REQwMy1cXHVERDI2XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU4MC1cXHVERUFBXFx1REYwMC1cXHVERjE5XXxcXHVEODA2W1xcdURDQTAtXFx1RENERlxcdURDRkZcXHVERTAwXFx1REUwQi1cXHVERTMyXFx1REUzQVxcdURFNTBcXHVERTVDLVxcdURFODNcXHVERTg2LVxcdURFODlcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzJFXFx1REM0MFxcdURDNzItXFx1REM4RlxcdUREMDAtXFx1REQwNlxcdUREMDhcXHVERDA5XFx1REQwQi1cXHVERDMwXFx1REQ0Nl18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4MUMtXFx1RDgyMFxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3MlxcdUQ4NzQtXFx1RDg3OV1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REVEMC1cXHVERUVEXFx1REYwMC1cXHVERjJGXFx1REY0MC1cXHVERjQzXFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTBcXHVERjkzLVxcdURGOUZcXHVERkUwXFx1REZFMV18XFx1RDgyMVtcXHVEQzAwLVxcdURGRUNdfFxcdUQ4MjJbXFx1REMwMC1cXHVERUYyXXxcXHVEODJDW1xcdURDMDAtXFx1REQxRVxcdURENzAtXFx1REVGQl18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQl18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRcXHVERDAwLVxcdURENDNdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFcXHVERUIwLVxcdURGRkZdfFxcdUQ4N0FbXFx1REMwMC1cXHVERkUwXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0vO1xuXHR2YXIgSURfQ29udGludWUgPSAvW1xceEFBXFx4QjVcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzAwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0ODMtXFx1MDQ4N1xcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNTkxLVxcdTA1QkRcXHUwNUJGXFx1MDVDMVxcdTA1QzJcXHUwNUM0XFx1MDVDNVxcdTA1QzdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjEwLVxcdTA2MUFcXHUwNjIwLVxcdTA2NjlcXHUwNjZFLVxcdTA2RDNcXHUwNkQ1LVxcdTA2RENcXHUwNkRGLVxcdTA2RThcXHUwNkVBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMC1cXHUwNzRBXFx1MDc0RC1cXHUwN0IxXFx1MDdDMC1cXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgyRFxcdTA4NDAtXFx1MDg1QlxcdTA4NjAtXFx1MDg2QVxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA4RDQtXFx1MDhFMVxcdTA4RTMtXFx1MDk2M1xcdTA5NjYtXFx1MDk2RlxcdTA5NzEtXFx1MDk4M1xcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkMtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQi1cXHUwOUNFXFx1MDlEN1xcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUzXFx1MDlFNi1cXHUwOUYxXFx1MDlGQ1xcdTBBMDEtXFx1MEEwM1xcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEEzQ1xcdTBBM0UtXFx1MEE0MlxcdTBBNDdcXHUwQTQ4XFx1MEE0Qi1cXHUwQTREXFx1MEE1MVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTY2LVxcdTBBNzVcXHUwQTgxLVxcdTBBODNcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkMtXFx1MEFDNVxcdTBBQzctXFx1MEFDOVxcdTBBQ0ItXFx1MEFDRFxcdTBBRDBcXHUwQUUwLVxcdTBBRTNcXHUwQUU2LVxcdTBBRUZcXHUwQUY5LVxcdTBBRkZcXHUwQjAxLVxcdTBCMDNcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzQy1cXHUwQjQ0XFx1MEI0N1xcdTBCNDhcXHUwQjRCLVxcdTBCNERcXHUwQjU2XFx1MEI1N1xcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYzXFx1MEI2Ni1cXHUwQjZGXFx1MEI3MVxcdTBCODJcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCQkUtXFx1MEJDMlxcdTBCQzYtXFx1MEJDOFxcdTBCQ0EtXFx1MEJDRFxcdTBCRDBcXHUwQkQ3XFx1MEJFNi1cXHUwQkVGXFx1MEMwMC1cXHUwQzAzXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRC1cXHUwQzQ0XFx1MEM0Ni1cXHUwQzQ4XFx1MEM0QS1cXHUwQzREXFx1MEM1NVxcdTBDNTZcXHUwQzU4LVxcdTBDNUFcXHUwQzYwLVxcdTBDNjNcXHUwQzY2LVxcdTBDNkZcXHUwQzgwLVxcdTBDODNcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JDLVxcdTBDQzRcXHUwQ0M2LVxcdTBDQzhcXHUwQ0NBLVxcdTBDQ0RcXHUwQ0Q1XFx1MENENlxcdTBDREVcXHUwQ0UwLVxcdTBDRTNcXHUwQ0U2LVxcdTBDRUZcXHUwQ0YxXFx1MENGMlxcdTBEMDAtXFx1MEQwM1xcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQ0NFxcdTBENDYtXFx1MEQ0OFxcdTBENEEtXFx1MEQ0RVxcdTBENTQtXFx1MEQ1N1xcdTBENUYtXFx1MEQ2M1xcdTBENjYtXFx1MEQ2RlxcdTBEN0EtXFx1MEQ3RlxcdTBEODJcXHUwRDgzXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBEQ0FcXHUwRENGLVxcdTBERDRcXHUwREQ2XFx1MEREOC1cXHUwRERGXFx1MERFNi1cXHUwREVGXFx1MERGMlxcdTBERjNcXHUwRTAxLVxcdTBFM0FcXHUwRTQwLVxcdTBFNEVcXHUwRTUwLVxcdTBFNTlcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCOVxcdTBFQkItXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRUM4LVxcdTBFQ0RcXHUwRUQwLVxcdTBFRDlcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEYxOFxcdTBGMTlcXHUwRjIwLVxcdTBGMjlcXHUwRjM1XFx1MEYzN1xcdTBGMzlcXHUwRjNFLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjcxLVxcdTBGODRcXHUwRjg2LVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAwMC1cXHUxMDQ5XFx1MTA1MC1cXHUxMDlEXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzNUQtXFx1MTM1RlxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxNFxcdTE3MjAtXFx1MTczNFxcdTE3NDAtXFx1MTc1M1xcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3NzJcXHUxNzczXFx1MTc4MC1cXHUxN0QzXFx1MTdEN1xcdTE3RENcXHUxN0REXFx1MTdFMC1cXHUxN0U5XFx1MTgwQi1cXHUxODBEXFx1MTgxMC1cXHUxODE5XFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTkyMC1cXHUxOTJCXFx1MTkzMC1cXHUxOTNCXFx1MTk0Ni1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MTlEMC1cXHUxOUQ5XFx1MUEwMC1cXHUxQTFCXFx1MUEyMC1cXHUxQTVFXFx1MUE2MC1cXHUxQTdDXFx1MUE3Ri1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUFBN1xcdTFBQjAtXFx1MUFCRFxcdTFCMDAtXFx1MUI0QlxcdTFCNTAtXFx1MUI1OVxcdTFCNkItXFx1MUI3M1xcdTFCODAtXFx1MUJGM1xcdTFDMDAtXFx1MUMzN1xcdTFDNDAtXFx1MUM0OVxcdTFDNEQtXFx1MUM3RFxcdTFDODAtXFx1MUM4OFxcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNGOVxcdTFEMDAtXFx1MURGOVxcdTFERkItXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDNGXFx1MjA0MFxcdTIwNTRcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIwRDAtXFx1MjBEQ1xcdTIwRTFcXHUyMEU1LVxcdTIwRjBcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE2MC1cXHUyMTg4XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ3Ri1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkRFMC1cXHUyREZGXFx1MkUyRlxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyRlxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOTlcXHUzMDlBXFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJFXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkVBXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjJCXFx1QTY0MC1cXHVBNjZGXFx1QTY3NC1cXHVBNjdEXFx1QTY3Ri1cXHVBNkYxXFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0FFXFx1QTdCMC1cXHVBN0I3XFx1QTdGNy1cXHVBODI3XFx1QTg0MC1cXHVBODczXFx1QTg4MC1cXHVBOEM1XFx1QThEMC1cXHVBOEQ5XFx1QThFMC1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTAwLVxcdUE5MkRcXHVBOTMwLVxcdUE5NTNcXHVBOTYwLVxcdUE5N0NcXHVBOTgwLVxcdUE5QzBcXHVBOUNGLVxcdUE5RDlcXHVBOUUwLVxcdUE5RkVcXHVBQTAwLVxcdUFBMzZcXHVBQTQwLVxcdUFBNERcXHVBQTUwLVxcdUFBNTlcXHVBQTYwLVxcdUFBNzZcXHVBQTdBLVxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUZcXHVBQUYyLVxcdUFBRjZcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjVcXHVBQjcwLVxcdUFCRUFcXHVBQkVDXFx1QUJFRFxcdUFCRjAtXFx1QUJGOVxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMUQtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkUwMC1cXHVGRTBGXFx1RkUyMC1cXHVGRTJGXFx1RkUzM1xcdUZFMzRcXHVGRTRELVxcdUZFNEZcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjEwLVxcdUZGMTlcXHVGRjIxLVxcdUZGM0FcXHVGRjNGXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXXxcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REQ0MC1cXHVERDc0XFx1RERGRFxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURFRTBcXHVERjAwLVxcdURGMUZcXHVERjJELVxcdURGNEFcXHVERjUwLVxcdURGN0FcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZcXHVERkQxLVxcdURGRDVdfFxcdUQ4MDFbXFx1REMwMC1cXHVEQzlEXFx1RENBMC1cXHVEQ0E5XFx1RENCMC1cXHVEQ0QzXFx1RENEOC1cXHVEQ0ZCXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMC1cXHVERTAzXFx1REUwNVxcdURFMDZcXHVERTBDLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzNcXHVERTM4LVxcdURFM0FcXHVERTNGXFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU2XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMl18XFx1RDgwNFtcXHVEQzAwLVxcdURDNDZcXHVEQzY2LVxcdURDNkZcXHVEQzdGLVxcdURDQkFcXHVEQ0QwLVxcdURDRThcXHVEQ0YwLVxcdURDRjlcXHVERDAwLVxcdUREMzRcXHVERDM2LVxcdUREM0ZcXHVERDUwLVxcdURENzNcXHVERDc2XFx1REQ4MC1cXHVEREM0XFx1RERDQS1cXHVERENDXFx1REREMC1cXHVERERBXFx1REREQ1xcdURFMDAtXFx1REUxMVxcdURFMTMtXFx1REUzN1xcdURFM0VcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERUVBXFx1REVGMC1cXHVERUY5XFx1REYwMC1cXHVERjAzXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0MtXFx1REY0NFxcdURGNDdcXHVERjQ4XFx1REY0Qi1cXHVERjREXFx1REY1MFxcdURGNTdcXHVERjVELVxcdURGNjNcXHVERjY2LVxcdURGNkNcXHVERjcwLVxcdURGNzRdfFxcdUQ4MDVbXFx1REMwMC1cXHVEQzRBXFx1REM1MC1cXHVEQzU5XFx1REM4MC1cXHVEQ0M1XFx1RENDN1xcdURDRDAtXFx1RENEOVxcdUREODAtXFx1RERCNVxcdUREQjgtXFx1RERDMFxcdURERDgtXFx1RERERFxcdURFMDAtXFx1REU0MFxcdURFNDRcXHVERTUwLVxcdURFNTlcXHVERTgwLVxcdURFQjdcXHVERUMwLVxcdURFQzlcXHVERjAwLVxcdURGMTlcXHVERjFELVxcdURGMkJcXHVERjMwLVxcdURGMzldfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0U5XFx1RENGRlxcdURFMDAtXFx1REUzRVxcdURFNDdcXHVERTUwLVxcdURFODNcXHVERTg2LVxcdURFOTlcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzM2XFx1REMzOC1cXHVEQzQwXFx1REM1MC1cXHVEQzU5XFx1REM3Mi1cXHVEQzhGXFx1REM5Mi1cXHVEQ0E3XFx1RENBOS1cXHVEQ0I2XFx1REQwMC1cXHVERDA2XFx1REQwOFxcdUREMDlcXHVERDBCLVxcdUREMzZcXHVERDNBXFx1REQzQ1xcdUREM0RcXHVERDNGLVxcdURENDdcXHVERDUwLVxcdURENTldfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDMDAtXFx1REM2RVxcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODFDLVxcdUQ4MjBcXHVEODQwLVxcdUQ4NjhcXHVEODZBLVxcdUQ4NkNcXHVEODZGLVxcdUQ4NzJcXHVEODc0LVxcdUQ4NzldW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkVdfFxcdUQ4MTFbXFx1REMwMC1cXHVERTQ2XXxcXHVEODFBW1xcdURDMDAtXFx1REUzOFxcdURFNDAtXFx1REU1RVxcdURFNjAtXFx1REU2OVxcdURFRDAtXFx1REVFRFxcdURFRjAtXFx1REVGNFxcdURGMDAtXFx1REYzNlxcdURGNDAtXFx1REY0M1xcdURGNTAtXFx1REY1OVxcdURGNjMtXFx1REY3N1xcdURGN0QtXFx1REY4Rl18XFx1RDgxQltcXHVERjAwLVxcdURGNDRcXHVERjUwLVxcdURGN0VcXHVERjhGLVxcdURGOUZcXHVERkUwXFx1REZFMV18XFx1RDgyMVtcXHVEQzAwLVxcdURGRUNdfFxcdUQ4MjJbXFx1REMwMC1cXHVERUYyXXxcXHVEODJDW1xcdURDMDAtXFx1REQxRVxcdURENzAtXFx1REVGQl18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTlcXHVEQzlEXFx1REM5RV18XFx1RDgzNFtcXHVERDY1LVxcdURENjlcXHVERDZELVxcdURENzJcXHVERDdCLVxcdUREODJcXHVERDg1LVxcdUREOEJcXHVEREFBLVxcdUREQURcXHVERTQyLVxcdURFNDRdfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQlxcdURGQ0UtXFx1REZGRl18XFx1RDgzNltcXHVERTAwLVxcdURFMzZcXHVERTNCLVxcdURFNkNcXHVERTc1XFx1REU4NFxcdURFOUItXFx1REU5RlxcdURFQTEtXFx1REVBRl18XFx1RDgzOFtcXHVEQzAwLVxcdURDMDZcXHVEQzA4LVxcdURDMThcXHVEQzFCLVxcdURDMjFcXHVEQzIzXFx1REMyNFxcdURDMjYtXFx1REMyQV18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRcXHVEQ0QwLVxcdURDRDZcXHVERDAwLVxcdURENEFcXHVERDUwLVxcdURENTldfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFcXHVERUIwLVxcdURGRkZdfFxcdUQ4N0FbXFx1REMwMC1cXHVERkUwXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF18XFx1REI0MFtcXHVERDAwLVxcdURERUZdLztcblxuXHR2YXIgdW5pY29kZSA9IHtcblx0XHRTcGFjZV9TZXBhcmF0b3I6IFNwYWNlX1NlcGFyYXRvcixcblx0XHRJRF9TdGFydDogSURfU3RhcnQsXG5cdFx0SURfQ29udGludWU6IElEX0NvbnRpbnVlXG5cdH07XG5cblx0dmFyIHV0aWwgPSB7XG5cdCAgICBpc1NwYWNlU2VwYXJhdG9yOiBmdW5jdGlvbiBpc1NwYWNlU2VwYXJhdG9yIChjKSB7XG5cdCAgICAgICAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJyAmJiB1bmljb2RlLlNwYWNlX1NlcGFyYXRvci50ZXN0KGMpXG5cdCAgICB9LFxuXG5cdCAgICBpc0lkU3RhcnRDaGFyOiBmdW5jdGlvbiBpc0lkU3RhcnRDaGFyIChjKSB7XG5cdCAgICAgICAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJyAmJiAoXG5cdCAgICAgICAgICAgIChjID49ICdhJyAmJiBjIDw9ICd6JykgfHxcblx0ICAgICAgICAoYyA+PSAnQScgJiYgYyA8PSAnWicpIHx8XG5cdCAgICAgICAgKGMgPT09ICckJykgfHwgKGMgPT09ICdfJykgfHxcblx0ICAgICAgICB1bmljb2RlLklEX1N0YXJ0LnRlc3QoYylcblx0ICAgICAgICApXG5cdCAgICB9LFxuXG5cdCAgICBpc0lkQ29udGludWVDaGFyOiBmdW5jdGlvbiBpc0lkQ29udGludWVDaGFyIChjKSB7XG5cdCAgICAgICAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJyAmJiAoXG5cdCAgICAgICAgICAgIChjID49ICdhJyAmJiBjIDw9ICd6JykgfHxcblx0ICAgICAgICAoYyA+PSAnQScgJiYgYyA8PSAnWicpIHx8XG5cdCAgICAgICAgKGMgPj0gJzAnICYmIGMgPD0gJzknKSB8fFxuXHQgICAgICAgIChjID09PSAnJCcpIHx8IChjID09PSAnXycpIHx8XG5cdCAgICAgICAgKGMgPT09ICdcXHUyMDBDJykgfHwgKGMgPT09ICdcXHUyMDBEJykgfHxcblx0ICAgICAgICB1bmljb2RlLklEX0NvbnRpbnVlLnRlc3QoYylcblx0ICAgICAgICApXG5cdCAgICB9LFxuXG5cdCAgICBpc0RpZ2l0OiBmdW5jdGlvbiBpc0RpZ2l0IChjKSB7XG5cdCAgICAgICAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJyAmJiAvWzAtOV0vLnRlc3QoYylcblx0ICAgIH0sXG5cblx0ICAgIGlzSGV4RGlnaXQ6IGZ1bmN0aW9uIGlzSGV4RGlnaXQgKGMpIHtcblx0ICAgICAgICByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnICYmIC9bMC05QS1GYS1mXS8udGVzdChjKVxuXHQgICAgfSxcblx0fTtcblxuXHR2YXIgc291cmNlO1xuXHR2YXIgcGFyc2VTdGF0ZTtcblx0dmFyIHN0YWNrO1xuXHR2YXIgcG9zO1xuXHR2YXIgbGluZTtcblx0dmFyIGNvbHVtbjtcblx0dmFyIHRva2VuO1xuXHR2YXIga2V5O1xuXHR2YXIgcm9vdDtcblxuXHR2YXIgcGFyc2UgPSBmdW5jdGlvbiBwYXJzZSAodGV4dCwgcmV2aXZlcikge1xuXHQgICAgc291cmNlID0gU3RyaW5nKHRleHQpO1xuXHQgICAgcGFyc2VTdGF0ZSA9ICdzdGFydCc7XG5cdCAgICBzdGFjayA9IFtdO1xuXHQgICAgcG9zID0gMDtcblx0ICAgIGxpbmUgPSAxO1xuXHQgICAgY29sdW1uID0gMDtcblx0ICAgIHRva2VuID0gdW5kZWZpbmVkO1xuXHQgICAga2V5ID0gdW5kZWZpbmVkO1xuXHQgICAgcm9vdCA9IHVuZGVmaW5lZDtcblxuXHQgICAgZG8ge1xuXHQgICAgICAgIHRva2VuID0gbGV4KCk7XG5cblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUuXG5cdCAgICAgICAgLy8gaWYgKCFwYXJzZVN0YXRlc1twYXJzZVN0YXRlXSkge1xuXHQgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkUGFyc2VTdGF0ZSgpXG5cdCAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgcGFyc2VTdGF0ZXNbcGFyc2VTdGF0ZV0oKTtcblx0ICAgIH0gd2hpbGUgKHRva2VuLnR5cGUgIT09ICdlb2YnKVxuXG5cdCAgICBpZiAodHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICByZXR1cm4gaW50ZXJuYWxpemUoeycnOiByb290fSwgJycsIHJldml2ZXIpXG5cdCAgICB9XG5cblx0ICAgIHJldHVybiByb290XG5cdH07XG5cblx0ZnVuY3Rpb24gaW50ZXJuYWxpemUgKGhvbGRlciwgbmFtZSwgcmV2aXZlcikge1xuXHQgICAgdmFyIHZhbHVlID0gaG9sZGVyW25hbWVdO1xuXHQgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIga2V5ID0gU3RyaW5nKGkpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gaW50ZXJuYWxpemUodmFsdWUsIGtleSwgcmV2aXZlcik7XG5cdCAgICAgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtrZXldO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsdWUsIGtleSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVwbGFjZW1lbnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBrZXkkMSBpbiB2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50JDEgPSBpbnRlcm5hbGl6ZSh2YWx1ZSwga2V5JDEsIHJldml2ZXIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50JDEgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtrZXkkMV07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwga2V5JDEsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlcGxhY2VtZW50JDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiByZXZpdmVyLmNhbGwoaG9sZGVyLCBuYW1lLCB2YWx1ZSlcblx0fVxuXG5cdHZhciBsZXhTdGF0ZTtcblx0dmFyIGJ1ZmZlcjtcblx0dmFyIGRvdWJsZVF1b3RlO1xuXHR2YXIgc2lnbjtcblx0dmFyIGM7XG5cblx0ZnVuY3Rpb24gbGV4ICgpIHtcblx0ICAgIGxleFN0YXRlID0gJ2RlZmF1bHQnO1xuXHQgICAgYnVmZmVyID0gJyc7XG5cdCAgICBkb3VibGVRdW90ZSA9IGZhbHNlO1xuXHQgICAgc2lnbiA9IDE7XG5cblx0ICAgIGZvciAoOzspIHtcblx0ICAgICAgICBjID0gcGVlaygpO1xuXG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQgICAgICAgIC8vIGlmICghbGV4U3RhdGVzW2xleFN0YXRlXSkge1xuXHQgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkTGV4U3RhdGUobGV4U3RhdGUpXG5cdCAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgdmFyIHRva2VuID0gbGV4U3RhdGVzW2xleFN0YXRlXSgpO1xuXHQgICAgICAgIGlmICh0b2tlbikge1xuXHQgICAgICAgICAgICByZXR1cm4gdG9rZW5cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBwZWVrICgpIHtcblx0ICAgIGlmIChzb3VyY2VbcG9zXSkge1xuXHQgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChzb3VyY2UuY29kZVBvaW50QXQocG9zKSlcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlYWQgKCkge1xuXHQgICAgdmFyIGMgPSBwZWVrKCk7XG5cblx0ICAgIGlmIChjID09PSAnXFxuJykge1xuXHQgICAgICAgIGxpbmUrKztcblx0ICAgICAgICBjb2x1bW4gPSAwO1xuXHQgICAgfSBlbHNlIGlmIChjKSB7XG5cdCAgICAgICAgY29sdW1uICs9IGMubGVuZ3RoO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBjb2x1bW4rKztcblx0ICAgIH1cblxuXHQgICAgaWYgKGMpIHtcblx0ICAgICAgICBwb3MgKz0gYy5sZW5ndGg7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBjXG5cdH1cblxuXHR2YXIgbGV4U3RhdGVzID0ge1xuXHQgICAgZGVmYXVsdDogZnVuY3Rpb24gZGVmYXVsdCQxICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICdcXHQnOlxuXHQgICAgICAgIGNhc2UgJ1xcdic6XG5cdCAgICAgICAgY2FzZSAnXFxmJzpcblx0ICAgICAgICBjYXNlICcgJzpcblx0ICAgICAgICBjYXNlICdcXHUwMEEwJzpcblx0ICAgICAgICBjYXNlICdcXHVGRUZGJzpcblx0ICAgICAgICBjYXNlICdcXG4nOlxuXHQgICAgICAgIGNhc2UgJ1xccic6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAyOCc6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAyOSc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICcvJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdjb21tZW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlIHVuZGVmaW5lZDpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ2VvZicpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHV0aWwuaXNTcGFjZVNlcGFyYXRvcihjKSkge1xuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZS5cblx0ICAgICAgICAvLyBpZiAoIWxleFN0YXRlc1twYXJzZVN0YXRlXSkge1xuXHQgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkTGV4U3RhdGUocGFyc2VTdGF0ZSlcblx0ICAgICAgICAvLyB9XG5cblx0ICAgICAgICByZXR1cm4gbGV4U3RhdGVzW3BhcnNlU3RhdGVdKClcblx0ICAgIH0sXG5cblx0ICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJyonOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ211bHRpTGluZUNvbW1lbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJy8nOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ3NpbmdsZUxpbmVDb21tZW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgbXVsdGlMaW5lQ29tbWVudDogZnVuY3Rpb24gbXVsdGlMaW5lQ29tbWVudCAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnKic6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnbXVsdGlMaW5lQ29tbWVudEFzdGVyaXNrJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlIHVuZGVmaW5lZDpcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgIH0sXG5cblx0ICAgIG11bHRpTGluZUNvbW1lbnRBc3RlcmlzazogZnVuY3Rpb24gbXVsdGlMaW5lQ29tbWVudEFzdGVyaXNrICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcqJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJy8nOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlZmF1bHQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIGxleFN0YXRlID0gJ211bHRpTGluZUNvbW1lbnQnO1xuXHQgICAgfSxcblxuXHQgICAgc2luZ2xlTGluZUNvbW1lbnQ6IGZ1bmN0aW9uIHNpbmdsZUxpbmVDb21tZW50ICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICdcXG4nOlxuXHQgICAgICAgIGNhc2UgJ1xccic6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAyOCc6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAyOSc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVmYXVsdCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdlb2YnKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgIH0sXG5cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAneyc6XG5cdCAgICAgICAgY2FzZSAnWyc6XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbigncHVuY3R1YXRvcicsIHJlYWQoKSlcblxuXHQgICAgICAgIGNhc2UgJ24nOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxpdGVyYWwoJ3VsbCcpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bGwnLCBudWxsKVxuXG5cdCAgICAgICAgY2FzZSAndCc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGl0ZXJhbCgncnVlJyk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignYm9vbGVhbicsIHRydWUpXG5cblx0ICAgICAgICBjYXNlICdmJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsaXRlcmFsKCdhbHNlJyk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignYm9vbGVhbicsIGZhbHNlKVxuXG5cdCAgICAgICAgY2FzZSAnLSc6XG5cdCAgICAgICAgY2FzZSAnKyc6XG5cdCAgICAgICAgICAgIGlmIChyZWFkKCkgPT09ICctJykge1xuXHQgICAgICAgICAgICAgICAgc2lnbiA9IC0xO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnc2lnbic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnLic6XG5cdCAgICAgICAgICAgIGJ1ZmZlciA9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbFBvaW50TGVhZGluZyc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnMCc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciA9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnemVybyc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnMSc6XG5cdCAgICAgICAgY2FzZSAnMic6XG5cdCAgICAgICAgY2FzZSAnMyc6XG5cdCAgICAgICAgY2FzZSAnNCc6XG5cdCAgICAgICAgY2FzZSAnNSc6XG5cdCAgICAgICAgY2FzZSAnNic6XG5cdCAgICAgICAgY2FzZSAnNyc6XG5cdCAgICAgICAgY2FzZSAnOCc6XG5cdCAgICAgICAgY2FzZSAnOSc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciA9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEludGVnZXInO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ0knOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxpdGVyYWwoJ25maW5pdHknKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgSW5maW5pdHkpXG5cblx0ICAgICAgICBjYXNlICdOJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsaXRlcmFsKCdhTicpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBOYU4pXG5cblx0ICAgICAgICBjYXNlICdcIic6XG5cdCAgICAgICAgY2FzZSBcIidcIjpcblx0ICAgICAgICAgICAgZG91YmxlUXVvdGUgPSAocmVhZCgpID09PSAnXCInKTtcblx0ICAgICAgICAgICAgYnVmZmVyID0gJyc7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ3N0cmluZyc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGlkZW50aWZpZXJOYW1lU3RhcnRFc2NhcGU6IGZ1bmN0aW9uIGlkZW50aWZpZXJOYW1lU3RhcnRFc2NhcGUgKCkge1xuXHQgICAgICAgIGlmIChjICE9PSAndScpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICB2YXIgdSA9IHVuaWNvZGVFc2NhcGUoKTtcblx0ICAgICAgICBzd2l0Y2ggKHUpIHtcblx0ICAgICAgICBjYXNlICckJzpcblx0ICAgICAgICBjYXNlICdfJzpcblx0ICAgICAgICAgICAgYnJlYWtcblxuXHQgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgIGlmICghdXRpbC5pc0lkU3RhcnRDaGFyKHUpKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBpbnZhbGlkSWRlbnRpZmllcigpXG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBicmVha1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGJ1ZmZlciArPSB1O1xuXHQgICAgICAgIGxleFN0YXRlID0gJ2lkZW50aWZpZXJOYW1lJztcblx0ICAgIH0sXG5cblx0ICAgIGlkZW50aWZpZXJOYW1lOiBmdW5jdGlvbiBpZGVudGlmaWVyTmFtZSAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnJCc6XG5cdCAgICAgICAgY2FzZSAnXyc6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAwQyc6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAwRCc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnXFxcXCc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnaWRlbnRpZmllck5hbWVFc2NhcGUnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodXRpbC5pc0lkQ29udGludWVDaGFyKGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBuZXdUb2tlbignaWRlbnRpZmllcicsIGJ1ZmZlcilcblx0ICAgIH0sXG5cblx0ICAgIGlkZW50aWZpZXJOYW1lRXNjYXBlOiBmdW5jdGlvbiBpZGVudGlmaWVyTmFtZUVzY2FwZSAoKSB7XG5cdCAgICAgICAgaWYgKGMgIT09ICd1Jykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHZhciB1ID0gdW5pY29kZUVzY2FwZSgpO1xuXHQgICAgICAgIHN3aXRjaCAodSkge1xuXHQgICAgICAgIGNhc2UgJyQnOlxuXHQgICAgICAgIGNhc2UgJ18nOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMEMnOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMEQnOlxuXHQgICAgICAgICAgICBicmVha1xuXG5cdCAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgaWYgKCF1dGlsLmlzSWRDb250aW51ZUNoYXIodSkpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IGludmFsaWRJZGVudGlmaWVyKClcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGJyZWFrXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgYnVmZmVyICs9IHU7XG5cdCAgICAgICAgbGV4U3RhdGUgPSAnaWRlbnRpZmllck5hbWUnO1xuXHQgICAgfSxcblxuXHQgICAgc2lnbjogZnVuY3Rpb24gc2lnbiQxICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcuJzpcblx0ICAgICAgICAgICAgYnVmZmVyID0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsUG9pbnRMZWFkaW5nJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICcwJzpcblx0ICAgICAgICAgICAgYnVmZmVyID0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICd6ZXJvJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICcxJzpcblx0ICAgICAgICBjYXNlICcyJzpcblx0ICAgICAgICBjYXNlICczJzpcblx0ICAgICAgICBjYXNlICc0Jzpcblx0ICAgICAgICBjYXNlICc1Jzpcblx0ICAgICAgICBjYXNlICc2Jzpcblx0ICAgICAgICBjYXNlICc3Jzpcblx0ICAgICAgICBjYXNlICc4Jzpcblx0ICAgICAgICBjYXNlICc5Jzpcblx0ICAgICAgICAgICAgYnVmZmVyID0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsSW50ZWdlcic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnSSc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGl0ZXJhbCgnbmZpbml0eScpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBzaWduICogSW5maW5pdHkpXG5cblx0ICAgICAgICBjYXNlICdOJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsaXRlcmFsKCdhTicpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBOYU4pXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgemVybzogZnVuY3Rpb24gemVybyAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnLic6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxQb2ludCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnZSc6XG5cdCAgICAgICAgY2FzZSAnRSc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxFeHBvbmVudCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAneCc6XG5cdCAgICAgICAgY2FzZSAnWCc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2hleGFkZWNpbWFsJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgc2lnbiAqIDApXG5cdCAgICB9LFxuXG5cdCAgICBkZWNpbWFsSW50ZWdlcjogZnVuY3Rpb24gZGVjaW1hbEludGVnZXIgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJy4nOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsUG9pbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ2UnOlxuXHQgICAgICAgIGNhc2UgJ0UnOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRXhwb25lbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodXRpbC5pc0RpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIHNpZ24gKiBOdW1iZXIoYnVmZmVyKSlcblx0ICAgIH0sXG5cblx0ICAgIGRlY2ltYWxQb2ludExlYWRpbmc6IGZ1bmN0aW9uIGRlY2ltYWxQb2ludExlYWRpbmcgKCkge1xuXHQgICAgICAgIGlmICh1dGlsLmlzRGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEZyYWN0aW9uJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgZGVjaW1hbFBvaW50OiBmdW5jdGlvbiBkZWNpbWFsUG9pbnQgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJ2UnOlxuXHQgICAgICAgIGNhc2UgJ0UnOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRXhwb25lbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodXRpbC5pc0RpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxGcmFjdGlvbic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIHNpZ24gKiBOdW1iZXIoYnVmZmVyKSlcblx0ICAgIH0sXG5cblx0ICAgIGRlY2ltYWxGcmFjdGlvbjogZnVuY3Rpb24gZGVjaW1hbEZyYWN0aW9uICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICdlJzpcblx0ICAgICAgICBjYXNlICdFJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEV4cG9uZW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHV0aWwuaXNEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBzaWduICogTnVtYmVyKGJ1ZmZlcikpXG5cdCAgICB9LFxuXG5cdCAgICBkZWNpbWFsRXhwb25lbnQ6IGZ1bmN0aW9uIGRlY2ltYWxFeHBvbmVudCAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnKyc6XG5cdCAgICAgICAgY2FzZSAnLSc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxFeHBvbmVudFNpZ24nO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodXRpbC5pc0RpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxFeHBvbmVudEludGVnZXInO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBkZWNpbWFsRXhwb25lbnRTaWduOiBmdW5jdGlvbiBkZWNpbWFsRXhwb25lbnRTaWduICgpIHtcblx0ICAgICAgICBpZiAodXRpbC5pc0RpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxFeHBvbmVudEludGVnZXInO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBkZWNpbWFsRXhwb25lbnRJbnRlZ2VyOiBmdW5jdGlvbiBkZWNpbWFsRXhwb25lbnRJbnRlZ2VyICgpIHtcblx0ICAgICAgICBpZiAodXRpbC5pc0RpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIHNpZ24gKiBOdW1iZXIoYnVmZmVyKSlcblx0ICAgIH0sXG5cblx0ICAgIGhleGFkZWNpbWFsOiBmdW5jdGlvbiBoZXhhZGVjaW1hbCAoKSB7XG5cdCAgICAgICAgaWYgKHV0aWwuaXNIZXhEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdoZXhhZGVjaW1hbEludGVnZXInO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBoZXhhZGVjaW1hbEludGVnZXI6IGZ1bmN0aW9uIGhleGFkZWNpbWFsSW50ZWdlciAoKSB7XG5cdCAgICAgICAgaWYgKHV0aWwuaXNIZXhEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBzaWduICogTnVtYmVyKGJ1ZmZlcikpXG5cdCAgICB9LFxuXG5cdCAgICBzdHJpbmc6IGZ1bmN0aW9uIHN0cmluZyAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnXFxcXCc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IGVzY2FwZSgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ1wiJzpcblx0ICAgICAgICAgICAgaWYgKGRvdWJsZVF1b3RlKSB7XG5cdCAgICAgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3N0cmluZycsIGJ1ZmZlcilcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSBcIidcIjpcblx0ICAgICAgICAgICAgaWYgKCFkb3VibGVRdW90ZSkge1xuXHQgICAgICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdzdHJpbmcnLCBidWZmZXIpXG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ1xcbic6XG5cdCAgICAgICAgY2FzZSAnXFxyJzpcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXG5cdCAgICAgICAgY2FzZSAnXFx1MjAyOCc6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAyOSc6XG5cdCAgICAgICAgICAgIHNlcGFyYXRvckNoYXIoYyk7XG5cdCAgICAgICAgICAgIGJyZWFrXG5cblx0ICAgICAgICBjYXNlIHVuZGVmaW5lZDpcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICB9LFxuXG5cdCAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJ3snOlxuXHQgICAgICAgIGNhc2UgJ1snOlxuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3B1bmN0dWF0b3InLCByZWFkKCkpXG5cblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgdGhlIGRlZmF1bHQgbGV4U3RhdGUgaGFuZGxlcyBlb2YuXG5cdCAgICAgICAgLy8gY2FzZSB1bmRlZmluZWQ6XG5cdCAgICAgICAgLy8gICAgIHJldHVybiBuZXdUb2tlbignZW9mJylcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBsZXhTdGF0ZSA9ICd2YWx1ZSc7XG5cdCAgICB9LFxuXG5cdCAgICBiZWZvcmVQcm9wZXJ0eU5hbWU6IGZ1bmN0aW9uIGJlZm9yZVByb3BlcnR5TmFtZSAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnJCc6XG5cdCAgICAgICAgY2FzZSAnXyc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciA9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnaWRlbnRpZmllck5hbWUnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ1xcXFwnOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2lkZW50aWZpZXJOYW1lU3RhcnRFc2NhcGUnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ30nOlxuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3B1bmN0dWF0b3InLCByZWFkKCkpXG5cblx0ICAgICAgICBjYXNlICdcIic6XG5cdCAgICAgICAgY2FzZSBcIidcIjpcblx0ICAgICAgICAgICAgZG91YmxlUXVvdGUgPSAocmVhZCgpID09PSAnXCInKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnc3RyaW5nJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHV0aWwuaXNJZFN0YXJ0Q2hhcihjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdpZGVudGlmaWVyTmFtZSc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGFmdGVyUHJvcGVydHlOYW1lOiBmdW5jdGlvbiBhZnRlclByb3BlcnR5TmFtZSAoKSB7XG5cdCAgICAgICAgaWYgKGMgPT09ICc6Jykge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3B1bmN0dWF0b3InLCByZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgYmVmb3JlUHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gYmVmb3JlUHJvcGVydHlWYWx1ZSAoKSB7XG5cdCAgICAgICAgbGV4U3RhdGUgPSAndmFsdWUnO1xuXHQgICAgfSxcblxuXHQgICAgYWZ0ZXJQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiBhZnRlclByb3BlcnR5VmFsdWUgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJywnOlxuXHQgICAgICAgIGNhc2UgJ30nOlxuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3B1bmN0dWF0b3InLCByZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgYmVmb3JlQXJyYXlWYWx1ZTogZnVuY3Rpb24gYmVmb3JlQXJyYXlWYWx1ZSAoKSB7XG5cdCAgICAgICAgaWYgKGMgPT09ICddJykge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3B1bmN0dWF0b3InLCByZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgbGV4U3RhdGUgPSAndmFsdWUnO1xuXHQgICAgfSxcblxuXHQgICAgYWZ0ZXJBcnJheVZhbHVlOiBmdW5jdGlvbiBhZnRlckFycmF5VmFsdWUgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJywnOlxuXHQgICAgICAgIGNhc2UgJ10nOlxuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3B1bmN0dWF0b3InLCByZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgZW5kOiBmdW5jdGlvbiBlbmQgKCkge1xuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGRlZmF1bHQgbGV4U3RhdGUuXG5cdCAgICAgICAgLy8gaWYgKGMgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIC8vICAgICByZWFkKClcblx0ICAgICAgICAvLyAgICAgcmV0dXJuIG5ld1Rva2VuKCdlb2YnKVxuXHQgICAgICAgIC8vIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cdH07XG5cblx0ZnVuY3Rpb24gbmV3VG9rZW4gKHR5cGUsIHZhbHVlKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHR5cGU6IHR5cGUsXG5cdCAgICAgICAgdmFsdWU6IHZhbHVlLFxuXHQgICAgICAgIGxpbmU6IGxpbmUsXG5cdCAgICAgICAgY29sdW1uOiBjb2x1bW4sXG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBsaXRlcmFsIChzKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IHM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICAgICAgdmFyIGMgPSBsaXN0W2ldO1xuXG5cdCAgICAgICAgdmFyIHAgPSBwZWVrKCk7XG5cblx0ICAgICAgICBpZiAocCAhPT0gYykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gZXNjYXBlICgpIHtcblx0ICAgIHZhciBjID0gcGVlaygpO1xuXHQgICAgc3dpdGNoIChjKSB7XG5cdCAgICBjYXNlICdiJzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuICdcXGInXG5cblx0ICAgIGNhc2UgJ2YnOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gJ1xcZidcblxuXHQgICAgY2FzZSAnbic6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiAnXFxuJ1xuXG5cdCAgICBjYXNlICdyJzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuICdcXHInXG5cblx0ICAgIGNhc2UgJ3QnOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gJ1xcdCdcblxuXHQgICAgY2FzZSAndic6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiAnXFx2J1xuXG5cdCAgICBjYXNlICcwJzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgaWYgKHV0aWwuaXNEaWdpdChwZWVrKCkpKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gJ1xcMCdcblxuXHQgICAgY2FzZSAneCc6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiBoZXhFc2NhcGUoKVxuXG5cdCAgICBjYXNlICd1Jzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuIHVuaWNvZGVFc2NhcGUoKVxuXG5cdCAgICBjYXNlICdcXG4nOlxuXHQgICAgY2FzZSAnXFx1MjAyOCc6XG5cdCAgICBjYXNlICdcXHUyMDI5Jzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuICcnXG5cblx0ICAgIGNhc2UgJ1xccic6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIGlmIChwZWVrKCkgPT09ICdcXG4nKSB7XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gJydcblxuXHQgICAgY2FzZSAnMSc6XG5cdCAgICBjYXNlICcyJzpcblx0ICAgIGNhc2UgJzMnOlxuXHQgICAgY2FzZSAnNCc6XG5cdCAgICBjYXNlICc1Jzpcblx0ICAgIGNhc2UgJzYnOlxuXHQgICAgY2FzZSAnNyc6XG5cdCAgICBjYXNlICc4Jzpcblx0ICAgIGNhc2UgJzknOlxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblxuXHQgICAgY2FzZSB1bmRlZmluZWQ6XG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gcmVhZCgpXG5cdH1cblxuXHRmdW5jdGlvbiBoZXhFc2NhcGUgKCkge1xuXHQgICAgdmFyIGJ1ZmZlciA9ICcnO1xuXHQgICAgdmFyIGMgPSBwZWVrKCk7XG5cblx0ICAgIGlmICghdXRpbC5pc0hleERpZ2l0KGMpKSB7XG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfVxuXG5cdCAgICBidWZmZXIgKz0gcmVhZCgpO1xuXG5cdCAgICBjID0gcGVlaygpO1xuXHQgICAgaWYgKCF1dGlsLmlzSGV4RGlnaXQoYykpIHtcblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9XG5cblx0ICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cblx0ICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChidWZmZXIsIDE2KSlcblx0fVxuXG5cdGZ1bmN0aW9uIHVuaWNvZGVFc2NhcGUgKCkge1xuXHQgICAgdmFyIGJ1ZmZlciA9ICcnO1xuXHQgICAgdmFyIGNvdW50ID0gNDtcblxuXHQgICAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG5cdCAgICAgICAgdmFyIGMgPSBwZWVrKCk7XG5cdCAgICAgICAgaWYgKCF1dGlsLmlzSGV4RGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChidWZmZXIsIDE2KSlcblx0fVxuXG5cdHZhciBwYXJzZVN0YXRlcyA9IHtcblx0ICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCAoKSB7XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdlb2YnKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRFT0YoKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHB1c2goKTtcblx0ICAgIH0sXG5cblx0ICAgIGJlZm9yZVByb3BlcnR5TmFtZTogZnVuY3Rpb24gYmVmb3JlUHJvcGVydHlOYW1lICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcblx0ICAgICAgICBjYXNlICdpZGVudGlmaWVyJzpcblx0ICAgICAgICBjYXNlICdzdHJpbmcnOlxuXHQgICAgICAgICAgICBrZXkgPSB0b2tlbi52YWx1ZTtcblx0ICAgICAgICAgICAgcGFyc2VTdGF0ZSA9ICdhZnRlclByb3BlcnR5TmFtZSc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAncHVuY3R1YXRvcic6XG5cdCAgICAgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGxleFN0YXRlLlxuXHQgICAgICAgICAgICAvLyBpZiAodG9rZW4udmFsdWUgIT09ICd9Jykge1xuXHQgICAgICAgICAgICAvLyAgICAgdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgICAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgICAgIHBvcCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ2VvZic6XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRFT0YoKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGxleFN0YXRlLlxuXHQgICAgICAgIC8vIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICB9LFxuXG5cdCAgICBhZnRlclByb3BlcnR5TmFtZTogZnVuY3Rpb24gYWZ0ZXJQcm9wZXJ0eU5hbWUgKCkge1xuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGxleFN0YXRlLlxuXHQgICAgICAgIC8vIGlmICh0b2tlbi50eXBlICE9PSAncHVuY3R1YXRvcicgfHwgdG9rZW4udmFsdWUgIT09ICc6Jykge1xuXHQgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgICAgIC8vIH1cblxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnZW9mJykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRU9GKClcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBwYXJzZVN0YXRlID0gJ2JlZm9yZVByb3BlcnR5VmFsdWUnO1xuXHQgICAgfSxcblxuXHQgICAgYmVmb3JlUHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gYmVmb3JlUHJvcGVydHlWYWx1ZSAoKSB7XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdlb2YnKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRFT0YoKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHB1c2goKTtcblx0ICAgIH0sXG5cblx0ICAgIGJlZm9yZUFycmF5VmFsdWU6IGZ1bmN0aW9uIGJlZm9yZUFycmF5VmFsdWUgKCkge1xuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnZW9mJykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRU9GKClcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3B1bmN0dWF0b3InICYmIHRva2VuLnZhbHVlID09PSAnXScpIHtcblx0ICAgICAgICAgICAgcG9wKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHB1c2goKTtcblx0ICAgIH0sXG5cblx0ICAgIGFmdGVyUHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gYWZ0ZXJQcm9wZXJ0eVZhbHVlICgpIHtcblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBsZXhTdGF0ZS5cblx0ICAgICAgICAvLyBpZiAodG9rZW4udHlwZSAhPT0gJ3B1bmN0dWF0b3InKSB7XG5cdCAgICAgICAgLy8gICAgIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdlb2YnKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRFT0YoKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHN3aXRjaCAodG9rZW4udmFsdWUpIHtcblx0ICAgICAgICBjYXNlICcsJzpcblx0ICAgICAgICAgICAgcGFyc2VTdGF0ZSA9ICdiZWZvcmVQcm9wZXJ0eU5hbWUnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ30nOlxuXHQgICAgICAgICAgICBwb3AoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBsZXhTdGF0ZS5cblx0ICAgICAgICAvLyB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgfSxcblxuXHQgICAgYWZ0ZXJBcnJheVZhbHVlOiBmdW5jdGlvbiBhZnRlckFycmF5VmFsdWUgKCkge1xuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGxleFN0YXRlLlxuXHQgICAgICAgIC8vIGlmICh0b2tlbi50eXBlICE9PSAncHVuY3R1YXRvcicpIHtcblx0ICAgICAgICAvLyAgICAgdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgICAgICAvLyB9XG5cblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2VvZicpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZEVPRigpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgc3dpdGNoICh0b2tlbi52YWx1ZSkge1xuXHQgICAgICAgIGNhc2UgJywnOlxuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2JlZm9yZUFycmF5VmFsdWUnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ10nOlxuXHQgICAgICAgICAgICBwb3AoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBsZXhTdGF0ZS5cblx0ICAgICAgICAvLyB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgfSxcblxuXHQgICAgZW5kOiBmdW5jdGlvbiBlbmQgKCkge1xuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGxleFN0YXRlLlxuXHQgICAgICAgIC8vIGlmICh0b2tlbi50eXBlICE9PSAnZW9mJykge1xuXHQgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgICAgIC8vIH1cblx0ICAgIH0sXG5cdH07XG5cblx0ZnVuY3Rpb24gcHVzaCAoKSB7XG5cdCAgICB2YXIgdmFsdWU7XG5cblx0ICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuXHQgICAgY2FzZSAncHVuY3R1YXRvcic6XG5cdCAgICAgICAgc3dpdGNoICh0b2tlbi52YWx1ZSkge1xuXHQgICAgICAgIGNhc2UgJ3snOlxuXHQgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuXHQgICAgICAgICAgICBicmVha1xuXG5cdCAgICAgICAgY2FzZSAnWyc6XG5cdCAgICAgICAgICAgIHZhbHVlID0gW107XG5cdCAgICAgICAgICAgIGJyZWFrXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgYnJlYWtcblxuXHQgICAgY2FzZSAnbnVsbCc6XG5cdCAgICBjYXNlICdib29sZWFuJzpcblx0ICAgIGNhc2UgJ251bWVyaWMnOlxuXHQgICAgY2FzZSAnc3RyaW5nJzpcblx0ICAgICAgICB2YWx1ZSA9IHRva2VuLnZhbHVlO1xuXHQgICAgICAgIGJyZWFrXG5cblx0ICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZS5cblx0ICAgIC8vIGRlZmF1bHQ6XG5cdCAgICAvLyAgICAgdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgIH1cblxuXHQgICAgaWYgKHJvb3QgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHJvb3QgPSB2YWx1ZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIHBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXHQgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcblx0ICAgICAgICAgICAgcGFyZW50LnB1c2godmFsdWUpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwYXJlbnQsIGtleSwge1xuXHQgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuXHQgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cblx0ICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0ICAgICAgICAgICAgcGFyc2VTdGF0ZSA9ICdiZWZvcmVBcnJheVZhbHVlJztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2JlZm9yZVByb3BlcnR5TmFtZSc7XG5cdCAgICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgY3VycmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXHQgICAgICAgIGlmIChjdXJyZW50ID09IG51bGwpIHtcblx0ICAgICAgICAgICAgcGFyc2VTdGF0ZSA9ICdlbmQnO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjdXJyZW50KSkge1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2FmdGVyQXJyYXlWYWx1ZSc7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcGFyc2VTdGF0ZSA9ICdhZnRlclByb3BlcnR5VmFsdWUnO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHBvcCAoKSB7XG5cdCAgICBzdGFjay5wb3AoKTtcblxuXHQgICAgdmFyIGN1cnJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcblx0ICAgIGlmIChjdXJyZW50ID09IG51bGwpIHtcblx0ICAgICAgICBwYXJzZVN0YXRlID0gJ2VuZCc7XG5cdCAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcblx0ICAgICAgICBwYXJzZVN0YXRlID0gJ2FmdGVyQXJyYXlWYWx1ZSc7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIHBhcnNlU3RhdGUgPSAnYWZ0ZXJQcm9wZXJ0eVZhbHVlJztcblx0ICAgIH1cblx0fVxuXG5cdC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZS5cblx0Ly8gZnVuY3Rpb24gaW52YWxpZFBhcnNlU3RhdGUgKCkge1xuXHQvLyAgICAgcmV0dXJuIG5ldyBFcnJvcihgSlNPTjU6IGludmFsaWQgcGFyc2Ugc3RhdGUgJyR7cGFyc2VTdGF0ZX0nYClcblx0Ly8gfVxuXG5cdC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZS5cblx0Ly8gZnVuY3Rpb24gaW52YWxpZExleFN0YXRlIChzdGF0ZSkge1xuXHQvLyAgICAgcmV0dXJuIG5ldyBFcnJvcihgSlNPTjU6IGludmFsaWQgbGV4IHN0YXRlICcke3N0YXRlfSdgKVxuXHQvLyB9XG5cblx0ZnVuY3Rpb24gaW52YWxpZENoYXIgKGMpIHtcblx0ICAgIGlmIChjID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICByZXR1cm4gc3ludGF4RXJyb3IoKFwiSlNPTjU6IGludmFsaWQgZW5kIG9mIGlucHV0IGF0IFwiICsgbGluZSArIFwiOlwiICsgY29sdW1uKSlcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHN5bnRheEVycm9yKChcIkpTT041OiBpbnZhbGlkIGNoYXJhY3RlciAnXCIgKyAoZm9ybWF0Q2hhcihjKSkgKyBcIicgYXQgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4pKVxuXHR9XG5cblx0ZnVuY3Rpb24gaW52YWxpZEVPRiAoKSB7XG5cdCAgICByZXR1cm4gc3ludGF4RXJyb3IoKFwiSlNPTjU6IGludmFsaWQgZW5kIG9mIGlucHV0IGF0IFwiICsgbGluZSArIFwiOlwiICsgY29sdW1uKSlcblx0fVxuXG5cdC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZS5cblx0Ly8gZnVuY3Rpb24gaW52YWxpZFRva2VuICgpIHtcblx0Ly8gICAgIGlmICh0b2tlbi50eXBlID09PSAnZW9mJykge1xuXHQvLyAgICAgICAgIHJldHVybiBzeW50YXhFcnJvcihgSlNPTjU6IGludmFsaWQgZW5kIG9mIGlucHV0IGF0ICR7bGluZX06JHtjb2x1bW59YClcblx0Ly8gICAgIH1cblxuXHQvLyAgICAgY29uc3QgYyA9IFN0cmluZy5mcm9tQ29kZVBvaW50KHRva2VuLnZhbHVlLmNvZGVQb2ludEF0KDApKVxuXHQvLyAgICAgcmV0dXJuIHN5bnRheEVycm9yKGBKU09ONTogaW52YWxpZCBjaGFyYWN0ZXIgJyR7Zm9ybWF0Q2hhcihjKX0nIGF0ICR7bGluZX06JHtjb2x1bW59YClcblx0Ly8gfVxuXG5cdGZ1bmN0aW9uIGludmFsaWRJZGVudGlmaWVyICgpIHtcblx0ICAgIGNvbHVtbiAtPSA1O1xuXHQgICAgcmV0dXJuIHN5bnRheEVycm9yKChcIkpTT041OiBpbnZhbGlkIGlkZW50aWZpZXIgY2hhcmFjdGVyIGF0IFwiICsgbGluZSArIFwiOlwiICsgY29sdW1uKSlcblx0fVxuXG5cdGZ1bmN0aW9uIHNlcGFyYXRvckNoYXIgKGMpIHtcblx0ICAgIGNvbnNvbGUud2FybigoXCJKU09ONTogJ1wiICsgKGZvcm1hdENoYXIoYykpICsgXCInIGluIHN0cmluZ3MgaXMgbm90IHZhbGlkIEVDTUFTY3JpcHQ7IGNvbnNpZGVyIGVzY2FwaW5nXCIpKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdENoYXIgKGMpIHtcblx0ICAgIHZhciByZXBsYWNlbWVudHMgPSB7XG5cdCAgICAgICAgXCInXCI6IFwiXFxcXCdcIixcblx0ICAgICAgICAnXCInOiAnXFxcXFwiJyxcblx0ICAgICAgICAnXFxcXCc6ICdcXFxcXFxcXCcsXG5cdCAgICAgICAgJ1xcYic6ICdcXFxcYicsXG5cdCAgICAgICAgJ1xcZic6ICdcXFxcZicsXG5cdCAgICAgICAgJ1xcbic6ICdcXFxcbicsXG5cdCAgICAgICAgJ1xccic6ICdcXFxccicsXG5cdCAgICAgICAgJ1xcdCc6ICdcXFxcdCcsXG5cdCAgICAgICAgJ1xcdic6ICdcXFxcdicsXG5cdCAgICAgICAgJ1xcMCc6ICdcXFxcMCcsXG5cdCAgICAgICAgJ1xcdTIwMjgnOiAnXFxcXHUyMDI4Jyxcblx0ICAgICAgICAnXFx1MjAyOSc6ICdcXFxcdTIwMjknLFxuXHQgICAgfTtcblxuXHQgICAgaWYgKHJlcGxhY2VtZW50c1tjXSkge1xuXHQgICAgICAgIHJldHVybiByZXBsYWNlbWVudHNbY11cblx0ICAgIH1cblxuXHQgICAgaWYgKGMgPCAnICcpIHtcblx0ICAgICAgICB2YXIgaGV4U3RyaW5nID0gYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTtcblx0ICAgICAgICByZXR1cm4gJ1xcXFx4JyArICgnMDAnICsgaGV4U3RyaW5nKS5zdWJzdHJpbmcoaGV4U3RyaW5nLmxlbmd0aClcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGNcblx0fVxuXG5cdGZ1bmN0aW9uIHN5bnRheEVycm9yIChtZXNzYWdlKSB7XG5cdCAgICB2YXIgZXJyID0gbmV3IFN5bnRheEVycm9yKG1lc3NhZ2UpO1xuXHQgICAgZXJyLmxpbmVOdW1iZXIgPSBsaW5lO1xuXHQgICAgZXJyLmNvbHVtbk51bWJlciA9IGNvbHVtbjtcblx0ICAgIHJldHVybiBlcnJcblx0fVxuXG5cdHZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkgKHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHtcblx0ICAgIHZhciBzdGFjayA9IFtdO1xuXHQgICAgdmFyIGluZGVudCA9ICcnO1xuXHQgICAgdmFyIHByb3BlcnR5TGlzdDtcblx0ICAgIHZhciByZXBsYWNlckZ1bmM7XG5cdCAgICB2YXIgZ2FwID0gJyc7XG5cdCAgICB2YXIgcXVvdGU7XG5cblx0ICAgIGlmIChcblx0ICAgICAgICByZXBsYWNlciAhPSBudWxsICYmXG5cdCAgICAgICAgdHlwZW9mIHJlcGxhY2VyID09PSAnb2JqZWN0JyAmJlxuXHQgICAgICAgICFBcnJheS5pc0FycmF5KHJlcGxhY2VyKVxuXHQgICAgKSB7XG5cdCAgICAgICAgc3BhY2UgPSByZXBsYWNlci5zcGFjZTtcblx0ICAgICAgICBxdW90ZSA9IHJlcGxhY2VyLnF1b3RlO1xuXHQgICAgICAgIHJlcGxhY2VyID0gcmVwbGFjZXIucmVwbGFjZXI7XG5cdCAgICB9XG5cblx0ICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICByZXBsYWNlckZ1bmMgPSByZXBsYWNlcjtcblx0ICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlcikpIHtcblx0ICAgICAgICBwcm9wZXJ0eUxpc3QgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IHJlcGxhY2VyOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuXHQgICAgICAgICAgICB2YXIgdiA9IGxpc3RbaV07XG5cblx0ICAgICAgICAgICAgdmFyIGl0ZW0gPSAodm9pZCAwKTtcblxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBpdGVtID0gdjtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChcblx0ICAgICAgICAgICAgICAgIHR5cGVvZiB2ID09PSAnbnVtYmVyJyB8fFxuXHQgICAgICAgICAgICAgICAgdiBpbnN0YW5jZW9mIFN0cmluZyB8fFxuXHQgICAgICAgICAgICAgICAgdiBpbnN0YW5jZW9mIE51bWJlclxuXHQgICAgICAgICAgICApIHtcblx0ICAgICAgICAgICAgICAgIGl0ZW0gPSBTdHJpbmcodik7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAoaXRlbSAhPT0gdW5kZWZpbmVkICYmIHByb3BlcnR5TGlzdC5pbmRleE9mKGl0ZW0pIDwgMCkge1xuXHQgICAgICAgICAgICAgICAgcHJvcGVydHlMaXN0LnB1c2goaXRlbSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChzcGFjZSBpbnN0YW5jZW9mIE51bWJlcikge1xuXHQgICAgICAgIHNwYWNlID0gTnVtYmVyKHNwYWNlKTtcblx0ICAgIH0gZWxzZSBpZiAoc3BhY2UgaW5zdGFuY2VvZiBTdHJpbmcpIHtcblx0ICAgICAgICBzcGFjZSA9IFN0cmluZyhzcGFjZSk7XG5cdCAgICB9XG5cblx0ICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgaWYgKHNwYWNlID4gMCkge1xuXHQgICAgICAgICAgICBzcGFjZSA9IE1hdGgubWluKDEwLCBNYXRoLmZsb29yKHNwYWNlKSk7XG5cdCAgICAgICAgICAgIGdhcCA9ICcgICAgICAgICAgJy5zdWJzdHIoMCwgc3BhY2UpO1xuXHQgICAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIGdhcCA9IHNwYWNlLnN1YnN0cigwLCAxMCk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBzZXJpYWxpemVQcm9wZXJ0eSgnJywgeycnOiB2YWx1ZX0pXG5cblx0ICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZVByb3BlcnR5IChrZXksIGhvbGRlcikge1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IGhvbGRlcltrZXldO1xuXHQgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUudG9KU09ONSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT041KGtleSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT04oa2V5KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChyZXBsYWNlckZ1bmMpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSByZXBsYWNlckZ1bmMuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdCAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG5cdCAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEJvb2xlYW4pIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS52YWx1ZU9mKCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuXHQgICAgICAgIGNhc2UgbnVsbDogcmV0dXJuICdudWxsJ1xuXHQgICAgICAgIGNhc2UgdHJ1ZTogcmV0dXJuICd0cnVlJ1xuXHQgICAgICAgIGNhc2UgZmFsc2U6IHJldHVybiAnZmFsc2UnXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHF1b3RlU3RyaW5nKHZhbHVlLCBmYWxzZSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHNlcmlhbGl6ZUFycmF5KHZhbHVlKSA6IHNlcmlhbGl6ZU9iamVjdCh2YWx1ZSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHF1b3RlU3RyaW5nICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciBxdW90ZXMgPSB7XG5cdCAgICAgICAgICAgIFwiJ1wiOiAwLjEsXG5cdCAgICAgICAgICAgICdcIic6IDAuMixcblx0ICAgICAgICB9O1xuXG5cdCAgICAgICAgdmFyIHJlcGxhY2VtZW50cyA9IHtcblx0ICAgICAgICAgICAgXCInXCI6IFwiXFxcXCdcIixcblx0ICAgICAgICAgICAgJ1wiJzogJ1xcXFxcIicsXG5cdCAgICAgICAgICAgICdcXFxcJzogJ1xcXFxcXFxcJyxcblx0ICAgICAgICAgICAgJ1xcYic6ICdcXFxcYicsXG5cdCAgICAgICAgICAgICdcXGYnOiAnXFxcXGYnLFxuXHQgICAgICAgICAgICAnXFxuJzogJ1xcXFxuJyxcblx0ICAgICAgICAgICAgJ1xccic6ICdcXFxccicsXG5cdCAgICAgICAgICAgICdcXHQnOiAnXFxcXHQnLFxuXHQgICAgICAgICAgICAnXFx2JzogJ1xcXFx2Jyxcblx0ICAgICAgICAgICAgJ1xcMCc6ICdcXFxcMCcsXG5cdCAgICAgICAgICAgICdcXHUyMDI4JzogJ1xcXFx1MjAyOCcsXG5cdCAgICAgICAgICAgICdcXHUyMDI5JzogJ1xcXFx1MjAyOScsXG5cdCAgICAgICAgfTtcblxuXHQgICAgICAgIHZhciBwcm9kdWN0ID0gJyc7XG5cblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBjID0gdmFsdWVbaV07XG5cdCAgICAgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgICAgICBjYXNlIFwiJ1wiOlxuXHQgICAgICAgICAgICBjYXNlICdcIic6XG5cdCAgICAgICAgICAgICAgICBxdW90ZXNbY10rKztcblx0ICAgICAgICAgICAgICAgIHByb2R1Y3QgKz0gYztcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlXG5cblx0ICAgICAgICAgICAgY2FzZSAnXFwwJzpcblx0ICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzRGlnaXQodmFsdWVbaSArIDFdKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHByb2R1Y3QgKz0gJ1xcXFx4MDAnO1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnRzW2NdKSB7XG5cdCAgICAgICAgICAgICAgICBwcm9kdWN0ICs9IHJlcGxhY2VtZW50c1tjXTtcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlXG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAoYyA8ICcgJykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGhleFN0cmluZyA9IGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNik7XG5cdCAgICAgICAgICAgICAgICBwcm9kdWN0ICs9ICdcXFxceCcgKyAoJzAwJyArIGhleFN0cmluZykuc3Vic3RyaW5nKGhleFN0cmluZy5sZW5ndGgpO1xuXHQgICAgICAgICAgICAgICAgY29udGludWVcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHByb2R1Y3QgKz0gYztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgcXVvdGVDaGFyID0gcXVvdGUgfHwgT2JqZWN0LmtleXMocXVvdGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChxdW90ZXNbYV0gPCBxdW90ZXNbYl0pID8gYSA6IGI7IH0pO1xuXG5cdCAgICAgICAgcHJvZHVjdCA9IHByb2R1Y3QucmVwbGFjZShuZXcgUmVnRXhwKHF1b3RlQ2hhciwgJ2cnKSwgcmVwbGFjZW1lbnRzW3F1b3RlQ2hhcl0pO1xuXG5cdCAgICAgICAgcmV0dXJuIHF1b3RlQ2hhciArIHByb2R1Y3QgKyBxdW90ZUNoYXJcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0ICh2YWx1ZSkge1xuXHQgICAgICAgIGlmIChzdGFjay5pbmRleE9mKHZhbHVlKSA+PSAwKSB7XG5cdCAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcignQ29udmVydGluZyBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSlNPTjUnKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG5cdCAgICAgICAgdmFyIHN0ZXBiYWNrID0gaW5kZW50O1xuXHQgICAgICAgIGluZGVudCA9IGluZGVudCArIGdhcDtcblxuXHQgICAgICAgIHZhciBrZXlzID0gcHJvcGVydHlMaXN0IHx8IE9iamVjdC5rZXlzKHZhbHVlKTtcblx0ICAgICAgICB2YXIgcGFydGlhbCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0ga2V5czsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgdmFyIGtleSA9IGxpc3RbaV07XG5cblx0ICAgICAgICAgICAgdmFyIHByb3BlcnR5U3RyaW5nID0gc2VyaWFsaXplUHJvcGVydHkoa2V5LCB2YWx1ZSk7XG5cdCAgICAgICAgICAgIGlmIChwcm9wZXJ0eVN0cmluZyAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWVtYmVyID0gc2VyaWFsaXplS2V5KGtleSkgKyAnOic7XG5cdCAgICAgICAgICAgICAgICBpZiAoZ2FwICE9PSAnJykge1xuXHQgICAgICAgICAgICAgICAgICAgIG1lbWJlciArPSAnICc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBtZW1iZXIgKz0gcHJvcGVydHlTdHJpbmc7XG5cdCAgICAgICAgICAgICAgICBwYXJ0aWFsLnB1c2gobWVtYmVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBmaW5hbDtcblx0ICAgICAgICBpZiAocGFydGlhbC5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgZmluYWwgPSAne30nO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzO1xuXHQgICAgICAgICAgICBpZiAoZ2FwID09PSAnJykge1xuXHQgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHBhcnRpYWwuam9pbignLCcpO1xuXHQgICAgICAgICAgICAgICAgZmluYWwgPSAneycgKyBwcm9wZXJ0aWVzICsgJ30nO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFyIHNlcGFyYXRvciA9ICcsXFxuJyArIGluZGVudDtcblx0ICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBwYXJ0aWFsLmpvaW4oc2VwYXJhdG9yKTtcblx0ICAgICAgICAgICAgICAgIGZpbmFsID0gJ3tcXG4nICsgaW5kZW50ICsgcHJvcGVydGllcyArICcsXFxuJyArIHN0ZXBiYWNrICsgJ30nO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgc3RhY2sucG9wKCk7XG5cdCAgICAgICAgaW5kZW50ID0gc3RlcGJhY2s7XG5cdCAgICAgICAgcmV0dXJuIGZpbmFsXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZUtleSAoa2V5KSB7XG5cdCAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHF1b3RlU3RyaW5nKGtleSwgdHJ1ZSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgZmlyc3RDaGFyID0gU3RyaW5nLmZyb21Db2RlUG9pbnQoa2V5LmNvZGVQb2ludEF0KDApKTtcblx0ICAgICAgICBpZiAoIXV0aWwuaXNJZFN0YXJ0Q2hhcihmaXJzdENoYXIpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBxdW90ZVN0cmluZyhrZXksIHRydWUpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IGZpcnN0Q2hhci5sZW5ndGg7IGkgPCBrZXkubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgaWYgKCF1dGlsLmlzSWRDb250aW51ZUNoYXIoU3RyaW5nLmZyb21Db2RlUG9pbnQoa2V5LmNvZGVQb2ludEF0KGkpKSkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBxdW90ZVN0cmluZyhrZXksIHRydWUpXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4ga2V5XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZUFycmF5ICh2YWx1ZSkge1xuXHQgICAgICAgIGlmIChzdGFjay5pbmRleE9mKHZhbHVlKSA+PSAwKSB7XG5cdCAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcignQ29udmVydGluZyBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSlNPTjUnKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG5cdCAgICAgICAgdmFyIHN0ZXBiYWNrID0gaW5kZW50O1xuXHQgICAgICAgIGluZGVudCA9IGluZGVudCArIGdhcDtcblxuXHQgICAgICAgIHZhciBwYXJ0aWFsID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgcHJvcGVydHlTdHJpbmcgPSBzZXJpYWxpemVQcm9wZXJ0eShTdHJpbmcoaSksIHZhbHVlKTtcblx0ICAgICAgICAgICAgcGFydGlhbC5wdXNoKChwcm9wZXJ0eVN0cmluZyAhPT0gdW5kZWZpbmVkKSA/IHByb3BlcnR5U3RyaW5nIDogJ251bGwnKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgZmluYWw7XG5cdCAgICAgICAgaWYgKHBhcnRpYWwubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIGZpbmFsID0gJ1tdJztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAoZ2FwID09PSAnJykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBwYXJ0aWFsLmpvaW4oJywnKTtcblx0ICAgICAgICAgICAgICAgIGZpbmFsID0gJ1snICsgcHJvcGVydGllcyArICddJztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSAnLFxcbicgKyBpbmRlbnQ7XG5cdCAgICAgICAgICAgICAgICB2YXIgcHJvcGVydGllcyQxID0gcGFydGlhbC5qb2luKHNlcGFyYXRvcik7XG5cdCAgICAgICAgICAgICAgICBmaW5hbCA9ICdbXFxuJyArIGluZGVudCArIHByb3BlcnRpZXMkMSArICcsXFxuJyArIHN0ZXBiYWNrICsgJ10nO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgc3RhY2sucG9wKCk7XG5cdCAgICAgICAgaW5kZW50ID0gc3RlcGJhY2s7XG5cdCAgICAgICAgcmV0dXJuIGZpbmFsXG5cdCAgICB9XG5cdH07XG5cblx0dmFyIEpTT041ID0ge1xuXHQgICAgcGFyc2U6IHBhcnNlLFxuXHQgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnksXG5cdH07XG5cblx0dmFyIGxpYiA9IEpTT041O1xuXG5cdHZhciBlczUgPSBsaWI7XG5cblx0cmV0dXJuIGVzNTtcblxufSkpKTtcbiIsICIvLyBpbXBvcnQgeyBNZXRhUGFyc2VyIH0gZnJvbSAnbWV0YVBhcnNlcic7XHJcbmltcG9ydCB7IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIFBsdWdpbiwgaHRtbFRvTWFya2Rvd24sIE5vdGljZSwgTWFya2Rvd25WaWV3LCBNYXJrZG93bkVkaXRWaWV3LCBNZW51LCBNZW51SXRlbSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgU2hlZXRTZXR0aW5nc1RhYiB9IGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBTaGVldEVsZW1lbnQgfSBmcm9tICcuL3NoZWV0RWxlbWVudCc7XHJcbmltcG9ydCAqIGFzIEpTT041IGZyb20gJ2pzb241JztcclxuaW1wb3J0IHsgTWFya2Rvd25UYWJsZURldGVjdG9yIH0gZnJvbSAnLi9tYXJrZG93blRhYmxlRGV0ZWN0b3InO1xyXG5pbXBvcnQgeyBUYWJsZUlkTWFuYWdlciB9IGZyb20gJy4vdGFibGVJZE1hbmFnZXInO1xyXG5pbXBvcnQgeyBUYWJsZVRvb2xiYXIgfSBmcm9tICcuL3RhYmxlVG9vbGJhcic7XHJcbmltcG9ydCB7IE1hcmtkb3duU291cmNlRWRpdG9yIH0gZnJvbSAnLi9tYXJrZG93blNvdXJjZUVkaXRvcic7XHJcbmltcG9ydCB7IGxvYWRJY29ucyB9IGZyb20gJy4vaWNvbnMnO1xyXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IEFwcCwgUGx1Z2luTWFuaWZlc3QgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IHNldHVwUHJldmlld01vZGVUYWJsZVNlbGVjdGlvbiB9IGZyb20gJy4vc2V0dXBQcmV2aWV3TW9kZVRhYmxlU2VsZWN0aW9uJztcclxuaW1wb3J0IHsgcmVuZGVyVGFibGVzV2l0aFN0b3JlZFN0eWxlcyB9IGZyb20gJy4vdGFibGVTdHlsZVJlbmRlcmVyJztcclxuaW1wb3J0IHsgVGFibGVSZXNpemVyIH0gZnJvbSAnLi90YWJsZVJlc2l6ZXInO1xyXG5pbXBvcnQgeyBUYWJsZURhdGFFeHRyYWN0b3IgfSBmcm9tICcuL3RhYmxlRGF0YUV4dHJhY3Rvcic7XHJcblxyXG5pbnRlcmZhY2UgUGx1Z2luU2V0dGluZ3Mge1xyXG5cdG5hdGl2ZVByb2Nlc3Npbmc6IGJvb2xlYW47XHJcblx0cGFyYWdyYXBoczogYm9vbGVhbjtcclxuXHRlbmFibGVDZWxsTWVyZ2luZzogYm9vbGVhbjtcclxuXHRjb25maXJtTWVyZ2VOb25FbXB0eTogYm9vbGVhbjtcclxuXHRlbmFibGVUYWJsZUlkczogYm9vbGVhbjtcclxuXHRpZFByZWZpeDogc3RyaW5nO1xyXG5cdGF1dG9DZW50ZXJNZXJnZWRDZWxsczogYm9vbGVhbjtcclxuXHR0b29sYmFyRW5hYmxlZDogYm9vbGVhbjtcclxuXHRlbmFibGVFZGl0TW9kZU9wZXJhdGlvbnM6IGJvb2xlYW47XHJcblx0dXNlVGFibGVXcmFwcGVyQ29tbWVudHM6IGJvb2xlYW47IC8vIFx1NEY3Rlx1NzUyOFx1ODg2OFx1NjgzQ1x1NkNFOFx1OTFDQVx1NTkzOVx1NkEyMVx1NUYwRlxyXG5cdGZlYXR1cmVTaW1pbGFyaXR5VGhyZXNob2xkOiBudW1iZXI7IC8vIFx1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MVx1NTMzOVx1OTE0RFx1NzZGOFx1NEYzQ1x1NUVBNlx1OTYwOFx1NTAzQ1xyXG5cdHByZWZlckZlYXR1cmVNYXRjaGluZzogYm9vbGVhbjsgLy8gXHU0RjE4XHU1MTQ4XHU0RjdGXHU3NTI4XHU3Mjc5XHU1RjgxXHU1MzM5XHU5MTREXHU4MDBDXHU5NzVFXHU0RjREXHU3RjZFXHU1MzM5XHU5MTREXHJcblx0cHJlZmVyRmlsZVN0b3JhZ2U6IGJvb2xlYW47IC8vIFx1NEYxOFx1NTE0OFx1NEY3Rlx1NzUyOFx1NjU4N1x1NEVGNlx1NUI1OFx1NTBBOFx1ODAwQ1x1OTc1RWRhdGEuanNvblxyXG5cdGF1dG9FeHBvcnRUb0ZpbGU6IGJvb2xlYW47IC8vIFx1ODFFQVx1NTJBOFx1NUMwNmRhdGEuanNvblx1NEUyRFx1NzY4NFx1NjU3MFx1NjM2RVx1NUJGQ1x1NTFGQVx1NTIzMFx1NjU4N1x1NEVGNlxyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQbHVnaW5TZXR0aW5ncyA9IHtcclxuXHRuYXRpdmVQcm9jZXNzaW5nOiB0cnVlLFxyXG5cdHBhcmFncmFwaHM6IHRydWUsXHJcblx0ZW5hYmxlQ2VsbE1lcmdpbmc6IHRydWUsXHJcblx0Y29uZmlybU1lcmdlTm9uRW1wdHk6IHRydWUsXHJcblx0ZW5hYmxlVGFibGVJZHM6IHRydWUsXHJcblx0aWRQcmVmaXg6ICd0YmwnLFxyXG5cdGF1dG9DZW50ZXJNZXJnZWRDZWxsczogdHJ1ZSxcclxuXHR0b29sYmFyRW5hYmxlZDogdHJ1ZSxcclxuXHRlbmFibGVFZGl0TW9kZU9wZXJhdGlvbnM6IHRydWUsXHJcblx0dXNlVGFibGVXcmFwcGVyQ29tbWVudHM6IGZhbHNlLCAvLyBcdTlFRDhcdThCQTRcdTRFMERcdTRGN0ZcdTc1MjhcdTZDRThcdTkxQ0FcdTU5MzlcdTZBMjFcdTVGMEZcclxuXHRmZWF0dXJlU2ltaWxhcml0eVRocmVzaG9sZDogMC43LCAvLyBcdTlFRDhcdThCQTRcdTc2RjhcdTRGM0NcdTVFQTZcdTk2MDhcdTUwM0M3MCVcclxuXHRwcmVmZXJGZWF0dXJlTWF0Y2hpbmc6IGZhbHNlLCAvLyBcdTlFRDhcdThCQTRcdTRFMERcdTRGMThcdTUxNDhcdTRGN0ZcdTc1MjhcdTcyNzlcdTVGODFcdTUzMzlcdTkxNERcclxuXHRwcmVmZXJGaWxlU3RvcmFnZTogdHJ1ZSwgLy8gXHU5RUQ4XHU4QkE0XHU0RjE4XHU1MTQ4XHU0RjdGXHU3NTI4XHU2NTg3XHU0RUY2XHU1QjU4XHU1MEE4XHJcblx0YXV0b0V4cG9ydFRvRmlsZTogZmFsc2UsIC8vIFx1OUVEOFx1OEJBNFx1NEUwRFx1ODFFQVx1NTJBOFx1NUJGQ1x1NTFGQVx1NTIzMFx1NjU4N1x1NEVGNlxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIE9ic2lkaWFuU3ByZWFkc2hlZXQgZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncztcclxuXHRyaWJib25JY29uOiBIVE1MRWxlbWVudDtcclxuXHR0YWJsZUlkTWFuYWdlcjogVGFibGVJZE1hbmFnZXI7XHJcblx0dGFibGVEZXRlY3RvcjogTWFya2Rvd25UYWJsZURldGVjdG9yO1xyXG5cdHRhYmxlVG9vbGJhcjogVGFibGVUb29sYmFyO1xyXG5cdG1hcmtkb3duU291cmNlRWRpdG9yOiBNYXJrZG93blNvdXJjZUVkaXRvcjtcclxuXHRjdXJyZW50RWRpdGluZ1RhYmxlOiB7IHN0YXJ0TGluZTogbnVtYmVyLCBlbmRMaW5lOiBudW1iZXIsIGNvbnRlbnQ6IHN0cmluZyB9IHwgbnVsbCA9IG51bGw7XHJcblx0XHJcblx0Ly8gXHU2REZCXHU1MkEwXHU4ODY4XHU2ODNDXHU1OTI3XHU1QzBGXHU4QzAzXHU2NTc0XHU1NjY4XHJcblx0dGFibGVSZXNpemVyOiBUYWJsZVJlc2l6ZXI7XHJcblx0XHJcblx0Ly8gXHU2REZCXHU1MkEwXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU2M0QwXHU1M0Q2XHU1NjY4XHJcblx0dGFibGVEYXRhRXh0cmFjdG9yOiBUYWJsZURhdGFFeHRyYWN0b3I7XHJcblx0XHJcblx0Ly8gXHU2REZCXHU1MkEwXHU4OUM2XHU1NkZFXHU2QTIxXHU1RjBGXHU3MkI2XHU2MDAxXHU4RERGXHU4RTJBXHJcblx0bGFzdFByZXZpZXdNb2RlU3RhdGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHR2aWV3TW9kZUNoYW5nZUhhbmRsZXI6ICgpID0+IHZvaWQ7XHJcblx0XHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIG1hbmlmZXN0OiBQbHVnaW5NYW5pZmVzdCkge1xyXG5cdFx0c3VwZXIoYXBwLCBtYW5pZmVzdCk7XHJcblx0XHR0aGlzLmhhbmRsZVRhYmxlQ2xpY2sgPSB0aGlzLmhhbmRsZVRhYmxlQ2xpY2suYmluZCh0aGlzKTtcclxuXHRcdHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljayA9IHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljay5iaW5kKHRoaXMpO1xyXG5cdH1cclxuXHRcclxuXHQvLyBcdTc5RkJcdTk2NjRcdTY1ODdcdTY4NjNcdTcwQjlcdTUxRkJcdTRFOEJcdTRFRjZcdTU5MDRcdTc0MDZcdTUxRkRcdTY1NzBcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ0xvYWRpbmcgQWR2YW5jZWQgVGFibGUgWFQgcGx1Z2luJyk7XHJcblx0XHRcdFxyXG5cdFx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU3ODZFXHU0RkREIHRvb2xiYXJFbmFibGVkIFx1NUM1RVx1NjAyN1x1NUI1OFx1NTcyOFxyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy50b29sYmFyRW5hYmxlZCA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy50b29sYmFyRW5hYmxlZCA9IHRydWU7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU3ODZFXHU0RkREIGVuYWJsZUVkaXRNb2RlT3BlcmF0aW9ucyBcdTVDNUVcdTYwMjdcdTVCNThcdTU3MjhcclxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlRWRpdE1vZGVPcGVyYXRpb25zID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHR0aGlzLnNldHRpbmdzLmVuYWJsZUVkaXRNb2RlT3BlcmF0aW9ucyA9IHRydWU7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU3ODZFXHU0RkREIHByZWZlckZpbGVTdG9yYWdlIFx1NUM1RVx1NjAyN1x1NUI1OFx1NTcyOFxyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5wcmVmZXJGaWxlU3RvcmFnZSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5wcmVmZXJGaWxlU3RvcmFnZSA9IHRydWU7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU3ODZFXHU0RkREIGF1dG9FeHBvcnRUb0ZpbGUgXHU1QzVFXHU2MDI3XHU1QjU4XHU1NzI4XHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmF1dG9FeHBvcnRUb0ZpbGUgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MuYXV0b0V4cG9ydFRvRmlsZSA9IGZhbHNlO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vIExvYWQgY3VzdG9tIGljb25zXHJcblx0XHRcdGxvYWRJY29ucygpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gSW5pdGlhbGl6ZSBjb21wb25lbnRzIGluIGNvcnJlY3Qgb3JkZXJcclxuXHRcdFx0Y29uc29sZS5sb2coJ0luaXRpYWxpemluZyBwbHVnaW4gY29tcG9uZW50cycpO1xyXG5cdFx0XHR0aGlzLnRhYmxlSWRNYW5hZ2VyID0gbmV3IFRhYmxlSWRNYW5hZ2VyKHRoaXMpO1xyXG5cdFx0XHR0aGlzLm1hcmtkb3duU291cmNlRWRpdG9yID0gbmV3IE1hcmtkb3duU291cmNlRWRpdG9yKHRoaXMpOyAvLyBJbml0aWFsaXplIGJlZm9yZSBUYWJsZVRvb2xiYXJcclxuXHRcdFx0dGhpcy50YWJsZURldGVjdG9yID0gbmV3IE1hcmtkb3duVGFibGVEZXRlY3Rvcih0aGlzKTtcclxuXHRcdFx0dGhpcy50YWJsZVRvb2xiYXIgPSBuZXcgVGFibGVUb29sYmFyKHRoaXMpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU1MjFEXHU1OUNCXHU1MzE2XHU4ODY4XHU2ODNDXHU1OTI3XHU1QzBGXHU4QzAzXHU2NTc0XHU1NjY4XHJcblx0XHRcdHRoaXMudGFibGVSZXNpemVyID0gbmV3IFRhYmxlUmVzaXplcih0aGlzKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NTIxRFx1NTlDQlx1NTMxNlx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NjNEMFx1NTNENlx1NTY2OFxyXG5cdFx0XHR0aGlzLnRhYmxlRGF0YUV4dHJhY3RvciA9IG5ldyBUYWJsZURhdGFFeHRyYWN0b3IodGhpcyk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBBZGQgcmliYm9uIGljb24gZm9yIHRvb2xiYXIgdG9nZ2xlXHJcblx0XHRcdHRoaXMucmliYm9uSWNvbiA9IHRoaXMuYWRkUmliYm9uSWNvbigndGFibGUtdG9vbGJhci10b2dnbGUnLCAnXHU4ODY4XHU2ODNDXHU1REU1XHU1MTc3XHU2ODBGJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMudG9nZ2xlVG9vbGJhclN0YXRlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gQWRkIHJpYmJvbiBpY29uIGZvciBlZGl0IG1vZGUgb3BlcmF0aW9uc1xyXG5cdFx0XHR0aGlzLmFkZFJpYmJvbkljb24oJ3RhYmxlLWVkaXQtbW9kZScsICdcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTg4NjhcdTY4M0NcdTY0Q0RcdTRGNUMnLCAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XHJcblx0XHRcdFx0Ly8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4OUM2XHU1NkZFXHJcblx0XHRcdFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcblx0XHRcdFx0aWYgKCFhY3RpdmVWaWV3KSB7XHJcblx0XHRcdFx0XHRuZXcgTm90aWNlKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTZEM0JcdTUyQThcdTg5QzZcdTU2RkUnKTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8gXHU2OEMwXHU2N0U1XHU1RjUzXHU1MjREXHU2QTIxXHU1RjBGXHJcblx0XHRcdFx0Y29uc3QgaXNFZGl0TW9kZSA9IGFjdGl2ZVZpZXcuZ2V0TW9kZSgpID09PSAnc291cmNlJztcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZiAoIWlzRWRpdE1vZGUpIHtcclxuXHRcdFx0XHRcdG5ldyBOb3RpY2UoJ1x1OEJGN1x1NTIwN1x1NjM2Mlx1NTIzMFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEY3Rlx1NzUyOFx1NkI2NFx1NTI5Rlx1ODBGRCcpO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvLyBcdTY2M0VcdTc5M0FcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTY0Q0RcdTRGNUNcdTgzRENcdTUzNTVcclxuXHRcdFx0XHRjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW06IE1lbnVJdGVtKSA9PiB7XHJcblx0XHRcdFx0XHRpdGVtLnNldFRpdGxlKCdcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBJRCcpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKCd0YWJsZS1pZCcpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLm1hcmtkb3duU291cmNlRWRpdG9yLmFkZFRhYmxlSWRUb01hcmtkb3duKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbTogTWVudUl0ZW0pID0+IHtcclxuXHRcdFx0XHRcdGl0ZW0uc2V0VGl0bGUoJ1x1NTQxMVx1NTNGM1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKCdtZXJnZS1yaWdodCcpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLm1hcmtkb3duU291cmNlRWRpdG9yLm1lcmdlQ2VsbHMoJ3JpZ2h0Jyk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbTogTWVudUl0ZW0pID0+IHtcclxuXHRcdFx0XHRcdGl0ZW0uc2V0VGl0bGUoJ1x1NTQxMVx1NEUwQlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpXHJcblx0XHRcdFx0XHRcdC5zZXRJY29uKCdtZXJnZS1kb3duJylcclxuXHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMubWFya2Rvd25Tb3VyY2VFZGl0b3IubWVyZ2VDZWxscygnZG93bicpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvLyBcdTY2M0VcdTc5M0FcdTgzRENcdTUzNTVcclxuXHRcdFx0XHRtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZ0KTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBVcGRhdGUgcmliYm9uIGljb24gc3RhdGVcclxuXHRcdFx0dGhpcy51cGRhdGVSaWJib25JY29uKCk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTU5ODJcdTY3OUNcdTVERTVcdTUxNzdcdTY4MEZcdTU0MkZcdTc1MjhcdUZGMENcdTUyMUJcdTVFRkFcdTVERTVcdTUxNzdcdTY4MEZcclxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MudG9vbGJhckVuYWJsZWQpIHtcclxuXHRcdFx0XHR0aGlzLmNyZWF0ZVRvb2xiYXIoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU3NkQxXHU1NDJDXHU2RDNCXHU1MkE4XHU4OUM2XHU1NkZFXHU1M0Q4XHU1MzE2XHVGRjBDXHU5MUNEXHU2NUIwXHU4QkJFXHU3RjZFXHU4ODY4XHU2ODNDXHU5MDA5XHU2MkU5XHJcblx0XHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsICgpID0+IHtcclxuXHRcdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLnRvb2xiYXJFbmFibGVkKSB7XHJcblx0XHRcdFx0XHRcdC8vIFx1NUVGNlx1OEZERlx1NjI2N1x1ODg0Q1x1RkYwQ1x1Nzg2RVx1NEZERFx1ODlDNlx1NTZGRVx1NURGMlx1NUI4Q1x1NTE2OFx1NTJBMFx1OEY3RFxyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnNldHVwVGFibGVTZWxlY3Rpb24oKTtcclxuXHRcdFx0XHRcdFx0fSwgMzAwKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU3NkQxXHU1NDJDXHU2NTg3XHU2ODYzXHU1MTg1XHU1QkI5XHU1M0Q4XHU1MzE2XHVGRjBDXHU5MUNEXHU2NUIwXHU4QkJFXHU3RjZFXHU4ODY4XHU2ODNDXHU5MDA5XHU2MkU5XHJcblx0XHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2xheW91dC1jaGFuZ2UnLCAoKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy50b29sYmFyRW5hYmxlZCkge1xyXG5cdFx0XHRcdFx0XHQvLyBcdTVFRjZcdThGREZcdTYyNjdcdTg4NENcdUZGMENcdTc4NkVcdTRGRERcdTg5QzZcdTU2RkVcdTVERjJcdTVCOENcdTUxNjhcdTUyQTBcdThGN0RcclxuXHRcdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5zZXR1cFRhYmxlU2VsZWN0aW9uKCk7XHJcblx0XHRcdFx0XHRcdH0sIDMwMCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NzZEMVx1NTQyQ1x1N0YxNlx1OEY5MVx1NTY2OFx1NTE0OVx1NjgwN1x1NkQzQlx1NTJBOFx1RkYwQ1x1NjhDMFx1NkQ0Qlx1ODg2OFx1NjgzQ1xyXG5cdFx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKCdlZGl0b3ItY2hhbmdlJywgKGVkaXRvciwgdmlldykgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MudG9vbGJhckVuYWJsZWQgJiYgdGhpcy5zZXR0aW5ncy5lbmFibGVFZGl0TW9kZU9wZXJhdGlvbnMpIHtcclxuXHRcdFx0XHRcdFx0Ly8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU1NzI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHJcblx0XHRcdFx0XHRcdGlmICh2aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3ICYmIHZpZXcuZ2V0TW9kZSgpID09PSAnc291cmNlJykge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFx1NUVGNlx1OEZERlx1NjI2N1x1ODg0Q1x1RkYwQ1x1OTA3Rlx1NTE0RFx1OTg5MVx1N0U0MVx1ODlFNlx1NTNEMVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVib3VuY2UoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gXHU2OEMwXHU2N0U1XHU1MTQ5XHU2ODA3XHU2NjJGXHU1NDI2XHU1NzI4XHU4ODY4XHU2ODNDXHU1MTg1XHJcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0YWJsZUluZm8gPSB0aGlzLm1hcmtkb3duU291cmNlRWRpdG9yLmxvY2F0ZVRhYmxlSW5NYXJrZG93bihlZGl0b3IpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHRhYmxlSW5mbykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBcdThCQkVcdTdGNkVcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTc2ODRcdTZEM0JcdTUyQThcdTg4NjhcdTY4M0NcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5zZXR1cEVkaXRNb2RlVGFibGVTZWxlY3Rpb24oZWRpdG9yKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9LCA1MDApKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU3NkQxXHU1NDJDXHU3RjE2XHU4RjkxXHU1NjY4XHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHVGRjBDXHU2OEMwXHU2RDRCXHU4ODY4XHU2ODNDXHJcblx0XHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLnRvb2xiYXJFbmFibGVkICYmIHRoaXMuc2V0dGluZ3MuZW5hYmxlRWRpdE1vZGVPcGVyYXRpb25zKSB7XHJcblx0XHRcdFx0XHQvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTg5QzZcdTU2RkVcclxuXHRcdFx0XHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0XHRcdFx0aWYgKGFjdGl2ZVZpZXcgJiYgYWN0aXZlVmlldy5nZXRNb2RlKCkgPT09ICdzb3VyY2UnKSB7XHJcblx0XHRcdFx0XHRcdC8vIFx1NUVGNlx1OEZERlx1NjI2N1x1ODg0Q1x1RkYwQ1x1Nzg2RVx1NEZERFx1NTE0OVx1NjgwN1x1NURGMlx1NjZGNFx1NjVCMFxyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBlZGl0b3IgPSBhY3RpdmVWaWV3LmVkaXRvcjtcclxuXHRcdFx0XHRcdFx0XHQvLyBcdTY4QzBcdTY3RTVcdTUxNDlcdTY4MDdcdTY2MkZcdTU0MjZcdTU3MjhcdTg4NjhcdTY4M0NcdTUxODVcclxuXHRcdFx0XHRcdFx0XHRjb25zdCB0YWJsZUluZm8gPSB0aGlzLm1hcmtkb3duU291cmNlRWRpdG9yLmxvY2F0ZVRhYmxlSW5NYXJrZG93bihlZGl0b3IpO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0YWJsZUluZm8pIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIFx1OEJCRVx1N0Y2RVx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NzY4NFx1NkQzQlx1NTJBOFx1ODg2OFx1NjgzQ1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zZXR1cEVkaXRNb2RlVGFibGVTZWxlY3Rpb24oZWRpdG9yKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0sIDEwMCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NkRGQlx1NTJBMFx1NTQ3RFx1NEVFNCAtIFx1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NEUzQVx1ODg2OFx1NjgzQ1x1NkRGQlx1NTJBMElEXHJcblx0XHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdFx0aWQ6ICdhZGQtdGFibGUtaWQtaW4tZWRpdC1tb2RlJyxcclxuXHRcdFx0XHRuYW1lOiAnXHU1NzI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU0RTNBXHU4ODY4XHU2ODNDXHU2REZCXHU1MkEwSUQnLFxyXG5cdFx0XHRcdGVkaXRvckNhbGxiYWNrOiBhc3luYyAoZWRpdG9yKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVFZGl0TW9kZU9wZXJhdGlvbnMpIHtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5tYXJrZG93blNvdXJjZUVkaXRvci5hZGRUYWJsZUlkVG9NYXJrZG93bigpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0bmV3IE5vdGljZSgnXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU3Njg0XHU4ODY4XHU2ODNDXHU2NENEXHU0RjVDXHU1REYyXHU3OTgxXHU3NTI4XHVGRjBDXHU4QkY3XHU1NzI4XHU4QkJFXHU3RjZFXHU0RTJEXHU1NDJGXHU3NTI4Jyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NkRGQlx1NTJBMFx1NTQ3RFx1NEVFNCAtIFx1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NTQxMVx1NTNGM1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRcdGlkOiAnbWVyZ2UtY2VsbC1yaWdodC1pbi1lZGl0LW1vZGUnLFxyXG5cdFx0XHRcdG5hbWU6ICdcdTU3MjhcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0MnLFxyXG5cdFx0XHRcdGVkaXRvckNhbGxiYWNrOiBhc3luYyAoZWRpdG9yKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVFZGl0TW9kZU9wZXJhdGlvbnMpIHtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5tYXJrZG93blNvdXJjZUVkaXRvci5tZXJnZUNlbGxzKCdyaWdodCcpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0bmV3IE5vdGljZSgnXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU3Njg0XHU4ODY4XHU2ODNDXHU2NENEXHU0RjVDXHU1REYyXHU3OTgxXHU3NTI4XHVGRjBDXHU4QkY3XHU1NzI4XHU4QkJFXHU3RjZFXHU0RTJEXHU1NDJGXHU3NTI4Jyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NkRGQlx1NTJBMFx1NTQ3RFx1NEVFNCAtIFx1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NTQxMVx1NEUwQlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRcdGlkOiAnbWVyZ2UtY2VsbC1kb3duLWluLWVkaXQtbW9kZScsXHJcblx0XHRcdFx0bmFtZTogJ1x1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NTQxMVx1NEUwQlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycsXHJcblx0XHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IGFzeW5jIChlZGl0b3IpID0+IHtcclxuXHRcdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUVkaXRNb2RlT3BlcmF0aW9ucykge1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLm1hcmtkb3duU291cmNlRWRpdG9yLm1lcmdlQ2VsbHMoJ2Rvd24nKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoJ1x1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NzY4NFx1ODg2OFx1NjgzQ1x1NjRDRFx1NEY1Q1x1NURGMlx1Nzk4MVx1NzUyOFx1RkYwQ1x1OEJGN1x1NTcyOFx1OEJCRVx1N0Y2RVx1NEUyRFx1NTQyRlx1NzUyOCcpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTZERkJcdTUyQTBcdTU0N0RcdTRFRTQgLSBcdTY2M0VcdTc5M0FcdTVGNTNcdTUyNERcdTg4NjhcdTY4M0NJRFxyXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRcdGlkOiAnc2hvdy1jdXJyZW50LXRhYmxlLWlkJyxcclxuXHRcdFx0XHRuYW1lOiAnXHU2NjNFXHU3OTNBXHU1RjUzXHU1MjREXHU4ODY4XHU2ODNDSUQnLFxyXG5cdFx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnNob3dDdXJyZW50VGFibGVJZCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTZERkJcdTUyQTBcdTU0N0RcdTRFRTQgLSBcdTYyQzZcdTUyMDZcdTVERjJcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcclxuXHRcdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0XHRpZDogJ3NwbGl0LW1lcmdlZC1jZWxscycsXHJcblx0XHRcdFx0bmFtZTogJ1x1NjJDNlx1NTIwNlx1NURGMlx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQycsXHJcblx0XHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IGFzeW5jIChlZGl0b3IpID0+IHtcclxuXHRcdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUVkaXRNb2RlT3BlcmF0aW9ucykge1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLm1hcmtkb3duU291cmNlRWRpdG9yLnNwbGl0TWVyZ2VkQ2VsbHMoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoJ1x1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NzY4NFx1ODg2OFx1NjgzQ1x1NjRDRFx1NEY1Q1x1NURGMlx1Nzk4MVx1NzUyOFx1RkYwQ1x1OEJGN1x1NTcyOFx1OEJCRVx1N0Y2RVx1NEUyRFx1NTQyRlx1NzUyOCcpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTZERkJcdTUyQTBcdTU0N0RcdTRFRTQgLSBcdTRGRUVcdTU5MERcdTg4NjhcdTY4M0NcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuXHRcdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0XHRpZDogJ2ZpeC1tZXJnZS1tYXJrZXJzJyxcclxuXHRcdFx0XHRuYW1lOiAnXHU0RkVFXHU1OTBEXHU4ODY4XHU2ODNDXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwJyxcclxuXHRcdFx0XHRlZGl0b3JDYWxsYmFjazogYXN5bmMgKGVkaXRvcikgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlRWRpdE1vZGVPcGVyYXRpb25zKSB7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMubWFya2Rvd25Tb3VyY2VFZGl0b3IuZGV0ZWN0QW5kRml4TWVyZ2VNYXJrZXJzKCk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRuZXcgTm90aWNlKCdcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTc2ODRcdTg4NjhcdTY4M0NcdTY0Q0RcdTRGNUNcdTVERjJcdTc5ODFcdTc1MjhcdUZGMENcdThCRjdcdTU3MjhcdThCQkVcdTdGNkVcdTRFMkRcdTU0MkZcdTc1MjgnKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU2Q0U4XHU1MThDXHU1MTc2XHU0RUQ2XHU0RThCXHU0RUY2XHU1NDhDXHU1OTA0XHU3NDA2XHU1NjY4XHJcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXHJcblx0XHRcdCdzaGVldCcsXHJcblx0XHRcdGFzeW5jIChcclxuXHRcdFx0XHRzb3VyY2U6IHN0cmluZyxcclxuXHRcdFx0XHRlbDogSFRNTFRhYmxlRWxlbWVudCxcclxuXHRcdFx0XHRjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHRcclxuXHRcdFx0KSA9PiB7XHJcblx0XHRcdFx0c291cmNlID0gc291cmNlLnRyaW0oKTtcclxuXHRcdFx0XHRjdHguYWRkQ2hpbGQoXHJcblx0XHRcdFx0XHRuZXcgU2hlZXRFbGVtZW50KFxyXG5cdFx0XHRcdFx0XHRlbCxcclxuXHRcdFx0XHRcdFx0c291cmNlLFxyXG5cdFx0XHRcdFx0XHRjdHgsXHJcblx0XHRcdFx0XHRcdHRoaXMuYXBwLFxyXG5cdFx0XHRcdFx0XHR0aGlzXHJcblx0XHRcdFx0XHQpXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0KTtcclxuXHJcblx0XHRcdC8vIFx1NkNFOFx1NTE4QyBNYXJrZG93biBcdTU0MEVcdTU5MDRcdTc0MDZcdTU2NjhcclxuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoYXN5bmMgKGVsLCBjdHgpID0+IFxyXG5cdFx0e1xyXG5cdFx0XHRpZiAoIXRoaXMuc2V0dGluZ3MubmF0aXZlUHJvY2Vzc2luZykgcmV0dXJuO1xyXG5cdFx0XHRpZiAoY3R4LmZyb250bWF0dGVyPy5bJ2Rpc2FibGUtc2hlZXQnXSA9PT0gdHJ1ZSkgcmV0dXJuO1xyXG5cclxuXHRcdFx0Y29uc3QgdGFibGVFbHMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZScpO1xyXG5cdFx0XHRpZiAodGFibGVFbHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0Zm9yIChjb25zdCB0YWJsZUVsIG9mIEFycmF5LmZyb20odGFibGVFbHMpKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmICghdGFibGVFbCkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0aWYgKHRhYmxlRWw/LmlkID09PSAnb2JzaWRpYW4tc2hlZXRzLXBhcnNlZCcpIHJldHVybjtcclxuXHJcblx0XHRcdFx0XHQvLyBcdTc4NkVcdTRGRERcdTg4NjhcdTY4M0NcdTY3MDlJRFx1RkYwOFx1NTk4Mlx1Njc5Q1x1NTQyRlx1NzUyOFx1NEU4Nlx1ODg2OFx1NjgzQ0lEXHU1MjlGXHU4MEZEXHVGRjA5XHJcblx0XHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVUYWJsZUlkcykge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlSWRNYW5hZ2VyLmVuc3VyZVRhYmxlSGFzSWQodGFibGVFbCBhcyBIVE1MRWxlbWVudCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdC8vIFx1NUU5NFx1NzUyOFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjgwN1x1OEJCMFx1RkYwOFx1NTk4Mlx1Njc5Q1x1NTQyRlx1NzUyOFx1NEU4Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTQwOFx1NUU3Nlx1NTI5Rlx1ODBGRFx1RkYwOVxyXG5cdFx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlQ2VsbE1lcmdpbmcgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdC8vIFx1NEYxOFx1NTE0OFx1NEY3Rlx1NzUyOFx1NTg5RVx1NUYzQVx1NzY4NFx1NkUzMlx1NjdEM1x1NjVCOVx1NkNENVxyXG5cdFx0XHRcdFx0XHR0aGlzLnJlbmRlck1lcmdlZENlbGxzKHRhYmxlRWwgYXMgSFRNTFRhYmxlRWxlbWVudCwgY3R4KTtcclxuXHRcdFx0XHRcdFx0Ly8gXHU1OTgyXHU2NzlDXHU4ODY4XHU2ODNDXHU2NzA5cm93c3Bhbi9jb2xzcGFuXHU1QzVFXHU2MDI3XHVGRjBDXHU0RTVGXHU1RTk0XHU3NTI4XHU1REU1XHU1MTc3XHU2ODBGXHU2ODM3XHU1RjBGXHJcblx0XHRcdFx0XHRcdGlmICh0YWJsZUVsLnF1ZXJ5U2VsZWN0b3IoJ1tyb3dzcGFuXSwgW2NvbHNwYW5dJykpIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlRGV0ZWN0b3IuYXBwbHlNZXJnZUNlbGxzTWFya2Vycyh0YWJsZUVsIGFzIEhUTUxFbGVtZW50KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFx1NTkwNFx1NzQwNlx1ODg2OFx1NjgzQy4uLlxyXG5cdFx0XHRcdFx0Ly8gXHU4RkQ5XHU5MUNDXHU0RkREXHU3NTU5XHU4ODY4XHU2ODNDXHU1OTA0XHU3NDA2XHU5MDNCXHU4RjkxXHVGRjBDXHU0RjQ2XHU3OUZCXHU5NjY0XHU0RTBFXHU1REU1XHU1MTc3XHU2ODBGXHU2NjNFXHU3OTNBL1x1OTY5MFx1ODVDRlx1NzZGOFx1NTE3M1x1NzY4NFx1NEVFM1x1NzgwMVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTZERkJcdTUyQTBcdThCQkVcdTdGNkVcdTkwMDlcdTk4NzlcdTUzNjFcclxuXHRcdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTaGVldFNldHRpbmdzVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZygnQWR2YW5jZWQgVGFibGUgWFQgcGx1Z2luIGxvYWRlZCBzdWNjZXNzZnVsbHknKTtcclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgQWR2YW5jZWQgVGFibGUgWFQgcGx1Z2luOicsIGVycm9yKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly8gXHU4QkJFXHU3RjZFXHU4OUM2XHU1NkZFXHU2QTIxXHU1RjBGXHU1M0Q4XHU1MzE2XHU3NkQxXHU1NDJDXHJcblx0XHR0aGlzLnNldHVwVmlld01vZGVDaGFuZ2VMaXN0ZW5lcigpO1xyXG5cdFx0XHJcblx0XHQvLyBcdTUyMURcdTU5Q0JcdTY4QzBcdTY3RTVcdTVGNTNcdTUyNERcdTZBMjFcdTVGMEZcclxuXHRcdHRoaXMuY2hlY2tBbmRSZW5kZXJUYWJsZXMoKTtcclxuXHRcdFxyXG5cdFx0Y29uc29sZS5sb2coJ0FkdmFuY2VkIFRhYmxlIFhUIFx1NjNEMlx1NEVGNlx1NURGMlx1NTJBMFx1OEY3RCcpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBcdTk2MzJcdTYyOTZcdTUxRkRcdTY1NzBcclxuXHQgKiBAcGFyYW0gZnVuYyBcdTg5ODFcdTYyNjdcdTg4NENcdTc2ODRcdTUxRkRcdTY1NzBcclxuXHQgKiBAcGFyYW0gd2FpdCBcdTdCNDlcdTVGODVcdTY1RjZcdTk1RjRcdUZGMDhcdTZCRUJcdTc5RDJcdUZGMDlcclxuXHQgKi9cclxuXHRwcml2YXRlIGRlYm91bmNlKGZ1bmM6IEZ1bmN0aW9uLCB3YWl0OiBudW1iZXIpIHtcclxuXHRcdGxldCB0aW1lb3V0OiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oLi4uYXJnczogYW55W10pIHtcclxuXHRcdFx0Y29uc3QgY29udGV4dCA9IHRoaXM7XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zdCBsYXRlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHRpbWVvdXQgPSBudWxsO1xyXG5cdFx0XHRcdGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAodGltZW91dCkgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG5cdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHQvLyBcdTUyMUJcdTVFRkFcdTVERTVcdTUxNzdcdTY4MEYgLSBcdTY1QjBcdTY1QjlcdTZDRDVcdUZGMENcdTUzRUFcdTU3MjhcdTk3MDBcdTg5ODFcdTY1RjZcdTUyMUJcdTVFRkFcdTVERTVcdTUxNzdcdTY4MEZcclxuXHRjcmVhdGVUb29sYmFyKCk6IHZvaWQge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ly8gXHU3OUZCXHU5NjY0XHU1REYyXHU2NzA5XHU3Njg0XHU1REU1XHU1MTc3XHU2ODBGXHJcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hZHZhbmNlZC10YWJsZS10b29sYmFyLWNvbnRhaW5lcicpLmZvckVhY2goY29udGFpbmVyID0+IHtcclxuXHRcdFx0XHRjb250YWluZXIucmVtb3ZlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU1MjFCXHU1RUZBXHU1REU1XHU1MTc3XHU2ODBGXHU1QkI5XHU1NjY4XHJcblx0XHRcdGNvbnN0IHRvb2xiYXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHRcdFx0dG9vbGJhckNvbnRhaW5lci5jbGFzc05hbWUgPSAnYWR2YW5jZWQtdGFibGUtdG9vbGJhci1jb250YWluZXInO1xyXG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRvb2xiYXJDb250YWluZXIpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU1MjFCXHU1RUZBXHU1REU1XHU1MTc3XHU2ODBGXHJcblx0XHRcdHRoaXMudGFibGVUb29sYmFyLmNyZWF0ZVRvb2xiYXIodG9vbGJhckNvbnRhaW5lcik7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTZERkJcdTUyQTBcdTY1ODdcdTY4NjNcdTcwQjlcdTUxRkJcdTRFOEJcdTRFRjZcdUZGMENcdTc1MjhcdTRFOEVcdTU5MDRcdTc0MDZcdTg4NjhcdTY4M0NcdTU5MTZcdTcwQjlcdTUxRkJcclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZURvY3VtZW50Q2xpY2spO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4OUM2XHU1NkZFXHJcblx0XHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0XHRpZiAoYWN0aXZlVmlldykge1xyXG5cdFx0XHRcdC8vIFx1NjhDMFx1NjdFNVx1NUY1M1x1NTI0RFx1NkEyMVx1NUYwRlxyXG5cdFx0XHRcdGNvbnN0IGlzRWRpdE1vZGUgPSBhY3RpdmVWaWV3LmdldE1vZGUoKSA9PT0gJ3NvdXJjZSc7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYgKGlzRWRpdE1vZGUpIHtcclxuXHRcdFx0XHRcdC8vIFx1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1RkYwQ1x1NjhDMFx1NjdFNVx1NTE0OVx1NjgwN1x1NjYyRlx1NTQyNlx1NTcyOFx1ODg2OFx1NjgzQ1x1NTE4NVxyXG5cdFx0XHRcdFx0Y29uc3QgdGFibGVJbmZvID0gdGhpcy5tYXJrZG93blNvdXJjZUVkaXRvci5sb2NhdGVUYWJsZUluTWFya2Rvd24oYWN0aXZlVmlldy5lZGl0b3IpO1xyXG5cdFx0XHRcdFx0aWYgKHRhYmxlSW5mbykge1xyXG5cdFx0XHRcdFx0XHQvLyBcdThCQkVcdTdGNkVcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTc2ODRcdTZEM0JcdTUyQThcdTg4NjhcdTY4M0NcclxuXHRcdFx0XHRcdFx0dGhpcy5zZXR1cEVkaXRNb2RlVGFibGVTZWxlY3Rpb24oYWN0aXZlVmlldy5lZGl0b3IpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBcdTU3MjhcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdUZGMENcdThCQkVcdTdGNkVcdTg4NjhcdTY4M0NcdTkwMDlcdTYyRTlcclxuXHRcdFx0XHRcdHRoaXMuc2V0dXBQcmV2aWV3TW9kZVRhYmxlU2VsZWN0aW9uKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZygnXHU1REU1XHU1MTc3XHU2ODBGXHU1REYyXHU1MjFCXHU1RUZBJyk7XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdcdTUyMUJcdTVFRkFcdTVERTVcdTUxNzdcdTY4MEZcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBcdThCQkVcdTdGNkVcdTg4NjhcdTY4M0NcdTkwMDlcdTYyRTlcdTUyOUZcdTgwRkRcclxuXHQgKi9cclxuXHRzZXR1cFRhYmxlU2VsZWN0aW9uKCk6IHZvaWQge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ly8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4OUM2XHU1NkZFXHJcblx0XHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0XHRpZiAoIWFjdGl2ZVZpZXcpIHJldHVybjtcclxuXHJcblx0XHRcdC8vIFx1NjhDMFx1NjdFNVx1NUY1M1x1NTI0RFx1NkEyMVx1NUYwRlxyXG5cdFx0XHRjb25zdCBpc0VkaXRNb2RlID0gYWN0aXZlVmlldy5nZXRNb2RlKCkgPT09ICdzb3VyY2UnO1xyXG5cclxuXHRcdFx0aWYgKGlzRWRpdE1vZGUpIHtcclxuXHRcdFx0XHQvLyBcdTU3MjhcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdUZGMENcdTRGN0ZcdTc1MjhcdTdGMTZcdThGOTFcdTU2NjhcdTRFOEJcdTRFRjZcclxuXHRcdFx0XHR0aGlzLnNldHVwRWRpdE1vZGVUYWJsZVNlbGVjdGlvbihhY3RpdmVWaWV3LmVkaXRvcik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gXHU1NzI4XHU5ODg0XHU4OUM4XHU2QTIxXHU1RjBGXHU0RTBCXHVGRjBDXHU0RjdGXHU3NTI4RE9NXHU0RThCXHU0RUY2XHJcblx0XHRcdFx0dGhpcy5zZXR1cFByZXZpZXdNb2RlVGFibGVTZWxlY3Rpb24oKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignXHU4QkJFXHU3RjZFXHU4ODY4XHU2ODNDXHU5MDA5XHU2MkU5XHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFx1OEJCRVx1N0Y2RVx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NzY4NFx1ODg2OFx1NjgzQ1x1OTAwOVx1NjJFOVx1NTI5Rlx1ODBGRFxyXG5cdCAqIEBwYXJhbSBlZGl0b3IgXHU3RjE2XHU4RjkxXHU1NjY4XHU1QjlFXHU0RjhCXHJcblx0ICovXHJcblx0c2V0dXBFZGl0TW9kZVRhYmxlU2VsZWN0aW9uKGVkaXRvcjogRWRpdG9yKTogdm9pZCB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTUxNDlcdTY4MDdcdTRGNERcdTdGNkVcclxuXHRcdFx0Y29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU1MTQ5XHU2ODA3XHU0RjREXHU3RjZFOiBcdTg4NEM9JHtjdXJzb3IubGluZX0sIFx1NTIxNz0ke2N1cnNvci5jaH1gKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NjhDMFx1NjdFNVx1NTE0OVx1NjgwN1x1NjYyRlx1NTQyNlx1NTcyOFx1ODg2OFx1NjgzQ1x1NTE4NVxyXG5cdFx0XHRjb25zdCB0YWJsZUluZm8gPSB0aGlzLm1hcmtkb3duU291cmNlRWRpdG9yLmxvY2F0ZVRhYmxlSW5NYXJrZG93bihlZGl0b3IpO1xyXG5cdFx0XHRpZiAoIXRhYmxlSW5mbykge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTY3MkFcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0MnKTtcclxuXHRcdFx0XHQvLyBcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NcdUZGMENcdTZFMDVcdTk2NjRcdTVGNTNcdTUyNERcdTdGMTZcdThGOTFcdTg4NjhcdTY4M0NcdTcyQjZcdTYwMDFcclxuXHRcdFx0XHRpZiAodGhpcy5jdXJyZW50RWRpdGluZ1RhYmxlKSB7XHJcblx0XHRcdFx0XHR0aGlzLmN1cnJlbnRFZGl0aW5nVGFibGUgPSBudWxsO1xyXG5cdFx0XHRcdFx0Ly8gXHU2RTA1XHU5NjY0XHU1REU1XHU1MTc3XHU2ODBGXHU3Njg0XHU4ODY4XHU2ODNDXHU5MDA5XHU2MkU5XHJcblx0XHRcdFx0XHRpZiAodGhpcy50YWJsZVRvb2xiYXIpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy50YWJsZVRvb2xiYXIuY2xlYXJTZWxlY3Rpb24oKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZyhgXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDOiBcdTgzMDNcdTU2RjQ9JHt0YWJsZUluZm8uc3RhcnRMaW5lfS0ke3RhYmxlSW5mby5lbmRMaW5lfWApO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU1MjFCXHU1RUZBXHU1REU1XHU1MTc3XHU2ODBGXHVGRjA4XHU1OTgyXHU2NzlDXHU1QzFBXHU2NzJBXHU1MjFCXHU1RUZBXHVGRjA5XHJcblx0XHRcdGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkdmFuY2VkLXRhYmxlLXRvb2xiYXItY29udGFpbmVyJykpIHtcclxuXHRcdFx0XHR0aGlzLmNyZWF0ZVRvb2xiYXIoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU0RkREXHU1QjU4XHU1RjUzXHU1MjREXHU3RjE2XHU4RjkxXHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcblx0XHRcdHRoaXMuY3VycmVudEVkaXRpbmdUYWJsZSA9IHtcclxuXHRcdFx0XHRzdGFydExpbmU6IHRhYmxlSW5mby5zdGFydExpbmUsXHJcblx0XHRcdFx0ZW5kTGluZTogdGFibGVJbmZvLmVuZExpbmUsXHJcblx0XHRcdFx0Y29udGVudDogdGFibGVJbmZvLmNvbnRlbnRcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1OEJCRVx1N0Y2RVx1NkQzQlx1NTJBOFx1ODg2OFx1NjgzQ1xyXG5cdFx0XHR0aGlzLnRhYmxlVG9vbGJhci5zZXRBY3RpdmVFZGl0TW9kZVRhYmxlKHRoaXMuY3VycmVudEVkaXRpbmdUYWJsZSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTgzQjdcdTUzRDZcdTUzNTVcdTUxNDNcdTY4M0NcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcdUZGMDhcdTc1MjhcdTRFOEVcdThDMDNcdThCRDVcdUZGMDlcclxuXHRcdFx0Y29uc3QgY2VsbFBvc2l0aW9uID0gdGhpcy5tYXJrZG93blNvdXJjZUVkaXRvci5nZXRDZWxsUG9zaXRpb24oZWRpdG9yKTtcclxuXHRcdFx0aWYgKGNlbGxQb3NpdGlvbikge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGBcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTUxNDlcdTY4MDdcdTRGNERcdTRFOEVcdTUzNTVcdTUxNDNcdTY4M0M6IFx1ODg0Qz0ke2NlbGxQb3NpdGlvbi5yb3dJbmRleH0sIFx1NTIxNz0ke2NlbGxQb3NpdGlvbi5jb2xJbmRleH1gKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygnXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU2NUUwXHU2Q0Q1XHU3ODZFXHU1QjlBXHU1MTQ5XHU2ODA3XHU2MjQwXHU1NzI4XHU1MzU1XHU1MTQzXHU2ODNDJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGNvbnNvbGUubG9nKCdcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTkwMDlcdTYyRTlcdTRFODZcdTg4NjhcdTY4M0M6JywgdGhpcy5jdXJyZW50RWRpdGluZ1RhYmxlKTtcclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1x1OEJCRVx1N0Y2RVx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1ODg2OFx1NjgzQ1x1OTAwOVx1NjJFOVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBcdThCQkVcdTdGNkVcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdTc2ODRcdTg4NjhcdTY4M0NcdTkwMDlcdTYyRTlcdTUyOUZcdTgwRkRcclxuXHQgKi9cclxuXHRzZXR1cFByZXZpZXdNb2RlVGFibGVTZWxlY3Rpb24oKTogdm9pZCB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyBcdTRGN0ZcdTc1MjhcdTcyRUNcdTdBQ0JcdTc2ODRzZXR1cFByZXZpZXdNb2RlVGFibGVTZWxlY3Rpb25cdTY1QjlcdTZDRDVcclxuXHRcdFx0c2V0dXBQcmV2aWV3TW9kZVRhYmxlU2VsZWN0aW9uKHRoaXMpO1xyXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignXHU4QkJFXHU3RjZFXHU5ODg0XHU4OUM4XHU2QTIxXHU1RjBGXHU4ODY4XHU2ODNDXHU5MDA5XHU2MkU5XHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coJ1x1NTM3OFx1OEY3RCBBZHZhbmNlZCBUYWJsZSBYVCBcdTYzRDJcdTRFRjYnKTtcclxuXHRcdFxyXG5cdFx0Ly8gXHU3OUZCXHU5NjY0XHU1REU1XHU1MTc3XHU2ODBGXHU1QkI5XHU1NjY4XHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWR2YW5jZWQtdGFibGUtdG9vbGJhci1jb250YWluZXInKS5mb3JFYWNoKGNvbnRhaW5lciA9PiB7XHJcblx0XHRcdGNvbnRhaW5lci5yZW1vdmUoKTtcclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHQvLyBcdTc5RkJcdTk2NjRcdTYyNDBcdTY3MDlcdTg4NjhcdTY4M0NcdTlBRDhcdTRFQUVcdTU0OENcdTkwMDlcdTYyRTlcdTcyQjZcdTYwMDFcclxuXHRcdHRoaXMucmVtb3ZlQWxsVGFibGVIaWdobGlnaHRzKCk7XHJcblx0XHRcclxuXHRcdC8vIFx1NkUwNVx1NzQwNlx1ODg2OFx1NjgzQ1x1NTkyN1x1NUMwRlx1OEMwM1x1NjU3NFx1NTY2OFxyXG5cdFx0dGhpcy50YWJsZVJlc2l6ZXIuY2xlYW51cCgpO1xyXG5cdFx0XHJcblx0XHQvLyBcdTZFMDVcdTk2NjRcdTg4NjhcdTY4M0NcdTRFMEFcdTc2ODRcdTgxRUFcdTVCOUFcdTRFNDlcdTY1NzBcdTYzNkVcdTVDNUVcdTYwMjdcclxuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RhYmxlW2RhdGEtdGFibGUtcHJvY2Vzc2VkXScpLmZvckVhY2godGFibGUgPT4ge1xyXG5cdFx0XHRjb25zdCB0YWJsZUVsID0gdGFibGUgYXMgSFRNTEVsZW1lbnQ7XHJcblx0XHRcdGRlbGV0ZSB0YWJsZUVsLmRhdGFzZXQudGFibGVQcm9jZXNzZWQ7XHJcblx0XHRcdGRlbGV0ZSB0YWJsZUVsLmRhdGFzZXQudGFibGVTZWxlY3RlZDtcclxuXHRcdFx0dGFibGVFbC5zdHlsZS5vdXRsaW5lID0gJyc7XHJcblx0XHRcdHRhYmxlRWwuc3R5bGUub3V0bGluZU9mZnNldCA9ICcnO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU3OUZCXHU5NjY0XHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHJcblx0XHRcdHRhYmxlRWwub25jbGljayA9IG51bGw7XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0Ly8gXHU0RTBEXHU1MThEXHU5NzAwXHU4OTgxXHU3OUZCXHU5NjY0XHU2NTg3XHU2ODYzXHU3RUE3XHU0RThCXHU0RUY2XHU3NkQxXHU1NDJDXHU1NjY4XHVGRjBDXHU1NkUwXHU0RTNBXHU2MjExXHU0RUVDXHU1REYyXHU3RUNGXHU3OUZCXHU5NjY0XHU0RTg2XHU1QjgzXHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihcclxuXHRcdFx0e30sXHJcblx0XHRcdERFRkFVTFRfU0VUVElOR1MsXHJcblx0XHRcdGF3YWl0IHRoaXMubG9hZERhdGEoKVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG5cdFxyXG5cdGhpZ2hsaWdodFNlbGVjdGVkVGFibGUodGFibGU6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcblx0XHQvLyBcdTc5RkJcdTk2NjRcdTYyNDBcdTY3MDlcdTg4NjhcdTY4M0NcdTc2ODRcdTlBRDhcdTRFQUVcclxuXHRcdHRoaXMucmVtb3ZlQWxsVGFibGVIaWdobGlnaHRzKCk7XHJcblx0XHRcclxuXHRcdC8vIFx1OUFEOFx1NEVBRVx1OTAwOVx1NEUyRFx1NzY4NFx1ODg2OFx1NjgzQ1xyXG5cdFx0dGFibGUuc3R5bGUub3V0bGluZSA9ICcycHggc29saWQgdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KSc7XHJcblx0XHR0YWJsZS5zdHlsZS5vdXRsaW5lT2Zmc2V0ID0gJzJweCc7XHJcblx0XHR0YWJsZS5kYXRhc2V0LnRhYmxlU2VsZWN0ZWQgPSAndHJ1ZSc7XHJcblx0fVxyXG5cdFxyXG5cdHJlbW92ZUFsbFRhYmxlSGlnaGxpZ2h0cygpOiB2b2lkIHtcclxuXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RhYmxlW2RhdGEtdGFibGUtc2VsZWN0ZWQ9XCJ0cnVlXCJdJykuZm9yRWFjaCh0YWJsZSA9PiB7XHJcblx0XHRcdGNvbnN0IHRhYmxlRWwgPSB0YWJsZSBhcyBIVE1MRWxlbWVudDtcclxuXHRcdFx0dGFibGVFbC5zdHlsZS5vdXRsaW5lID0gJyc7XHJcblx0XHRcdHRhYmxlRWwuc3R5bGUub3V0bGluZU9mZnNldCA9ICcnO1xyXG5cdFx0XHRkZWxldGUgdGFibGVFbC5kYXRhc2V0LnRhYmxlU2VsZWN0ZWQ7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0Y3JlYXRlVGFibGVEYXRhKHRhYmxlOiBIVE1MRWxlbWVudCwgdGFibGVJZDogc3RyaW5nKTogdm9pZCB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyBcdTlBOENcdThCQzFcdTg4NjhcdTY4M0NJRFx1NjYyRlx1NTQyNlx1Njc2NVx1ODFFQUhUTUxcdTZDRThcdTkxQ0FcclxuXHRcdFx0Y29uc3QgY29tbWVudElkID0gdGhpcy50YWJsZUlkTWFuYWdlci5nZXRUYWJsZUlkZW50aWZpZXIodGFibGUpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5XHU0RUNFSFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1ODNCN1x1NTNENlx1NTIzMElEXHVGRjBDXHU2MjE2XHU4MDA1XHU0RTBFXHU0RjIwXHU1MTY1XHU3Njg0SURcdTRFMERcdTUzMzlcdTkxNERcdUZGMENcdTUyMTlcdTRFMERcdTUyMUJcdTVFRkFcdTY1NzBcdTYzNkVcclxuXHRcdFx0aWYgKCFjb21tZW50SWQgfHwgY29tbWVudElkICE9PSB0YWJsZUlkKSB7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKGBcdTg4NjhcdTY4M0NJRFx1OUE4Q1x1OEJDMVx1NTkzMVx1OEQyNTogXHU0RjIwXHU1MTY1SUQ9JHt0YWJsZUlkfSwgSFRNTFx1NkNFOFx1OTFDQUlEPSR7Y29tbWVudElkIHx8ICdcdTY1RTAnfWApO1xyXG5cdFx0XHRcdGNvbnNvbGUud2FybignXHU1M0VBXHU2NzA5XHU1NzI4SFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1NjYwRVx1Nzg2RVx1NUI5QVx1NEU0OVx1NzY4NFx1ODg2OFx1NjgzQ0lEXHU2MjREXHU4MEZEXHU1MjFCXHU1RUZBXHU2NTcwXHU2MzZFJyk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTZEM0JcdTUyQThcdTg5QzZcdTU2RkVcclxuXHRcdFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcblx0XHRcdGlmICghYWN0aXZlVmlldykge1xyXG5cdFx0XHRcdGNvbnNvbGUud2FybignXHU2NUUwXHU2Q0Q1XHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4OUM2XHU1NkZFXHVGRjBDXHU0RTBEXHU1MjFCXHU1RUZBXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFJyk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTgzQjdcdTUzRDZcdTY1ODdcdTRFRjZcdThERUZcdTVGODRcclxuXHRcdFx0Y29uc3QgZmlsZVBhdGggPSBhY3RpdmVWaWV3LmZpbGU/LnBhdGg7XHJcblx0XHRcdGlmICghZmlsZVBhdGgpIHtcclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1x1NjVFMFx1NkNENVx1ODNCN1x1NTNENlx1NjU4N1x1NEVGNlx1OERFRlx1NUY4NFx1RkYwQ1x1NEUwRFx1NTIxQlx1NUVGQVx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RScpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Y29uc29sZS5sb2coYFx1NEUzQVx1NjcwOVx1NjU0OFx1NzY4NEhUTUxcdTZDRThcdTkxQ0FJRFx1NTIxQlx1NUVGQVx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RTogJHt0YWJsZUlkfWApO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcblx0XHRcdHRoaXMudGFibGVUb29sYmFyLmV4dHJhY3RBbmRTdG9yZVRhYmxlSW5mbyh0YWJsZUlkLCB0YWJsZSwgZmlsZVBhdGgpO1xyXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignXHU1MjFCXHU1RUZBXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0YXN5bmMgc2F2ZVRhYmxlRGF0YSh0YWJsZURhdGE6IGFueSk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ly8gXHU5QThDXHU4QkMxXHU4ODY4XHU2ODNDSURcdTY2MkZcdTU0MjZcdTY3MDlcdTY1NDhcclxuXHRcdFx0aWYgKCF0YWJsZURhdGEgfHwgIXRhYmxlRGF0YS5pZCkge1xyXG5cdFx0XHRcdGNvbnNvbGUud2FybignXHU2NUUwXHU2NTQ4XHU3Njg0XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHVGRjBDXHU3RjNBXHU1QzExSUQnKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NEUzQVx1NEVDRUhUTUxcdTZDRThcdTkxQ0FcdTRFMkRcdTgzQjdcdTUzRDZcdTc2ODRJRFxyXG5cdFx0XHQvLyBcdThGRDlcdTkxQ0NcdTYyMTFcdTRFRUNcdTY1RTBcdTZDRDVcdTc2RjRcdTYzQTVcdTlBOENcdThCQzFJRFx1Njc2NVx1NkU5MFx1RkYwQ1x1NEY0Nlx1NTNFRlx1NEVFNVx1OTAxQVx1OEZDN1x1NjVFNVx1NUZEN1x1NjNEMFx1OTE5MlxyXG5cdFx0XHRjb25zb2xlLmxvZyhgXHU1MUM2XHU1OTA3XHU0RkREXHU1QjU4XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFOiAke3RhYmxlRGF0YS5pZH1gKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NkQzQlx1NTJBOFx1NjU4N1x1NEVGNlxyXG5cdFx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NTk4Mlx1Njc5Q1x1NEYxOFx1NTE0OFx1NEY3Rlx1NzUyOFx1NjU4N1x1NEVGNlx1NUI1OFx1NTBBOFx1RkYwQ1x1NTIxOVx1NUMxRFx1OEJENVx1NUMwNlx1NjU3MFx1NjM2RVx1NEZERFx1NUI1OFx1NTIzMFx1NUY1M1x1NTI0RFx1NjU4N1x1NEVGNlxyXG5cdFx0XHRsZXQgc2F2ZWRUb0ZpbGUgPSBmYWxzZTtcclxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MucHJlZmVyRmlsZVN0b3JhZ2UgJiYgYWN0aXZlRmlsZSAmJiB0aGlzLnRhYmxlRGF0YUV4dHJhY3Rvcikge1xyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnRhYmxlRGF0YUV4dHJhY3Rvci5leHBvcnRUYWJsZURhdGFUb0ZpbGUoYWN0aXZlRmlsZSwgdGFibGVEYXRhLmlkLCB0YWJsZURhdGEpO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coYFx1NURGMlx1NUMwNlx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NEZERFx1NUI1OFx1NTIzMFx1NjU4N1x1NEVGNjogJHthY3RpdmVGaWxlLnBhdGh9YCk7XHJcblx0XHRcdFx0XHRzYXZlZFRvRmlsZSA9IHRydWU7XHJcblx0XHRcdFx0fSBjYXRjaCAoZmlsZUVycm9yKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdcdTRGRERcdTVCNThcdTUyMzBcdTY1ODdcdTRFRjZcdTU5MzFcdThEMjVcdUZGMENcdTVDMDZcdTU2REVcdTkwMDBcdTUyMzBkYXRhLmpzb246JywgZmlsZUVycm9yKTtcclxuXHRcdFx0XHRcdHNhdmVkVG9GaWxlID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTU5ODJcdTY3OUNcdTY3MkFcdTRGRERcdTVCNThcdTUyMzBcdTY1ODdcdTRFRjZcdUZGMENcdTUyMTlcdTRGRERcdTVCNThcdTUyMzBkYXRhLmpzb25cclxuXHRcdFx0aWYgKCFzYXZlZFRvRmlsZSkge1xyXG5cdFx0XHRcdC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NUI1OFx1NTBBOFx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxyXG5cdFx0XHRcdGNvbnN0IGV4aXN0aW5nRGF0YSA9IGF3YWl0IHRoaXMubG9hZERhdGEoKSB8fCB7fTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvLyBcdTc4NkVcdTRGRERcdTVCNThcdTU3MjhcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTVCRjlcdThDNjFcclxuXHRcdFx0XHRpZiAoIWV4aXN0aW5nRGF0YS50YWJsZXMpIHtcclxuXHRcdFx0XHRcdGV4aXN0aW5nRGF0YS50YWJsZXMgPSB7fTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8gXHU2NkY0XHU2NUIwXHU3Mjc5XHU1QjlBXHU4ODY4XHU2ODNDXHU3Njg0XHU2NTcwXHU2MzZFXHJcblx0XHRcdFx0ZXhpc3RpbmdEYXRhLnRhYmxlc1t0YWJsZURhdGEuaWRdID0gdGFibGVEYXRhO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8vIFx1NEZERFx1NUI1OFx1NjZGNFx1NjVCMFx1NTQwRVx1NzY4NFx1NjU3MFx1NjM2RVxyXG5cdFx0XHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEoZXhpc3RpbmdEYXRhKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhgXHU1REYyXHU0RkREXHU1QjU4XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1MjMwZGF0YS5qc29uOiAke3RhYmxlRGF0YS5pZH1gKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvLyBcdTU5ODJcdTY3OUNcdThCQkVcdTdGNkVcdTRFODZcdTgxRUFcdTUyQThcdTVCRkNcdTUxRkFcdTUyMzBcdTY1ODdcdTRFRjZcdTRGNDZcdTRFNEJcdTUyNERcdTY3MkFcdTRGRERcdTVCNThcdTUyMzBcdTY1ODdcdTRFRjZcdUZGMENcdTUyMTlcdTVDMURcdThCRDVcdTVDMDZcdTY1NzBcdTYzNkVcdTVCRkNcdTUxRkFcdTUyMzBcdTVGNTNcdTUyNERcdTY1ODdcdTRFRjZcclxuXHRcdFx0XHRpZiAoIXNhdmVkVG9GaWxlICYmIHRoaXMuc2V0dGluZ3MuYXV0b0V4cG9ydFRvRmlsZSAmJiB0aGlzLnRhYmxlRGF0YUV4dHJhY3RvciAmJiBhY3RpdmVGaWxlKSB7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnRhYmxlRGF0YUV4dHJhY3Rvci5leHBvcnRUYWJsZURhdGFUb0ZpbGUoYWN0aXZlRmlsZSwgdGFibGVEYXRhLmlkLCB0YWJsZURhdGEpO1xyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhgXHU1REYyXHU4MUVBXHU1MkE4XHU1QzA2XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1QkZDXHU1MUZBXHU1MjMwXHU2NTg3XHU0RUY2OiAke2FjdGl2ZUZpbGUucGF0aH1gKTtcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKGV4cG9ydEVycm9yKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1x1ODFFQVx1NTJBOFx1NUJGQ1x1NTFGQVx1NTIzMFx1NjU4N1x1NEVGNlx1NTkzMVx1OEQyNTonLCBleHBvcnRFcnJvcik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdcdTRGRERcdTVCNThcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRwcml2YXRlIHVwZGF0ZVJpYmJvbkljb24oKTogdm9pZCB7XHJcblx0XHRpZiAoIXRoaXMucmliYm9uSWNvbikgcmV0dXJuO1xyXG5cdFx0XHJcblx0XHQvLyBcdTZFMDVcdTk2NjRcdTczQjBcdTY3MDlcdTU2RkVcdTY4MDdcclxuXHRcdHRoaXMucmliYm9uSWNvbi5lbXB0eSgpO1xyXG5cdFx0XHJcblx0XHQvLyBcdTY4MzlcdTYzNkVcdTVERTVcdTUxNzdcdTY4MEZcdTcyQjZcdTYwMDFcdThCQkVcdTdGNkVcdTU2RkVcdTY4MDdcclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnRvb2xiYXJFbmFibGVkKSB7XHJcblx0XHRcdC8vIFx1NURFNVx1NTE3N1x1NjgwRlx1NTQyRlx1NzUyOCAtIFx1NjYzRVx1NzkzQVx1NUY2OVx1ODI3Mlx1NTZGRVx1NjgwN1xyXG5cdFx0XHRjb25zdCBpY29uRWwgPSB0aGlzLnJpYmJvbkljb24uY3JlYXRlRWwoJ2RpdicsIHtcclxuXHRcdFx0XHRjbHM6ICdyaWJib24taWNvbi1hY3RpdmUnXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU4QkJFXHU3RjZFXHU1NkZFXHU2ODA3XHJcblx0XHRcdGljb25FbC5pbm5lckhUTUwgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIGNsYXNzPVwic3ZnLWljb25cIj48cmVjdCB4PVwiM1wiIHk9XCIzXCIgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgcng9XCIyXCIgcnk9XCIyXCI+PC9yZWN0PjxsaW5lIHgxPVwiM1wiIHkxPVwiOVwiIHgyPVwiMjFcIiB5Mj1cIjlcIj48L2xpbmU+PGxpbmUgeDE9XCIzXCIgeTE9XCIxNVwiIHgyPVwiMjFcIiB5Mj1cIjE1XCI+PC9saW5lPjxsaW5lIHgxPVwiOVwiIHkxPVwiM1wiIHgyPVwiOVwiIHkyPVwiMjFcIj48L2xpbmU+PGxpbmUgeDE9XCIxNVwiIHkxPVwiM1wiIHgyPVwiMTVcIiB5Mj1cIjIxXCI+PC9saW5lPjwvc3ZnPmA7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTZERkJcdTUyQTBcdTZGQzBcdTZEM0JcdTY4MzdcdTVGMEZcclxuXHRcdFx0aWNvbkVsLnN0eWxlLmNvbG9yID0gJ3ZhcigtLWludGVyYWN0aXZlLWFjY2VudCknO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gXHU1REU1XHU1MTc3XHU2ODBGXHU3OTgxXHU3NTI4IC0gXHU2NjNFXHU3OTNBXHU3MDcwXHU4MjcyXHU1NkZFXHU2ODA3XHJcblx0XHRcdGNvbnN0IGljb25FbCA9IHRoaXMucmliYm9uSWNvbi5jcmVhdGVFbCgnZGl2Jyk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdThCQkVcdTdGNkVcdTU2RkVcdTY4MDdcclxuXHRcdFx0aWNvbkVsLmlubmVySFRNTCA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgY2xhc3M9XCJzdmctaWNvblwiPjxyZWN0IHg9XCIzXCIgeT1cIjNcIiB3aWR0aD1cIjE4XCIgaGVpZ2h0PVwiMThcIiByeD1cIjJcIiByeT1cIjJcIj48L3JlY3Q+PGxpbmUgeDE9XCIzXCIgeTE9XCI5XCIgeDI9XCIyMVwiIHkyPVwiOVwiPjwvbGluZT48bGluZSB4MT1cIjNcIiB5MT1cIjE1XCIgeDI9XCIyMVwiIHkyPVwiMTVcIj48L2xpbmU+PGxpbmUgeDE9XCI5XCIgeTE9XCIzXCIgeDI9XCI5XCIgeTI9XCIyMVwiPjwvbGluZT48bGluZSB4MT1cIjE1XCIgeTE9XCIzXCIgeDI9XCIxNVwiIHkyPVwiMjFcIj48L2xpbmU+PC9zdmc+YDtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0dG9nZ2xlVG9vbGJhclN0YXRlKCk6IHZvaWQge1xyXG5cdFx0Ly8gXHU1MjA3XHU2MzYyXHU1REU1XHU1MTc3XHU2ODBGXHU3MkI2XHU2MDAxXHJcblx0XHR0aGlzLnNldHRpbmdzLnRvb2xiYXJFbmFibGVkID0gIXRoaXMuc2V0dGluZ3MudG9vbGJhckVuYWJsZWQ7XHJcblx0XHRcclxuXHRcdC8vIFx1NjZGNFx1NjVCMFx1OEJCRVx1N0Y2RVxyXG5cdFx0dGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFxyXG5cdFx0Ly8gXHU2NkY0XHU2NUIwXHU1NkZFXHU2ODA3XHU3MkI2XHU2MDAxXHJcblx0XHR0aGlzLnVwZGF0ZVJpYmJvbkljb24oKTtcclxuXHRcdFxyXG5cdFx0Ly8gXHU2ODM5XHU2MzZFXHU3MkI2XHU2MDAxXHU1MjFCXHU1RUZBXHU2MjE2XHU3OUZCXHU5NjY0XHU1REU1XHU1MTc3XHU2ODBGXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy50b29sYmFyRW5hYmxlZCkge1xyXG5cdFx0XHR0aGlzLmNyZWF0ZVRvb2xiYXIoKTtcclxuXHRcdFx0bmV3IE5vdGljZSgnXHU4ODY4XHU2ODNDXHU1REU1XHU1MTc3XHU2ODBGXHU1REYyXHU1NDJGXHU3NTI4Jyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBcdTc5RkJcdTk2NjRcdTVERTVcdTUxNzdcdTY4MEZcdTVCQjlcdTU2NjhcclxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFkdmFuY2VkLXRhYmxlLXRvb2xiYXItY29udGFpbmVyJykuZm9yRWFjaChjb250YWluZXIgPT4ge1xyXG5cdFx0XHRcdGNvbnRhaW5lci5yZW1vdmUoKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdG5ldyBOb3RpY2UoJ1x1ODg2OFx1NjgzQ1x1NURFNVx1NTE3N1x1NjgwRlx1NURGMlx1Nzk4MVx1NzUyOCcpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogXHU1OTA0XHU3NDA2XHU4ODY4XHU2ODNDXHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHJcblx0ICovXHJcblx0aGFuZGxlVGFibGVDbGljayA9IChldmVudDogTW91c2VFdmVudCk6IHZvaWQgPT4ge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ly8gXHU4M0I3XHU1M0Q2XHU3MEI5XHU1MUZCXHU3Njg0XHU4ODY4XHU2ODNDXHJcblx0XHRcdGNvbnN0IHRhYmxlID0gKGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTEVsZW1lbnQpO1xyXG5cdFx0XHRpZiAoIXRhYmxlKSByZXR1cm47XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTc5RkJcdTk2NjRcdTYyNDBcdTY3MDlcdTg4NjhcdTY4M0NcdTc2ODRcdTlBRDhcdTRFQUVcclxuXHRcdFx0dGhpcy5yZW1vdmVBbGxUYWJsZUhpZ2hsaWdodHMoKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1OUFEOFx1NEVBRVx1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ1xyXG5cdFx0XHR0aGlzLmhpZ2hsaWdodFNlbGVjdGVkVGFibGUodGFibGUpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU1MjFCXHU1RUZBXHU1REU1XHU1MTc3XHU2ODBGXHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLnRvb2xiYXJFbmFibGVkKSB7XHJcblx0XHRcdFx0dGhpcy50YWJsZVRvb2xiYXIuc2V0QWN0aXZlVGFibGUodGFibGUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdThCQkVcdTdGNkVcdTg4NjhcdTY4M0NcdTU5MjdcdTVDMEZcdThDMDNcdTY1NzRcdTUyOUZcdTgwRkRcclxuXHRcdFx0dGhpcy50YWJsZVJlc2l6ZXIuc2V0dXBUYWJsZVJlc2l6ZSh0YWJsZSk7XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZygnXHU4ODY4XHU2ODNDXHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHU1REYyXHU1OTA0XHU3NDA2Jyk7XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdcdTU5MDRcdTc0MDZcdTg4NjhcdTY4M0NcdTcwQjlcdTUxRkJcdTRFOEJcdTRFRjZcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFx1NTkwNFx1NzQwNlx1NjU4N1x1Njg2M1x1NzBCOVx1NTFGQlx1NEU4Qlx1NEVGNlxyXG5cdCAqIEBwYXJhbSBldmVudCBcdTcwQjlcdTUxRkJcdTRFOEJcdTRFRjZcclxuXHQgKi9cclxuXHRoYW5kbGVEb2N1bWVudENsaWNrID0gKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHQvLyBcdTY4QzBcdTY3RTVcdTcwQjlcdTUxRkJcdTY2MkZcdTU0MjZcdTU3MjhcdTVERTVcdTUxNzdcdTY4MEZcdTUxODVcclxuXHRcdFx0Y29uc3QgaXNDbGlja0luVG9vbGJhciA9IGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIE5vZGUgJiYgXHJcblx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkdmFuY2VkLXRhYmxlLXRvb2xiYXItY29udGFpbmVyJyk/LmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTY4QzBcdTY3RTVcdTcwQjlcdTUxRkJcdTY2MkZcdTU0MjZcdTU3MjhcdTg4NjhcdTY4M0NcdTUxODVcclxuXHRcdFx0Y29uc3QgaXNDbGlja0luVGFibGUgPSBldmVudC50YXJnZXQgaW5zdGFuY2VvZiBOb2RlICYmIFxyXG5cdFx0XHRcdChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmNsb3Nlc3QoJ3RhYmxlJykgIT09IG51bGw7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTU5ODJcdTY3OUNcdTcwQjlcdTUxRkJcdTRFMERcdTU3MjhcdTVERTVcdTUxNzdcdTY4MEZcdTYyMTZcdTg4NjhcdTY4M0NcdTUxODVcdUZGMENcdTZFMDVcdTk2NjRcdTg4NjhcdTY4M0NcdTkwMDlcdTYyRTlcclxuXHRcdFx0aWYgKCFpc0NsaWNrSW5Ub29sYmFyICYmICFpc0NsaWNrSW5UYWJsZSkge1xyXG5cdFx0XHRcdC8vIFx1NkUwNVx1OTY2NFx1ODg2OFx1NjgzQ1x1OTAwOVx1NjJFOVxyXG5cdFx0XHRcdGlmICh0aGlzLnRhYmxlVG9vbGJhci5hY3RpdmVUYWJsZSkge1xyXG5cdFx0XHRcdFx0dGhpcy50YWJsZVRvb2xiYXIuY2xlYXJTZWxlY3Rpb24oKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1x1NTkwNFx1NzQwNlx1NjU4N1x1Njg2M1x1NzBCOVx1NTFGQlx1NEU4Qlx1NEVGNlx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBcdTY2M0VcdTc5M0FcdTVGNTNcdTUyNERcdTg4NjhcdTY4M0NJRFxyXG5cdCAqL1xyXG5cdGFzeW5jIHNob3dDdXJyZW50VGFibGVJZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1ODlDNlx1NTZGRVxyXG5cdFx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuXHRcdFx0aWYgKCFhY3RpdmVWaWV3KSB7XHJcblx0XHRcdFx0bmV3IE5vdGljZSgnXHU2NzJBXHU2MjdFXHU1MjMwXHU2RDNCXHU1MkE4XHU4OUM2XHU1NkZFJyk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTY4QzBcdTY3RTVcdTVGNTNcdTUyNERcdTZBMjFcdTVGMEZcclxuXHRcdFx0Y29uc3QgaXNFZGl0TW9kZSA9IGFjdGl2ZVZpZXcuZ2V0TW9kZSgpID09PSAnc291cmNlJztcclxuXHRcdFx0XHJcblx0XHRcdGxldCB0YWJsZUlkOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuXHRcdFx0XHJcblx0XHRcdGlmIChpc0VkaXRNb2RlKSB7XHJcblx0XHRcdFx0Ly8gXHU1NzI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHVGRjBDXHU0RjdGXHU3NTI4IE1hcmtkb3duU291cmNlRWRpdG9yIFx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHJcblx0XHRcdFx0dGFibGVJZCA9IGF3YWl0IHRoaXMubWFya2Rvd25Tb3VyY2VFZGl0b3IuZ2V0Q3VycmVudFRhYmxlSWQoKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBcdTU3MjhcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdUZGMENcdTRGN0ZcdTc1MjggVGFibGVJZE1hbmFnZXIgXHU4M0I3XHU1M0Q2XHU4ODY4XHU2ODNDSURcclxuXHRcdFx0XHRpZiAodGhpcy50YWJsZVRvb2xiYXIuYWN0aXZlVGFibGUpIHtcclxuXHRcdFx0XHRcdHRhYmxlSWQgPSB0aGlzLnRhYmxlSWRNYW5hZ2VyLmdldFRhYmxlSWRlbnRpZmllcih0aGlzLnRhYmxlVG9vbGJhci5hY3RpdmVUYWJsZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAodGFibGVJZCkge1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoYFx1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ0lEOiAke3RhYmxlSWR9YCk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJ1x1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ0lEOicsIHRhYmxlSWQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoJ1x1NjcyQVx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEXHVGRjBDXHU4QkY3XHU3ODZFXHU0RkREXHU1MTQ5XHU2ODA3XHU1NzI4XHU4ODY4XHU2ODNDXHU1MTg1XHU2MjE2XHU1REYyXHU5MDA5XHU2MkU5XHU4ODY4XHU2ODNDJyk7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1x1NjYzRVx1NzkzQVx1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFx1NkUzMlx1NjdEM1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG5cdCAqIEBwYXJhbSB0YWJsZUVsIFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFxyXG5cdCAqIEBwYXJhbSBjdHggTWFya2Rvd25cdTU5MDRcdTc0MDZcdTRFMEFcdTRFMEJcdTY1ODdcclxuXHQgKi9cclxuXHRwcml2YXRlIHJlbmRlck1lcmdlZENlbGxzKHRhYmxlRWw6IEhUTUxUYWJsZUVsZW1lbnQsIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCk6IHZvaWQge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ly8gXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU2NjJGXHU1NDI2XHU1REYyXHU3RUNGXHU1OTA0XHU3NDA2XHU4RkM3XHJcblx0XHRcdGlmICgodGFibGVFbCBhcyBIVE1MRWxlbWVudCkuZGF0YXNldC50YWJsZU1lcmdlUHJvY2Vzc2VkID09PSAndHJ1ZScpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ1x1NTE4NVx1NUJCOVxyXG5cdFx0XHRjb25zdCByYXdNYXJrZG93biA9IGN0eC5nZXRTZWN0aW9uSW5mbyh0YWJsZUVsKT8udGV4dCB8fCBodG1sVG9NYXJrZG93bih0YWJsZUVsKTtcclxuXHRcdFx0aWYgKCFyYXdNYXJrZG93bikgcmV0dXJuO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU4OUUzXHU2NzkwXHU4ODY4XHU2ODNDXHU1MTg1XHU1QkI5XHJcblx0XHRcdGNvbnN0IGxpbmVzID0gcmF3TWFya2Rvd24uc3BsaXQoJ1xcbicpO1xyXG5cdFx0XHRjb25zdCB0YWJsZUxpbmVzID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gbGluZS50cmltKCkuc3RhcnRzV2l0aCgnfCcpICYmIGxpbmUudHJpbSgpLmVuZHNXaXRoKCd8JykpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5XHU2MjdFXHU1MjMwXHU2NzA5XHU2NTQ4XHU3Njg0XHU4ODY4XHU2ODNDXHU4ODRDXHVGRjBDXHU4RkQ0XHU1NkRFXHJcblx0XHRcdGlmICh0YWJsZUxpbmVzLmxlbmd0aCA8IDIpIHJldHVybjtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NzlGQlx1OTY2NFx1ODg2OFx1NTkzNFx1NTIwNlx1OTY5NFx1ODg0Q1x1RkYwOFx1N0IyQ1x1NEU4Q1x1ODg0Q1x1RkYwOVxyXG5cdFx0XHRjb25zdCBjb250ZW50TGluZXMgPSBbdGFibGVMaW5lc1swXV0uY29uY2F0KHRhYmxlTGluZXMuc2xpY2UoMikpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU4OUUzXHU2NzkwXHU4ODY4XHU2ODNDXHU3RUQzXHU2Nzg0XHJcblx0XHRcdGNvbnN0IHJvd3M6IHN0cmluZ1tdW10gPSBbXTtcclxuXHRcdFx0Zm9yIChjb25zdCBsaW5lIG9mIGNvbnRlbnRMaW5lcykge1xyXG5cdFx0XHRcdGNvbnN0IGNlbGxzID0gbGluZS5zcGxpdCgnfCcpXHJcblx0XHRcdFx0XHQuZmlsdGVyKChfLCBpLCBhcnIpID0+IGkgPiAwICYmIGkgPCBhcnIubGVuZ3RoIC0gMSlcclxuXHRcdFx0XHRcdC5tYXAoY2VsbCA9PiBjZWxsLnRyaW0oKSk7XHJcblx0XHRcdFx0cm93cy5wdXNoKGNlbGxzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU4M0I3XHU1M0Q2XHU4ODY4XHU2ODNDRE9NXHU3RUQzXHU2Nzg0XHJcblx0XHRcdGNvbnN0IGRvbVJvd3MgPSB0YWJsZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XHJcblx0XHRcdGlmIChkb21Sb3dzLmxlbmd0aCAhPT0gcm93cy5sZW5ndGgpIHJldHVybjtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NTkwNFx1NzQwNlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG5cdFx0XHRmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgcm93cy5sZW5ndGg7IHJvd0luZGV4KyspIHtcclxuXHRcdFx0XHRjb25zdCByb3dDZWxscyA9IHJvd3Nbcm93SW5kZXhdO1xyXG5cdFx0XHRcdGNvbnN0IGRvbVJvdyA9IGRvbVJvd3Nbcm93SW5kZXhdO1xyXG5cdFx0XHRcdGNvbnN0IGRvbUNlbGxzID0gZG9tUm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLCB0ZCcpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmIChkb21DZWxscy5sZW5ndGggIT09IHJvd0NlbGxzLmxlbmd0aCkgY29udGludWU7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Zm9yIChsZXQgY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IHJvd0NlbGxzLmxlbmd0aDsgY29sSW5kZXgrKykge1xyXG5cdFx0XHRcdFx0Y29uc3QgY2VsbENvbnRlbnQgPSByb3dDZWxsc1tjb2xJbmRleF07XHJcblx0XHRcdFx0XHRjb25zdCBkb21DZWxsID0gZG9tQ2VsbHNbY29sSW5kZXhdIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHQvLyBcdTU5MDRcdTc0MDZcdTU0MTFcdTVERTZcdTU0MDhcdTVFNzZcclxuXHRcdFx0XHRcdGlmICgoY2VsbENvbnRlbnQgPT09ICc8JyB8fCBjZWxsQ29udGVudCA9PT0gJ1xcXFw8JyB8fCBcclxuXHRcdFx0XHRcdFx0IGNlbGxDb250ZW50ID09PSAnIDwgJyB8fCBjZWxsQ29udGVudCA9PT0gJyBcXFxcPCAnKSAmJiBjb2xJbmRleCA+IDApIHtcclxuXHRcdFx0XHRcdFx0Y29uc3QgbGVmdENlbGwgPSBkb21DZWxsc1tjb2xJbmRleCAtIDFdIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xyXG5cdFx0XHRcdFx0XHRsZWZ0Q2VsbC5jb2xTcGFuID0gKGxlZnRDZWxsLmNvbFNwYW4gfHwgMSkgKyAxO1xyXG5cdFx0XHRcdFx0XHRkb21DZWxsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHQvLyBcdTU5ODJcdTY3OUNcdTU0MkZcdTc1MjhcdTRFODZcdTgxRUFcdTUyQThcdTVDNDVcdTRFMkRcclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuYXV0b0NlbnRlck1lcmdlZENlbGxzKSB7XHJcblx0XHRcdFx0XHRcdFx0bGVmdENlbGwuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcblx0XHRcdFx0XHRcdFx0bGVmdENlbGwuc3R5bGUudmVydGljYWxBbGlnbiA9ICdtaWRkbGUnO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHQvLyBcdTZERkJcdTUyQTBcdTU0MDhcdTVFNzZcdTY4MzdcdTVGMEZcdTdDN0JcclxuXHRcdFx0XHRcdFx0bGVmdENlbGwuY2xhc3NMaXN0LmFkZCgnb2JzLW1lcmdlZC1jZWxsJyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBcdTU5MDRcdTc0MDZcdTU0MTFcdTRFMEFcdTU0MDhcdTVFNzZcclxuXHRcdFx0XHRcdGVsc2UgaWYgKChjZWxsQ29udGVudCA9PT0gJ14nIHx8IGNlbGxDb250ZW50ID09PSAnXFxcXF4nIHx8IFxyXG5cdFx0XHRcdFx0XHRcdCAgY2VsbENvbnRlbnQgPT09ICcgXiAnIHx8IGNlbGxDb250ZW50ID09PSAnIFxcXFxeICcpICYmIHJvd0luZGV4ID4gMCkge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBhYm92ZVJvdyA9IGRvbVJvd3Nbcm93SW5kZXggLSAxXTtcclxuXHRcdFx0XHRcdFx0Y29uc3QgYWJvdmVDZWxscyA9IGFib3ZlUm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLCB0ZCcpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0aWYgKGNvbEluZGV4IDwgYWJvdmVDZWxscy5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBhYm92ZUNlbGwgPSBhYm92ZUNlbGxzW2NvbEluZGV4XSBhcyBIVE1MVGFibGVDZWxsRWxlbWVudDtcclxuXHRcdFx0XHRcdFx0XHRhYm92ZUNlbGwucm93U3BhbiA9IChhYm92ZUNlbGwucm93U3BhbiB8fCAxKSArIDE7XHJcblx0XHRcdFx0XHRcdFx0ZG9tQ2VsbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdC8vIFx1NTk4Mlx1Njc5Q1x1NTQyRlx1NzUyOFx1NEU4Nlx1ODFFQVx1NTJBOFx1NUM0NVx1NEUyRFxyXG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmF1dG9DZW50ZXJNZXJnZWRDZWxscykge1xyXG5cdFx0XHRcdFx0XHRcdFx0YWJvdmVDZWxsLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG5cdFx0XHRcdFx0XHRcdFx0YWJvdmVDZWxsLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAnbWlkZGxlJztcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdFx0Ly8gXHU2REZCXHU1MkEwXHU1NDA4XHU1RTc2XHU2ODM3XHU1RjBGXHU3QzdCXHJcblx0XHRcdFx0XHRcdFx0YWJvdmVDZWxsLmNsYXNzTGlzdC5hZGQoJ29icy1tZXJnZWQtY2VsbCcpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTY4MDdcdThCQjBcdTg4NjhcdTY4M0NcdTRFM0FcdTVERjJcdTU5MDRcdTc0MDZcclxuXHRcdFx0KHRhYmxlRWwgYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQudGFibGVNZXJnZVByb2Nlc3NlZCA9ICd0cnVlJztcclxuXHRcdFx0XHJcblx0XHRcdGNvbnNvbGUubG9nKCdcdTVERjJcdTZFMzJcdTY3RDNcdTg4NjhcdTY4M0NcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1x1NkUzMlx1NjdEM1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBcdTRFQ0VNYXJrZG93blx1NjU4N1x1NEVGNlx1NEUyRFx1OEJGQlx1NTNENlx1ODg2OFx1NjgzQ0lEXHJcblx0ICogXHU4RkQ5XHU2NjJGXHU0RTAwXHU0RTJBXHU2NkY0XHU1M0VGXHU5NzYwXHU3Njg0XHU2NUI5XHU2Q0Q1XHVGRjBDXHU1NkUwXHU0RTNBXHU1QjgzXHU0RTBEXHU0RjlEXHU4RDU2XHU0RThFRE9NXHU3RUQzXHU2Nzg0XHJcblx0ICogQHBhcmFtIHRhYmxlIFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFxyXG5cdCAqIEByZXR1cm5zIFByb21pc2U8c3RyaW5nIHwgbnVsbD5cclxuXHQgKi9cclxuXHRhc3luYyByZWFkVGFibGVJZEZyb21NYXJrZG93bih0YWJsZTogSFRNTEVsZW1lbnQpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdC8vIDEuIFx1OTk5Nlx1NTE0OFx1NUMxRFx1OEJENVx1NEVDRVx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFx1NzY4NGRhdGEtdGFibGUtaWRcdTVDNUVcdTYwMjdcdTgzQjdcdTUzRDZJRFxyXG5cdFx0XHRjb25zdCBleGlzdGluZ0lkID0gdGFibGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJyk7XHJcblx0XHRcdGlmIChleGlzdGluZ0lkKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coYFx1NEVDRVx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFx1NUM1RVx1NjAyN1x1NEUyRFx1ODNCN1x1NTNENklEOiAke2V4aXN0aW5nSWR9YCk7XHJcblx0XHRcdFx0cmV0dXJuIGV4aXN0aW5nSWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NkQzQlx1NTJBOFx1ODlDNlx1NTZGRVxyXG5cdFx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuXHRcdFx0aWYgKCFhY3RpdmVWaWV3KSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coJ1x1NjcyQVx1NjI3RVx1NTIzMFx1NkQzQlx1NTJBOFx1ODlDNlx1NTZGRScpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTZEM0JcdTUyQThcdTY1ODdcdTRFRjZcclxuXHRcdFx0Y29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcblx0XHRcdGlmICghYWN0aXZlRmlsZSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTZEM0JcdTUyQThcdTY1ODdcdTRFRjYnKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Y29uc29sZS5sb2coYFx1NUMxRFx1OEJENVx1NEVDRVx1NjU4N1x1NEVGNlx1NTE4NVx1NUJCOVx1NEUyRFx1NjdFNVx1NjI3RVx1ODg2OFx1NjgzQ0lEOiAke2FjdGl2ZUZpbGUucGF0aH1gKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1OEJGQlx1NTNENlx1NjU4N1x1NEVGNlx1NTE4NVx1NUJCOVxyXG5cdFx0XHRjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChhY3RpdmVGaWxlKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NjNEMFx1NTNENlx1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MVxyXG5cdFx0XHRjb25zdCB0YWJsZUZlYXR1cmUgPSB0aGlzLnRhYmxlSWRNYW5hZ2VyLmV4dHJhY3RUYWJsZUZlYXR1cmUodGFibGUpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgXHU1RjUzXHU1MjREXHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxOmAsIHRhYmxlRmVhdHVyZSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTRFQ0VNYXJrZG93blx1NTE4NVx1NUJCOVx1NEUyRFx1NjNEMFx1NTNENlx1NjI0MFx1NjcwOVx1ODg2OFx1NjgzQ1x1NEZFMVx1NjA2RlxyXG5cdFx0XHRjb25zdCB0YWJsZUluZm9zID0gdGhpcy50YWJsZUlkTWFuYWdlci5leHRyYWN0VGFibGVJZHNGcm9tTWFya2Rvd24oY29udGVudCk7XHJcblx0XHRcdGNvbnNvbGUubG9nKGBcdTRFQ0VcdTY1ODdcdTRFRjZcdTRFMkRcdTYzRDBcdTUzRDZcdTc2ODRcdTg4NjhcdTY4M0NcdTRGRTFcdTYwNkY6YCwgdGFibGVJbmZvcyk7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTU3MjhET01cdTRFMkRcdTc2ODRcdTRGNERcdTdGNkVcclxuXHRcdFx0Y29uc3QgYWxsVGFibGVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZScpKTtcclxuXHRcdFx0Y29uc3QgdGFibGVJbmRleCA9IGFsbFRhYmxlcy5pbmRleE9mKHRhYmxlIGFzIEhUTUxUYWJsZUVsZW1lbnQpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgXHU4ODY4XHU2ODNDXHU1NzI4RE9NXHU0RTJEXHU3Njg0XHU0RjREXHU3RjZFOiBcdTdCMkMke3RhYmxlSW5kZXh9XHU0RTJBXHU4ODY4XHU2ODNDXHVGRjA4XHU1MTcxJHthbGxUYWJsZXMubGVuZ3RofVx1NEUyQVx1RkYwOWApO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU4M0I3XHU1M0Q2XHU3NkY4XHU0RjNDXHU1RUE2XHU5NjA4XHU1MDNDXHJcblx0XHRcdGNvbnN0IHNpbWlsYXJpdHlUaHJlc2hvbGQgPSB0aGlzLnNldHRpbmdzLmZlYXR1cmVTaW1pbGFyaXR5VGhyZXNob2xkIHx8IDAuNztcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1NjgzOVx1NjM2RVx1OEJCRVx1N0Y2RVx1NTFCM1x1NUI5QVx1NTMzOVx1OTE0RFx1OTg3QVx1NUU4RlxyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5wcmVmZXJGZWF0dXJlTWF0Y2hpbmcpIHtcclxuXHRcdFx0XHQvLyBcdTRGMThcdTUxNDhcdTRGN0ZcdTc1MjhcdTcyNzlcdTVGODFcdTUzMzlcdTkxNERcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvLyAxLiBcdTk5OTZcdTUxNDhcdTVDMURcdThCRDVcdTkwMUFcdThGQzdcdTcyNzlcdTVGODFcdTUzMzlcdTkxNERcclxuXHRcdFx0XHRpZiAodGFibGVGZWF0dXJlKSB7XHJcblx0XHRcdFx0XHRsZXQgYmVzdE1hdGNoSWQgPSAnJztcclxuXHRcdFx0XHRcdGxldCBiZXN0TWF0Y2hTY29yZSA9IDA7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGZvciAoY29uc3QgeyBpZCwgZmVhdHVyZSB9IG9mIHRhYmxlSW5mb3MpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCFpZCkgY29udGludWU7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRjb25zdCBzY29yZSA9IHRoaXMudGFibGVJZE1hbmFnZXIuY2FsY3VsYXRlRmVhdHVyZVNpbWlsYXJpdHkodGFibGVGZWF0dXJlLCBmZWF0dXJlKTtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coYFx1ODg2OFx1NjgzQ0lEICR7aWR9IFx1NzY4NFx1NzI3OVx1NUY4MVx1NzZGOFx1NEYzQ1x1NUVBNjogJHtzY29yZS50b0ZpeGVkKDIpfWApO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0aWYgKHNjb3JlID4gYmVzdE1hdGNoU2NvcmUpIHtcclxuXHRcdFx0XHRcdFx0XHRiZXN0TWF0Y2hTY29yZSA9IHNjb3JlO1xyXG5cdFx0XHRcdFx0XHRcdGJlc3RNYXRjaElkID0gaWQ7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Ly8gXHU0RjdGXHU3NTI4XHU4QkJFXHU3RjZFXHU0RTJEXHU3Njg0XHU3NkY4XHU0RjNDXHU1RUE2XHU5NjA4XHU1MDNDXHJcblx0XHRcdFx0XHRpZiAoYmVzdE1hdGNoSWQgJiYgYmVzdE1hdGNoU2NvcmUgPiBzaW1pbGFyaXR5VGhyZXNob2xkKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGBcdTkwMUFcdThGQzdcdTcyNzlcdTVGODFcdTc2RjhcdTRGM0NcdTVFQTZcdTUzMzlcdTkxNERcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NJRDogJHtiZXN0TWF0Y2hJZH1cdUZGMDhcdTc2RjhcdTRGM0NcdTVFQTY6ICR7YmVzdE1hdGNoU2NvcmUudG9GaXhlZCgyKX1cdUZGMDlgKTtcclxuXHRcdFx0XHRcdFx0Ly8gXHU1QzA2SURcdTRGRERcdTVCNThcdTUyMzBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcdTRFMEFcdUZGMENcdTRFRTVcdTRGQkZcdTU0MEVcdTdFRURcdTRGN0ZcdTc1MjhcclxuXHRcdFx0XHRcdFx0dGFibGUuc2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJywgYmVzdE1hdGNoSWQpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gYmVzdE1hdGNoSWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8vIDIuIFx1NTk4Mlx1Njc5Q1x1NzI3OVx1NUY4MVx1NTMzOVx1OTE0RFx1NTkzMVx1OEQyNVx1RkYwQ1x1NUMxRFx1OEJENVx1OTAxQVx1OEZDN1x1NEY0RFx1N0Y2RVx1NTMzOVx1OTE0RFxyXG5cdFx0XHRcdGlmICh0YWJsZUluZGV4ICE9PSAtMSAmJiB0YWJsZUluZGV4IDwgdGFibGVJbmZvcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdGNvbnN0IHsgaWQgfSA9IHRhYmxlSW5mb3NbdGFibGVJbmRleF07XHJcblx0XHRcdFx0XHRpZiAoaWQpIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coYFx1OTAxQVx1OEZDN1x1NEY0RFx1N0Y2RVx1NTMzOVx1OTE0RFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEOiAke2lkfWApO1xyXG5cdFx0XHRcdFx0XHQvLyBcdTVDMDZJRFx1NEZERFx1NUI1OFx1NTIzMFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFx1NEUwQVx1RkYwQ1x1NEVFNVx1NEZCRlx1NTQwRVx1N0VFRFx1NEY3Rlx1NzUyOFxyXG5cdFx0XHRcdFx0XHR0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnLCBpZCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBpZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gXHU5RUQ4XHU4QkE0XHU5ODdBXHU1RThGXHVGRjFBXHU1MTQ4XHU0RjREXHU3RjZFXHU1MzM5XHU5MTREXHVGRjBDXHU1MThEXHU3Mjc5XHU1RjgxXHU1MzM5XHU5MTREXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8gMS4gXHU5OTk2XHU1MTQ4XHU1QzFEXHU4QkQ1XHU5MDFBXHU4RkM3XHU0RjREXHU3RjZFXHU3Q0JFXHU3ODZFXHU1MzM5XHU5MTREXHJcblx0XHRcdFx0aWYgKHRhYmxlSW5kZXggIT09IC0xICYmIHRhYmxlSW5kZXggPCB0YWJsZUluZm9zLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0Y29uc3QgeyBpZCB9ID0gdGFibGVJbmZvc1t0YWJsZUluZGV4XTtcclxuXHRcdFx0XHRcdGlmIChpZCkge1xyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhgXHU5MDFBXHU4RkM3XHU0RjREXHU3RjZFXHU3Q0JFXHU3ODZFXHU1MzM5XHU5MTREXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSUQ6ICR7aWR9YCk7XHJcblx0XHRcdFx0XHRcdC8vIFx1NUMwNklEXHU0RkREXHU1QjU4XHU1MjMwXHU4ODY4XHU2ODNDXHU1MTQzXHU3RDIwXHU0RTBBXHVGRjBDXHU0RUU1XHU0RkJGXHU1NDBFXHU3RUVEXHU0RjdGXHU3NTI4XHJcblx0XHRcdFx0XHRcdHRhYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcsIGlkKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGlkO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvLyAyLiBcdTU5ODJcdTY3OUNcdTRGNERcdTdGNkVcdTUzMzlcdTkxNERcdTU5MzFcdThEMjVcdUZGMENcdTVDMURcdThCRDVcdTkwMUFcdThGQzdcdTcyNzlcdTVGODFcdTUzMzlcdTkxNERcclxuXHRcdFx0XHRpZiAodGFibGVGZWF0dXJlKSB7XHJcblx0XHRcdFx0XHRsZXQgYmVzdE1hdGNoSWQgPSAnJztcclxuXHRcdFx0XHRcdGxldCBiZXN0TWF0Y2hTY29yZSA9IDA7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGZvciAoY29uc3QgeyBpZCwgZmVhdHVyZSB9IG9mIHRhYmxlSW5mb3MpIHtcclxuXHRcdFx0XHRcdFx0aWYgKCFpZCkgY29udGludWU7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRjb25zdCBzY29yZSA9IHRoaXMudGFibGVJZE1hbmFnZXIuY2FsY3VsYXRlRmVhdHVyZVNpbWlsYXJpdHkodGFibGVGZWF0dXJlLCBmZWF0dXJlKTtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coYFx1ODg2OFx1NjgzQ0lEICR7aWR9IFx1NzY4NFx1NzI3OVx1NUY4MVx1NzZGOFx1NEYzQ1x1NUVBNjogJHtzY29yZS50b0ZpeGVkKDIpfWApO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0aWYgKHNjb3JlID4gYmVzdE1hdGNoU2NvcmUpIHtcclxuXHRcdFx0XHRcdFx0XHRiZXN0TWF0Y2hTY29yZSA9IHNjb3JlO1xyXG5cdFx0XHRcdFx0XHRcdGJlc3RNYXRjaElkID0gaWQ7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Ly8gXHU0RjdGXHU3NTI4XHU4QkJFXHU3RjZFXHU0RTJEXHU3Njg0XHU3NkY4XHU0RjNDXHU1RUE2XHU5NjA4XHU1MDNDXHJcblx0XHRcdFx0XHRpZiAoYmVzdE1hdGNoSWQgJiYgYmVzdE1hdGNoU2NvcmUgPiBzaW1pbGFyaXR5VGhyZXNob2xkKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGBcdTkwMUFcdThGQzdcdTcyNzlcdTVGODFcdTc2RjhcdTRGM0NcdTVFQTZcdTUzMzlcdTkxNERcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NJRDogJHtiZXN0TWF0Y2hJZH1cdUZGMDhcdTc2RjhcdTRGM0NcdTVFQTY6ICR7YmVzdE1hdGNoU2NvcmUudG9GaXhlZCgyKX1cdUZGMDlgKTtcclxuXHRcdFx0XHRcdFx0Ly8gXHU1QzA2SURcdTRGRERcdTVCNThcdTUyMzBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcdTRFMEFcdUZGMENcdTRFRTVcdTRGQkZcdTU0MEVcdTdFRURcdTRGN0ZcdTc1MjhcclxuXHRcdFx0XHRcdFx0dGFibGUuc2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJywgYmVzdE1hdGNoSWQpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gYmVzdE1hdGNoSWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyAzLiBcdTVDMURcdThCRDVcdTkwMUFcdThGQzdcdTg4NjhcdTY4M0NcdTdFRDNcdTY3ODRcdTUzMzlcdTkxNERcdUZGMDhcdTg4NENcdTY1NzBcdTU0OENcdTUyMTdcdTY1NzBcdUZGMDlcclxuXHRcdFx0aWYgKHRhYmxlRmVhdHVyZSkge1xyXG5cdFx0XHRcdGZvciAoY29uc3QgeyBpZCwgZmVhdHVyZSB9IG9mIHRhYmxlSW5mb3MpIHtcclxuXHRcdFx0XHRcdGlmICghaWQpIGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHQvLyBcdTU5ODJcdTY3OUNcdTg4NENcdTY1NzBcdTU0OENcdTUyMTdcdTY1NzBcdTkwRkRcdTUzMzlcdTkxNERcclxuXHRcdFx0XHRcdGlmIChmZWF0dXJlLnJvd3MgPT09IHRhYmxlRmVhdHVyZS5yb3dzICYmIGZlYXR1cmUuY29scyA9PT0gdGFibGVGZWF0dXJlLmNvbHMpIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coYFx1OTAxQVx1OEZDN1x1ODg2OFx1NjgzQ1x1N0VEM1x1Njc4NFx1NTMzOVx1OTE0RFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEOiAke2lkfWApO1xyXG5cdFx0XHRcdFx0XHQvLyBcdTVDMDZJRFx1NEZERFx1NUI1OFx1NTIzMFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFx1NEUwQVx1RkYwQ1x1NEVFNVx1NEZCRlx1NTQwRVx1N0VFRFx1NEY3Rlx1NzUyOFxyXG5cdFx0XHRcdFx0XHR0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnLCBpZCk7XHJcblx0XHRcdFx0XHRcdHJldHVybiBpZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vIDQuIFx1NTk4Mlx1Njc5Q1x1NjI0MFx1NjcwOVx1NTMzOVx1OTE0RFx1OTBGRFx1NTkzMVx1OEQyNVx1RkYwQ1x1NEY0Nlx1ODg2OFx1NjgzQ0lEXHU1MjlGXHU4MEZEXHU1REYyXHU1NDJGXHU3NTI4XHVGRjBDXHU1MjE5XHU3NTFGXHU2MjEwXHU2NUIwSURcclxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlVGFibGVJZHMpIHtcclxuXHRcdFx0XHRjb25zdCBuZXdJZCA9IHRoaXMudGFibGVJZE1hbmFnZXIuZ2VuZXJhdGVUYWJsZUlkKCk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coYFx1NjcyQVx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEXHVGRjBDXHU3NTFGXHU2MjEwXHU2NUIwSUQ6ICR7bmV3SWR9YCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly8gXHU1QzA2SURcdTRGRERcdTVCNThcdTUyMzBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcdTRFMEFcdUZGMENcdTRFRTVcdTRGQkZcdTU0MEVcdTdFRURcdTRGN0ZcdTc1MjhcclxuXHRcdFx0XHR0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnLCBuZXdJZCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0cmV0dXJuIG5ld0lkO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTU5ODJcdTY3OUNcdTc5ODFcdTc1MjhcdTRFODZcdTg4NjhcdTY4M0NJRFx1NTI5Rlx1ODBGRFx1RkYwQ1x1NTIxOVx1OEZENFx1NTZERW51bGxcclxuXHRcdFx0Y29uc29sZS5sb2coJ1x1NjcyQVx1NTcyOE1hcmtkb3duXHU1MTg1XHU1QkI5XHU0RTJEXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSURcdUZGMENcdTRFMTRcdTg4NjhcdTY4M0NJRFx1NTI5Rlx1ODBGRFx1NURGMlx1Nzk4MVx1NzUyOCcpO1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1x1NEVDRU1hcmtkb3duXHU1MTg1XHU1QkI5XHU4QkZCXHU1M0Q2XHU4ODY4XHU2ODNDSURcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0LyoqXHJcblx0ICogXHU4QkJFXHU3RjZFXHU4OUM2XHU1NkZFXHU2QTIxXHU1RjBGXHU1M0Q4XHU1MzE2XHU3NkQxXHU1NDJDXHJcblx0ICovXHJcblx0c2V0dXBWaWV3TW9kZUNoYW5nZUxpc3RlbmVyKCk6IHZvaWQge1xyXG5cdFx0Ly8gXHU3OUZCXHU5NjY0XHU1M0VGXHU4MEZEXHU1QjU4XHU1NzI4XHU3Njg0XHU2NUU3XHU3NkQxXHU1NDJDXHU1NjY4XHJcblx0XHRpZiAodGhpcy52aWV3TW9kZUNoYW5nZUhhbmRsZXIpIHtcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9mZignYWN0aXZlLWxlYWYtY2hhbmdlJywgdGhpcy52aWV3TW9kZUNoYW5nZUhhbmRsZXIpO1xyXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub2ZmKCdsYXlvdXQtY2hhbmdlJywgdGhpcy52aWV3TW9kZUNoYW5nZUhhbmRsZXIpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvLyBcdTUyMUJcdTVFRkFcdTY1QjBcdTc2ODRcdTU5MDRcdTc0MDZcdTUxRkRcdTY1NzBcclxuXHRcdHRoaXMudmlld01vZGVDaGFuZ2VIYW5kbGVyID0gKCkgPT4ge1xyXG5cdFx0XHR0aGlzLmNoZWNrQW5kUmVuZGVyVGFibGVzKCk7XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHQvLyBcdTZDRThcdTUxOENcdTc2RDFcdTU0MkNcdTU2NjhcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKCdhY3RpdmUtbGVhZi1jaGFuZ2UnLCB0aGlzLnZpZXdNb2RlQ2hhbmdlSGFuZGxlcilcclxuXHRcdCk7XHJcblx0XHRcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKCdsYXlvdXQtY2hhbmdlJywgdGhpcy52aWV3TW9kZUNoYW5nZUhhbmRsZXIpXHJcblx0XHQpO1xyXG5cdFx0XHJcblx0XHRjb25zb2xlLmxvZyhcIlx1NURGMlx1OEJCRVx1N0Y2RVx1ODlDNlx1NTZGRVx1NkEyMVx1NUYwRlx1NTNEOFx1NTMxNlx1NzZEMVx1NTQyQ1x1NTY2OFwiKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFx1NjhDMFx1NjdFNVx1NUY1M1x1NTI0RFx1NkEyMVx1NUYwRlx1NUU3Nlx1NTcyOFx1OTcwMFx1ODk4MVx1NjVGNlx1NkUzMlx1NjdEM1x1ODg2OFx1NjgzQ1xyXG5cdCAqL1xyXG5cdGNoZWNrQW5kUmVuZGVyVGFibGVzKCk6IHZvaWQge1xyXG5cdFx0Ly8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU2RDNCXHU1MkE4XHU4OUM2XHU1NkZFXHJcblx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuXHRcdGlmICghYWN0aXZlVmlldykgcmV0dXJuO1xyXG5cdFx0XHJcblx0XHQvLyBcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTY2MkZcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcclxuXHRcdGNvbnN0IGlzUHJldmlld01vZGUgPSBhY3RpdmVWaWV3LmdldE1vZGUoKSA9PT0gJ3ByZXZpZXcnO1xyXG5cdFx0XHJcblx0XHQvLyBcdTU5ODJcdTY3OUNcdTY2MkZcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdUZGMENcdTRFMTRcdTRFMEVcdTRFMEFcdTZCMjFcdTcyQjZcdTYwMDFcdTRFMERcdTU0MENcdUZGMENcdTg5RTZcdTUzRDFcdTZFMzJcdTY3RDNcclxuXHRcdGlmIChpc1ByZXZpZXdNb2RlICYmICF0aGlzLmxhc3RQcmV2aWV3TW9kZVN0YXRlKSB7XHJcblx0XHRcdC8vIFx1NUVGNlx1OEZERlx1NjI2N1x1ODg0Q1x1RkYwQ1x1Nzg2RVx1NEZERERPTVx1NURGMlx1NUI4Q1x1NTE2OFx1NTJBMFx1OEY3RFxyXG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRyZW5kZXJUYWJsZXNXaXRoU3RvcmVkU3R5bGVzKHRoaXMpO1xyXG5cdFx0XHR9LCAzMDApO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvLyBcdThCQjBcdTVGNTVcdTVGNTNcdTUyNERcdTcyQjZcdTYwMDFcclxuXHRcdHRoaXMubGFzdFByZXZpZXdNb2RlU3RhdGUgPSBpc1ByZXZpZXdNb2RlO1xyXG5cdH1cclxufVxyXG5cclxuLy8gXHU5RUQ4XHU4QkE0XHU1QkZDXHU1MUZBXHU2M0QyXHU0RUY2XHU3QzdCXHJcbmV4cG9ydCBkZWZhdWx0IE9ic2lkaWFuU3ByZWFkc2hlZXQ7XHJcbiIsICJpbXBvcnQgeyBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBBcHAsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgT2JzaWRpYW5TcHJlYWRzaGVldCB9IGZyb20gJy4vbWFpbic7XHJcblxyXG5leHBvcnQgY2xhc3MgU2hlZXRTZXR0aW5nc1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIgXHJcbntcclxuXHRwbHVnaW46IE9ic2lkaWFuU3ByZWFkc2hlZXQ7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE9ic2lkaWFuU3ByZWFkc2hlZXQpIFxyXG5cdHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuXHJcblx0ZGlzcGxheSgpOiB2b2lkIFxyXG5cdHtcclxuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdBZHZhbmNlZCBUYWJsZSBYVCBcdThCQkVcdTdGNkUnIH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnXHU1MzlGXHU3NTFGXHU4ODY4XHU2ODNDXHU1NDBFXHU1OTA0XHU3NDA2JylcclxuXHRcdFx0LnNldERlc2MoJ1x1NTQyRlx1NzUyOFx1NkI2NFx1OEJCRVx1N0Y2RVx1NEVFNVx1NEY3Rlx1NzUyOE9ic2lkaWFuIFNoZWV0c1x1NzY4NFx1NkUzMlx1NjdEM1x1NTY2OCcpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5uYXRpdmVQcm9jZXNzaW5nKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5uYXRpdmVQcm9jZXNzaW5nID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIHdvcmtzcGFjZS5hY3RpdmVMZWFmIGlzIGRlcHJlY2F0ZWQgYW5kIHRoZSBmb2xsb3dpbmcgXHJcblx0XHRcdFx0XHRcdC8vIGxpbmUgaXMgcHJlZmVyZWQgYnV0IHRoZSBmb2xsb3dpbmcgbGluZSBkb2VzIG5vdCBhY3R1YWxseSB3b3JrIG9uIG15IFxyXG5cdFx0XHRcdFx0XHQvLyBtYWNoaW5lIHNvIGRlcHJlY2F0ZWQgaXQgaXMgSSBndWVzc1xyXG5cdFx0XHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZj8ucmVidWlsZFZpZXcoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KT8ucHJldmlld01vZGUucmVyZW5kZXIodHJ1ZSk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnXHU1NzI4XHU1MzU1XHU1MTQzXHU2ODNDXHU0RTJEXHU0RjdGXHU3NTI4XHU2QkI1XHU4NDNEJylcclxuXHRcdFx0LnNldERlc2MoJ1x1NTQyRlx1NzUyOFx1NkI2NFx1OEJCRVx1N0Y2RVx1NEVFNVx1NTcyOFx1ODg2OFx1NjgzQ1x1NTM1NVx1NTE0M1x1NjgzQ1x1NEUyRFx1NEY3Rlx1NzUyOFx1NkJCNVx1ODQzRCcpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXJhZ3JhcGhzKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXJhZ3JhcGhzID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIHdvcmtzcGFjZS5hY3RpdmVMZWFmIGlzIGRlcHJlY2F0ZWQgYW5kIHRoZSBmb2xsb3dpbmcgXHJcblx0XHRcdFx0XHRcdC8vIGxpbmUgaXMgcHJlZmVyZWQgYnV0IHRoZSBmb2xsb3dpbmcgbGluZSBkb2VzIG5vdCBhY3R1YWxseSB3b3JrIG9uIG15IFxyXG5cdFx0XHRcdFx0XHQvLyBtYWNoaW5lIHNvIGRlcHJlY2F0ZWQgaXQgaXMgSSBndWVzc1xyXG5cdFx0XHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZj8ucmVidWlsZFZpZXcoKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KT8ucHJldmlld01vZGUucmVyZW5kZXIodHJ1ZSk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1x1NURFNVx1NTE3N1x1NjgwRlx1OEJCRVx1N0Y2RScgfSk7XHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnXHU1NDJGXHU3NTI4XHU4ODY4XHU2ODNDXHU1REU1XHU1MTc3XHU2ODBGJylcclxuXHRcdFx0LnNldERlc2MoJ1x1NTQyRlx1NzUyOFx1NjIxNlx1Nzk4MVx1NzUyOFx1ODg2OFx1NjgzQ1x1NURFNVx1NTE3N1x1NjgwRlx1NTI5Rlx1ODBGRCcpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50b29sYmFyRW5hYmxlZClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiBcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudG9vbGJhckVuYWJsZWQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUpIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5jcmVhdGVUb29sYmFyKCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gXHU3OUZCXHU5NjY0XHU1REU1XHU1MTc3XHU2ODBGXHU1QkI5XHU1NjY4XHJcblx0XHRcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFkdmFuY2VkLXRhYmxlLXRvb2xiYXItY29udGFpbmVyJykuZm9yRWFjaChjb250YWluZXIgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGFpbmVyLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1x1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NjRDRFx1NEY1QycgfSk7XHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnXHU1NDJGXHU3NTI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU3Njg0XHU4ODY4XHU2ODNDXHU2NENEXHU0RjVDJylcclxuXHRcdFx0LnNldERlc2MoJ1x1NTE0MVx1OEJCOFx1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NzZGNFx1NjNBNVx1NEZFRVx1NjUzOSBNYXJrZG93biBcdTZFOTBcdTc4MDFcdTRFMkRcdTc2ODRcdTg4NjhcdTY4M0MnKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlRWRpdE1vZGVPcGVyYXRpb25zKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVFZGl0TW9kZU9wZXJhdGlvbnMgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1x1NTM1NVx1NTE0M1x1NjgzQ1x1NTQwOFx1NUU3NicgfSk7XHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnXHU1NDJGXHU3NTI4XHU1MzU1XHU1MTQzXHU2ODNDXHU1NDA4XHU1RTc2JylcclxuXHRcdFx0LnNldERlc2MoJ1x1NTQyRlx1NzUyOFx1NEY3Rlx1NzUyOCA8IFx1NTQ4QyBeIFx1NjgwN1x1OEJCMFx1OEZEQlx1ODg0Q1x1NTM1NVx1NTE0M1x1NjgzQ1x1NTQwOFx1NUU3Nlx1NzY4NFx1NTI5Rlx1ODBGRCcpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVDZWxsTWVyZ2luZylcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiBcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlQ2VsbE1lcmdpbmcgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk/LnByZXZpZXdNb2RlLnJlcmVuZGVyKHRydWUpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1x1NTQwOFx1NUU3Nlx1OTc1RVx1N0E3QVx1NTM1NVx1NTE0M1x1NjgzQ1x1NjVGNlx1Nzg2RVx1OEJBNCcpXHJcblx0XHRcdC5zZXREZXNjKCdcdTVGNTNcdTU0MDhcdTVFNzZcdTUzMDVcdTU0MkJcdTUxODVcdTVCQjlcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTY1RjZcdTY2M0VcdTc5M0FcdTc4NkVcdThCQTRcdTVCRjlcdThCRERcdTY4NDYnKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29uZmlybU1lcmdlTm9uRW1wdHkpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4gXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbmZpcm1NZXJnZU5vbkVtcHR5ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1x1ODFFQVx1NTJBOFx1NUM0NVx1NEUyRFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpXHJcblx0XHRcdC5zZXREZXNjKCdcdTgxRUFcdTUyQThcdTVDMDZcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTRFMkRcdTc2ODRcdTUxODVcdTVCQjlcdTVDNDVcdTRFMkRcdTY2M0VcdTc5M0EnKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b0NlbnRlck1lcmdlZENlbGxzKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvQ2VudGVyTWVyZ2VkQ2VsbHMgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk/LnByZXZpZXdNb2RlLnJlcmVuZGVyKHRydWUpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdcdTg4NjhcdTY4M0NJRFx1OEJCRVx1N0Y2RScgfSk7XHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnXHU1NDJGXHU3NTI4XHU4ODY4XHU2ODNDSUQnKVxyXG5cdFx0XHQuc2V0RGVzYygnXHU4MUVBXHU1MkE4XHU0RTNBXHU4ODY4XHU2ODNDXHU2REZCXHU1MkEwSURcdTRGNUNcdTRFM0FIVE1MXHU2Q0U4XHU5MUNBJylcclxuXHRcdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG5cdFx0XHRcdHRvZ2dsZVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZVRhYmxlSWRzKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVUYWJsZUlkcyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHRcdFxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdcdTRGN0ZcdTc1MjhcdTg4NjhcdTY4M0NcdTZDRThcdTkxQ0FcdTU5MzlcdTZBMjFcdTVGMEYnKVxyXG5cdFx0XHQuc2V0RGVzYygnXHU1NzI4XHU4ODY4XHU2ODNDXHU1MjREXHU1NDBFXHU2REZCXHU1MkEwXHU5MTREXHU1QkY5XHU3Njg0SFRNTFx1NkNFOFx1OTFDQVx1RkYwQ1x1NUY2Mlx1NjIxMFwiXHU2Q0U4XHU5MUNBXHU1OTM5XCJcdUZGMENcdTYzRDBcdTlBRDhcdTg4NjhcdTY4M0NJRFx1OEJDNlx1NTIyQlx1NzY4NFx1NTFDNlx1Nzg2RVx1NjAyNycpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VUYWJsZVdyYXBwZXJDb21tZW50cylcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiBcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlVGFibGVXcmFwcGVyQ29tbWVudHMgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnXHU4ODY4XHU2ODNDSURcdTUyNERcdTdGMDAnKVxyXG5cdFx0XHQuc2V0RGVzYygnXHU3NTFGXHU2MjEwXHU3Njg0XHU4ODY4XHU2ODNDSURcdTUyNERcdTdGMDAnKVxyXG5cdFx0XHQuYWRkVGV4dCgodGV4dCkgPT5cclxuXHRcdFx0XHR0ZXh0XHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWRQcmVmaXgpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4gXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmlkUHJlZml4ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1x1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MVx1NTMzOVx1OTE0RFx1NzZGOFx1NEYzQ1x1NUVBNlx1OTYwOFx1NTAzQycpXHJcblx0XHRcdC5zZXREZXNjKCdcdTVGNTNcdTkwMUFcdThGQzdcdTcyNzlcdTVGODFcdTUzMzlcdTkxNERcdTg4NjhcdTY4M0NcdTY1RjZcdUZGMENcdTk3MDBcdTg5ODFcdThGQkVcdTUyMzBcdTc2ODRcdTY3MDBcdTVDMEZcdTc2RjhcdTRGM0NcdTVFQTZcdUZGMDgwLTFcdTRFNEJcdTk1RjRcdUZGMENcdTlFRDhcdThCQTQwLjdcdUZGMDknKVxyXG5cdFx0XHQuYWRkU2xpZGVyKHNsaWRlciA9PiBcclxuXHRcdFx0XHRzbGlkZXJcclxuXHRcdFx0XHRcdC5zZXRMaW1pdHMoMC41LCAxLjAsIDAuMDUpXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmVhdHVyZVNpbWlsYXJpdHlUaHJlc2hvbGQgfHwgMC43KVxyXG5cdFx0XHRcdFx0LnNldER5bmFtaWNUb29sdGlwKClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmZlYXR1cmVTaW1pbGFyaXR5VGhyZXNob2xkID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1x1NEYxOFx1NTE0OFx1NEY3Rlx1NzUyOFx1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MVx1NTMzOVx1OTE0RCcpXHJcblx0XHRcdC5zZXREZXNjKCdcdTU0MkZcdTc1MjhcdTU0MEVcdUZGMENcdTVDMDZcdTRGMThcdTUxNDhcdTRGN0ZcdTc1MjhcdTcyNzlcdTVGODFcdTUzMzlcdTkxNERcdTgwMENcdTk3NUVcdTRGNERcdTdGNkVcdTUzMzlcdTkxNERcdTY3NjVcdThCQzZcdTUyMkJcdTg4NjhcdTY4M0NJRCcpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVmZXJGZWF0dXJlTWF0Y2hpbmcgfHwgZmFsc2UpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4gXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZlckZlYXR1cmVNYXRjaGluZyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHRcdFxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnXHU2NTcwXHU2MzZFXHU1QjU4XHU1MEE4XHU4QkJFXHU3RjZFJyB9KTtcclxuXHRcdFxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdcdTRGMThcdTUxNDhcdTRGN0ZcdTc1MjhcdTY1ODdcdTRFRjZcdTVCNThcdTUwQTgnKVxyXG5cdFx0XHQuc2V0RGVzYygnXHU1NDJGXHU3NTI4XHU1NDBFXHVGRjBDXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1QzA2XHU0RjE4XHU1MTQ4XHU1QjU4XHU1MEE4XHU1NzI4TWFya2Rvd25cdTY1ODdcdTRFRjZcdTRFMkRcdUZGMENcdTgwMENcdTRFMERcdTY2MkZkYXRhLmpzb25cdTY1ODdcdTRFRjZcdTRFMkQnKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlZmVyRmlsZVN0b3JhZ2UgfHwgZmFsc2UpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4gXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZlckZpbGVTdG9yYWdlID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1x1ODFFQVx1NTJBOFx1NUJGQ1x1NTFGQVx1NTIzMFx1NjU4N1x1NEVGNicpXHJcblx0XHRcdC5zZXREZXNjKCdcdTU0MkZcdTc1MjhcdTU0MEVcdUZGMENcdTUzNzNcdTRGN0ZcdTRGN0ZcdTc1MjhkYXRhLmpzb25cdTVCNThcdTUwQThcdTY1NzBcdTYzNkVcdUZGMENcdTRFNUZcdTRGMUFcdTgxRUFcdTUyQThcdTVDMDZcdTY1NzBcdTYzNkVcdTVCRkNcdTUxRkFcdTUyMzBNYXJrZG93blx1NjU4N1x1NEVGNlx1NEUyRCcpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvRXhwb3J0VG9GaWxlIHx8IGZhbHNlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvRXhwb3J0VG9GaWxlID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IE9ic2lkaWFuU3ByZWFkc2hlZXQgfSBmcm9tICdtYWluJztcclxuaW1wb3J0IHtcclxuXHRBcHAsXHJcblx0TWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcclxuXHRNYXJrZG93blJlbmRlckNoaWxkLFxyXG5cdE1hcmtkb3duUmVuZGVyZXIsXHJcbn0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgdHlwZSB7IFByb3BlcnRpZXMgfSBmcm9tICdjc3N0eXBlJztcclxuaW1wb3J0ICogYXMgSlNPTjUgZnJvbSAnanNvbjUnO1xyXG5cclxuLy8gVE9ETzogTW92ZSB0aGVzZSB0byBzZXR0aW5nc1xyXG5jb25zdCBNRVJHRV9VUF9TSUdOSUZJRVIgPSAnXicsXHJcblx0TUVSR0VfTEVGVF9TSUdOSUZJRVIgPSAnPCcsXHJcblx0SEVBREVSX0RFTElNRVRFUiA9ICctJyxcclxuXHRNRVRBX0RFTElNRVRFUiA9ICctLS0nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU2hlZXRNZXRhRGF0YSB7XHJcblx0Y2xhc3NlczogeyBba2V5OiBzdHJpbmddOiBQcm9wZXJ0aWVzIH07XHJcblx0bG9nOiBib29sZWFuO1xyXG59XHJcblxyXG50eXBlIGdyb3VwU3R5bGVzID0ge1xyXG5cdGNsYXNzZXM6IHN0cmluZ1tdXHJcblx0c3R5bGVzOiBQcm9wZXJ0aWVzXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaGVldEVsZW1lbnQgZXh0ZW5kcyBNYXJrZG93blJlbmRlckNoaWxkIHtcclxuXHRwcml2YXRlIG5ld0xpbmVSRTogUmVnRXhwO1xyXG5cdHByaXZhdGUgY2VsbEJvcmRlclJFOiBSZWdFeHA7XHJcblx0cHJpdmF0ZSBtZXRhUkU6IFJlZ0V4cDtcclxuXHRwcml2YXRlIGhlYWRlclJFOiBSZWdFeHA7XHJcblx0cHJpdmF0ZSBjb250ZW50R3JpZDogc3RyaW5nW11bXTtcclxuXHRwcml2YXRlIG1ldGFkYXRhOiBQYXJ0aWFsPElTaGVldE1ldGFEYXRhPjtcclxuXHRwcml2YXRlIHN0eWxlczogUmVjb3JkPHN0cmluZywgUHJvcGVydGllcz47XHJcblx0cHJpdmF0ZSBnbG9iYWxTdHlsZTogUHJvcGVydGllcyA9IHt9O1xyXG5cdHByaXZhdGUgY2VsbE1heExlbmd0aCA9IDA7XHJcblx0cHJpdmF0ZSByb3dNYXhMZW5ndGggPSAwO1xyXG5cdHByaXZhdGUgaGVhZGVyUm93OiBudW1iZXI7XHJcblx0cHJpdmF0ZSBoZWFkZXJDb2w6IG51bWJlcjtcclxuXHRwcml2YXRlIHJvd1N0eWxlczogZ3JvdXBTdHlsZXNbXSA9IFtdO1xyXG5cdHByaXZhdGUgY29sU3R5bGVzOiBncm91cFN0eWxlc1tdID0gW107XHJcblx0cHJpdmF0ZSB0YWJsZTogSFRNTFRhYmxlRWxlbWVudDtcclxuXHRwcml2YXRlIHRhYmxlSGVhZDogSFRNTFRhYmxlU2VjdGlvbkVsZW1lbnQ7XHJcblx0cHJpdmF0ZSB0YWJsZUJvZHk6IEhUTUxUYWJsZVNlY3Rpb25FbGVtZW50O1xyXG5cdHByaXZhdGUgZG9tR3JpZDogSFRNTFRhYmxlQ2VsbEVsZW1lbnRbXVtdID0gW107XHJcblxyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0cHJpdmF0ZSByZWFkb25seSBlbDogSFRNTFRhYmxlRWxlbWVudCxcclxuXHRcdHByaXZhdGUgcmVhZG9ubHkgc291cmNlOiBzdHJpbmcsXHJcblx0XHRwcml2YXRlIHJlYWRvbmx5IGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcclxuXHRcdHByaXZhdGUgcmVhZG9ubHkgYXBwOiBBcHAsXHJcblx0XHRwcml2YXRlIHJlYWRvbmx5IHBsdWdpbjogT2JzaWRpYW5TcHJlYWRzaGVldCxcclxuXHQpIHtcclxuXHRcdHN1cGVyKGVsKTtcclxuXHRcdC8vIFRPRE86IEhhbmRsZSBzZXR0aW5ncyBoZXJlIC0+IG1vdmUgOjExLTEyXHJcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdHRoaXMubWV0YVJFID0gbmV3IFJlZ0V4cChTdHJpbmcucmF3YF4ke01FVEFfREVMSU1FVEVSfVxccyo/KD86figuKj8pKT9cXHMqP1xcbitgLCAnbWcnKTtcclxuXHRcdHRoaXMubmV3TGluZVJFID0gbmV3IFJlZ0V4cChTdHJpbmcucmF3YFxcbmApO1xyXG5cdFx0dGhpcy5jZWxsQm9yZGVyUkUgPSBuZXcgUmVnRXhwKFN0cmluZy5yYXdgKD88IVxcXFwpXFx8YCk7XHJcblx0XHR0aGlzLmhlYWRlclJFID0gbmV3IFJlZ0V4cChTdHJpbmcucmF3YF5cXHMqPyg6KT8oPzoke0hFQURFUl9ERUxJTUVURVJ9KSs/KDopP1xccyo/KD86KD88IVxcXFwpfiguKj8pKT8kYCk7XHJcblxyXG5cdFx0Ly8gUGFyc2UgY29kZSBibG9jayBpbnB1dFxyXG5cdFx0dGhpcy5wYXJzZUlucHV0VG9HcmlkKCk7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgZ3JpZCBpcyB2YWxpZCAoZXZlcnkgbGluZSBzdGFydHMgYW5kIGVuZHMgd2l0aCBgfGApXHJcblx0XHR0aGlzLnZhbGlkYXRlSW5wdXQoKTtcclxuXHJcblx0XHQvLyBGaW5kIGFuZCBmaXggZ3JpZCBkaW1lbnNpb25zXHJcblx0XHR0aGlzLm5vcm1hbGl6ZUdyaWQoKTtcclxuXHJcblx0XHQvLyBTdGFydCBidWlsZGluZyBET00gZWxlbWVudFxyXG5cdFx0dGhpcy50YWJsZSA9IHRoaXMuZWw7XHJcblx0XHR0aGlzLnRhYmxlLmlkID0gJ29ic2lkaWFuLXNoZWV0cy1wYXJzZWQnO1xyXG5cdFx0dGhpcy50YWJsZUhlYWQgPSB0aGlzLnRhYmxlLmNyZWF0ZUVsKCd0aGVhZCcpO1xyXG5cdFx0dGhpcy50YWJsZUJvZHkgPSB0aGlzLnRhYmxlLmNyZWF0ZUVsKCd0Ym9keScpO1xyXG5cclxuXHRcdC8vIEZpbmQgaGVhZGVyIGJvdW5kYXJpZXNcclxuXHRcdHRoaXMuZ2V0SGVhZGVyQm91bmRhcmllcygpO1xyXG5cclxuXHRcdC8vIEZpbmQgaGVhZGVyIHN0eWxlc1xyXG5cdFx0dGhpcy5nZXRIZWFkZXJTdHlsZXMoKTtcclxuXHJcblx0XHQvLyBCdWlsZCBjZWxscyBpbnRvIERPTVxyXG5cdFx0dGhpcy5idWlsZERvbVRhYmxlKCk7XHJcblxyXG5cdFx0Ly8gY29uc29sZS5sb2codGhpc0dyaWQpO1xyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7IH1cclxuXHJcblx0ZGlzcGxheUVycm9yKGVycm9yPzogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmVsLmNyZWF0ZURpdih7XHJcblx0XHRcdHRleHQ6IGBcXG5FcnJvcjogXFxgJHtlcnJvcn1cXGBcXG5cXG5gLFxyXG5cdFx0XHRjbHM6ICdvYnMtc2hlZXRzX2Vycm9yJyxcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy51bmxvYWQoKTtcclxuXHR9XHJcblxyXG5cdHBhcnNlSW5wdXRUb0dyaWQoKSB7XHJcblx0XHRpZiAoIXRoaXMubWV0YVJFLnRlc3QodGhpcy5zb3VyY2UpKSByZXR1cm4gdGhpcy5jb250ZW50R3JpZCA9XHJcblx0XHRcdHRoaXMuc291cmNlLnNwbGl0KHRoaXMubmV3TGluZVJFKVxyXG5cdFx0XHRcdC5maWx0ZXIoKHJvdykgPT4gdGhpcy5jZWxsQm9yZGVyUkUudGVzdChyb3cpKVxyXG5cdFx0XHRcdC5tYXAoKHJvdykgPT4gcm93LnNwbGl0KHRoaXMuY2VsbEJvcmRlclJFKVxyXG5cdFx0XHRcdFx0Lm1hcChjZWxsID0+IGNlbGwudHJpbSgpKSk7XHJcblxyXG5cdFx0Y29uc3QgW21ldGEsIHVucGFyc2VkU3R5bGUsIHNvdXJjZV0gPSB0aGlzLnNvdXJjZS5zcGxpdCh0aGlzLm1ldGFSRSk7XHJcblxyXG5cdFx0dGhpcy5wYXJzZU1ldGFkYXRhKG1ldGEpO1xyXG5cclxuXHRcdGlmICh1bnBhcnNlZFN0eWxlKSB7XHJcblx0XHRcdGxldCBjZWxsU3R5bGU6IFByb3BlcnRpZXMgPSB7fTtcclxuXHRcdFx0Y29uc3QgY2xzID0gdW5wYXJzZWRTdHlsZS5tYXRjaCgvXFwuXFxTKy9nKSB8fCBbXTtcclxuXHRcdFx0Y2xzLmZvckVhY2goY3NzQ2xhc3MgPT4ge1xyXG5cdFx0XHRcdGNlbGxTdHlsZSA9IHsgLi4uY2VsbFN0eWxlLCAuLi4odGhpcy5zdHlsZXM/Lltjc3NDbGFzcy5zbGljZSgxKV0gfHwge30pIH07XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Y29uc3QgaW5saW5lU3R5bGUgPSB1bnBhcnNlZFN0eWxlLm1hdGNoKC9cXHsuKlxcfS8pPy5bMF0gfHwgJ3t9JztcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRjZWxsU3R5bGUgPSB7IC4uLmNlbGxTdHlsZSwgLi4uSlNPTjUucGFyc2UoaW5saW5lU3R5bGUpIH07XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2hcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYEludmFsaWQgY2VsbCBzdHlsZSBcXGAke2lubGluZVN0eWxlfVxcYGApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmdsb2JhbFN0eWxlID0gY2VsbFN0eWxlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmNvbnRlbnRHcmlkID0gc291cmNlLnNwbGl0KHRoaXMubmV3TGluZVJFKVxyXG5cdFx0XHQubWFwKChyb3cpID0+IHJvdy5zcGxpdCh0aGlzLmNlbGxCb3JkZXJSRSlcclxuXHRcdFx0XHQubWFwKGNlbGwgPT4gY2VsbC50cmltKCkpKTtcclxuXHR9XHJcblxyXG5cdHBhcnNlTWV0YWRhdGEobWV0YTogc3RyaW5nKSB7XHJcblx0XHRsZXQgbWV0YWRhdGE6IFBhcnRpYWw8SVNoZWV0TWV0YURhdGE+O1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdG1ldGFkYXRhID0gSlNPTjUucGFyc2UobWV0YSk7XHJcblx0XHR9XHJcblx0XHRjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZGlzcGxheUVycm9yKCdNZXRhZGF0YSBpcyBub3QgcHJvcGVyIEpTT04nKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcblxyXG5cdFx0Ly8gU2VwYXJhdGUgdGhpcyBvdXQgd2hlbiBtb3JlIG1ldGFkYXRhIGlzIGludHJvZHVjZWRcclxuXHRcdGlmIChtZXRhZGF0YS5jbGFzc2VzKSB7XHJcblx0XHRcdHRoaXMuc3R5bGVzID0gbWV0YWRhdGEuY2xhc3NlcztcclxuXHRcdH1cclxuXHRcdC8vIFRPRE86IEFkZCBsb2dnaW5nIGFuZCBkZWJ1Z2dpbmcgaW4gbWV0YWRhdGFcclxuXHRcdC8vIGlmIChtZXRhZGF0YS5sb2cpIHRoaXMubG9nZ2luZyA9IHRydWVcclxuXHR9XHJcblxyXG5cdHZhbGlkYXRlSW5wdXQoKSB7XHJcblx0XHRpZiAoXHJcblx0XHRcdCF0aGlzLmNvbnRlbnRHcmlkLmV2ZXJ5KFxyXG5cdFx0XHRcdChyb3cpID0+ICFyb3cucG9wKCk/LnRyaW0oKSAmJiAhcm93LnNoaWZ0KCk/LnRyaW0oKVxyXG5cdFx0XHQpXHJcblx0XHQpIHJldHVybiB0aGlzLmRpc3BsYXlFcnJvcignTWFsZm9ybWVkIHRhYmxlJyk7XHJcblx0fVxyXG5cclxuXHRub3JtYWxpemVHcmlkKCkge1xyXG5cdFx0Zm9yIChsZXQgcm93SW5kZXggPSAwOyByb3dJbmRleCA8IHRoaXMuY29udGVudEdyaWQubGVuZ3RoOyByb3dJbmRleCsrKSB7XHJcblx0XHRcdGNvbnN0IHJvdyA9IHRoaXMuY29udGVudEdyaWRbcm93SW5kZXhdO1xyXG5cdFx0XHRpZiAodGhpcy5yb3dNYXhMZW5ndGggPCByb3cubGVuZ3RoKSB0aGlzLnJvd01heExlbmd0aCA9IHJvdy5sZW5ndGg7XHJcblxyXG5cdFx0XHRmb3IgKGxldCBjb2xJbmRleCA9IDA7IGNvbEluZGV4IDwgcm93Lmxlbmd0aDsgY29sSW5kZXgrKylcclxuXHRcdFx0XHRpZiAodGhpcy5jZWxsTWF4TGVuZ3RoIDwgcm93W2NvbEluZGV4XS50cmltKCkubGVuZ3RoKVxyXG5cdFx0XHRcdFx0dGhpcy5jZWxsTWF4TGVuZ3RoID0gcm93W2NvbEluZGV4XS50cmltKCkubGVuZ3RoO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY29udGVudEdyaWQgPSB0aGlzLmNvbnRlbnRHcmlkLm1hcCgobGluZSkgPT5cclxuXHRcdFx0QXJyYXkuZnJvbShcclxuXHRcdFx0XHR7IC4uLmxpbmUsIGxlbmd0aDogdGhpcy5yb3dNYXhMZW5ndGggfSxcclxuXHRcdFx0XHQoY2VsbCkgPT4gY2VsbCB8fCAnJ1xyXG5cdFx0XHQpXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0Z2V0SGVhZGVyQm91bmRhcmllcygpIHtcclxuXHRcdHRoaXMuaGVhZGVyUm93ID0gdGhpcy5jb250ZW50R3JpZC5maW5kSW5kZXgoXHJcblx0XHRcdChoZWFkZXJSb3cpID0+XHJcblx0XHRcdFx0aGVhZGVyUm93LmV2ZXJ5KChoZWFkZXJDb2wpID0+IHRoaXMuaGVhZGVyUkUudGVzdChoZWFkZXJDb2wpKVxyXG5cdFx0KTtcclxuXHJcblx0XHQvLyB0cmFuc3Bvc2UgZ3JpZFxyXG5cdFx0dGhpcy5oZWFkZXJDb2wgPSB0aGlzLmNvbnRlbnRHcmlkWzBdLm1hcCgoXywgaSkgPT5cclxuXHRcdFx0dGhpcy5jb250ZW50R3JpZC5tYXAocm93ID0+IHJvd1tpXSlcclxuXHRcdClcclxuXHRcdFx0LmZpbmRJbmRleChcclxuXHRcdFx0XHQoaGVhZGVyQ29sKSA9PlxyXG5cdFx0XHRcdFx0aGVhZGVyQ29sLmV2ZXJ5KChoZWFkZXJDb2wpID0+IHRoaXMuaGVhZGVyUkUudGVzdChoZWFkZXJDb2wpKVxyXG5cdFx0XHQpO1xyXG5cdH1cclxuXHJcblx0Z2V0SGVhZGVyU3R5bGVzKCkge1xyXG5cdFx0Ly8gVE9ETzogQWRkIHNhbWUgc3ludGF4IG9mIGN1c3RvbSBzdHlsaW5nIGFzIGNlbGxzXHJcblx0XHRpZiAodGhpcy5oZWFkZXJSb3cgIT09IC0xKSB0aGlzLmNvbFN0eWxlcyA9IHRoaXMuY29udGVudEdyaWRbdGhpcy5oZWFkZXJSb3ddLm1hcChyb3dIZWFkID0+IHtcclxuXHRcdFx0bGV0IHN0eWxlczogUHJvcGVydGllcyA9IHt9O1xyXG5cclxuXHRcdFx0Y29uc3QgYWxpZ25tZW50ID0gcm93SGVhZC5tYXRjaCh0aGlzLmhlYWRlclJFKTtcclxuXHRcdFx0aWYgKCFhbGlnbm1lbnQpIHJldHVybiB7IGNsYXNzZXM6IFtdLCBzdHlsZXMgfTtcclxuXHRcdFx0ZWxzZSBpZiAoYWxpZ25tZW50WzFdICYmIGFsaWdubWVudFsyXSkgc3R5bGVzWyd0ZXh0QWxpZ24nXSA9ICdjZW50ZXInO1xyXG5cdFx0XHRlbHNlIGlmIChhbGlnbm1lbnRbMV0pIHN0eWxlc1sndGV4dEFsaWduJ10gPSAnbGVmdCc7XHJcblx0XHRcdGVsc2UgaWYgKGFsaWdubWVudFsyXSkgc3R5bGVzWyd0ZXh0QWxpZ24nXSA9ICdyaWdodCc7XHJcblxyXG5cdFx0XHQvLyBQYXJzZSB+XHJcblx0XHRcdGNvbnN0IGNsYXNzZXMgPSBhbGlnbm1lbnRbM10/Lm1hdGNoKC9cXC5cXFMrL2cpPy5tYXAoU3RyaW5nKSB8fCBbXTtcclxuXHRcdFx0Y2xhc3Nlcy5mb3JFYWNoKGNzc0NsYXNzID0+IFxyXG5cdFx0XHRcdHN0eWxlcyA9IHtcclxuXHRcdFx0XHRcdC4uLnN0eWxlcyxcclxuXHRcdFx0XHRcdC4uLih0aGlzLnN0eWxlcz8uW2Nzc0NsYXNzLnNsaWNlKDEpXVxyXG5cdFx0XHRcdFx0XHRcdHx8IHt9XHJcblx0XHRcdFx0XHQpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4geyBjbGFzc2VzLCBzdHlsZXMgfTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGlmICh0aGlzLmhlYWRlckNvbCAhPT0gLTEpIHRoaXMucm93U3R5bGVzID0gdGhpcy5jb250ZW50R3JpZFswXS5tYXAoKF8sIGkpID0+XHJcblx0XHRcdHRoaXMuY29udGVudEdyaWQubWFwKHJvdyA9PiByb3dbaV0pXHJcblx0XHQpW3RoaXMuaGVhZGVyQ29sXS5tYXAocm93SGVhZCA9PiB7XHJcblx0XHRcdGxldCBzdHlsZXM6IFByb3BlcnRpZXMgPSB7fTtcclxuXHJcblx0XHRcdGNvbnN0IGFsaWdubWVudCA9IHJvd0hlYWQubWF0Y2godGhpcy5oZWFkZXJSRSk7XHJcblx0XHRcdGlmICghYWxpZ25tZW50KSByZXR1cm4geyBjbGFzc2VzOiBbXSwgc3R5bGVzIH07XHJcblx0XHRcdGVsc2UgaWYgKGFsaWdubWVudFsxXSAmJiBhbGlnbm1lbnRbMl0pIHN0eWxlc1sndGV4dEFsaWduJ10gPSAnY2VudGVyJztcclxuXHRcdFx0ZWxzZSBpZiAoYWxpZ25tZW50WzFdKSBzdHlsZXNbJ3RleHRBbGlnbiddID0gJ2xlZnQnO1xyXG5cdFx0XHRlbHNlIGlmIChhbGlnbm1lbnRbMl0pIHN0eWxlc1sndGV4dEFsaWduJ10gPSAncmlnaHQnO1xyXG5cclxuXHRcdFx0Ly8gUGFyc2UgflxyXG5cdFx0XHRjb25zdCBjbGFzc2VzID0gYWxpZ25tZW50WzNdPy5tYXRjaCgvXFwuXFxTKy9nKT8ubWFwKFN0cmluZykgfHwgW107XHJcblx0XHRcdGNsYXNzZXMuZm9yRWFjaChjc3NDbGFzcyA9PiBcclxuXHRcdFx0XHRzdHlsZXMgPSB7XHJcblx0XHRcdFx0XHQuLi5zdHlsZXMsXHJcblx0XHRcdFx0XHQuLi4odGhpcy5zdHlsZXM/Lltjc3NDbGFzcy5zbGljZSgxKV1cclxuXHRcdFx0XHRcdFx0XHR8fCB7fVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0KTtcclxuXHRcdFx0cmV0dXJuIHsgY2xhc3Nlcywgc3R5bGVzIH07XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGJ1aWxkRG9tVGFibGUoKSB7XHJcblx0XHRmb3IgKFxyXG5cdFx0XHRsZXQgcm93SW5kZXggPSAwO1xyXG5cdFx0XHRyb3dJbmRleCA8IHRoaXMuY29udGVudEdyaWQubGVuZ3RoO1xyXG5cdFx0XHRyb3dJbmRleCsrXHJcblx0XHQpIHRoaXMuYnVpbGREb21Sb3cocm93SW5kZXgpO1xyXG5cdH1cclxuXHJcblx0YnVpbGREb21Sb3cocm93SW5kZXg6IG51bWJlcikge1xyXG5cdFx0Y29uc3Qgcm93Q29udGVudHMgPSB0aGlzLmNvbnRlbnRHcmlkW3Jvd0luZGV4XTtcclxuXHRcdGxldCByb3dOb2RlID0gdGhpcy50YWJsZUJvZHkuY3JlYXRlRWwoJ3RyJyk7XHJcblxyXG5cdFx0aWYgKHJvd0luZGV4IDwgdGhpcy5oZWFkZXJSb3cpIHJvd05vZGUgPSB0aGlzLnRhYmxlSGVhZC5jcmVhdGVFbCgndHInKTtcclxuXHRcdGVsc2UgaWYgKHJvd0luZGV4ID09PSB0aGlzLmhlYWRlclJvdykgcmV0dXJuO1xyXG5cclxuXHRcdHRoaXMuZG9tR3JpZFtyb3dJbmRleF0gPSBbXTtcclxuXHJcblx0XHRmb3IgKFxyXG5cdFx0XHRsZXQgY29sdW1uSW5kZXggPSAwO1xyXG5cdFx0XHRjb2x1bW5JbmRleCA8IHJvd0NvbnRlbnRzLmxlbmd0aDtcclxuXHRcdFx0Y29sdW1uSW5kZXgrK1xyXG5cdFx0KSB0aGlzLmJ1aWxkRG9tQ2VsbChyb3dJbmRleCwgY29sdW1uSW5kZXgsIHJvd05vZGUpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgYnVpbGREb21DZWxsKHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbkluZGV4OiBudW1iZXIsIHJvd05vZGU6IEhUTUxFbGVtZW50KSB7XHJcblx0XHRjb25zdCBbXHJcblx0XHRcdGNlbGxDb250ZW50LFxyXG5cdFx0XHRjZWxsU3R5bGVzXHJcblx0XHRdID0gdGhpcy5jb250ZW50R3JpZFtyb3dJbmRleF1bY29sdW1uSW5kZXhdLnNwbGl0KC8oPzwhW1xcXFx+XSl+KD8hfikvKTtcclxuXHJcblx0XHRsZXQgY2xzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0bGV0IGNlbGxTdHlsZTogUHJvcGVydGllcyA9IHRoaXMuZ2xvYmFsU3R5bGU7XHJcblxyXG5cdFx0aWYgKHRoaXMucm93U3R5bGVzW3Jvd0luZGV4XSkge1xyXG5cdFx0XHRjZWxsU3R5bGUgPSB7IC4uLmNlbGxTdHlsZSwgLi4udGhpcy5yb3dTdHlsZXNbcm93SW5kZXhdLnN0eWxlcyB9OyBcclxuXHRcdFx0Y2xzLnB1c2goLi4udGhpcy5yb3dTdHlsZXNbcm93SW5kZXhdLmNsYXNzZXMpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRoaXMuY29sU3R5bGVzW2NvbHVtbkluZGV4XSkge1xyXG5cdFx0XHRjZWxsU3R5bGUgPSB7IC4uLmNlbGxTdHlsZSwgLi4udGhpcy5jb2xTdHlsZXNbY29sdW1uSW5kZXhdLnN0eWxlcyB9OyBcclxuXHRcdFx0Y2xzLnB1c2goLi4udGhpcy5jb2xTdHlsZXNbY29sdW1uSW5kZXhdLmNsYXNzZXMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChjZWxsU3R5bGVzKSB7XHJcblx0XHRcdGNscyA9IGNlbGxTdHlsZXMubWF0Y2goLyg/PD1cXC4pXFxTKy9nKSB8fCBbXTtcclxuXHRcdFx0Y2xzLmZvckVhY2goY3NzQ2xhc3MgPT4ge1xyXG5cdFx0XHRcdGNlbGxTdHlsZSA9IHsgLi4uY2VsbFN0eWxlLCAuLi4odGhpcy5zdHlsZXM/Lltjc3NDbGFzc10gfHwge30pIH07XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Y29uc3QgaW5saW5lU3R5bGUgPSBjZWxsU3R5bGVzLm1hdGNoKC9cXHsuKlxcfS8pPy5bMF0gfHwgJ3t9JztcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRjZWxsU3R5bGUgPSB7IC4uLmNlbGxTdHlsZSwgLi4uSlNPTjUucGFyc2UoaW5saW5lU3R5bGUpIH07XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2hcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYEludmFsaWQgY2VsbCBzdHlsZSBcXGAke2lubGluZVN0eWxlfVxcYGApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGNlbGxUYWc6IGtleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcCA9ICd0ZCc7XHJcblx0XHRsZXQgY2VsbDogSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XHJcblxyXG5cdFx0aWYgKGNvbHVtbkluZGV4ID09PSB0aGlzLmhlYWRlckNvbCB8fCByb3dJbmRleCA9PT0gdGhpcy5oZWFkZXJSb3cpIHJldHVybjtcclxuXHRcdGVsc2UgaWYgKGNvbHVtbkluZGV4IDwgdGhpcy5oZWFkZXJDb2wgfHwgcm93SW5kZXggPCB0aGlzLmhlYWRlclJvdykgY2VsbFRhZyA9ICd0aCc7XHJcblxyXG5cdFx0aWYgKGNlbGxDb250ZW50ID09IE1FUkdFX0xFRlRfU0lHTklGSUVSICYmIHRoaXMuZG9tR3JpZD8uW3Jvd0luZGV4XT8uW2NvbHVtbkluZGV4IC0gMV0pIHtcclxuXHRcdFx0Y2VsbCA9IHRoaXMuZG9tR3JpZFtyb3dJbmRleF1bY29sdW1uSW5kZXggLSAxXTtcclxuXHRcdFx0Y2VsbD8uY29sU3BhbiB8fCBPYmplY3QuYXNzaWduKGNlbGwsIHsgY29sU3BhbjogMSB9KTtcclxuXHRcdFx0Y2VsbC5jb2xTcGFuID0gY29sdW1uSW5kZXggLSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgnY29sLWluZGV4JykgfHwgY29sdW1uSW5kZXgudG9TdHJpbmcoKSkgKyAxO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoY2VsbENvbnRlbnQgPT0gTUVSR0VfVVBfU0lHTklGSUVSICYmIHRoaXMuZG9tR3JpZD8uW3Jvd0luZGV4IC0gMV0/Lltjb2x1bW5JbmRleF0pIHtcclxuXHRcdFx0Y2VsbCA9IHRoaXMuZG9tR3JpZFtyb3dJbmRleCAtIDFdW2NvbHVtbkluZGV4XTtcclxuXHRcdFx0Y2VsbD8ucm93U3BhbiB8fCBPYmplY3QuYXNzaWduKGNlbGwsIHsgcm93U3BhbjogMSB9KTtcclxuXHRcdFx0Y2VsbC5yb3dTcGFuID0gcm93SW5kZXggLSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgncm93LWluZGV4JykgfHwgJzAnKSArIDE7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChcclxuXHRcdFx0dGhpcy5kb21HcmlkPy5bcm93SW5kZXggLSAxXT8uW2NvbHVtbkluZGV4XSAmJiB0aGlzLmRvbUdyaWQ/Lltyb3dJbmRleF0/Lltjb2x1bW5JbmRleCAtIDFdICYmXHJcblx0XHRcdHRoaXMuZG9tR3JpZFtyb3dJbmRleF1bY29sdW1uSW5kZXggLSAxXSA9PT0gdGhpcy5kb21HcmlkW3Jvd0luZGV4IC0gMV1bY29sdW1uSW5kZXhdXHJcblx0XHQpIGNlbGwgPSB0aGlzLmRvbUdyaWRbcm93SW5kZXhdW2NvbHVtbkluZGV4IC0gMV07XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0Ly8gY29uc3QgY29udGVudENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHRcdFx0Ly8gY29udGVudENlbGwuY2xhc3NMaXN0LmFkZCgndGFibGUtY2VsbC13cmFwcGVyJyk7XHJcblxyXG5cdFx0XHRjZWxsID0gcm93Tm9kZS5jcmVhdGVFbChjZWxsVGFnLCB7IGNscyB9KTtcclxuXHRcdFx0Y2VsbC5zZXRBdHRyaWJ1dGUoJ3Jvdy1pbmRleCcsIHJvd0luZGV4LnRvU3RyaW5nKCkpO1xyXG5cdFx0XHRjZWxsLnNldEF0dHJpYnV0ZSgnY29sLWluZGV4JywgY29sdW1uSW5kZXgudG9TdHJpbmcoKSk7XHJcblxyXG5cdFx0XHRNYXJrZG93blJlbmRlcmVyLnJlbmRlcihcclxuXHRcdFx0XHR0aGlzLmFwcCxcclxuXHRcdFx0XHQnXFx1MjAwQiAnICsgKGNlbGxDb250ZW50IHx8ICdcXHUyMDBCJyksIC8vIE1ha2Ugc3VyZSBtYXJrZG93biB0aGF0IHJlcXVpcmVzIHRvIGJlIGF0IHRoZSBzdGFydCBvZiBhIGxpbmUgaXMgbm90IHJlbmRlcmVkXHJcblx0XHRcdFx0Y2VsbCxcclxuXHRcdFx0XHQnJyxcclxuXHRcdFx0XHR0aGlzXHJcblx0XHRcdCkudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0Y2VsbC5pbm5lckhUTUwgPVxyXG5cdFx0XHRcdFx0Y2VsbFxyXG5cdFx0XHRcdFx0XHQuY2hpbGRyZW5bMF1cclxuXHRcdFx0XHRcdFx0LmlubmVySFRNTFxyXG5cdFx0XHRcdFx0XHQucmVwbGFjZSgvXlxcdTIwMEIgL2csICcnKTtcclxuXHRcdFx0XHQvLyBjZWxsLmFwcGVuZChjb250ZW50Q2VsbCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRPYmplY3QuYXNzaWduKGNlbGwuc3R5bGUsIGNlbGxTdHlsZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZG9tR3JpZFtyb3dJbmRleF1bY29sdW1uSW5kZXhdID0gY2VsbDtcclxuXHR9XHJcbn1cclxuIiwgIi8vIEB0cy1ub2NoZWNrXHJcbi8vIFx1NEUwQVx1OTc2Mlx1NzY4NFx1NjMwN1x1NEVFNFx1NEYxQVx1Nzk4MVx1NzUyOFx1NjU3NFx1NEUyQVx1NjU4N1x1NEVGNlx1NzY4NFx1N0M3Qlx1NTc4Qlx1NjhDMFx1NjdFNVxyXG5cclxuaW1wb3J0IHsgT2JzaWRpYW5TcHJlYWRzaGVldCB9IGZyb20gJy4vbWFpbic7XHJcbmltcG9ydCB7IEFwcCwgTm90aWNlLCBNb2RhbCwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbi8qKlxyXG4gKiBcdTc4NkVcdThCQTRcdTVCRjlcdThCRERcdTY4NDZcdTdDN0IgLSBcdTc1MjhcdTRFOEVcdTY2M0VcdTc5M0FcdTc4NkVcdThCQTRcdTZEODhcdTYwNkZcclxuICovXHJcbmNsYXNzIENvbmZpcm1Nb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgIHByaXZhdGUgcmVzdWx0OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIG9uQ2xvc2U6IChyZXN1bHQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIG1lc3NhZ2U6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWVzc2FnZTogc3RyaW5nLCBvbkNsb3NlOiAocmVzdWx0OiBib29sZWFuKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIHRoaXMub25DbG9zZSA9IG9uQ2xvc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdcdTc4NkVcdThCQTRcdTY0Q0RcdTRGNUMnIH0pO1xyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogdGhpcy5tZXNzYWdlIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICdtb2RhbC1idXR0b24tY29udGFpbmVyJyB9KTtcclxuICAgICAgICBcclxuICAgICAgICBidXR0b25Db250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1x1NTNENlx1NkQ4OCcgfSlcclxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnXHU3ODZFXHU4QkE0JywgY2xzOiAnbW9kLWN0YScgfSlcclxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsb3NlKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMub25DbG9zZSh0aGlzLnJlc3VsdCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXJrZG93blx1ODg2OFx1NjgzQ1x1NjhDMFx1NkQ0Qlx1NTY2OCAtIFx1OEQxRlx1OEQyM1x1NjhDMFx1NkQ0Qlx1MzAwMVx1NTIwNlx1Njc5MFx1NTQ4Q1x1NTkwNFx1NzQwNk1hcmtkb3duXHU4ODY4XHU2ODNDXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWFya2Rvd25UYWJsZURldGVjdG9yIHtcclxuICAgIHByaXZhdGUgcGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0O1xyXG4gICAgXHJcbiAgICAvLyBcdThGODVcdTUyQTlcdTY1QjlcdTZDRDVcdUZGMENcdTgzQjdcdTUzRDZhcHBcdTVCRjlcdThDNjFcclxuICAgIHByaXZhdGUgZ2V0QXBwKCk6IEFwcCB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnBsdWdpbiBhcyB1bmtub3duIGFzIFBsdWdpbikuYXBwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IE9ic2lkaWFuU3ByZWFkc2hlZXQpIHtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICBjb25zb2xlLmxvZygnTWFya2Rvd25UYWJsZURldGVjdG9yIGluaXRpYWxpemVkJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU2NjNFXHU3OTNBXHU3ODZFXHU4QkE0XHU1QkY5XHU4QkREXHU2ODQ2XHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBcdTc4NkVcdThCQTRcdTZEODhcdTYwNkZcclxuICAgICAqIEByZXR1cm5zIFx1NzUyOFx1NjIzN1x1NjYyRlx1NTQyNlx1Nzg2RVx1OEJBNFxyXG4gICAgICovXHJcbiAgICBhc3luYyBzaG93Q29uZmlybURpYWxvZyhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgQ29uZmlybU1vZGFsKHRoaXMuZ2V0QXBwKCksIG1lc3NhZ2UsIChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NEUzQUhUTUxcdTY4M0NcdTVGMEZcdTc2ODRcdTg4NjhcdTY4M0NcdUZGMDhcdTgwMENcdTk3NUVNYXJrZG93blx1NzUxRlx1NjIxMFx1NzY4NFx1ODg2OFx1NjgzQ1x1RkYwOVxyXG4gICAgICogQHBhcmFtIHRhYmxlIFx1ODg2OFx1NjgzQ0hUTUxcdTUxNDNcdTdEMjBcclxuICAgICAqIEByZXR1cm5zIFx1NjYyRlx1NTQyNlx1NEUzQUhUTUxcdTY4M0NcdTVGMEZcdTc2ODRcdTg4NjhcdTY4M0NcclxuICAgICAqL1xyXG4gICAgaXNIdG1sRm9ybWF0dGVkVGFibGUodGFibGU6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU3QjU2XHU3NTY1MTogXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU2NzA5XHU3Mjc5XHU1QjlBSFRNTFx1ODg2OFx1NjgzQ1x1NUM1RVx1NjAyN1xyXG4gICAgICAgICAgICBpZiAodGFibGUuaGFzQXR0cmlidXRlKCdib3JkZXInKSB8fCBcclxuICAgICAgICAgICAgICAgIHRhYmxlLmhhc0F0dHJpYnV0ZSgnY2VsbHBhZGRpbmcnKSB8fCBcclxuICAgICAgICAgICAgICAgIHRhYmxlLmhhc0F0dHJpYnV0ZSgnY2VsbHNwYWNpbmcnKSB8fFxyXG4gICAgICAgICAgICAgICAgdGFibGUuaGFzQXR0cmlidXRlKCd3aWR0aCcpIHx8XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5oYXNBdHRyaWJ1dGUoJ2hlaWdodCcpIHx8XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5oYXNBdHRyaWJ1dGUoJ2JnY29sb3InKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1N0I1Nlx1NzU2NTI6IFx1NjhDMFx1NjdFNVx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRlx1NjYyRlx1NTQyNlx1NTMwNVx1NTQyQkhUTUxcdTcyNzlcdTVCOUFcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSB0YWJsZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgICAgIGlmIChzdHlsZSAmJiAoXHJcbiAgICAgICAgICAgICAgICBzdHlsZS5pbmNsdWRlcygnYm9yZGVyLWNvbGxhcHNlJykgfHxcclxuICAgICAgICAgICAgICAgIHN0eWxlLmluY2x1ZGVzKCd0ZXh0LWFsaWduJykgfHxcclxuICAgICAgICAgICAgICAgIHN0eWxlLmluY2x1ZGVzKCdmb250LWZhbWlseScpIHx8XHJcbiAgICAgICAgICAgICAgICBzdHlsZS5pbmNsdWRlcygnYmFja2dyb3VuZC1jb2xvcicpXHJcbiAgICAgICAgICAgICkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTdCNTZcdTc1NjUzOiBcdTY4QzBcdTY3RTVcdTg4NjhcdTY4M0NcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTUzMDVcdTU0MkJcdTU5MERcdTY3NDJIVE1MXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJyk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2VsbCBvZiBBcnJheS5mcm9tKGNlbGxzKS5zbGljZSgwLCAxMCkpIHsgLy8gXHU1M0VBXHU2OEMwXHU2N0U1XHU1MjREMTBcdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgIGNvbnN0IGh0bWwgPSAoY2VsbCBhcyBIVE1MRWxlbWVudCkuaW5uZXJIVE1MIHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU1MzU1XHU1MTQzXHU2ODNDXHU1MzA1XHU1NDJCSFRNTFx1NjgwN1x1N0I3RVx1RkYwOFx1NEY0Nlx1NjM5Mlx1OTY2NE9ic2lkaWFuXHU2M0QyXHU1MTY1XHU3Njg0XHU3QjgwXHU1MzU1XHU2ODNDXHU1RjBGXHU2ODA3XHU3QjdFXHVGRjA5XHJcbiAgICAgICAgICAgICAgICBpZiAoaHRtbC5pbmNsdWRlcygnPCcpICYmIGh0bWwuaW5jbHVkZXMoJz4nKSAmJiBcclxuICAgICAgICAgICAgICAgICAgICAhaHRtbC5tYXRjaCgvXjwoZW18c3Ryb25nfHN8Y29kZXxhfHNwYW4pW14+XSo+Lio8XFwvKGVtfHN0cm9uZ3xzfGNvZGV8YXxzcGFuKT4kLykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU3QjU2XHU3NTY1NDogXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU3RUQzXHU2Nzg0XHU2NjJGXHU1NDI2XHU3QjI2XHU1NDA4TWFya2Rvd25cdTg4NjhcdTY4M0NcdTc1MUZcdTYyMTBcdTg5QzRcdTUyMTlcclxuICAgICAgICAgICAgY29uc3Qgcm93cyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XHJcbiAgICAgICAgICAgIGlmIChyb3dzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIE1hcmtkb3duXHU4ODY4XHU2ODNDXHU3Njg0XHU3QjJDXHU0RThDXHU4ODRDXHU5MDFBXHU1RTM4XHU2NjJGXHU1MjA2XHU5Njk0XHU4ODRDXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWNvbmRSb3cgPSByb3dzWzFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VwYXJhdG9yQ2VsbHMgPSBzZWNvbmRSb3cucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NTIwNlx1OTY5NFx1ODg0Q1x1NzY4NFx1NjI0MFx1NjcwOVx1NTM1NVx1NTE0M1x1NjgzQ1x1NTE4NVx1NUJCOVx1OTAxQVx1NUUzOFx1NTNFQVx1NTMwNVx1NTQyQiAtLS0tIFx1NjIxNiA6LS0tLTogXHU3QjQ5XHU1RjYyXHU1RjBGXHJcbiAgICAgICAgICAgICAgICBsZXQgaXNTZXBhcmF0b3JSb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjZWxsIG9mIEFycmF5LmZyb20oc2VwYXJhdG9yQ2VsbHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGNlbGwudGV4dENvbnRlbnQgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU0RTBEXHU2NjJGXHU1MjA2XHU5Njk0XHU3QjI2XHU2ODNDXHU1RjBGXHVGRjBDXHU1M0VGXHU4MEZEXHU0RTBEXHU2NjJGTWFya2Rvd25cdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHQubWF0Y2goL146Py0rOj8kLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTZXBhcmF0b3JSb3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTRFMERcdTdCMjZcdTU0MDhNYXJrZG93blx1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MVx1RkYwQ1x1NTNFRlx1ODBGRFx1NjYyRkhUTUxcdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgICAgIGlmICghaXNTZXBhcmF0b3JSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU5RUQ4XHU4QkE0XHU0RTBEXHU2NjJGSFRNTFx1NjgzQ1x1NUYwRlx1NzY4NFx1ODg2OFx1NjgzQ1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU2OEMwXHU2RDRCSFRNTFx1ODg2OFx1NjgzQ1x1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gXHU5NTE5XHU4QkVGXHU2NUY2XHU5RUQ4XHU4QkE0XHU0RTNBXHU1NDI2XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4QkJFXHU3RjZFXHU4ODY4XHU2ODNDXHU4ODRDXHU1MjE3XHU3RDIyXHU1RjE1XHJcbiAgICAgKiBAcGFyYW0gdGFibGUgXHU4ODY4XHU2ODNDSFRNTFx1NTE0M1x1N0QyMFxyXG4gICAgICovXHJcbiAgICBzZXR1cFRhYmxlSW5kaWNlcyh0YWJsZTogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IHJvd0luZGV4ID0gMDsgcm93SW5kZXggPCByb3dzLmxlbmd0aDsgcm93SW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gcm93c1tyb3dJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxscyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IGNlbGxzLmxlbmd0aDsgY29sSW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBjZWxsc1tjb2xJbmRleF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU2NTcwXHU2MzZFXHU1QzVFXHU2MDI3XHU1QjU4XHU1MEE4XHU4ODRDXHU1MjE3XHU3RDIyXHU1RjE1XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5kYXRhc2V0LnJvd0luZGV4ID0gcm93SW5kZXgudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLmRhdGFzZXQuY29sSW5kZXggPSBjb2xJbmRleC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1OEJCRVx1N0Y2RXJvdy1pbmRleFx1NTQ4Q2NvbC1pbmRleFx1NUM1RVx1NjAyN1x1RkYwQ1x1Nzg2RVx1NEZERFx1NEUwRW1haW4udHNcdTRFMkRcdTRGN0ZcdTc1MjhcdTc2ODRcdTVDNUVcdTYwMjdcdTRFMDBcdTgxRjRcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgncm93LWluZGV4Jywgcm93SW5kZXgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbC1pbmRleCcsIGNvbEluZGV4LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NEUzQVx1NTM1NVx1NTE0M1x1NjgzQ1x1NkRGQlx1NTJBMFx1N0M3Qlx1NEVFNVx1NEZCRlx1NjgzN1x1NUYwRlx1OEMwM1x1NjU3NFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnYWR2YW5jZWQtdGFibGUtY2VsbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjYyRlx1ODg2OFx1NTkzNFx1NTM1NVx1NTE0M1x1NjgzQ1x1RkYwQ1x1NkRGQlx1NTJBMFx1NzI3OVx1NkI4QVx1N0M3QlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RoJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2FkdmFuY2VkLXRhYmxlLWhlYWRlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTRFM0FcdTdBN0FcdTUzNTVcdTUxNDNcdTY4M0NcdTZERkJcdTUyQTBcdTUzNjBcdTRGNERcdTdCMjZcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNlbGwuaW5uZXJIVE1MLnRyaW0oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9ICcmbmJzcDsnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OEJCRVx1N0Y2RVx1ODg2OFx1NjgzQ1x1N0QyMlx1NUYxNVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2OEMwXHU2N0U1XHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5XHU2NjJGXHU1NDI2XHU0RTNBXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgKiBAcGFyYW0gY2VsbCBcdTUzNTVcdTUxNDNcdTY4M0NcdTUxNDNcdTdEMjBcclxuICAgICAqIEBwYXJhbSBtYXJrZXIgXHU2ODA3XHU4QkIwXHU3QjI2XHU1M0Y3XHU3QzdCXHU1NzhCICgnXicgXHU2MjE2ICc8JylcclxuICAgICAqIEByZXR1cm5zIFx1NjYyRlx1NTQyNlx1NEUzQVx1NjMwN1x1NUI5QVx1N0M3Qlx1NTc4Qlx1NzY4NFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICovXHJcbiAgICBpc01lcmdlTWFya2VyKGNlbGw6IEhUTUxFbGVtZW50LCBtYXJrZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBjZWxsLnRleHRDb250ZW50Py50cmltKCkgfHwgJyc7XHJcbiAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU2QjYzXHU1MjE5XHU4ODY4XHU4RkJFXHU1RjBGXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU2NjJGXHU2MzA3XHU1QjlBXHU3QzdCXHU1NzhCXHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHVGRjA4XHU2NTJGXHU2MzAxXHU1OTFBXHU0RTJBXHU4RkRFXHU3RUVEXHU2ODA3XHU4QkIwXHVGRjA5XHJcbiAgICAgICAgaWYgKG1hcmtlciA9PT0gJ14nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAvXihcXF4rfFxcXFxcXF58XFxzKlxcXitcXHMqKSQvLnRlc3QoY29udGVudCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtYXJrZXIgPT09ICc8Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gL14oPCt8XFxcXDx8XFxzKjwrXFxzKikkLy50ZXN0KGNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTY4QzBcdTY3RTVcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTk3NUVcdTdBN0FcdTRFMTRcdTY3MDlcdTY3MDlcdTY1NDhcdTUxODVcdTVCQjlcclxuICAgICAqIEBwYXJhbSBjZWxsIFx1NTM1NVx1NTE0M1x1NjgzQ1x1NTE0M1x1N0QyMFxyXG4gICAgICogQHJldHVybnMgXHU2NjJGXHU1NDI2XHU2NzA5XHU2NzA5XHU2NTQ4XHU1MTg1XHU1QkI5XHJcbiAgICAgKi9cclxuICAgIGhhc01lYW5pbmdmdWxDb250ZW50KGNlbGw6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGNlbGwudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnJztcclxuICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTRFM0FcdTdBN0FcdTYyMTZcdTUzRUFcdTY3MDlcdTdBN0FcdTY4M0NcdTMwMDFcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICByZXR1cm4gY29udGVudCAhPT0gJycgJiYgXHJcbiAgICAgICAgICAgICAgIGNvbnRlbnQgIT09ICcmbmJzcDsnICYmIFxyXG4gICAgICAgICAgICAgICAhL14oXFxeK3xcXFxcXFxefFxccypcXF4rXFxzKikkLy50ZXN0KGNvbnRlbnQpICYmIFxyXG4gICAgICAgICAgICAgICAhL14oPCt8XFxcXDx8XFxzKjwrXFxzKikkLy50ZXN0KGNvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4OUUzXHU2NzkwXHU4ODY4XHU2ODNDXHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgKiBAcGFyYW0gdGFibGUgXHU4ODY4XHU2ODNDSFRNTFx1NTE0M1x1N0QyMFxyXG4gICAgICovXHJcbiAgICBhc3luYyBwYXJzZU1lcmdlQ2VsbE1hcmtlcnModGFibGU6IEhUTUxFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVDZWxsTWVyZ2luZykgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU5OTk2XHU1MTQ4XHU2N0U1XHU2MjdFXHU2MjQwXHU2NzA5XHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlVXA6IHtjZWxsOiBIVE1MRWxlbWVudCwgY291bnQ6IG51bWJlcn1bXSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBtZXJnZUxlZnQ6IHtjZWxsOiBIVE1MRWxlbWVudCwgY291bnQ6IG51bWJlcn1bXSA9IFtdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgcm93SW5kZXggPSAwOyByb3dJbmRleCA8IHJvd3MubGVuZ3RoOyByb3dJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSByb3dzW3Jvd0luZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjb2xJbmRleCA9IDA7IGNvbEluZGV4IDwgY2VsbHMubGVuZ3RoOyBjb2xJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGNlbGxzW2NvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gY2VsbC50ZXh0Q29udGVudD8udHJpbSgpIHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NTQxMVx1NEUwQVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwTWF0Y2ggPSBjb250ZW50Lm1hdGNoKC9eKFxcXispJC8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cE1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENl5cdTc2ODRcdTY1NzBcdTkxQ0ZcdUZGMENcdTg4NjhcdTc5M0FcdTU0MDhcdTVFNzZcdTc2ODRcdTg4NENcdTY1NzBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB1cE1hdGNoWzFdLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTNEMVx1NzNCMFx1NTQxMVx1NEUwQVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMDogXHU4ODRDPSR7cm93SW5kZXh9LCBcdTUyMTc9JHtjb2xJbmRleH0sIFx1NjgwN1x1OEJCMFx1NjU3MFx1OTFDRj0ke2NvdW50fSwgXHU1MTg1XHU1QkI5PVwiJHtjb250ZW50fVwiYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlVXAucHVzaCh7Y2VsbCwgY291bnR9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NTQxMVx1NURFNlx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRNYXRjaCA9IGNvbnRlbnQubWF0Y2goL14oPCspJC8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0TWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2PFx1NzY4NFx1NjU3MFx1OTFDRlx1RkYwQ1x1ODg2OFx1NzkzQVx1NTQwOFx1NUU3Nlx1NzY4NFx1NTIxN1x1NjU3MFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IGxlZnRNYXRjaFsxXS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTUzRDFcdTczQjBcdTU0MTFcdTVERTZcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjA6IFx1ODg0Qz0ke3Jvd0luZGV4fSwgXHU1MjE3PSR7Y29sSW5kZXh9LCBcdTY4MDdcdThCQjBcdTY1NzBcdTkxQ0Y9JHtjb3VudH0sIFx1NTE4NVx1NUJCOT1cIiR7Y29udGVudH1cImApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUxlZnQucHVzaCh7Y2VsbCwgY291bnR9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1OEY2Q1x1NEU0OVx1NzY4NFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50ID09PSAnXFxcXF4nIHx8IGNvbnRlbnQgPT09ICcgXiAnIHx8IGNvbnRlbnQgPT09ICcgXFxcXF4gJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1M0QxXHU3M0IwXHU4RjZDXHU0RTQ5XHU1NDExXHU0RTBBXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwOiBcdTg4NEM9JHtyb3dJbmRleH0sIFx1NTIxNz0ke2NvbEluZGV4fSwgXHU1MTg1XHU1QkI5PVwiJHtjb250ZW50fVwiYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlVXAucHVzaCh7Y2VsbCwgY291bnQ6IDF9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRlbnQgPT09ICdcXFxcPCcgfHwgY29udGVudCA9PT0gJyA8ICcgfHwgY29udGVudCA9PT0gJyBcXFxcPCAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTUzRDFcdTczQjBcdThGNkNcdTRFNDlcdTU0MTFcdTVERTZcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjA6IFx1ODg0Qz0ke3Jvd0luZGV4fSwgXHU1MjE3PSR7Y29sSW5kZXh9LCBcdTUxODVcdTVCQjk9XCIke2NvbnRlbnR9XCJgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VMZWZ0LnB1c2goe2NlbGwsIGNvdW50OiAxfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU5MDRcdTc0MDZcdTU0MTFcdTRFMEFcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgZm9yIChjb25zdCB7Y2VsbCwgY291bnR9IG9mIG1lcmdlVXApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvdy1pbmRleCcpIHx8IGNlbGwuZGF0YXNldC5yb3dJbmRleCB8fCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29sSW5kZXggPSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgnY29sLWluZGV4JykgfHwgY2VsbC5kYXRhc2V0LmNvbEluZGV4IHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTU5MDRcdTc0MDZcdTU0MTFcdTRFMEFcdTU0MDhcdTVFNzY6IFx1ODg0Qz0ke3Jvd0luZGV4fSwgXHU1MjE3PSR7Y29sSW5kZXh9LCBcdTU0MDhcdTVFNzZcdTY1NzBcdTkxQ0Y9JHtjb3VudH1gKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU1NDExXHU0RTBBXHU1NDA4XHU1RTc2XHU5NzAwXHU4OTgxXHU2MjdFXHU1MjMwXHU3NkVFXHU2ODA3XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICBpZiAocm93SW5kZXggPj0gY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRSb3dJbmRleCA9IHJvd0luZGV4IC0gY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Um93ID0gcm93c1t0YXJnZXRSb3dJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRDZWxscyA9IHRhcmdldFJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbEluZGV4IDwgdGFyZ2V0Q2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRDZWxsID0gdGFyZ2V0Q2VsbHNbY29sSW5kZXhdIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTY3MDlcdTVCOUVcdTk2NDVcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc01lYW5pbmdmdWxDb250ZW50KHRhcmdldENlbGwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2NTM2XHU5NkM2XHU2MjQwXHU2NzA5XHU5NzAwXHU4OTgxXHU1NDA4XHU1RTc2XHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHNUb01lcmdlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1RjUzXHU1MjREXHU1MzU1XHU1MTQzXHU2ODNDXHU2NjJGXHU1NDI2XHU2NzA5XHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzTWVhbmluZ2Z1bENvbnRlbnQoY2VsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHNUb01lcmdlLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXg6IHJvd0luZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sSW5kZXg6IGNvbEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY2VsbC50ZXh0Q29udGVudD8udHJpbSgpIHx8ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTRFMkRcdTk1RjRcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTY3MDlcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWlkUm93SW5kZXggPSByb3dJbmRleCAtIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaWRSb3dJbmRleCA+IHRhcmdldFJvd0luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWRSb3cgPSByb3dzW21pZFJvd0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pZENlbGxzID0gbWlkUm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbEluZGV4IDwgbWlkQ2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWlkQ2VsbCA9IG1pZENlbGxzW2NvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNNZWFuaW5nZnVsQ29udGVudChtaWRDZWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsc1RvTWVyZ2UucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleDogbWlkUm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xJbmRleDogY29sSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBtaWRDZWxsLnRleHRDb250ZW50Py50cmltKCkgfHwgJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1Nzg2RVx1OEJBNFx1NjYyRlx1NTQyNlx1ODk4Nlx1NzZENlx1OTc1RVx1N0E3QVx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25maXJtTWVyZ2VOb25FbXB0eSAmJiBjZWxsc1RvTWVyZ2UubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTc4NkVcdThCQTRcdTZEODhcdTYwNkZcdUZGMENcdTUzMDVcdTU0MkJcdTYyNDBcdTY3MDlcdTk3MDBcdTg5ODFcdTg5ODZcdTc2RDZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbENvbnRlbnRzID0gY2VsbHNUb01lcmdlLm1hcChjID0+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFske2Mucm93SW5kZXgrMX0sJHtjLmNvbEluZGV4KzF9XTogXCIke2MuY29udGVudH1cImBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5qb2luKCdcXG4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1NZXJnZSA9IGF3YWl0IHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXHU0RUU1XHU0RTBCXHU1MzU1XHU1MTQzXHU2ODNDXHU1MzA1XHU1NDJCXHU1MTg1XHU1QkI5XHU1QzA2XHU4OEFCXHU4OTg2XHU3NkQ2OlxcbiR7Y2VsbENvbnRlbnRzfVxcblxcblx1Nzg2RVx1NUI5QVx1ODk4MVx1NTQwOFx1NUU3Nlx1OEZEOVx1NEU5Qlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTQxN1x1RkYxRmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29uZmlybU1lcmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU3NTI4XHU2MjM3XHU1M0Q2XHU2RDg4XHU0RTg2XHU1MzU1XHU1MTQzXHU2ODNDXHU1NDA4XHU1RTc2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcdTVGNTNcdTUyNERcdTc2ODRyb3dzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvd1NwYW4gPSBwYXJzZUludCh0YXJnZXRDZWxsLmdldEF0dHJpYnV0ZSgncm93c3BhbicpIHx8ICcxJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU2NUIwXHU3Njg0cm93c3Bhblx1RkYxQVx1NUY1M1x1NTI0RHJvd3NwYW4gKyBjb3VudFx1RkYwOFx1NTQwOFx1NUU3Nlx1NzY4NFx1ODg0Q1x1NjU3MFx1RkYwOVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NwYW4gPSByb3dTcGFuICsgY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEJCRVx1N0Y2RXJvd3NwYW46IFx1NzZFRVx1NjgwN1x1NTM1NVx1NTE0M1x1NjgzQygke3RhcmdldFJvd0luZGV4fSwke2NvbEluZGV4fSksIHJvd3NwYW49JHtyb3dTcGFufWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1OEJCRVx1N0Y2RVx1NjVCMFx1NzY4NHJvd3NwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDZWxsLnNldEF0dHJpYnV0ZSgncm93c3BhbicsIHJvd1NwYW4udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2VsbC5yb3dTcGFuID0gcm93U3BhbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTU0MDhcdTVFNzZcdTY4MzdcdTVGMEZcdTdDN0JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDZWxsLmNsYXNzTGlzdC5hZGQoJ29icy1tZXJnZWQtY2VsbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1OTY5MFx1ODVDRlx1NUY1M1x1NTI0RFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdcdTU0MTFcdTRFMEFcdTU0MDhcdTVFNzZcdTU5MzFcdThEMjU6IFx1NzZFRVx1NjgwN1x1NTM1NVx1NTE0M1x1NjgzQ1x1NkNBMVx1NjcwOVx1NjcwOVx1NjU0OFx1NTE4NVx1NUJCOScsIHRhcmdldENlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU5MDRcdTc0MDZcdTU0MTFcdTVERTZcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgZm9yIChjb25zdCB7Y2VsbCwgY291bnR9IG9mIG1lcmdlTGVmdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgncm93LWluZGV4JykgfHwgY2VsbC5kYXRhc2V0LnJvd0luZGV4IHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xJbmRleCA9IHBhcnNlSW50KGNlbGwuZ2V0QXR0cmlidXRlKCdjb2wtaW5kZXgnKSB8fCBjZWxsLmRhdGFzZXQuY29sSW5kZXggfHwgJzAnKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTkwNFx1NzQwNlx1NTQxMVx1NURFNlx1NTQwOFx1NUU3NjogXHU4ODRDPSR7cm93SW5kZXh9LCBcdTUyMTc9JHtjb2xJbmRleH0sIFx1NTQwOFx1NUU3Nlx1NjU3MFx1OTFDRj0ke2NvdW50fWApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTU0MTFcdTVERTZcdTU0MDhcdTVFNzZcdTk3MDBcdTg5ODFcdTYyN0VcdTUyMzBcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgIGlmIChjb2xJbmRleCA+PSBjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldENvbEluZGV4ID0gY29sSW5kZXggLSBjb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRDZWxsID0gcm93c1tyb3dJbmRleF0/LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpW3RhcmdldENvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTY3MDlcdTVCOUVcdTk2NDVcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzTWVhbmluZ2Z1bENvbnRlbnQodGFyZ2V0Q2VsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NjUzNlx1OTZDNlx1NjI0MFx1NjcwOVx1OTcwMFx1ODk4MVx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1NTE4NVx1NUJCOVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHNUb01lcmdlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NUY1M1x1NTI0RFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjYyRlx1NTQyNlx1NjcwOVx1NTE4NVx1NUJCOVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzTWVhbmluZ2Z1bENvbnRlbnQoY2VsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsc1RvTWVyZ2UucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sSW5kZXg6IGNvbEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjZWxsLnRleHRDb250ZW50Py50cmltKCkgfHwgJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU0RTJEXHU5NUY0XHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU2NjJGXHU1NDI2XHU2NzA5XHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWRDb2xJbmRleCA9IGNvbEluZGV4IC0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWlkQ29sSW5kZXggPiB0YXJnZXRDb2xJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWRDZWxsID0gcm93c1tyb3dJbmRleF0/LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpW21pZENvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pZENlbGwgJiYgdGhpcy5oYXNNZWFuaW5nZnVsQ29udGVudChtaWRDZWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHNUb01lcmdlLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xJbmRleDogbWlkQ29sSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogbWlkQ2VsbC50ZXh0Q29udGVudD8udHJpbSgpIHx8ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU3ODZFXHU4QkE0XHU2NjJGXHU1NDI2XHU4OTg2XHU3NkQ2XHU5NzVFXHU3QTdBXHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29uZmlybU1lcmdlTm9uRW1wdHkgJiYgY2VsbHNUb01lcmdlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTc4NkVcdThCQTRcdTZEODhcdTYwNkZcdUZGMENcdTUzMDVcdTU0MkJcdTYyNDBcdTY3MDlcdTk3MDBcdTg5ODFcdTg5ODZcdTc2RDZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsQ29udGVudHMgPSBjZWxsc1RvTWVyZ2UubWFwKGMgPT4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBbJHtjLnJvd0luZGV4KzF9LCR7Yy5jb2xJbmRleCsxfV06IFwiJHtjLmNvbnRlbnR9XCJgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5qb2luKCdcXG4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maXJtTWVyZ2UgPSBhd2FpdCB0aGlzLnNob3dDb25maXJtRGlhbG9nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXHU0RUU1XHU0RTBCXHU1MzU1XHU1MTQzXHU2ODNDXHU1MzA1XHU1NDJCXHU1MTg1XHU1QkI5XHU1QzA2XHU4OEFCXHU4OTg2XHU3NkQ2OlxcbiR7Y2VsbENvbnRlbnRzfVxcblxcblx1Nzg2RVx1NUI5QVx1ODk4MVx1NTQwOFx1NUU3Nlx1OEZEOVx1NEU5Qlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTQxN1x1RkYxRmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29uZmlybU1lcmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTc1MjhcdTYyMzdcdTUzRDZcdTZEODhcdTRFODZcdTUzNTVcdTUxNDNcdTY4M0NcdTU0MDhcdTVFNzYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcdTVGNTNcdTUyNERcdTc2ODRjb2xzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29sU3BhbiA9IHBhcnNlSW50KHRhcmdldENlbGwuZ2V0QXR0cmlidXRlKCdjb2xzcGFuJykgfHwgJzEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU2NUIwXHU3Njg0Y29sc3Bhblx1RkYxQVx1NUY1M1x1NTI0RGNvbHNwYW4gKyBjb3VudFx1RkYwOFx1NTQwOFx1NUU3Nlx1NzY4NFx1NTIxN1x1NjU3MFx1RkYwOVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sU3BhbiA9IGNvbFNwYW4gKyBjb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdThCQkVcdTdGNkVjb2xzcGFuOiBcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0MoJHtyb3dJbmRleH0sJHt0YXJnZXRDb2xJbmRleH0pLCBjb2xzcGFuPSR7Y29sU3Bhbn1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU2NUIwXHU3Njg0Y29sc3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCBjb2xTcGFuLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2VsbC5jb2xTcGFuID0gY29sU3BhbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU1NDA4XHU1RTc2XHU2ODM3XHU1RjBGXHU3QzdCXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDZWxsLmNsYXNzTGlzdC5hZGQoJ29icy1tZXJnZWQtY2VsbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTk2OTBcdTg1Q0ZcdTVGNTNcdTUyNERcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignXHU1NDExXHU1REU2XHU1NDA4XHU1RTc2XHU1OTMxXHU4RDI1OiBcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcdTZDQTFcdTY3MDlcdTY3MDlcdTY1NDhcdTUxODVcdTVCQjknLCB0YXJnZXRDZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU1NDJGXHU3NTI4XHU0RTg2XHU4MUVBXHU1MkE4XHU1QzQ1XHU0RTJEXHVGRjBDXHU1QkY5XHU1NDA4XHU1RTc2XHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU1RTk0XHU3NTI4XHU1QzQ1XHU0RTJEXHU2ODM3XHU1RjBGXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvQ2VudGVyTWVyZ2VkQ2VsbHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZENlbGxzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgnW3Jvd3NwYW5dLCBbY29sc3Bhbl0nKTtcclxuICAgICAgICAgICAgICAgIG1lcmdlZENlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHRtbENlbGwgPSBjZWxsIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChodG1sQ2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvd3NwYW4nKSB8fCAnMScpID4gMSB8fCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoaHRtbENlbGwuZ2V0QXR0cmlidXRlKCdjb2xzcGFuJykgfHwgJzEnKSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENlbGwuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxDZWxsLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAnbWlkZGxlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENlbGwuY2xhc3NMaXN0LmFkZCgnb2JzLW1lcmdlZC1jZWxsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTg5RTNcdTY3OTBcdTUzNTVcdTUxNDNcdTY4M0NcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NUU5NFx1NzUyOFx1ODg2OFx1NjgzQ1x1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFx1NTIzME1hcmtkb3duXHJcbiAgICAgKiBAcGFyYW0gdGFibGUgXHU4ODY4XHU2ODNDSFRNTFx1NTE0M1x1N0QyMFxyXG4gICAgICovXHJcbiAgICBhcHBseU1lcmdlQ2VsbHNNYXJrZXJzKHRhYmxlOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1ODg2OFx1NjgzQ1x1NjYyRlx1NTQyNlx1NURGMlx1N0VDRlx1NTkwNFx1NzQwNlx1OEZDN1xyXG4gICAgICAgICAgICBpZiAodGFibGUuZGF0YXNldC50YWJsZU1lcmdlUHJvY2Vzc2VkID09PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3Qgcm93cyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTZCQ0ZcdTRFMkFcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgZm9yIChsZXQgcm93SW5kZXggPSAwOyByb3dJbmRleCA8IHJvd3MubGVuZ3RoOyByb3dJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSByb3dzW3Jvd0luZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjb2xJbmRleCA9IDA7IGNvbEluZGV4IDwgY2VsbHMubGVuZ3RoOyBjb2xJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGNlbGxzW2NvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsQ29udGVudCA9IGNlbGwudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTY2MkZcdTU0MTFcdTVERTZcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWZ0TWF0Y2ggPSBjZWxsQ29udGVudC5tYXRjaCgvXig8K3xcXFxcPHxcXHMqPCtcXHMqKSQvKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGVmdE1hdGNoICYmIGNvbEluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTc4NkVcdTVCOUFcdTU0MDhcdTVFNzZcdTc2ODRcdTUyMTdcdTY1NzBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lcmdlQ291bnQgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbENvbnRlbnQubWF0Y2goL148KyQvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VDb3VudCA9IGNlbGxDb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1RTk0XHU3NTI4XHU1NDExXHU1REU2XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwOiBcdTg4NEM9JHtyb3dJbmRleH0sIFx1NTIxNz0ke2NvbEluZGV4fSwgXHU2ODA3XHU4QkIwXHU2NTcwXHU5MUNGPSR7bWVyZ2VDb3VudH0sIFx1NTE4NVx1NUJCOT1cIiR7Y2VsbENvbnRlbnR9XCJgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NzZFRVx1NjgwN1x1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1N0QyMlx1NUYxNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRDb2xJbmRleCA9IGNvbEluZGV4IC0gbWVyZ2VDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldENvbEluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRDZWxsID0gY2VsbHNbdGFyZ2V0Q29sSW5kZXhdIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVjb2xzcGFuXHVGRjFBXHU1NDA4XHU1RTc2XHU3Njg0XHU1MjE3XHU2NTcwICsgMVx1RkYwOFx1NzZFRVx1NjgwN1x1NTM1NVx1NTE0M1x1NjgzQ1x1NjcyQ1x1OEVBQlx1RkYwOVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sU3BhbiA9IG1lcmdlQ291bnQgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEJCRVx1N0Y2RWNvbHNwYW46IFx1NzZFRVx1NjgwN1x1NTM1NVx1NTE0M1x1NjgzQygke3Jvd0luZGV4fSwke3RhcmdldENvbEluZGV4fSksIGNvbHNwYW49JHtjb2xTcGFufWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdENlbGwuY29sU3BhbiA9IGNvbFNwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0Q2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCBjb2xTcGFuLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTk2OTBcdTg1Q0ZcdTVGNTNcdTUyNERcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU1NDJGXHU3NTI4XHU0RTg2XHU4MUVBXHU1MkE4XHU1QzQ1XHU0RTJEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvQ2VudGVyTWVyZ2VkQ2VsbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRDZWxsLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdENlbGwuc3R5bGUudmVydGljYWxBbGlnbiA9ICdtaWRkbGUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTU0MDhcdTVFNzZcdTY4MzdcdTVGMEZcdTdDN0JcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdENlbGwuY2xhc3NMaXN0LmFkZCgnb2JzLW1lcmdlZC1jZWxsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU2NjJGXHU1NDExXHU0RTBBXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBNYXRjaCA9IGNlbGxDb250ZW50Lm1hdGNoKC9eKFxcXit8XFxcXFxcXnxcXHMqXFxeK1xccyopJC8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cE1hdGNoICYmIHJvd0luZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTc4NkVcdTVCOUFcdTU0MDhcdTVFNzZcdTc2ODRcdTg4NENcdTY1NzBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lcmdlQ291bnQgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbENvbnRlbnQubWF0Y2goL15cXF4rJC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUNvdW50ID0gY2VsbENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVFOTRcdTc1MjhcdTU0MTFcdTRFMEFcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjA6IFx1ODg0Qz0ke3Jvd0luZGV4fSwgXHU1MjE3PSR7Y29sSW5kZXh9LCBcdTY4MDdcdThCQjBcdTY1NzBcdTkxQ0Y9JHttZXJnZUNvdW50fSwgXHU1MTg1XHU1QkI5PVwiJHtjZWxsQ29udGVudH1cImApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU3NkVFXHU2ODA3XHU1MzU1XHU1MTQzXHU2ODNDXHU3Njg0XHU3RDIyXHU1RjE1XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvd0luZGV4ID0gcm93SW5kZXggLSBtZXJnZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Um93SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJvdmVSb3cgPSByb3dzW3RhcmdldFJvd0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJvdmVDZWxscyA9IGFib3ZlUm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbEluZGV4IDwgYWJvdmVDZWxscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFib3ZlQ2VsbCA9IGFib3ZlQ2VsbHNbY29sSW5kZXhdIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1OEJCRVx1N0Y2RXJvd3NwYW5cdUZGMUFcdTU0MDhcdTVFNzZcdTc2ODRcdTg4NENcdTY1NzAgKyAxXHVGRjA4XHU3NkVFXHU2ODA3XHU1MzU1XHU1MTQzXHU2ODNDXHU2NzJDXHU4RUFCXHVGRjA5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93U3BhbiA9IG1lcmdlQ291bnQgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdThCQkVcdTdGNkVyb3dzcGFuOiBcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0MoJHt0YXJnZXRSb3dJbmRleH0sJHtjb2xJbmRleH0pLCByb3dzcGFuPSR7cm93U3Bhbn1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm92ZUNlbGwucm93U3BhbiA9IHJvd1NwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvdmVDZWxsLnNldEF0dHJpYnV0ZSgncm93c3BhbicsIHJvd1NwYW4udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU5NjkwXHU4NUNGXHU1RjUzXHU1MjREXHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NTQyRlx1NzUyOFx1NEU4Nlx1ODFFQVx1NTJBOFx1NUM0NVx1NEUyRFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9DZW50ZXJNZXJnZWRDZWxscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3ZlQ2VsbC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm92ZUNlbGwuc3R5bGUudmVydGljYWxBbGlnbiA9ICdtaWRkbGUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTU0MDhcdTVFNzZcdTY4MzdcdTVGMEZcdTdDN0JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3ZlQ2VsbC5jbGFzc0xpc3QuYWRkKCdvYnMtbWVyZ2VkLWNlbGwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZyb3dzcGFuXHU1NDhDY29sc3BhblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd1NwYW4gPSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgncm93c3BhbicpIHx8ICcxJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sU3BhbiA9IHBhcnNlSW50KGNlbGwuZ2V0QXR0cmlidXRlKCdjb2xzcGFuJykgfHwgJzEnKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTY3MDlcdTU0MDhcdTVFNzZcdUZGMENcdTRFM0FcdTRFMEJcdTY1QjlcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTZERkJcdTUyQTBcdTU0MTFcdTRFMEFcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjAoXilcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm93U3BhbiA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCByb3dTcGFuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dJbmRleCArIGkgPCByb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvdyA9IHJvd3Nbcm93SW5kZXggKyBpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRDZWxscyA9IHRhcmdldFJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sSW5kZXggPCB0YXJnZXRDZWxscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q2VsbCA9IHRhcmdldENlbGxzW2NvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU5MUNEXHU1OTBEXHU3Njg0Xlx1ODg2OFx1NzkzQVx1NTQwOFx1NUU3Nlx1NzY4NFx1ODg0Q1x1NjU3MFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJUZXh0ID0gJ14nLnJlcGVhdChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NkRGQlx1NTJBMFx1NTQxMVx1NEUwQVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMDogXHU0RjREXHU3RjZFKCR7cm93SW5kZXgraX0sJHtjb2xJbmRleH0pLCBcdTY4MDdcdThCQjA9XCIke21hcmtlclRleHR9XCJgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2VsbC50ZXh0Q29udGVudCA9IG1hcmtlclRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZCgnbWVyZ2UtbWFya2VyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjcwOVx1NTQwOFx1NUU3Nlx1RkYwQ1x1NEUzQVx1NTNGM1x1NEZBN1x1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1NkRGQlx1NTJBMFx1NTQxMVx1NURFNlx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMCg8KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xTcGFuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNvbFNwYW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbEluZGV4ICsgaSA8IGNlbGxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldENlbGwgPSBjZWxsc1tjb2xJbmRleCArIGldIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NEY3Rlx1NzUyOFx1OTFDRFx1NTkwRFx1NzY4NDxcdTg4NjhcdTc5M0FcdTU0MDhcdTVFNzZcdTc2ODRcdTUyMTdcdTY1NzBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJUZXh0ID0gJzwnLnJlcGVhdChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2REZCXHU1MkEwXHU1NDExXHU1REU2XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwOiBcdTRGNERcdTdGNkUoJHtyb3dJbmRleH0sJHtjb2xJbmRleCtpfSksIFx1NjgwN1x1OEJCMD1cIiR7bWFya2VyVGV4dH1cImApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENlbGwudGV4dENvbnRlbnQgPSBtYXJrZXJUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENlbGwuY2xhc3NMaXN0LmFkZCgnbWVyZ2UtbWFya2VyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjgwN1x1OEJCMFx1ODg2OFx1NjgzQ1x1NEUzQVx1NURGMlx1NTkwNFx1NzQwNlxyXG4gICAgICAgICAgICB0YWJsZS5kYXRhc2V0LnRhYmxlTWVyZ2VQcm9jZXNzZWQgPSAndHJ1ZSc7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTg4NjhcdTY4M0NcdTU5MDRcdTc0MDZcdTVCOENcdTYyMTBcdUZGMENcdTVERjJcdTZERkJcdTUyQTBcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU1RTk0XHU3NTI4XHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU2ODA3XHU4QkIwXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTU5MDRcdTc0MDZcdTU5MUFcdTkwMDlcdTUzNTVcdTUxNDNcdTY4M0NcdTU0MDhcdTVFNzZcclxuICAgICAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcclxuICAgICAqIEBwYXJhbSBzZWxlY3RlZENlbGxzIFx1OTAwOVx1NEUyRFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjU3MFx1N0VDNFxyXG4gICAgICogQHJldHVybnMgXHU2NjJGXHU1NDI2XHU2MjEwXHU1MjlGXHU1NDA4XHU1RTc2XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIG1lcmdlU2VsZWN0ZWRDZWxscyh0YWJsZTogSFRNTEVsZW1lbnQsIHNlbGVjdGVkQ2VsbHM6IEhUTUxFbGVtZW50W10pOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICBpZiAoIXNlbGVjdGVkQ2VsbHMgfHwgc2VsZWN0ZWRDZWxscy5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1OEJGN1x1OTAwOVx1NjJFOVx1ODFGM1x1NUMxMTJcdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NcdThGREJcdTg4NENcdTU0MDhcdTVFNzYnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU3ODZFXHU1QjlBXHU5MDA5XHU0RTJEXHU1MzNBXHU1N0RGXHU3Njg0XHU4RkI5XHU3NTRDXHJcbiAgICAgICAgICAgIGxldCBtaW5Sb3cgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICAgICAgICAgICAgbGV0IG1heFJvdyA9IDA7XHJcbiAgICAgICAgICAgIGxldCBtaW5Db2wgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICAgICAgICAgICAgbGV0IG1heENvbCA9IDA7XHJcblxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTYyNDBcdTY3MDlcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTVFNzZcdThCQjBcdTVGNTVcdThGQjlcdTc1NENcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjZWxsIG9mIHNlbGVjdGVkQ2VsbHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvdy1pbmRleCcpIHx8IGNlbGwuZGF0YXNldC5yb3dJbmRleCB8fCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29sSW5kZXggPSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgnY29sLWluZGV4JykgfHwgY2VsbC5kYXRhc2V0LmNvbEluZGV4IHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG1pblJvdyA9IE1hdGgubWluKG1pblJvdywgcm93SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgbWF4Um93ID0gTWF0aC5tYXgobWF4Um93LCByb3dJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBtaW5Db2wgPSBNYXRoLm1pbihtaW5Db2wsIGNvbEluZGV4KTtcclxuICAgICAgICAgICAgICAgIG1heENvbCA9IE1hdGgubWF4KG1heENvbCwgY29sSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBcdTlBOENcdThCQzFcdTY2MkZcdTU0MjZcdTVGNjJcdTYyMTBcdTVCOENcdTY1NzRcdTc3RTlcdTVGNjJcclxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRDZWxsQ291bnQgPSAobWF4Um93IC0gbWluUm93ICsgMSkgKiAobWF4Q29sIC0gbWluQ29sICsgMSk7XHJcbiAgICAgICAgICAgIGlmIChleHBlY3RlZENlbGxDb3VudCAhPT0gc2VsZWN0ZWRDZWxscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NTNFQVx1ODBGRFx1NTQwOFx1NUU3Nlx1NUY2Mlx1NjIxMFx1NUI4Q1x1NjU3NFx1NzdFOVx1NUY2Mlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBcdTc4NkVcdTVCOUFcdTVERTZcdTRFMEFcdTg5RDJcdTUzNTVcdTUxNDNcdTY4M0NcdTRGNUNcdTRFM0FcdTRFM0JcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgY29uc3QgbWFpbkNlbGwgPSB0YWJsZS5xdWVyeVNlbGVjdG9yKGBbcm93LWluZGV4PVwiJHttaW5Sb3d9XCJdW2NvbC1pbmRleD1cIiR7bWluQ29sfVwiXWApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAoIW1haW5DZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTY1RTBcdTZDRDVcdTYyN0VcdTUyMzBcdTRFM0JcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU2NzA5XHU5NzVFXHU3QTdBXHU1MzU1XHU1MTQzXHU2ODNDXHU5NzAwXHU4OTgxXHU3ODZFXHU4QkE0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25maXJtTWVyZ2VOb25FbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU2NTM2XHU5NkM2XHU2MjQwXHU2NzA5XHU5NzAwXHU4OTgxXHU1NDA4XHU1RTc2XHU3Njg0XHU5NzVFXHU3QTdBXHU1MzU1XHU1MTQzXHU2ODNDXHVGRjA4XHU5NjY0XHU0RTg2XHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHVGRjA5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub25FbXB0eUNlbGxzID0gW107XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2VsbCBvZiBzZWxlY3RlZENlbGxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwgPT09IG1haW5DZWxsKSBjb250aW51ZTsgLy8gXHU1RkZEXHU3NTY1XHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzTWVhbmluZ2Z1bENvbnRlbnQoY2VsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgncm93LWluZGV4JykgfHwgY2VsbC5kYXRhc2V0LnJvd0luZGV4IHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbEluZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ2NvbC1pbmRleCcpIHx8IGNlbGwuZGF0YXNldC5jb2xJbmRleCB8fCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9uRW1wdHlDZWxscy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbEluZGV4OiBjb2xJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNlbGwudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChub25FbXB0eUNlbGxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTc4NkVcdThCQTRcdTZEODhcdTYwNkZcdUZGMENcdTUzMDVcdTU0MkJcdTYyNDBcdTY3MDlcdTk3MDBcdTg5ODFcdTg5ODZcdTc2RDZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsQ29udGVudHMgPSBub25FbXB0eUNlbGxzLm1hcChjID0+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgWyR7Yy5yb3dJbmRleCsxfSwke2MuY29sSW5kZXgrMX1dOiBcIiR7Yy5jb250ZW50fVwiYFxyXG4gICAgICAgICAgICAgICAgICAgICkuam9pbignXFxuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1RTc2XHU2NjNFXHU3OTNBXHU3ODZFXHU4QkE0XHU1QkY5XHU4QkREXHU2ODQ2XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlybU1lcmdlID0gYXdhaXQgdGhpcy5zaG93Q29uZmlybURpYWxvZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFx1NEVFNVx1NEUwQlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTMwNVx1NTQyQlx1NTE4NVx1NUJCOVx1NUMwNlx1ODhBQlx1ODk4Nlx1NzZENjpcXG4ke2NlbGxDb250ZW50c31cXG5cXG5cdTc4NkVcdTVCOUFcdTg5ODFcdTU0MDhcdTVFNzZcdThGRDlcdTRFOUJcdTUzNTVcdTUxNDNcdTY4M0NcdTU0MTdcdUZGMUZgXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm1NZXJnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTVERjJcdTUzRDZcdTZEODhcdTU0MDhcdTVFNzZcdTY0Q0RcdTRGNUMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU1NDA4XHU1RTc2XHU1QzVFXHU2MDI3XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd1NwYW5WYWx1ZSA9IG1heFJvdyAtIG1pblJvdyArIDE7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbFNwYW5WYWx1ZSA9IG1heENvbCAtIG1pbkNvbCArIDE7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTVFOTRcdTc1Mjhyb3dzcGFuXHU1NDhDY29sc3Bhblx1NTIzMFx1NEUzQlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICBtYWluQ2VsbC5zZXRBdHRyaWJ1dGUoJ3Jvd3NwYW4nLCByb3dTcGFuVmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIG1haW5DZWxsLnNldEF0dHJpYnV0ZSgnY29sc3BhbicsIGNvbFNwYW5WYWx1ZS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgbWFpbkNlbGwucm93U3BhbiA9IHJvd1NwYW5WYWx1ZTtcclxuICAgICAgICAgICAgbWFpbkNlbGwuY29sU3BhbiA9IGNvbFNwYW5WYWx1ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NTQwOFx1NUU3Nlx1NjgzN1x1NUYwRlx1N0M3QlxyXG4gICAgICAgICAgICBtYWluQ2VsbC5jbGFzc0xpc3QuYWRkKCdvYnMtbWVyZ2VkLWNlbGwnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NTQyRlx1NzUyOFx1NEU4Nlx1ODFFQVx1NTJBOFx1NUM0NVx1NEUyRFxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b0NlbnRlck1lcmdlZENlbGxzKSB7XHJcbiAgICAgICAgICAgICAgICBtYWluQ2VsbC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgICAgICAgICAgICAgIG1haW5DZWxsLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAnbWlkZGxlJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU5NjkwXHU4NUNGXHU1MTc2XHU0RUQ2XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2VsbCBvZiBzZWxlY3RlZENlbGxzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2VsbCAhPT0gbWFpbkNlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjgwN1x1OEJCMFx1NTIzMFx1NTMzQVx1NTdERlxyXG4gICAgICAgICAgICB0aGlzLmFwcGx5TWVyZ2VDZWxsc01hcmtlcnNGb3JBcmVhKHRhYmxlLCBtaW5Sb3csIG1pbkNvbCwgbWF4Um93LCBtYXhDb2wpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU1NDA4XHU1RTc2XHU5MDA5XHU0RTJEXHU1MzU1XHU1MTQzXHU2ODNDXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NEUzQVx1NzI3OVx1NUI5QVx1NTMzQVx1NTdERlx1NUU5NFx1NzUyOFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICogQHBhcmFtIHRhYmxlIFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFxyXG4gICAgICogQHBhcmFtIHN0YXJ0Um93IFx1OEQ3N1x1NTlDQlx1ODg0Q1xyXG4gICAgICogQHBhcmFtIHN0YXJ0Q29sIFx1OEQ3N1x1NTlDQlx1NTIxN1xyXG4gICAgICogQHBhcmFtIGVuZFJvdyBcdTdFRDNcdTY3NUZcdTg4NENcclxuICAgICAqIEBwYXJhbSBlbmRDb2wgXHU3RUQzXHU2NzVGXHU1MjE3XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXBwbHlNZXJnZUNlbGxzTWFya2Vyc0ZvckFyZWEodGFibGU6IEhUTUxFbGVtZW50LCBzdGFydFJvdzogbnVtYmVyLCBzdGFydENvbDogbnVtYmVyLCBlbmRSb3c6IG51bWJlciwgZW5kQ29sOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NUJGOVx1NTMzQVx1NTdERlx1NTE4NVx1OTY2NFx1NEU4Nlx1NURFNlx1NEUwQVx1ODlEMlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTkxNlx1NzY4NFx1NjI0MFx1NjcwOVx1NTM1NVx1NTE0M1x1NjgzQ1x1NUU5NFx1NzUyOFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICBmb3IgKGxldCByb3dJbmRleCA9IHN0YXJ0Um93OyByb3dJbmRleCA8PSBlbmRSb3c7IHJvd0luZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChyb3dJbmRleCA8IHJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gcm93c1tyb3dJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSByb3cucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgY29sSW5kZXggPSBzdGFydENvbDsgY29sSW5kZXggPD0gZW5kQ29sOyBjb2xJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xJbmRleCA8IGNlbGxzLmxlbmd0aCAmJiAhKHJvd0luZGV4ID09PSBzdGFydFJvdyAmJiBjb2xJbmRleCA9PT0gc3RhcnRDb2wpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY2VsbHNbY29sSW5kZXhdIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTdCMkNcdTRFMDBcdTUyMTdcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTRGN0ZcdTc1MjhcdTU0MTFcdTRFMEFcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjAoXilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xJbmRleCA9PT0gc3RhcnRDb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gJ14nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnbWVyZ2UtbWFya2VyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU3QjJDXHU0RTAwXHU4ODRDXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU0RjdGXHU3NTI4XHU1NDExXHU1REU2XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwKDwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyb3dJbmRleCA9PT0gc3RhcnRSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gJzwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnbWVyZ2UtbWFya2VyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTUxNzZcdTRFRDZcdTUzNTVcdTUxNDNcdTY4M0NcdTk2OEZcdTY3M0FcdTRGN0ZcdTc1MjhcdTRFMDBcdTc5Q0RcdTY4MDdcdThCQjBcdUZGMENcdTRGRERcdThCQzFcdTRFMERcdTRGMUFcdTc3MEJcdTUyMzBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwudGV4dENvbnRlbnQgPSAoTWF0aC5yYW5kb20oKSA+IDAuNSkgPyAnXicgOiAnPCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdtZXJnZS1tYXJrZXInLCAnaGlkZGVuLW1hcmtlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU1RTk0XHU3NTI4XHU1MzNBXHU1N0RGXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCAiLy8gQHRzLW5vY2hlY2tcclxuLy8gXHU0RTBBXHU5NzYyXHU3Njg0XHU2MzA3XHU0RUU0XHU0RjFBXHU3OTgxXHU3NTI4XHU2NTc0XHU0RTJBXHU2NTg3XHU0RUY2XHU3Njg0XHU3QzdCXHU1NzhCXHU2OEMwXHU2N0U1XHJcblxyXG5pbXBvcnQgeyBPYnNpZGlhblNwcmVhZHNoZWV0IH0gZnJvbSAnLi9tYWluJztcclxuaW1wb3J0IHsgQXBwLCBURmlsZSwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgKiBhcyBKU09ONSBmcm9tICdqc29uNSc7XHJcbmltcG9ydCB7IFRhYmxlRmVhdHVyZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIFx1ODg2OFx1NjgzQ0lEXHU3QkExXHU3NDA2XHU1NjY4IC0gXHU4RDFGXHU4RDIzXHU4ODY4XHU2ODNDSURcdTc2ODRcdTc1MUZcdTYyMTBcdTMwMDFcdTgzQjdcdTUzRDZcdTMwMDFcdTg5RTNcdTY3OTBcdTU0OENcdTYzMDFcdTRFNDVcdTUzMTZcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUYWJsZUlkTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIHBsdWdpbjogT2JzaWRpYW5TcHJlYWRzaGVldDtcclxuICAgIHByaXZhdGUgc3RhdGljIGlzUHJvY2Vzc2luZ1RhYmxlSWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgc3RhdGljIGlzQ3JlYXRpbmdUYWJsZUlkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0KSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1RhYmxlSWRNYW5hZ2VyIGluaXRpYWxpemVkJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFx1OEY4NVx1NTJBOVx1NjVCOVx1NkNENVx1RkYwQ1x1ODNCN1x1NTNENmFwcFx1NUJGOVx1OEM2MVxyXG4gICAgcHJpdmF0ZSBnZXRBcHAoKTogQXBwIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucGx1Z2luIGFzIHVua25vd24gYXMgUGx1Z2luKS5hcHA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTY4MDdcdThCQzZcdTdCMjZcclxuICAgICAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NIVE1MXHU1MTQzXHU3RDIwXHJcbiAgICAgKiBAcGFyYW0gdXNlRmFsbGJhY2sgXHU2NjJGXHU1NDI2XHU1NzI4XHU2NzJBXHU2MjdFXHU1MjMwSFRNTFx1NkNFOFx1OTFDQUlEXHU2NUY2XHU0RjdGXHU3NTI4XHU1MTc2XHU0RUQ2SURcdTY3NjVcdTZFOTBcclxuICAgICAqIEByZXR1cm5zIFx1ODg2OFx1NjgzQ0lEXHU2MjE2bnVsbFxyXG4gICAgICovXHJcbiAgICBnZXRUYWJsZUlkZW50aWZpZXIodGFibGU6IEhUTUxFbGVtZW50LCB1c2VGYWxsYmFjazogYm9vbGVhbiA9IGZhbHNlKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKFRhYmxlSWRNYW5hZ2VyLmlzUHJvY2Vzc2luZ1RhYmxlSWQpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBUYWJsZUlkTWFuYWdlci5pc1Byb2Nlc3NpbmdUYWJsZUlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTVGMDBcdTU5Q0JcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NJRCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gMS4gXHU5OTk2XHU1MTQ4XHU0RUNFXHU4ODY4XHU2ODNDRE9NXHU1QzVFXHU2MDI3XHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjRESURcdUZGMDhcdTRFQzVcdTc1MjhcdTRFOEVcdTY1RTVcdTVGRDdcdTU0OENcdTZCRDRcdThGODNcdUZGMDlcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudERvbUlkID0gdGFibGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJyk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50RG9tSWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTg4NjhcdTY4M0NcdTVGNTNcdTUyNERET01cdTVDNUVcdTYwMjdJRDogJHtjdXJyZW50RG9tSWR9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIDIuIFx1NjNEMFx1NTNENlx1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MVx1NzUyOFx1NEU4RVx1OUE4Q1x1OEJDMVxyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUZlYXR1cmUgPSB0aGlzLmV4dHJhY3RUYWJsZUZlYXR1cmUodGFibGUpO1xyXG4gICAgICAgICAgICBpZiAodGFibGVGZWF0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2M0QwXHU1M0Q2XHU3Njg0XHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxOmAsIHRhYmxlRmVhdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIDMuIFx1NEVDRUhUTUxcdTZDRThcdTkxQ0FcdTRFMkRcdTgzQjdcdTUzRDZJRFx1RkYwOFx1NjcwMFx1OUFEOFx1NEYxOFx1NTE0OFx1N0VBN1x1RkYwOVxyXG4gICAgICAgICAgICBsZXQgY29tbWVudElkID0gdGhpcy5nZXRUYWJsZUlkRnJvbUNvbW1lbnQodGFibGUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gNC4gXHU2QkQ0XHU4RjgzRE9NXHU1QzVFXHU2MDI3SURcdTU0OENIVE1MXHU2Q0U4XHU5MUNBSURcclxuICAgICAgICAgICAgaWYgKGNvbW1lbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEVDRUhUTUxcdTZDRThcdTkxQ0FcdTgzQjdcdTUzRDZcdTUyMzBcdTg4NjhcdTY4M0NJRDogJHtjb21tZW50SWR9YCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q0RPTVx1NUM1RVx1NjAyN0lEXHU0RTBFSFRNTFx1NkNFOFx1OTFDQUlEXHU0RTBEXHU1MzM5XHU5MTREXHVGRjBDXHU2NkY0XHU2NUIwRE9NXHU1QzVFXHU2MDI3XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudERvbUlkICYmIGN1cnJlbnREb21JZCAhPT0gY29tbWVudElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEI2Nlx1NTQ0QTogRE9NXHU0RTJEXHU3Njg0SUQoJHtjdXJyZW50RG9tSWR9KVx1NEUwRUhUTUxcdTZDRThcdTkxQ0FcdTRFMkRcdTc2ODRJRCgke2NvbW1lbnRJZH0pXHU0RTBEXHU1MzM5XHU5MTREYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NkI2M1x1NTcyOFx1NjZGNFx1NjVCMERPTVx1NUM1RVx1NjAyN1x1RkYwQ1x1NEY3Rlx1NzUyOEhUTUxcdTZDRThcdTkxQ0FcdTRFMkRcdTc2ODRJRDogJHtjb21tZW50SWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuc2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJywgY29tbWVudElkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWN1cnJlbnREb21JZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q0RPTVx1NkNBMVx1NjcwOUlEXHU1QzVFXHU2MDI3XHVGRjBDXHU4QkJFXHU3RjZFXHU1QjgzXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEJCRVx1N0Y2RURPTVx1NUM1RVx1NjAyN0lEOiAke2NvbW1lbnRJZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnLCBjb21tZW50SWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTg4NjhcdTY4M0NcdTcyNzlcdTVGODFcdTVDNUVcdTYwMjdcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZUZlYXR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtZmVhdHVyZScsIEpTT04uc3RyaW5naWZ5KHRhYmxlRmVhdHVyZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBUYWJsZUlkTWFuYWdlci5pc1Byb2Nlc3NpbmdUYWJsZUlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWVudElkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyA1LiBcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlcdTYyN0VcdTUyMzBIVE1MXHU2Q0U4XHU5MUNBSURcdUZGMENcdTRGNDZcdTUxNDFcdThCQjhcdTU2REVcdTkwMDBcdUZGMENcdTUyMTlcdTRGN0ZcdTc1MjhET01cdTVDNUVcdTYwMjdJRFxyXG4gICAgICAgICAgICBpZiAodXNlRmFsbGJhY2sgJiYgY3VycmVudERvbUlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2NzJBXHU1NzI4SFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEXHVGRjBDXHU1NkRFXHU5MDAwXHU0RjdGXHU3NTI4RE9NXHU1QzVFXHU2MDI3SUQ6ICR7Y3VycmVudERvbUlkfWApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTg4NjhcdTY4M0NcdTcyNzlcdTVGODFcdTVDNUVcdTYwMjdcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZUZlYXR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtZmVhdHVyZScsIEpTT04uc3RyaW5naWZ5KHRhYmxlRmVhdHVyZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBUYWJsZUlkTWFuYWdlci5pc1Byb2Nlc3NpbmdUYWJsZUlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERvbUlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyA2LiBcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlcdTYyN0VcdTUyMzBIVE1MXHU2Q0U4XHU5MUNBSURcdUZGMENcdTRFMTRcdTRFMERcdTUxNDFcdThCQjhcdTU2REVcdTkwMDBcdTYyMTZET01cdTRFMkRcdTZDQTFcdTY3MDlJRFx1RkYwQ1x1NTIxOVx1NEUwRFx1OEZENFx1NTZERVx1NEVGQlx1NEY1NUlEXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTY3MkFcdTU3MjhIVE1MXHU2Q0U4XHU5MUNBXHU0RTJEXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSURcdUZGMENcdTRFMERcdTRGN0ZcdTc1MjhcdTUxNzZcdTRFRDZJRFx1Njc2NVx1NkU5MCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gNy4gXHU1OTgyXHU2NzlDRE9NXHU0RTJEXHU2NzA5SURcdTRGNDZcdTZDQTFcdTY3MDlcdTYyN0VcdTUyMzBIVE1MXHU2Q0U4XHU5MUNBSURcdTRFMTRcdTRFMERcdTUxNDFcdThCQjhcdTU2REVcdTkwMDBcdUZGMENcdTZFMDVcdTk2NjRET01cdTRFMkRcdTc2ODRJRFx1NEVFNVx1OTA3Rlx1NTE0RFx1NkRGN1x1NkRDNlxyXG4gICAgICAgICAgICBpZiAoIXVzZUZhbGxiYWNrICYmIGN1cnJlbnREb21JZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEI2Nlx1NTQ0QTogXHU4ODY4XHU2ODNDRE9NXHU0RTJEXHU2NzA5SUQoJHtjdXJyZW50RG9tSWR9KVx1RkYwQ1x1NEY0Nlx1NjcyQVx1NTcyOEhUTUxcdTZDRThcdTkxQ0FcdTRFMkRcdTYyN0VcdTUyMzBcdTVCRjlcdTVFOTRJRGApO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NkUwNVx1OTY2NERPTVx1NEUyRFx1NzY4NElEXHU1QzVFXHU2MDI3XHVGRjBDXHU0RUU1XHU5MDdGXHU1MTREXHU0RjdGXHU3NTI4XHU4RkM3XHU2NUY2XHU2MjE2XHU0RTBEXHU2QjYzXHU3ODZFXHU3Njg0SUQnKTtcclxuICAgICAgICAgICAgICAgIHRhYmxlLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBUYWJsZUlkTWFuYWdlci5pc1Byb2Nlc3NpbmdUYWJsZUlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgVGFibGVJZE1hbmFnZXIuaXNQcm9jZXNzaW5nVGFibGVJZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTgzQjdcdTUzRDZcdTYyMTZcdTUyMUJcdTVFRkFcdTg4NjhcdTY4M0NJRFxyXG4gICAgICogQHBhcmFtIHRhYmxlIFx1ODg2OFx1NjgzQ0hUTUxcdTUxNDNcdTdEMjBcclxuICAgICAqIEByZXR1cm5zIFx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgKi9cclxuICAgIGdldE9yQ3JlYXRlVGFibGVJZCh0YWJsZTogSFRNTEVsZW1lbnQpOiBzdHJpbmcge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChUYWJsZUlkTWFuYWdlci5pc0NyZWF0aW5nVGFibGVJZCkgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICBUYWJsZUlkTWFuYWdlci5pc0NyZWF0aW5nVGFibGVJZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAvLyBcdTVDMURcdThCRDVcdTgzQjdcdTUzRDZIVE1MXHU2Q0U4XHU5MUNBXHU0RTJEXHU3Njg0SURcdUZGMENcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlcdTUyMTlcdTU2REVcdTkwMDBcdTUyMzBET01cdTVDNUVcdTYwMjdJRFxyXG4gICAgICAgICAgICBsZXQgdGFibGVJZCA9IHRoaXMuZ2V0VGFibGVJZGVudGlmaWVyKHRhYmxlLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NkNBMVx1NjcwOUlEXHVGRjBDXHU1MjE5XHU4RkQ0XHU1NkRFXHU3QTdBXHU1QjU3XHU3QjI2XHU0RTMyXHVGRjBDXHU0RjQ2XHU2M0QwXHU3OTNBXHU3NTI4XHU2MjM3XHU1M0VGXHU0RUU1XHU1MjFCXHU1RUZBSURcclxuICAgICAgICAgICAgaWYgKCF0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU2NzJBXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSURcdUZGMENcdTUzRUZcdTRFRTVcdTRGN0ZcdTc1Mjhjb25maXJtQW5kQ3JlYXRlVGFibGVJZFx1NjVCOVx1NkNENVx1NTIxQlx1NUVGQVx1NjVCMElEJyk7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NJRFx1RkYwQ1x1OEJGN1x1NEY3Rlx1NzUyOFx1ODg2OFx1NjgzQ1x1NURFNVx1NTE3N1x1NjgwRlx1NEUyRFx1NzY4NFwiXHU4QkJFXHU3RjZFXHU4ODY4XHU2ODNDSURcIlx1NTI5Rlx1ODBGRFx1NTIxQlx1NUVGQVx1NjVCMElEJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFRhYmxlSWRNYW5hZ2VyLmlzQ3JlYXRpbmdUYWJsZUlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0YWJsZUlkIHx8ICcnO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgVGFibGVJZE1hbmFnZXIuaXNDcmVhdGluZ1RhYmxlSWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1Nzg2RVx1OEJBNFx1NUU3Nlx1NTIxQlx1NUVGQVx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgKiBAcGFyYW0gdGFibGUgXHU4ODY4XHU2ODNDSFRNTFx1NTE0M1x1N0QyMFxyXG4gICAgICogQHJldHVybnMgXHU1MjFCXHU1RUZBXHU3Njg0XHU4ODY4XHU2ODNDSURcclxuICAgICAqL1xyXG4gICAgY29uZmlybUFuZENyZWF0ZVRhYmxlSWQodGFibGU6IEhUTUxFbGVtZW50KTogc3RyaW5nIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBcdTUxNDhcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTVERjJcdTY3MDlJRFxyXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0lkID0gdGhpcy5nZXRUYWJsZUlkZW50aWZpZXIodGFibGUsIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdJZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1ODg2OFx1NjgzQ1x1NURGMlx1NjcwOUlEOiAke2V4aXN0aW5nSWR9XHVGRjBDXHU0RTBEXHU5NzAwXHU4OTgxXHU1MjFCXHU1RUZBXHU2NUIwSURgKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1ODg2OFx1NjgzQ1x1NURGMlx1NjcwOUlEOiAke2V4aXN0aW5nSWR9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU3NTFGXHU2MjEwXHU2NUIwSURcclxuICAgICAgICAgICAgY29uc3QgbmV3SWQgPSB0aGlzLmdlbmVyYXRlVGFibGVJZCgpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RTNBXHU4ODY4XHU2ODNDXHU3NTFGXHU2MjEwXHU2NUIwSUQ6ICR7bmV3SWR9YCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBJRFx1NkNFOFx1OTFDQVxyXG4gICAgICAgICAgICB0aGlzLmFkZFRhYmxlSWRDb21tZW50KHRhYmxlLCBuZXdJZCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdThGRDRcdTU2REVcdTY1QjBJRFxyXG4gICAgICAgICAgICByZXR1cm4gbmV3SWQ7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU3ODZFXHU4QkE0XHU1RTc2XHU1MjFCXHU1RUZBXHU4ODY4XHU2ODNDSURcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU0RUNFSFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgKiBAcGFyYW0gdGFibGUgXHU4ODY4XHU2ODNDSFRNTFx1NTE0M1x1N0QyMFxyXG4gICAgICogQHJldHVybnMgXHU4ODY4XHU2ODNDSURcdTYyMTZudWxsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRUYWJsZUlkRnJvbUNvbW1lbnQodGFibGU6IEhUTUxFbGVtZW50KTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NUYwMFx1NTlDQlx1NEVDRUhUTUxcdTZDRThcdTkxQ0FcdTRFMkRcdTY3RTVcdTYyN0VcdTg4NjhcdTY4M0NJRCcpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXHU4ODY4XHU2ODNDRE9NOicsIHRhYmxlLm91dGVySFRNTC5zdWJzdHJpbmcoMCwgMTAwKSArICcuLi4nKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NUMxRFx1OEJENVx1NEVDRU1hcmtkb3duXHU2NTg3XHU0RUY2XHU1MTg1XHU1QkI5XHU0RTJEXHU2N0U1XHU2MjdFXHU4ODY4XHU2ODNDSURcclxuICAgICAgICAgICAgLy8gXHU4RkQ5XHU2NjJGXHU0RTAwXHU0RTJBXHU2NkY0XHU1M0VGXHU5NzYwXHU3Njg0XHU2NUI5XHU2Q0Q1XHVGRjBDXHU1NkUwXHU0RTNBXHU1QjgzXHU0RTBEXHU0RjlEXHU4RDU2XHU0RThFRE9NXHU3RUQzXHU2Nzg0XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTZEM0JcdTUyQThcdTY1ODdcdTRFRjZcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmdldEFwcCgpLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVDMURcdThCRDVcdTRFQ0VcdTY1ODdcdTRFRjZcdTUxODVcdTVCQjlcdTRFMkRcdTY3RTVcdTYyN0VcdTg4NjhcdTY4M0NJRDogJHthY3RpdmVGaWxlLnBhdGh9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU4ODY4XHU2ODNDXHU1NzI4RE9NXHU0RTJEXHU3Njg0XHU0RjREXHU3RjZFXHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFibGVQb3NpdGlvbiA9IHRoaXMuZ2V0VGFibGVQb3NpdGlvbkluRE9NKHRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU4ODY4XHU2ODNDXHU0RjREXHU3RjZFOiBcdTdCMkMke3RhYmxlUG9zaXRpb24uaW5kZXh9XHU0RTJBXHU4ODY4XHU2ODNDYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdThCRkJcdTUzRDZcdTY1ODdcdTRFRjZcdTUxODVcdTVCQjlcdTVFNzZcdTU5MDRcdTc0MDZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRBcHAoKS52YXVsdC5yZWFkKGFjdGl2ZUZpbGUpLnRoZW4oY29udGVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTUyMDZcdTY3OTBcdTY1ODdcdTRFRjZcdTUxODVcdTVCQjlcdUZGMENcdTY3RTVcdTYyN0VcdTg4NjhcdTY4M0NcdTU0OENcdTVCRjlcdTVFOTRcdTc2ODRJRFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFibGVJbmZvcyA9IHRoaXMuZXh0cmFjdFRhYmxlSWRzRnJvbU1hcmtkb3duKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEVDRU1hcmtkb3duXHU1MTg1XHU1QkI5XHU0RTJEXHU2M0QwXHU1M0Q2XHU3Njg0XHU4ODY4XHU2ODNDSUQ6YCwgdGFibGVJbmZvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjI3RVx1NTIzMFx1NEU4Nlx1NUJGOVx1NUU5NFx1NEY0RFx1N0Y2RVx1NzY4NFx1ODg2OFx1NjgzQ0lEXHVGRjBDXHU0RjdGXHU3NTI4XHU1QjgzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVJbmZvcy5sZW5ndGggPiB0YWJsZVBvc2l0aW9uLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBpZCB9ID0gdGFibGVJbmZvc1t0YWJsZVBvc2l0aW9uLmluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEVDRU1hcmtkb3duXHU1MTg1XHU1QkI5XHU0RTJEXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSUQ6ICR7aWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NUMwNklEXHU4QkJFXHU3RjZFXHU1MjMwXHU4ODY4XHU2ODNDRE9NXHU1QzVFXHU2MDI3XHU0RTJEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcsIGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OEJGQlx1NTNENlx1NjU4N1x1NEVGNlx1NTE4NVx1NUJCOVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTRFQ0VcdTY1ODdcdTRFRjZcdTUxODVcdTVCQjlcdTY3RTVcdTYyN0VcdTg4NjhcdTY4M0NJRFx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1ODg2OFx1NjgzQ1x1NTI0RFx1OTc2Mlx1NzY4NFx1NkNFOFx1OTFDQVx1ODI4Mlx1NzBCOVxyXG4gICAgICAgICAgICBsZXQgbm9kZSA9IHRhYmxlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgbGV0IG5vZGVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1RjAwXHU1OUNCXHU5MDREXHU1Mzg2XHU1MjREXHU3RjZFXHU4MjgyXHU3MEI5Li4uJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTkwNERcdTUzODZcdTUyNERcdTk3NjJcdTc2ODRcdTYyNDBcdTY3MDlcdTgyODJcdTcwQjlcdUZGMENcdTc2RjRcdTUyMzBcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NJRFx1NjIxNlx1OEZCRVx1NTIzMFx1NjcwMFx1NTkyN1x1NjhDMFx1NjdFNVx1NjU3MFx1OTFDRlxyXG4gICAgICAgICAgICB3aGlsZSAobm9kZSAmJiBub2RlQ291bnQgPCAzMCkgeyAvLyBcdTU4OUVcdTUyQTBcdTY4QzBcdTY3RTVcdTgyODJcdTcwQjlcdTY1NzBcdTkxQ0ZcdTUyMzAzMFx1NEUyQVx1RkYwQ1x1OEZEQlx1NEUwMFx1NkI2NVx1NjNEMFx1OUFEOFx1NjdFNVx1NjI3RVx1ODMwM1x1NTZGNFxyXG4gICAgICAgICAgICAgICAgbm9kZUNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1OEJCMFx1NUY1NVx1ODI4Mlx1NzBCOVx1N0M3Qlx1NTc4Qlx1NTQ4Q1x1NTE4NVx1NUJCOVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZVR5cGVTdHIgPSBub2RlVHlwZSA9PT0gTm9kZS5DT01NRU5UX05PREUgPyAnQ09NTUVOVCcgOiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgPyAnVEVYVCcgOiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgPyAnRUxFTUVOVCcgOiAnT1RIRVInO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2OEMwXHU2N0U1XHU4MjgyXHU3MEI5ICMke25vZGVDb3VudH06IFx1N0M3Qlx1NTc4Qj0ke25vZGVUeXBlU3RyfWApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTZDRThcdTkxQ0FcdTgyODJcdTcwQjlcclxuICAgICAgICAgICAgICAgIGlmIChub2RlVHlwZSA9PT0gTm9kZS5DT01NRU5UX05PREUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50VGV4dCA9IG5vZGUudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1M0QxXHU3M0IwXHU2Q0U4XHU5MUNBXHU4MjgyXHU3MEI5OiBcIiR7Y29tbWVudFRleHR9XCJgKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTUzMzlcdTkxNERcdTg4NjhcdTY4M0NcdTVGMDBcdTU5Q0JcdTZDRThcdTkxQ0FcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiZWdpbk1hdGNoID0gY29tbWVudFRleHQubWF0Y2goL3RhYmxlLWJlZ2luOlxccyooW2EtekEtWjAtOV9cXC06Ll0rKS9pKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVnaW5NYXRjaCAmJiBiZWdpbk1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRJZCA9IGJlZ2luTWF0Y2hbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTRFQ0VcdTg4NjhcdTY4M0NcdTVGMDBcdTU5Q0JcdTZDRThcdTkxQ0FcdTRFMkRcdThCQzZcdTUyMkJcdTg4NjhcdTY4M0NJRDogJHtjb21tZW50SWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21tZW50SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTMzOVx1OTE0RFx1NTkxQVx1NzlDRFx1NTNFRlx1ODBGRFx1NzY4NFx1NjgzQ1x1NUYwRlx1RkYwQ1x1NjZGNFx1NUJCRFx1Njc3RVx1NzY4NFx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDEuIDwhLS0gdGFibGUtaWQ6IHh4eCAtLT5cclxuICAgICAgICAgICAgICAgICAgICAvLyAyLiA8IS0tIHRhYmxlLWlkOnh4eCAtLT5cclxuICAgICAgICAgICAgICAgICAgICAvLyAzLiA8IS0tdGFibGUtaWQ6IHh4eC0tPlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIDwhLS10YWJsZS1pZDp4eHgtLT5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZE1hdGNoID0gY29tbWVudFRleHQubWF0Y2goL3RhYmxlWy1fXT9pZDo/XFxzKihbYS16QS1aMC05X1xcLTouXSspL2kpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpZE1hdGNoICYmIGlkTWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudElkID0gaWRNYXRjaFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEVDRUhUTUxcdTZDRThcdTkxQ0FcdTRFMkRcdTYyMTBcdTUyOUZcdThCQzZcdTUyMkJcdTg4NjhcdTY4M0NJRDogJHtjb21tZW50SWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21tZW50SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NUMxRFx1OEJENVx1NTE3Nlx1NEVENlx1NTNFRlx1ODBGRFx1NzY4NFx1NjgzQ1x1NUYwRlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDUuIDwhLS0gaWQ6IHh4eCAtLT5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHRJZE1hdGNoID0gY29tbWVudFRleHQubWF0Y2goL2lkOj9cXHMqKFthLXpBLVowLTlfXFwtOi5dKykvaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsdElkTWF0Y2ggJiYgYWx0SWRNYXRjaFsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50SWQgPSBhbHRJZE1hdGNoWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RUNFXHU2NkZGXHU0RUUzXHU2ODNDXHU1RjBGSFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1OEJDNlx1NTIyQlx1ODg2OFx1NjgzQ0lEOiAke2NvbW1lbnRJZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1lbnRJZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gNi4gPCEtLSB0Ymw6IHh4eCAtLT4gXHU2MjE2IDwhLS0gdGFibGU6IHh4eCAtLT5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YmxNYXRjaCA9IGNvbW1lbnRUZXh0Lm1hdGNoKC8odGJsfHRhYmxlKTo/XFxzKihbYS16QS1aMC05X1xcLTouXSspL2kpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YmxNYXRjaCAmJiB0YmxNYXRjaFsyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50SWQgPSB0YmxNYXRjaFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEVDRXRibC90YWJsZVx1NjgzQ1x1NUYwRkhUTUxcdTZDRThcdTkxQ0FcdTRFMkRcdThCQzZcdTUyMkJcdTg4NjhcdTY4M0NJRDogJHtjb21tZW50SWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21tZW50SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTY2MkZcdTY1ODdcdTY3MkNcdTgyODJcdTcwQjlcdUZGMENcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTUzMDVcdTU0MkJIVE1MXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50IHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTY1ODdcdTY3MkNcdTgyODJcdTcwQjlcdTUxODVcdTVCQjk6IFwiJHt0ZXh0Q29udGVudC5zdWJzdHJpbmcoMCwgMzApfSR7dGV4dENvbnRlbnQubGVuZ3RoID4gMzAgPyAnLi4uJyA6ICcnfVwiYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NTg3XHU2NzJDXHU0RTJEXHU2NjJGXHU1NDI2XHU1MzA1XHU1NDJCSFRNTFx1NkNFOFx1OTFDQVx1NjgzQ1x1NUYwRlx1NzY4NElEXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHRtbENvbW1lbnRNYXRjaCA9IHRleHRDb250ZW50Lm1hdGNoKC88IS0tXFxzKnRhYmxlWy1fXT9pZDo/XFxzKihbYS16QS1aMC05X1xcLTouXSspXFxzKi0tPi9pKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaHRtbENvbW1lbnRNYXRjaCAmJiBodG1sQ29tbWVudE1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRJZCA9IGh0bWxDb21tZW50TWF0Y2hbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTRFQ0VcdTY1ODdcdTY3MkNcdTgyODJcdTcwQjlcdTRFMkRcdTc2ODRIVE1MXHU2Q0U4XHU5MUNBXHU4QkM2XHU1MjJCXHU4ODY4XHU2ODNDSUQ6ICR7Y29tbWVudElkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tbWVudElkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTY2RkZcdTRFRTNcdTY4M0NcdTVGMEZcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHRIdG1sQ29tbWVudE1hdGNoID0gdGV4dENvbnRlbnQubWF0Y2goLzwhLS1cXHMqaWQ6P1xccyooW2EtekEtWjAtOV9cXC06Ll0rKVxccyotLT4vaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsdEh0bWxDb21tZW50TWF0Y2ggJiYgYWx0SHRtbENvbW1lbnRNYXRjaFsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50SWQgPSBhbHRIdG1sQ29tbWVudE1hdGNoWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RUNFXHU2NTg3XHU2NzJDXHU4MjgyXHU3MEI5XHU0RTJEXHU3Njg0XHU2NkZGXHU0RUUzSFRNTFx1NkNFOFx1OTFDQVx1OEJDNlx1NTIyQlx1ODg2OFx1NjgzQ0lEOiAke2NvbW1lbnRJZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1lbnRJZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1dGJsL3RhYmxlXHU2ODNDXHU1RjBGXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGJsSHRtbENvbW1lbnRNYXRjaCA9IHRleHRDb250ZW50Lm1hdGNoKC88IS0tXFxzKih0Ymx8dGFibGUpOj9cXHMqKFthLXpBLVowLTlfXFwtOi5dKylcXHMqLS0+L2kpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YmxIdG1sQ29tbWVudE1hdGNoICYmIHRibEh0bWxDb21tZW50TWF0Y2hbMl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudElkID0gdGJsSHRtbENvbW1lbnRNYXRjaFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEVDRVx1NjU4N1x1NjcyQ1x1ODI4Mlx1NzBCOVx1NEUyRFx1NzY4NHRibC90YWJsZSBIVE1MXHU2Q0U4XHU5MUNBXHU4QkM2XHU1MjJCXHU4ODY4XHU2ODNDSUQ6ICR7Y29tbWVudElkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tbWVudElkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dENvbnRlbnQudHJpbSgpID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTdBN0FcdTc2N0RcdTgyODJcdTcwQjlcdUZGMENcdTdFRTdcdTdFRURcdTY4QzBcdTY3RTVcdTUyNERcdTRFMDBcdTRFMkFcdTgyODJcdTcwQjlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjYyRlx1NTE0M1x1N0QyMFx1ODI4Mlx1NzBCOVx1RkYwQ1x1OEJCMFx1NUY1NVx1NjgwN1x1N0I3RVx1NTQwRFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZ05hbWUgPSAobm9kZSBhcyBFbGVtZW50KS50YWdOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTUxNDNcdTdEMjBcdTgyODJcdTcwQjk6IDwke3RhZ05hbWUudG9Mb3dlckNhc2UoKX0+YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1MTQzXHU3RDIwXHU3Njg0ZGF0YS1pZFx1NUM1RVx1NjAyN1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1EYXRhSWQgPSAobm9kZSBhcyBFbGVtZW50KS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSB8fCAobm9kZSBhcyBFbGVtZW50KS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbURhdGFJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RUNFXHU1MTQzXHU3RDIwXHU1QzVFXHU2MDI3XHU0RTJEXHU2MjdFXHU1MjMwSUQ6ICR7ZWxlbURhdGFJZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1EYXRhSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NTE0M1x1N0QyMFx1NTE4NVx1NUJCOVx1NjYyRlx1NTQyNlx1NTMwNVx1NTQyQkhUTUxcdTZDRThcdTkxQ0FcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtQ29udGVudCA9IChub2RlIGFzIEVsZW1lbnQpLmlubmVySFRNTCB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbUNvbnRlbnQuaW5jbHVkZXMoJzwhLS0nKSAmJiBlbGVtQ29udGVudC5pbmNsdWRlcygnLS0+JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTE0M1x1N0QyMFx1NTE4NVx1NUJCOVx1NTMwNVx1NTQyQkhUTUxcdTZDRThcdTkxQ0E6IFwiJHtlbGVtQ29udGVudC5zdWJzdHJpbmcoMCwgNTApfSR7ZWxlbUNvbnRlbnQubGVuZ3RoID4gNTAgPyAnLi4uJyA6ICcnfVwiYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTU0MDRcdTc5Q0RcdTY4M0NcdTVGMEZcdTc2ODRIVE1MXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGh0bWxDb21tZW50TWF0Y2ggPSBlbGVtQ29udGVudC5tYXRjaCgvPCEtLVxccyp0YWJsZVstX10/aWQ6P1xccyooW2EtekEtWjAtOV9cXC06Ll0rKVxccyotLT4vaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChodG1sQ29tbWVudE1hdGNoICYmIGh0bWxDb21tZW50TWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRJZCA9IGh0bWxDb21tZW50TWF0Y2hbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RUNFXHU1MTQzXHU3RDIwXHU1MTg1XHU1QkI5XHU0RTJEXHU3Njg0SFRNTFx1NkNFOFx1OTFDQVx1OEJDNlx1NTIyQlx1ODg2OFx1NjgzQ0lEOiAke2NvbW1lbnRJZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21tZW50SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2NjJGXHU2QkI1XHU4NDNEXHUzMDAxXHU2MzYyXHU4ODRDXHU2MjE2XHU1MjA2XHU5Njk0XHU3RUJGXHVGRjBDXHU3RUU3XHU3RUVEXHU2OEMwXHU2N0U1XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFsnQlInLCAnSFInLCAnUCcsICdESVYnLCAnU1BBTiddLmluY2x1ZGVzKHRhZ05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1OTA0N1x1NTIzMFx1NTE3Nlx1NEVENlx1NTE0M1x1N0QyMFx1RkYwQ1x1NTA1Q1x1NkI2Mlx1NjhDMFx1NjdFNVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTkwNDdcdTUyMzBcdTUxNDNcdTdEMjBcdTgyODJcdTcwQjkgJHt0YWdOYW1lfVx1RkYwQ1x1NTA1Q1x1NkI2Mlx1NjdFNVx1NjI3RWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTUyNERcdTRFMDBcdTRFMkFcdTUxNDRcdTVGMUZcdTgyODJcdTcwQjlcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5XHU2MjdFXHU1MjMwXHVGRjBDXHU1QzFEXHU4QkQ1XHU2OEMwXHU2N0U1XHU3MjM2XHU4MjgyXHU3MEI5XHU3Njg0XHU1MjREXHU0RTAwXHU0RTJBXHU1MTQ0XHU1RjFGXHU4MjgyXHU3MEI5XHJcbiAgICAgICAgICAgIC8vIFx1OEZEOVx1NUJGOVx1NEU4RVx1NTkwNFx1NzQwNlx1NUQ0Q1x1NTk1N1x1NTcyOGRpdlx1NjIxNlx1NTE3Nlx1NEVENlx1NUJCOVx1NTY2OFx1NEUyRFx1NzY4NFx1ODg2OFx1NjgzQ1x1NUY4OFx1NjcwOVx1NzUyOFxyXG4gICAgICAgICAgICBpZiAodGFibGUucGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NUMxRFx1OEJENVx1NjhDMFx1NjdFNVx1NzIzNlx1NTE0M1x1N0QyMFx1NTNDQVx1NTE3Nlx1NTI0RFx1N0Y2RVx1ODI4Mlx1NzBCOS4uLicpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTcyMzZcdTUxNDNcdTdEMjBcdTc2ODRkYXRhLWlkXHU1QzVFXHU2MDI3XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnREYXRhSWQgPSB0YWJsZS5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpIHx8IHRhYmxlLnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50RGF0YUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEVDRVx1NzIzNlx1NTE0M1x1N0QyMFx1NUM1RVx1NjAyN1x1NEUyRFx1NjI3RVx1NTIzMElEOiAke3BhcmVudERhdGFJZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50RGF0YUlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTcyMzZcdTUxNDNcdTdEMjBcdTc2ODRcdTUyNERcdTRFMDBcdTRFMkFcdTUxNDRcdTVGMUZcdTgyODJcdTcwQjlcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZS5wYXJlbnRFbGVtZW50LnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJlbnRQcmV2Tm9kZSA9IHRhYmxlLnBhcmVudEVsZW1lbnQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRQcmV2Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50UHJldk5vZGUubm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50VGV4dCA9IHBhcmVudFByZXZOb2RlLnRleHRDb250ZW50Py50cmltKCkgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1M0QxXHU3M0IwXHU3MjM2XHU1MTQzXHU3RDIwXHU1MjREXHU3Njg0XHU2Q0U4XHU5MUNBXHU4MjgyXHU3MEI5OiBcIiR7Y29tbWVudFRleHR9XCJgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWRNYXRjaCA9IGNvbW1lbnRUZXh0Lm1hdGNoKC90YWJsZVstX10/aWQ6P1xccyooW2EtekEtWjAtOV9cXC06Ll0rKS9pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZE1hdGNoICYmIGlkTWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50SWQgPSBpZE1hdGNoWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTRFQ0VcdTcyMzZcdTUxNDNcdTdEMjBcdTUyNERcdTc2ODRIVE1MXHU2Q0U4XHU5MUNBXHU0RTJEXHU4QkM2XHU1MjJCXHU4ODY4XHU2ODNDSUQ6ICR7Y29tbWVudElkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21tZW50SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50UHJldk5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTY1ODdcdTY3MkNcdTRFMkRcdTY2MkZcdTU0MjZcdTUzMDVcdTU0MkJIVE1MXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Q29udGVudCA9IHBhcmVudFByZXZOb2RlLnRleHRDb250ZW50IHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHRtbENvbW1lbnRNYXRjaCA9IHRleHRDb250ZW50Lm1hdGNoKC88IS0tXFxzKnRhYmxlWy1fXT9pZDo/XFxzKihbYS16QS1aMC05X1xcLTouXSspXFxzKi0tPi9pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChodG1sQ29tbWVudE1hdGNoICYmIGh0bWxDb21tZW50TWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50SWQgPSBodG1sQ29tbWVudE1hdGNoWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTRFQ0VcdTcyMzZcdTUxNDNcdTdEMjBcdTUyNERcdTc2ODRcdTY1ODdcdTY3MkNcdTgyODJcdTcwQjlcdTRFMkRcdThCQzZcdTUyMkJcdTg4NjhcdTY4M0NJRDogJHtjb21tZW50SWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1lbnRJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU3MjM2XHU1MTQzXHU3RDIwXHU3Njg0XHU3MjM2XHU1MTQzXHU3RDIwXHVGRjA4XHU1NDExXHU0RTBBXHU0RTI0XHU3RUE3XHVGRjA5XHJcbiAgICAgICAgICAgICAgICBpZiAodGFibGUucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JhbmRQYXJlbnREYXRhSWQgPSB0YWJsZS5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykgfHwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JhbmRQYXJlbnREYXRhSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEVDRVx1Nzk1Nlx1NzIzNlx1NTE0M1x1N0QyMFx1NUM1RVx1NjAyN1x1NEUyRFx1NjI3RVx1NTIzMElEOiAke2dyYW5kUGFyZW50RGF0YUlkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3JhbmRQYXJlbnREYXRhSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXHU2NzJBXHU1NzI4SFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NEVDRVx1NkNFOFx1OTFDQVx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU0RTNBXHU4ODY4XHU2ODNDXHU2REZCXHU1MkEwSURcdTZDRThcdTkxQ0FcclxuICAgICAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NIVE1MXHU1MTQzXHU3RDIwXHJcbiAgICAgKiBAcGFyYW0gaWQgXHU4ODY4XHU2ODNDSURcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhZGRUYWJsZUlkQ29tbWVudCh0YWJsZTogSFRNTEVsZW1lbnQsIGlkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTcyNzlcdTVGODFcdTRGRTFcdTYwNkZcclxuICAgICAgICAgICAgY29uc3QgdGFibGVGZWF0dXJlID0gdGhpcy5leHRyYWN0VGFibGVGZWF0dXJlKHRhYmxlKTtcclxuICAgICAgICAgICAgY29uc3QgZmVhdHVyZUpzb24gPSBKU09OLnN0cmluZ2lmeSh0YWJsZUZlYXR1cmUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU3NTI4XHU2MjM3XHU2NjJGXHU1NDI2XHU1NDJGXHU3NTI4XHU0RTg2XHU2Q0U4XHU5MUNBXHU1OTM5XHU2QTIxXHU1RjBGXHJcbiAgICAgICAgICAgIGNvbnN0IHVzZVdyYXBwZXJDb21tZW50cyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZVRhYmxlV3JhcHBlckNvbW1lbnRzO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1MTQ4XHU3OUZCXHU5NjY0XHU1REYyXHU2NzA5XHU3Njg0XHU2Q0U4XHU5MUNBXHVGRjA4XHU1OTgyXHU2NzlDXHU1QjU4XHU1NzI4XHVGRjA5XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzTm9kZSA9IHRhYmxlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgaWYgKHByZXZpb3VzTm9kZSAmJiBwcmV2aW91c05vZGUubm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50ID0gcHJldmlvdXNOb2RlLm5vZGVWYWx1ZSB8fCAnJztcclxuICAgICAgICAgICAgICAgIGlmIChjb21tZW50LmluY2x1ZGVzKCd0YWJsZS1pZDonKSB8fCBjb21tZW50LmluY2x1ZGVzKCd0YWJsZS1iZWdpbjonKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZS5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChwcmV2aW91c05vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTg4NjhcdTY4M0NcdTU0MEVcdTk3NjJcdTY2MkZcdTU0MjZcdTY3MDlcdTdFRDNcdTY3NUZcdTZDRThcdTkxQ0FcclxuICAgICAgICAgICAgY29uc3QgbmV4dE5vZGUgPSB0YWJsZS5uZXh0U2libGluZztcclxuICAgICAgICAgICAgaWYgKG5leHROb2RlICYmIG5leHROb2RlLm5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWVudCA9IG5leHROb2RlLm5vZGVWYWx1ZSB8fCAnJztcclxuICAgICAgICAgICAgICAgIGlmIChjb21tZW50LmluY2x1ZGVzKCd0YWJsZS1lbmQ6JykgfHwgY29tbWVudC5pbmNsdWRlcygndGFibGUtaWQtZW5kOicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQobmV4dE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodXNlV3JhcHBlckNvbW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTVGMDBcdTU5Q0JcdTZDRThcdTkxQ0FcdTgyODJcdTcwQjlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJlZ2luQ29tbWVudENvbnRlbnQgPSBgdGFibGUtYmVnaW46ICR7aWR9IGZlYXR1cmU6ICR7ZmVhdHVyZUpzb259YDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJlZ2luQ29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoYCAke2JlZ2luQ29tbWVudENvbnRlbnR9IGApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTdFRDNcdTY3NUZcdTZDRThcdTkxQ0FcdTgyODJcdTcwQjlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVuZENvbW1lbnRDb250ZW50ID0gYHRhYmxlLWVuZDogJHtpZH1gO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZW5kQ29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoYCAke2VuZENvbW1lbnRDb250ZW50fSBgKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU2M0QyXHU1MTY1XHU1RjAwXHU1OUNCXHU2Q0U4XHU5MUNBXHU4MjgyXHU3MEI5XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUoYmVnaW5Db21tZW50LCB0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NjNEMlx1NTE2NVx1N0VEM1x1Njc1Rlx1NkNFOFx1OTFDQVx1ODI4Mlx1NzBCOVx1RkYwOFx1NTcyOFx1ODg2OFx1NjgzQ1x1NTQwRVx1OTc2Mlx1RkYwOVxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlLm5leHRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKGVuZENvbW1lbnQsIHRhYmxlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUucGFyZW50Tm9kZT8uYXBwZW5kQ2hpbGQoZW5kQ29tbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVERjJcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBcdTZDRThcdTkxQ0FcdTU5Mzk6ICR7aWR9IFx1NzI3OVx1NUY4MTpgLCB0YWJsZUZlYXR1cmUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU0RjIwXHU3RURGXHU3Njg0XHU1MzU1XHU0RTAwXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY1QjBcdTc2ODRcdTZDRThcdTkxQ0FcdTgyODJcdTcwQjkgLSBcdTUzMDVcdTU0MkJcdTg4NjhcdTY4M0NcdTcyNzlcdTVGODFcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1lbnRDb250ZW50ID0gYHRhYmxlLWlkOiAke2lkfSBmZWF0dXJlOiAke2ZlYXR1cmVKc29ufWA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21tZW50ID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChgICR7Y29tbWVudENvbnRlbnR9IGApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTYzRDJcdTUxNjVcdTZDRThcdTkxQ0FcdTgyODJcdTcwQjlcclxuICAgICAgICAgICAgICAgIHRhYmxlLnBhcmVudE5vZGU/Lmluc2VydEJlZm9yZShjb21tZW50LCB0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVERjJcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBJRFx1NkNFOFx1OTFDQTogJHtpZH0gXHU3Mjc5XHU1RjgxOmAsIHRhYmxlRmVhdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEJCRVx1N0Y2RVx1ODg2OFx1NjgzQ1x1NUM1RVx1NjAyN1xyXG4gICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnLCBpZCk7XHJcbiAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1mZWF0dXJlJywgSlNPTi5zdHJpbmdpZnkodGFibGVGZWF0dXJlKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBcdTVERjJcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBJRDogJHtpZH1gKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTZERkJcdTUyQTBcdTg4NjhcdTY4M0NJRFx1NkNFOFx1OTFDQVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxXHJcbiAgICAgKiBAcGFyYW0gdGFibGUgXHU4ODY4XHU2ODNDSFRNTFx1NTE0M1x1N0QyMFx1NjIxNk1hcmtkb3duXHU1QjU3XHU3QjI2XHU0RTMyXHJcbiAgICAgKiBAcmV0dXJucyBcdTg4NjhcdTY4M0NcdTcyNzlcdTVGODFcdTVCRjlcdThDNjFcclxuICAgICAqL1xyXG4gICAgcHVibGljIGV4dHJhY3RUYWJsZUZlYXR1cmUodGFibGU6IEhUTUxFbGVtZW50IHwgc3RyaW5nKTogVGFibGVGZWF0dXJlIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgcm93cyA9IDA7XHJcbiAgICAgICAgICAgIGxldCBjb2xzID0gMDtcclxuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSAnJztcclxuICAgICAgICAgICAgbGV0IGZpcnN0Um93Q29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICBsZXQgbGFzdFJvd0NvbnRlbnQgPSAnJztcclxuICAgICAgICAgICAgbGV0IG1lcmdlUGF0dGVybiA9ICcnO1xyXG4gICAgICAgICAgICBsZXQgcG9zaXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGxldCBmaWxlSW5mbyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NkQzQlx1NTJBOFx1NjU4N1x1NEVGNlx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5nZXRBcHAoKS53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsZUluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYWN0aXZlRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGFjdGl2ZUZpbGUuYmFzZW5hbWVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFibGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTRFQ0VNYXJrZG93blx1NUI1N1x1N0IyNlx1NEUzMlx1NjNEMFx1NTNENlx1NzI3OVx1NUY4MVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSB0YWJsZS5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJsZUxpbmVzID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gbGluZS50cmltKCkuc3RhcnRzV2l0aCgnfCcpKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcm93cyA9IHRhYmxlTGluZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJvd3MgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB0YWJsZUxpbmVzWzBdLnNwbGl0KCd8JykuZmlsdGVyKGNlbGwgPT4gY2VsbC50cmltKCkgIT09ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xzID0gY2VsbHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSBjZWxscy5tYXAoYyA9PiBjLnRyaW0oKSkuam9pbignLScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Um93Q29udGVudCA9IHRhYmxlTGluZXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJvd0NvbnRlbnQgPSB0YWJsZUxpbmVzW3Jvd3MgLSAxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbWVyZ2VQYXR0ZXJuID0gdGhpcy5leHRyYWN0TWVyZ2VQYXR0ZXJuKHRhYmxlTGluZXMpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTVDMURcdThCRDVcdTYyN0VcdTUxRkFcdTg4NjhcdTY4M0NcdTU3MjhcdTY1ODdcdTY4NjNcdTRFMkRcdTc2ODRcdTRGNERcdTdGNkVcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0TGluZUluZGV4ID0gbGluZXMuZmluZEluZGV4KGxpbmUgPT4gbGluZSA9PT0gdGFibGVMaW5lc1swXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RMaW5lSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydExpbmU6IGZpcnN0TGluZUluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRMaW5lOiBmaXJzdExpbmVJbmRleCArIHJvd3MgLSAxXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NEVDRURPTVx1NTE0M1x1N0QyMFx1NjNEMFx1NTNENlx1NzI3OVx1NUY4MVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFibGVSb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICAgICAgICAgIHJvd3MgPSB0YWJsZVJvd3MubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAocm93cyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFJvd0NlbGxzID0gdGFibGVSb3dzWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLCB0ZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHMgPSBmaXJzdFJvd0NlbGxzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gQXJyYXkuZnJvbShmaXJzdFJvd0NlbGxzKS5tYXAoY2VsbCA9PiBjZWxsLnRleHRDb250ZW50Py50cmltKCkgfHwgJycpLmpvaW4oJy0nKTtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdFJvd0NvbnRlbnQgPSB0YWJsZVJvd3NbMF0udGV4dENvbnRlbnQgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJvd0NvbnRlbnQgPSB0YWJsZVJvd3Nbcm93cyAtIDFdLnRleHRDb250ZW50IHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBtZXJnZVBhdHRlcm4gPSB0aGlzLmV4dHJhY3RNZXJnZVBhdHRlckZyb21ET00odGFibGUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTVDMURcdThCRDVcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcdUZGMDhcdTU5ODJcdTY3OUNcdTVERjJcdTVCNThcdTUwQThcdTU3MjhkYXRhXHU1QzVFXHU2MDI3XHU0RTJEXHVGRjA5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkRhdGEgPSB0YWJsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtcG9zaXRpb24nKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbkRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IEpTT04ucGFyc2UocG9zaXRpb25EYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODlFM1x1Njc5MFx1ODg2OFx1NjgzQ1x1NEY0RFx1N0Y2RVx1NjU3MFx1NjM2RVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICByb3dzLFxyXG4gICAgICAgICAgICAgICAgY29scyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBmaXJzdFJvd0NvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBsYXN0Um93Q29udGVudCxcclxuICAgICAgICAgICAgICAgIG1lcmdlUGF0dGVybixcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgZmlsZUluZm9cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTYzRDBcdTUzRDZcdTg4NjhcdTY4M0NcdTcyNzlcdTVGODFcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcm93czogMCxcclxuICAgICAgICAgICAgICAgIGNvbHM6IDAsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiAnJyxcclxuICAgICAgICAgICAgICAgIGZpcnN0Um93Q29udGVudDogJycsXHJcbiAgICAgICAgICAgICAgICBsYXN0Um93Q29udGVudDogJycsXHJcbiAgICAgICAgICAgICAgICBtZXJnZVBhdHRlcm46ICcnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU0RUNFTWFya2Rvd25cdTUxODVcdTVCQjlcdTRFMkRcdTYzRDBcdTUzRDZcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTZBMjFcdTVGMEZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBleHRyYWN0TWVyZ2VQYXR0ZXJuKGxpbmVzOiBzdHJpbmdbXSk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHBhdHRlcm4gPSAnJztcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdThCQjBcdTVGNTUgXiBcdTU0OEMgPCBcdTdCMjZcdTUzRjdcdTc2ODRcdTRGNERcdTdGNkVcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSBsaW5lLnNwbGl0KCd8JykuZmlsdGVyKGNlbGwgPT4gY2VsbC50cmltKCkgIT09ICcnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2VsbHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBjZWxsc1tqXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2VsbCA9PT0gJ14nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiArPSBgXiR7aX0tJHtqfTtgO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjZWxsID09PSAnPCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGA8JHtpfS0ke2p9O2A7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTRFQ0VET01cdTRFMkRcdTYzRDBcdTUzRDZcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTZBMjFcdTVGMEZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBleHRyYWN0TWVyZ2VQYXR0ZXJGcm9tRE9NKHRhYmxlOiBIVE1MRWxlbWVudCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHBhdHRlcm4gPSAnJztcclxuICAgICAgICBjb25zdCByb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSByb3dzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLCB0ZCcpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNlbGxzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY2VsbHNbal07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3dzcGFuID0gY2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvd3NwYW4nKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbHNwYW4gPSBjZWxsLmdldEF0dHJpYnV0ZSgnY29sc3BhbicpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAocm93c3BhbiAmJiBwYXJzZUludChyb3dzcGFuKSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGByJHtpfS0ke2p9LSR7cm93c3Bhbn07YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb2xzcGFuICYmIHBhcnNlSW50KGNvbHNwYW4pID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gYGMke2l9LSR7an0tJHtjb2xzcGFufTtgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBwYXR0ZXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4QkExXHU3Qjk3XHU0RTI0XHU0RTJBXHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxXHU3Njg0XHU3NkY4XHU0RjNDXHU1RUE2XHJcbiAgICAgKiBAcGFyYW0gZmVhdHVyZTEgXHU3QjJDXHU0RTAwXHU0RTJBXHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxXHJcbiAgICAgKiBAcGFyYW0gZmVhdHVyZTIgXHU3QjJDXHU0RThDXHU0RTJBXHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxXHJcbiAgICAgKiBAcmV0dXJucyBcdTc2RjhcdTRGM0NcdTVFQTZcdTUyMDZcdTY1NzBcdUZGMDgwLTFcdTRFNEJcdTk1RjRcdUZGMDlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhbGN1bGF0ZUZlYXR1cmVTaW1pbGFyaXR5KGZlYXR1cmUxOiBUYWJsZUZlYXR1cmUsIGZlYXR1cmUyOiBUYWJsZUZlYXR1cmUpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICghZmVhdHVyZTEgfHwgIWZlYXR1cmUyKSByZXR1cm4gMDtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgc2NvcmUgPSAwO1xyXG4gICAgICAgIGxldCB0b3RhbFdlaWdodCA9IDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gMS4gXHU2NTg3XHU0RUY2XHU4REVGXHU1Rjg0XHU1MzM5XHU5MTREIC0gXHU2NzAwXHU5QUQ4XHU2NzQzXHU5MUNEXHJcbiAgICAgICAgY29uc3QgcGF0aFdlaWdodCA9IDU7XHJcbiAgICAgICAgaWYgKGZlYXR1cmUxLmZpbGVJbmZvPy5wYXRoICYmIGZlYXR1cmUyLmZpbGVJbmZvPy5wYXRoICYmIFxyXG4gICAgICAgICAgICBmZWF0dXJlMS5maWxlSW5mby5wYXRoID09PSBmZWF0dXJlMi5maWxlSW5mby5wYXRoKSB7XHJcbiAgICAgICAgICAgIHNjb3JlICs9IHBhdGhXZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdGFsV2VpZ2h0ICs9IHBhdGhXZWlnaHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gMi4gXHU3RUQzXHU2Nzg0XHU3NkY4XHU0RjNDXHU1RUE2XHVGRjA4XHU4ODRDXHU1MjE3XHU2NTcwXHVGRjA5LSBcdTY3NDNcdTkxQ0RcdThGODNcdTlBRDhcclxuICAgICAgICBjb25zdCByb3dXZWlnaHQgPSAzO1xyXG4gICAgICAgIGNvbnN0IGNvbFdlaWdodCA9IDM7XHJcbiAgICAgICAgaWYgKGZlYXR1cmUxLnJvd3MgPT09IGZlYXR1cmUyLnJvd3MpIHtcclxuICAgICAgICAgICAgc2NvcmUgKz0gcm93V2VpZ2h0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFx1OTBFOFx1NTIwNlx1NTMzOVx1OTE0RFx1RkYwQ1x1ODg0Q1x1NjU3MFx1NzZGOFx1NURFRVx1NEUwRFx1OEQ4NVx1OEZDNzFcdTRFNUZcdTdFRDlcdTkwRThcdTUyMDZcdTUyMDZcdTY1NzBcclxuICAgICAgICAgICAgY29uc3Qgcm93RGlmZiA9IE1hdGguYWJzKGZlYXR1cmUxLnJvd3MgLSBmZWF0dXJlMi5yb3dzKTtcclxuICAgICAgICAgICAgaWYgKHJvd0RpZmYgPD0gMSkgc2NvcmUgKz0gcm93V2VpZ2h0ICogKDEgLSByb3dEaWZmIC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdGFsV2VpZ2h0ICs9IHJvd1dlaWdodDtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoZmVhdHVyZTEuY29scyA9PT0gZmVhdHVyZTIuY29scykge1xyXG4gICAgICAgICAgICBzY29yZSArPSBjb2xXZWlnaHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gXHU5MEU4XHU1MjA2XHU1MzM5XHU5MTREXHVGRjBDXHU1MjE3XHU2NTcwXHU3NkY4XHU1REVFXHU0RTBEXHU4RDg1XHU4RkM3MVx1NEU1Rlx1N0VEOVx1OTBFOFx1NTIwNlx1NTIwNlx1NjU3MFxyXG4gICAgICAgICAgICBjb25zdCBjb2xEaWZmID0gTWF0aC5hYnMoZmVhdHVyZTEuY29scyAtIGZlYXR1cmUyLmNvbHMpO1xyXG4gICAgICAgICAgICBpZiAoY29sRGlmZiA8PSAxKSBzY29yZSArPSBjb2xXZWlnaHQgKiAoMSAtIGNvbERpZmYgLyAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG90YWxXZWlnaHQgKz0gY29sV2VpZ2h0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIDMuIFx1ODg2OFx1NTkzNFx1NTE4NVx1NUJCOVx1NzZGOFx1NEYzQ1x1NUVBNiAtIFx1Njc0M1x1OTFDRFx1OUFEOFxyXG4gICAgICAgIGNvbnN0IGhlYWRlcldlaWdodCA9IDQ7XHJcbiAgICAgICAgaWYgKGZlYXR1cmUxLmhlYWRlcnMgJiYgZmVhdHVyZTIuaGVhZGVycykge1xyXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJTaW1pbGFyaXR5ID0gdGhpcy5jYWxjdWxhdGVUZXh0U2ltaWxhcml0eShmZWF0dXJlMS5oZWFkZXJzLCBmZWF0dXJlMi5oZWFkZXJzKTtcclxuICAgICAgICAgICAgc2NvcmUgKz0gaGVhZGVyV2VpZ2h0ICogaGVhZGVyU2ltaWxhcml0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG90YWxXZWlnaHQgKz0gaGVhZGVyV2VpZ2h0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIDQuIFx1NEY0RFx1N0Y2RVx1NzZGOFx1NEYzQ1x1NUVBNiAtIFx1Njc0M1x1OTFDRFx1NEUyRFxyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uV2VpZ2h0ID0gMjtcclxuICAgICAgICBpZiAoZmVhdHVyZTEucG9zaXRpb24gJiYgZmVhdHVyZTIucG9zaXRpb24pIHtcclxuICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU4RDc3XHU1OUNCXHU4ODRDXHU3NkY4XHU1NDBDXHU2MjE2XHU3NkY4XHU1REVFXHU0RTBEXHU1OTI3XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0TGluZURpZmYgPSBNYXRoLmFicyhmZWF0dXJlMS5wb3NpdGlvbi5zdGFydExpbmUgLSBmZWF0dXJlMi5wb3NpdGlvbi5zdGFydExpbmUpO1xyXG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvblNpbWlsYXJpdHkgPSBNYXRoLm1heCgwLCAxIC0gc3RhcnRMaW5lRGlmZiAvIDEwKTsgLy8gXHU2NzAwXHU1OTFBXHU1MTQxXHU4QkI4XHU3NkY4XHU1REVFMTBcdTg4NENcclxuICAgICAgICAgICAgc2NvcmUgKz0gcG9zaXRpb25XZWlnaHQgKiBwb3NpdGlvblNpbWlsYXJpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdGFsV2VpZ2h0ICs9IHBvc2l0aW9uV2VpZ2h0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIDUuIFx1OTk5Nlx1ODg0Q1x1NTE4NVx1NUJCOVx1NzZGOFx1NEYzQ1x1NUVBNiAtIFx1Njc0M1x1OTFDRFx1NEUyRFxyXG4gICAgICAgIGNvbnN0IGZpcnN0Um93V2VpZ2h0ID0gMjtcclxuICAgICAgICBpZiAoZmVhdHVyZTEuZmlyc3RSb3dDb250ZW50ICYmIGZlYXR1cmUyLmZpcnN0Um93Q29udGVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdFJvd1NpbWlsYXJpdHkgPSB0aGlzLmNhbGN1bGF0ZVRleHRTaW1pbGFyaXR5KFxyXG4gICAgICAgICAgICAgICAgZmVhdHVyZTEuZmlyc3RSb3dDb250ZW50LFxyXG4gICAgICAgICAgICAgICAgZmVhdHVyZTIuZmlyc3RSb3dDb250ZW50XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHNjb3JlICs9IGZpcnN0Um93V2VpZ2h0ICogZmlyc3RSb3dTaW1pbGFyaXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0b3RhbFdlaWdodCArPSBmaXJzdFJvd1dlaWdodDtcclxuICAgICAgICBcclxuICAgICAgICAvLyA2LiBcdTY3MkJcdTg4NENcdTUxODVcdTVCQjlcdTc2RjhcdTRGM0NcdTVFQTYgLSBcdTY3NDNcdTkxQ0RcdTRFMkRcclxuICAgICAgICBjb25zdCBsYXN0Um93V2VpZ2h0ID0gMjtcclxuICAgICAgICBpZiAoZmVhdHVyZTEubGFzdFJvd0NvbnRlbnQgJiYgZmVhdHVyZTIubGFzdFJvd0NvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgbGFzdFJvd1NpbWlsYXJpdHkgPSB0aGlzLmNhbGN1bGF0ZVRleHRTaW1pbGFyaXR5KFxyXG4gICAgICAgICAgICAgICAgZmVhdHVyZTEubGFzdFJvd0NvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBmZWF0dXJlMi5sYXN0Um93Q29udGVudFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBzY29yZSArPSBsYXN0Um93V2VpZ2h0ICogbGFzdFJvd1NpbWlsYXJpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdGFsV2VpZ2h0ICs9IGxhc3RSb3dXZWlnaHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gNy4gXHU1NDA4XHU1RTc2XHU2QTIxXHU1RjBGXHU3NkY4XHU0RjNDXHU1RUE2IC0gXHU2NzQzXHU5MUNEXHU0RjRFXHJcbiAgICAgICAgY29uc3QgbWVyZ2VXZWlnaHQgPSAxO1xyXG4gICAgICAgIGlmIChmZWF0dXJlMS5tZXJnZVBhdHRlcm4gJiYgZmVhdHVyZTIubWVyZ2VQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlU2ltaWxhcml0eSA9IHRoaXMuY2FsY3VsYXRlVGV4dFNpbWlsYXJpdHkoXHJcbiAgICAgICAgICAgICAgICBmZWF0dXJlMS5tZXJnZVBhdHRlcm4sXHJcbiAgICAgICAgICAgICAgICBmZWF0dXJlMi5tZXJnZVBhdHRlcm5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgc2NvcmUgKz0gbWVyZ2VXZWlnaHQgKiBtZXJnZVNpbWlsYXJpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdGFsV2VpZ2h0ICs9IG1lcmdlV2VpZ2h0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NjcwMFx1N0VDOFx1NzZGOFx1NEYzQ1x1NUVBNlx1NTIwNlx1NjU3MFx1RkYwODAtMVx1NEU0Qlx1OTVGNFx1RkYwOVxyXG4gICAgICAgIGNvbnN0IHNpbWlsYXJpdHkgPSB0b3RhbFdlaWdodCA+IDAgPyBzY29yZSAvIHRvdGFsV2VpZ2h0IDogMDtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhgXHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxXHU3NkY4XHU0RjNDXHU1RUE2OiAke3NpbWlsYXJpdHkudG9GaXhlZCgyKX1gKTtcclxuICAgICAgICByZXR1cm4gc2ltaWxhcml0eTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdThCQTFcdTdCOTdcdTRFMjRcdTRFMkFcdTY1ODdcdTY3MkNcdTc2ODRcdTc2RjhcdTRGM0NcdTVFQTZcclxuICAgICAqIEBwYXJhbSBzdHIxIFx1N0IyQ1x1NEUwMFx1NEUyQVx1NjU4N1x1NjcyQ1xyXG4gICAgICogQHBhcmFtIHN0cjIgXHU3QjJDXHU0RThDXHU0RTJBXHU2NTg3XHU2NzJDXHJcbiAgICAgKiBAcmV0dXJucyBcdTc2RjhcdTRGM0NcdTVFQTZcdTUyMDZcdTY1NzBcdUZGMDgwLTFcdTRFNEJcdTk1RjRcdUZGMDlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVUZXh0U2ltaWxhcml0eShzdHIxOiBzdHJpbmcsIHN0cjI6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKCFzdHIxIHx8ICFzdHIyKSByZXR1cm4gMDtcclxuICAgICAgICBpZiAoc3RyMSA9PT0gc3RyMikgcmV0dXJuIDE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU3QjgwXHU1MzU1XHU3Njg0XHU2NTg3XHU2NzJDXHU3NkY4XHU0RjNDXHU1RUE2XHU4QkExXHU3Qjk3XHVGRjA4XHU0RTBEXHU0RjdGXHU3NTI4XHU1NEM4XHU1RTBDXHVGRjA5XHJcbiAgICAgICAgY29uc3QgbWF4TGVuID0gTWF0aC5tYXgoc3RyMS5sZW5ndGgsIHN0cjIubGVuZ3RoKTtcclxuICAgICAgICBpZiAobWF4TGVuID09PSAwKSByZXR1cm4gMTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgbWF0Y2hlcyA9IDA7XHJcbiAgICAgICAgY29uc3QgbWluTGVuID0gTWF0aC5taW4oc3RyMS5sZW5ndGgsIHN0cjIubGVuZ3RoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdThCQTFcdTdCOTdcdTUxNzFcdTU0MENcdTUyNERcdTdGMDBcdTk1N0ZcdTVFQTZcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pbkxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzdHIxW2ldID09PSBzdHIyW2ldKSBtYXRjaGVzKys7XHJcbiAgICAgICAgICAgIGVsc2UgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NTE3MVx1NTQwQ1x1NTQwRVx1N0YwMFx1OTU3Rlx1NUVBNlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IG1pbkxlbiAtIG1hdGNoZXM7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3RyMVtzdHIxLmxlbmd0aCAtIGldID09PSBzdHIyW3N0cjIubGVuZ3RoIC0gaV0pIG1hdGNoZXMrKztcclxuICAgICAgICAgICAgZWxzZSBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU0RTBEXHU4RDg1XHU4RkM3bWluTGVuXHJcbiAgICAgICAgbWF0Y2hlcyA9IE1hdGgubWluKG1hdGNoZXMsIG1pbkxlbik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXMgLyBtYXhMZW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTU3MjhET01cdTRFMkRcdTc2ODRcdTRGNERcdTdGNkVcclxuICAgICAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcclxuICAgICAqIEByZXR1cm5zIFx1ODg2OFx1NjgzQ1x1NEY0RFx1N0Y2RVx1NEZFMVx1NjA2Rlx1NjIxNm51bGxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRUYWJsZVBvc2l0aW9uSW5ET00odGFibGU6IEhUTUxFbGVtZW50KTogeyBpbmRleDogbnVtYmVyLCBpZD86IHN0cmluZyB9IHwgbnVsbCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4OUM2XHU1NkZFXHU0RTJEXHU3Njg0XHU2MjQwXHU2NzA5XHU4ODY4XHU2ODNDXHJcbiAgICAgICAgICAgIGNvbnN0IGFsbFRhYmxlcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGFibGUnKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyAxLiBcdTk5OTZcdTUxNDhcdTVDMURcdThCRDVcdTkwMUFcdThGQzdJRFx1NzZGNFx1NjNBNVx1NTMzOVx1OTE0RFxyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUlkID0gdGFibGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJyk7XHJcbiAgICAgICAgICAgIGlmICh0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTY3RTVcdTYyN0VcdTUxNzdcdTY3MDlcdTc2RjhcdTU0MENJRFx1NzY4NFx1ODg2OFx1NjgzQ1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxUYWJsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50SWQgPSBhbGxUYWJsZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJZCA9PT0gdGFibGVJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU5MDFBXHU4RkM3SURcdTUzMzlcdTkxNERcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NcdTRGNERcdTdGNkU6IFx1N0IyQyR7aX1cdTRFMkFcdTg4NjhcdTY4M0NcdUZGMDhJRDogJHt0YWJsZUlkfVx1RkYwOWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBpbmRleDogaSwgaWQ6IHRhYmxlSWQgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIDIuIFx1NjNEMFx1NTNENlx1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ1x1NzY4NFx1NzI3OVx1NUY4MVxyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUZlYXR1cmUgPSB0aGlzLmV4dHJhY3RUYWJsZUZlYXR1cmUodGFibGUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gMy4gXHU1QzFEXHU4QkQ1XHU5MDFBXHU4RkM3XHU3Mjc5XHU1RjgxXHU3Q0JFXHU3ODZFXHU1MzM5XHU5MTREXHJcbiAgICAgICAgICAgIGlmICh0YWJsZUZlYXR1cmUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsVGFibGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEZlYXR1cmUgPSB0aGlzLmV4dHJhY3RUYWJsZUZlYXR1cmUoYWxsVGFibGVzW2ldIGFzIEhUTUxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTcyNzlcdTVGODFcdTY2MkZcdTU0MjZcdTVCOENcdTUxNjhcdTUzMzlcdTkxNERcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVGZWF0dXJlLmNvbnRlbnRIYXNoID09PSBjdXJyZW50RmVhdHVyZS5jb250ZW50SGFzaCAmJiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVGZWF0dXJlLmhlYWRlcnMgPT09IGN1cnJlbnRGZWF0dXJlLmhlYWRlcnMgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVGZWF0dXJlLnJvd3MgPT09IGN1cnJlbnRGZWF0dXJlLnJvd3MgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVGZWF0dXJlLmNvbHMgPT09IGN1cnJlbnRGZWF0dXJlLmNvbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OTAxQVx1OEZDN1x1NzI3OVx1NUY4MVx1N0NCRVx1Nzg2RVx1NTMzOVx1OTE0RFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ1x1NEY0RFx1N0Y2RTogXHU3QjJDJHtpfVx1NEUyQVx1ODg2OFx1NjgzQ2ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBpbmRleDogaSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gNC4gXHU1QzFEXHU4QkQ1XHU5MDFBXHU4RkM3XHU3Mjc5XHU1RjgxXHU3NkY4XHU0RjNDXHU1RUE2XHU1MzM5XHU5MTREXHJcbiAgICAgICAgICAgIGxldCBiZXN0TWF0Y2hJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICBsZXQgYmVzdE1hdGNoU2NvcmUgPSAwO1xyXG4gICAgICAgICAgICBsZXQgYmVzdE1hdGNoSWQgPSAnJztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsVGFibGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VGFibGUgPSBhbGxUYWJsZXNbaV0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50RmVhdHVyZSA9IHRoaXMuZXh0cmFjdFRhYmxlRmVhdHVyZShjdXJyZW50VGFibGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudElkID0gY3VycmVudFRhYmxlLmdldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaW1pbGFyaXR5U2NvcmUgPSB0aGlzLmNhbGN1bGF0ZUZlYXR1cmVTaW1pbGFyaXR5KHRhYmxlRmVhdHVyZSwgY3VycmVudEZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoc2ltaWxhcml0eVNjb3JlID4gYmVzdE1hdGNoU2NvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2hTY29yZSA9IHNpbWlsYXJpdHlTY29yZTtcclxuICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2hJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoSWQgPSBjdXJyZW50SWQgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChiZXN0TWF0Y2hJbmRleCAhPT0gLTEgJiYgYmVzdE1hdGNoU2NvcmUgPiAwLjcpIHsgLy8gNzAlXHU3NkY4XHU0RjNDXHU1RUE2XHU5NjA4XHU1MDNDXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU5MDFBXHU4RkM3XHU3Mjc5XHU1RjgxXHU3NkY4XHU0RjNDXHU1RUE2XHU1MzM5XHU5MTREXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDXHU0RjREXHU3RjZFOiBcdTdCMkMke2Jlc3RNYXRjaEluZGV4fVx1NEUyQVx1ODg2OFx1NjgzQ1x1RkYwOFx1NzZGOFx1NEYzQ1x1NUVBNjogJHtiZXN0TWF0Y2hTY29yZS50b0ZpeGVkKDIpfVx1RkYwOWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgaW5kZXg6IGJlc3RNYXRjaEluZGV4LCBpZDogYmVzdE1hdGNoSWQgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gNS4gXHU2NzAwXHU1NDBFXHU2MjREXHU1NkRFXHU5MDAwXHU1MjMwXHU3QjgwXHU1MzU1XHU3Njg0XHU3RDIyXHU1RjE1XHU1MzM5XHU5MTREXHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWxsVGFibGVzLmluZGV4T2YodGFibGUgYXMgSFRNTFRhYmxlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU4ODY4XHU2ODNDXHU1NzI4RE9NXHU0RTJEXHU3Njg0XHU0RjREXHU3RjZFOiBcdTdCMkMke2luZGV4fVx1NEUyQVx1ODg2OFx1NjgzQ1x1RkYwOFx1NTE3MSR7YWxsVGFibGVzLmxlbmd0aH1cdTRFMkFcdUZGMDlgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGluZGV4IH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignXHU2NUUwXHU2Q0Q1XHU3ODZFXHU1QjlBXHU4ODY4XHU2ODNDXHU1NzI4RE9NXHU0RTJEXHU3Njg0XHU0RjREXHU3RjZFJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ1x1NEY0RFx1N0Y2RVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1OEJBMVx1N0I5N1x1NUI1N1x1N0IyNlx1NEUzMlx1NzY4NFx1N0I4MFx1NTM1NVx1NTRDOFx1NUUwQ1x1NTAzQ1xyXG4gICAgICogQHBhcmFtIHN0ciBcdThGOTNcdTUxNjVcdTVCNTdcdTdCMjZcdTRFMzJcclxuICAgICAqIEByZXR1cm5zIFx1NTRDOFx1NUUwQ1x1NTAzQ1x1NUI1N1x1N0IyNlx1NEUzMlxyXG4gICAgICovXHJcbiAgICBzaW1wbGVIYXNoKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgaGFzaCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaGFyO1xyXG4gICAgICAgICAgICBoYXNoID0gaGFzaCAmIGhhc2g7IC8vIFx1OEY2Q1x1NjM2Mlx1NEUzQTMyYml0XHU2NTc0XHU2NTcwXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLmFicyhoYXNoKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDAsIDgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU3ODZFXHU0RkREXHU4ODY4XHU2ODNDXHU2NzA5SURcdUZGMENcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlcdTUyMTlcdTUyMUJcdTVFRkFcdTRFMDBcdTRFMkFcclxuICAgICAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcclxuICAgICAqIEBwYXJhbSBhdXRvQ3JlYXRlIFx1NjYyRlx1NTQyNlx1ODFFQVx1NTJBOFx1NTIxQlx1NUVGQUlEXHVGRjA4XHU0RTBEXHU2M0E4XHU4MzUwXHVGRjBDXHU1RTk0XHU0RjdGXHU3NTI4Y29uZmlybUFuZENyZWF0ZVRhYmxlSWRcdUZGMDlcclxuICAgICAqIEByZXR1cm5zIFx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgKi9cclxuICAgIGVuc3VyZVRhYmxlSGFzSWQodGFibGU6IEhUTUxFbGVtZW50LCBhdXRvQ3JlYXRlOiBib29sZWFuID0gZmFsc2UpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICghdGFibGUpIHJldHVybiAnJztcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZJRFx1RkYwQ1x1NTE0MVx1OEJCOFx1NTZERVx1OTAwMFx1NTIzMERPTVx1NUM1RVx1NjAyN0lEXHJcbiAgICAgICAgY29uc3QgdGFibGVJZCA9IHRoaXMuZ2V0VGFibGVJZGVudGlmaWVyKHRhYmxlLCB0cnVlKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTY3MDlJRFx1RkYwQ1x1Nzg2RVx1NEZERFx1ODg2OFx1NjgzQ1x1NjcwOVx1NjU3MFx1NjM2RVx1NUM1RVx1NjAyN1xyXG4gICAgICAgIGlmICh0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGFibGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWlkJykpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcsIHRhYmxlSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0YWJsZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlJRFx1NEUxNFx1NTE0MVx1OEJCOFx1ODFFQVx1NTJBOFx1NTIxQlx1NUVGQVxyXG4gICAgICAgIGlmIChhdXRvQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NJRFx1RkYwQ1x1ODFFQVx1NTJBOFx1NTIxQlx1NUVGQVx1NjVCMElEJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpcm1BbmRDcmVhdGVUYWJsZUlkKHRhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5SURcdTRFMTRcdTRFMERcdTUxNDFcdThCQjhcdTgxRUFcdTUyQThcdTUyMUJcdTVFRkFcclxuICAgICAgICBjb25zb2xlLmxvZygnXHU2NzJBXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSURcdUZGMENcdTRFMERcdTgxRUFcdTUyQThcdTUyMUJcdTVFRkFJRCcpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTc1MUZcdTYyMTBcdTU1MkZcdTRFMDBcdTc2ODRcdTg4NjhcdTY4M0NJRFxyXG4gICAgICogQHJldHVybnMgXHU4ODY4XHU2ODNDSURcdTVCNTdcdTdCMjZcdTRFMzJcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVUYWJsZUlkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWRQcmVmaXggfHwgJ3RibCc7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTY1RTVcdTY3MUZcdTRGNUNcdTRFM0FJRFx1NzY4NFx1NEUwMFx1OTBFOFx1NTIwNlxyXG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgICAgICAgY29uc3QgbW9udGggPSBTdHJpbmcoZGF0ZS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgICAgICAgICAgY29uc3QgZGF5ID0gU3RyaW5nKGRhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU2NTg3XHU0RUY2XHU0RkUxXHU2MDZGXHU0RjVDXHU0RTNBSURcdTc2ODRcdTRFMDBcdTkwRThcdTUyMDZcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuZ2V0QXBwKCkud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICAgICAgbGV0IGZpbGVDb2RlID0gJ2RvYyc7XHJcbiAgICAgICAgICAgIGlmIChhY3RpdmVGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTY1ODdcdTRFRjZcdTU0MERcdTc2ODRcdTUyNERcdTRFMjRcdTRFMkFcdTVCNTdcdTdCMjZcdUZGMDhcdTU5ODJcdTY3OUNcdTUzRUZcdTc1MjhcdUZGMDlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gYWN0aXZlRmlsZS5iYXNlbmFtZTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlTmFtZSAmJiBmaWxlTmFtZS5sZW5ndGggPj0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVDb2RlID0gZmlsZU5hbWUuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NEY3Rlx1NzUyOFx1OTY4Rlx1NjczQVx1NUI1N1x1N0IyNlx1NEUzMlx1RkYwQ1x1NEY0Nlx1NEUwRFx1NEY3Rlx1NzUyOFx1NTRDOFx1NUUwQ1xyXG4gICAgICAgICAgICBjb25zdCByYW5kb21DaGFycyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eic7XHJcbiAgICAgICAgICAgIGxldCByYW5kb21TdHIgPSAnJztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJhbmRvbVN0ciArPSByYW5kb21DaGFycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZG9tQ2hhcnMubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1N0VDNFx1NTQwOElEOiBcdTUyNERcdTdGMDAtXHU2NUU1XHU2NzFGLVx1NjU4N1x1NEVGNlx1NEVFM1x1NzgwMS1cdTk2OEZcdTY3M0FcdTVCNTdcdTdCMjZcdTRFMzJcclxuICAgICAgICAgICAgY29uc3QgdGFibGVJZCA9IGAke3ByZWZpeH0tJHt5ZWFyfSR7bW9udGh9JHtkYXl9LSR7ZmlsZUNvZGV9JHtyYW5kb21TdHJ9YDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTc1MUZcdTYyMTBcdTg4NjhcdTY4M0NJRDogJHt0YWJsZUlkfWApO1xyXG4gICAgICAgICAgICByZXR1cm4gdGFibGVJZDtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTc1MUZcdTYyMTBcdTg4NjhcdTY4M0NJRFx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUxRkFcdTk1MTlcdTY1RjZcdTRGN0ZcdTc1MjhcdTU5MDdcdTc1MjhJRFx1NzUxRlx1NjIxMFx1NjVCOVx1NUYwRlxyXG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuaWRQcmVmaXggfHwgJ3RibCd9LSR7dGltZXN0YW1wfS0ke3JhbmRvbX1gO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NEVDRU1hcmtkb3duXHU1MTg1XHU1QkI5XHU0RTJEXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDSURcdTU0OENcdTcyNzlcdTVGODFcclxuICAgICAqIEBwYXJhbSBjb250ZW50IE1hcmtkb3duXHU1MTg1XHU1QkI5XHJcbiAgICAgKiBAcmV0dXJucyBcdTg4NjhcdTY4M0NJRFx1NTQ4Q1x1NzI3OVx1NUY4MVx1NjU3MFx1N0VDNFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXh0cmFjdFRhYmxlSWRzRnJvbU1hcmtkb3duKGNvbnRlbnQ6IHN0cmluZyk6IEFycmF5PHtpZDogc3RyaW5nLCBmZWF0dXJlOiBUYWJsZUZlYXR1cmV9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBBcnJheTx7aWQ6IHN0cmluZywgZmVhdHVyZTogVGFibGVGZWF0dXJlfT4gPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjdFNVx1NjI3RVx1ODg2OFx1NjgzQ0lEXHU2Q0U4XHU5MUNBXHU1NDhDXHU4ODY4XHU2ODNDXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU2NjJGXHU4ODY4XHU2ODNDSURcdTZDRThcdTkxQ0FcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsZUlkID0gJyc7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGVGZWF0dXJlOiBhbnkgPSB7fTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU2Q0U4XHU5MUNBXHU1OTM5XHU2QTIxXHU1RjBGXHJcbiAgICAgICAgICAgICAgICBjb25zdCBiZWdpbk1hdGNoID0gbGluZS5tYXRjaCgvPCEtLVxccyp0YWJsZS1iZWdpbjpcXHMqKFthLXpBLVowLTlfXFwtOi5dKylcXHMqKD86ZmVhdHVyZTpcXHMqKFxcey4qXFx9KSk/XFxzKi0tPi8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJlZ2luTWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZUlkID0gYmVnaW5NYXRjaFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTVDMURcdThCRDVcdTg5RTNcdTY3OTBcdTcyNzlcdTVGODFKU09OXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZ2luTWF0Y2hbMl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRmVhdHVyZSA9IEpTT04ucGFyc2UoYmVnaW5NYXRjaFsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODlFM1x1Njc5MFx1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MUpTT05cdTY1RjZcdTUxRkFcdTk1MTk6JywgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2N0U1XHU2MjdFXHU4ODY4XHU2ODNDXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlQ29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZVN0YXJ0TGluZSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZUVuZExpbmUgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTY3RTVcdTYyN0VcdTg4NjhcdTY4M0NcdTVGMDBcdTU5Q0JcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBsaW5lcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZXNbal0udHJpbSgpLnN0YXJ0c1dpdGgoJ3wnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVTdGFydExpbmUgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDXHU1RjAwXHU1OUNCXHVGRjBDXHU2N0U1XHU2MjdFXHU4ODY4XHU2ODNDXHU3RUQzXHU2NzVGXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlU3RhcnRMaW5lID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IHRhYmxlU3RhcnRMaW5lOyBqIDwgbGluZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGluZXNbal0udHJpbSgpLnN0YXJ0c1dpdGgoJ3wnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRW5kTGluZSA9IGogLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTUyMzBcdThGQkVcdTY1ODdcdTRFRjZcdTY3MkJcdTVDM0VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsaW5lcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVFbmRMaW5lID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZUVuZExpbmUgPj0gdGFibGVTdGFydExpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ29udGVudCA9IGxpbmVzLnNsaWNlKHRhYmxlU3RhcnRMaW5lLCB0YWJsZUVuZExpbmUgKyAxKS5qb2luKCdcXG4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlID0gdGhpcy5leHRyYWN0VGFibGVGZWF0dXJlKHRhYmxlQ29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NEY0RFx1N0Y2RVx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5wb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydExpbmU6IHRhYmxlU3RhcnRMaW5lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZExpbmU6IHRhYmxlRW5kTGluZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2NTg3XHU0RUY2XHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5nZXRBcHAoKS53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLmZpbGVJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBhY3RpdmVGaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGFjdGl2ZUZpbGUuYmFzZW5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTU0MDhcdTVFNzZcdTYzRDBcdTUzRDZcdTc2ODRcdTcyNzlcdTVGODFcdTRFMEVcdTZDRThcdTkxQ0FcdTRFMkRcdTc2ODRcdTcyNzlcdTVGODFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZEZlYXR1cmUgPSB7IC4uLmZlYXR1cmUsIC4uLnRhYmxlRmVhdHVyZSwgaWQ6IHRhYmxlSWQgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU1MjMwXHU3RUQzXHU2NzlDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRhYmxlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZTogbWVyZ2VkRmVhdHVyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU3RUU3XHU3RUVEXHU2N0U1XHU2MjdFXHU0RTBCXHU0RTAwXHU0RTJBXHU4ODY4XHU2ODNDXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NjgwN1x1NTFDNlx1ODg2OFx1NjgzQ0lEXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZE1hdGNoID0gbGluZS5tYXRjaCgvPCEtLVxccyp0YWJsZS1pZDpcXHMqKFthLXpBLVowLTlfXFwtOi5dKylcXHMqKD86ZmVhdHVyZTpcXHMqKFxcey4qXFx9KSk/XFxzKi0tPi8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlkTWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZUlkID0gaWRNYXRjaFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTVDMURcdThCRDVcdTg5RTNcdTY3OTBcdTcyNzlcdTVGODFKU09OXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkTWF0Y2hbMl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRmVhdHVyZSA9IEpTT04ucGFyc2UoaWRNYXRjaFsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODlFM1x1Njc5MFx1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MUpTT05cdTY1RjZcdTUxRkFcdTk1MTk6JywgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2N0U1XHU2MjdFXHU4ODY4XHU2ODNDXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlQ29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZVN0YXJ0TGluZSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZUVuZExpbmUgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTY3RTVcdTYyN0VcdTg4NjhcdTY4M0NcdTVGMDBcdTU5Q0JcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBsaW5lcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZXNbal0udHJpbSgpLnN0YXJ0c1dpdGgoJ3wnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVTdGFydExpbmUgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDXHU1RjAwXHU1OUNCXHVGRjBDXHU2N0U1XHU2MjdFXHU4ODY4XHU2ODNDXHU3RUQzXHU2NzVGXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlU3RhcnRMaW5lID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IHRhYmxlU3RhcnRMaW5lOyBqIDwgbGluZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGluZXNbal0udHJpbSgpLnN0YXJ0c1dpdGgoJ3wnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRW5kTGluZSA9IGogLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTUyMzBcdThGQkVcdTY1ODdcdTRFRjZcdTY3MkJcdTVDM0VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsaW5lcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVFbmRMaW5lID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZUVuZExpbmUgPj0gdGFibGVTdGFydExpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ29udGVudCA9IGxpbmVzLnNsaWNlKHRhYmxlU3RhcnRMaW5lLCB0YWJsZUVuZExpbmUgKyAxKS5qb2luKCdcXG4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU3Mjc5XHU1RjgxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlID0gdGhpcy5leHRyYWN0VGFibGVGZWF0dXJlKHRhYmxlQ29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NEY0RFx1N0Y2RVx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5wb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydExpbmU6IHRhYmxlU3RhcnRMaW5lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZExpbmU6IHRhYmxlRW5kTGluZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2NTg3XHU0RUY2XHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZmlsZUluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGFjdGl2ZUZpbGUucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYWN0aXZlRmlsZS5iYXNlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTQwOFx1NUU3Nlx1NjNEMFx1NTNENlx1NzY4NFx1NzI3OVx1NUY4MVx1NEUwRVx1NkNFOFx1OTFDQVx1NEUyRFx1NzY4NFx1NzI3OVx1NUY4MVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVyZ2VkRmVhdHVyZSA9IHsgLi4uZmVhdHVyZSwgLi4udGFibGVGZWF0dXJlLCBpZDogdGFibGVJZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUyMzBcdTdFRDNcdTY3OUNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdGFibGVJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlOiBtZXJnZWRGZWF0dXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTRFQ0VNYXJrZG93blx1NTE4NVx1NUJCOVx1NjNEMFx1NTNENlx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBPYnNpZGlhblNwcmVhZHNoZWV0IH0gZnJvbSAnLi9tYWluJztcclxuaW1wb3J0IHsgc2V0SWNvbiwgTWVudSwgTm90aWNlLCBBcHAsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgTWFya2Rvd25WaWV3IH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFibGVUb29sYmFyIHtcclxuICAgIHByaXZhdGUgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBwbHVnaW46IE9ic2lkaWFuU3ByZWFkc2hlZXQ7XHJcbiAgICBwcml2YXRlIHRvb2xiYXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHVibGljIGFjdGl2ZVRhYmxlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZENlbGxzOiBIVE1MRWxlbWVudFtdID0gW107XHJcbiAgICBwcml2YXRlIGlzRHJhZ2dpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgZHJhZ1N0YXJ0WDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgZHJhZ1N0YXJ0WTogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgaXNDb2xsYXBzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgY29sbGFwc2VCdXR0b246IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSB0b29sYmFyQ29udGVudDogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGRyYWdIYW5kbGU6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBpbml0aWFsUG9zaXRpb246IHsgbGVmdDogc3RyaW5nLCB0b3A6IHN0cmluZyB9ID0geyBsZWZ0OiAnNTAlJywgdG9wOiAnMTBweCcgfTtcclxuICAgIHByaXZhdGUgZWRpdE1vZGVUYWJsZUluZm86IHsgc3RhcnRMaW5lOiBudW1iZXIsIGVuZExpbmU6IG51bWJlciwgY29udGVudDogc3RyaW5nIH0gfCBudWxsID0gbnVsbDtcclxuICAgIFxyXG4gICAgLy8gXHU4Rjg1XHU1MkE5XHU2NUI5XHU2Q0Q1XHVGRjBDXHU4M0I3XHU1M0Q2YXBwXHU1QkY5XHU4QzYxXHJcbiAgICBwcml2YXRlIGdldEFwcCgpOiBBcHAge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5wbHVnaW4gYXMgdW5rbm93biBhcyBQbHVnaW4pLmFwcDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFwcGx5VG9FbnRpcmVUYWJsZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogT2JzaWRpYW5TcHJlYWRzaGVldCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdUYWJsZVRvb2xiYXIgaW5pdGlhbGl6ZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTIxQlx1NUVGQVx1ODg2OFx1NjgzQ1x1NURFNVx1NTE3N1x1NjgwRlxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lckVsIFx1NUJCOVx1NTY2OFx1NTE0M1x1N0QyMFxyXG4gICAgICovXHJcbiAgICBjcmVhdGVUb29sYmFyKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTVCQjlcdTU2NjhcdTY4MzdcdTVGMEZcclxuICAgICAgICBjb250YWluZXJFbC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgY29udGFpbmVyRWwuc3R5bGUuekluZGV4ID0gJzEwMDAnO1xyXG4gICAgICAgIGNvbnRhaW5lckVsLnN0eWxlLmxlZnQgPSAnNTAlJztcclxuICAgICAgICBjb250YWluZXJFbC5zdHlsZS50b3AgPSAnMTBweCc7XHJcbiAgICAgICAgY29udGFpbmVyRWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLTUwJSknO1xyXG4gICAgICAgIGNvbnRhaW5lckVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOyAvLyBcdTc4NkVcdTRGRERcdTVERTVcdTUxNzdcdTY4MEZcdTlFRDhcdThCQTRcdTY2M0VcdTc5M0FcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTVERTVcdTUxNzdcdTY4MEZcdTVCQjlcdTU2NjhcclxuICAgICAgICB0aGlzLnRvb2xiYXIgPSBjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2Jywge1xyXG4gICAgICAgICAgICBjbHM6ICdhZHZhbmNlZC10YWJsZS10b29sYmFyJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjgzN1x1NUYwRlxyXG4gICAgICAgIHRoaXMudG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgIHRoaXMudG9vbGJhci5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ3Jvdyc7XHJcbiAgICAgICAgdGhpcy50b29sYmFyLnN0eWxlLmdhcCA9ICc1cHgnO1xyXG4gICAgICAgIHRoaXMudG9vbGJhci5zdHlsZS5wYWRkaW5nID0gJzVweCc7XHJcbiAgICAgICAgdGhpcy50b29sYmFyLnN0eWxlLm1hcmdpbiA9ICc1cHggMCc7XHJcbiAgICAgICAgdGhpcy50b29sYmFyLnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1cHgnO1xyXG4gICAgICAgIHRoaXMudG9vbGJhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnkpJztcclxuICAgICAgICB0aGlzLnRvb2xiYXIuc3R5bGUuYm94U2hhZG93ID0gJzAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMTUpJztcclxuICAgICAgICB0aGlzLnRvb2xiYXIuc3R5bGUudXNlclNlbGVjdCA9ICdub25lJztcclxuICAgICAgICB0aGlzLnRvb2xiYXIuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjJENlx1NjJGRFx1NjI0Qlx1NjdDNCAtIFx1Nzg2RVx1NEZERFx1NTE3Nlx1NTcyOFx1NjcwMFx1NTI0RFx1OTc2MlxyXG4gICAgICAgIHRoaXMuZHJhZ0hhbmRsZSA9IHRoaXMudG9vbGJhci5jcmVhdGVFbCgnZGl2Jywge1xyXG4gICAgICAgICAgICBjbHM6ICdhZHZhbmNlZC10YWJsZS10b29sYmFyLWRyYWctaGFuZGxlJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OEJCRVx1N0Y2RVx1NjJENlx1NjJGRFx1NjI0Qlx1NjdDNFx1NjgzN1x1NUYwRlxyXG4gICAgICAgIHRoaXMuZHJhZ0hhbmRsZS5zdHlsZS5jdXJzb3IgPSAnZ3JhYic7XHJcbiAgICAgICAgdGhpcy5kcmFnSGFuZGxlLnN0eWxlLnBhZGRpbmcgPSAnMCA1cHgnO1xyXG4gICAgICAgIHRoaXMuZHJhZ0hhbmRsZS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgIHRoaXMuZHJhZ0hhbmRsZS5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XHJcbiAgICAgICAgdGhpcy5kcmFnSGFuZGxlLnN0eWxlLm1hcmdpblJpZ2h0ID0gJzVweCc7XHJcbiAgICAgICAgdGhpcy5kcmFnSGFuZGxlLnN0eWxlLmhlaWdodCA9ICcyOHB4JztcclxuICAgICAgICB0aGlzLmRyYWdIYW5kbGUuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzNweCc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2MkQ2XHU2MkZEXHU2MjRCXHU2N0M0XHU3Njg0XHU2MEFDXHU1MDVDXHU2NTQ4XHU2NzlDXHJcbiAgICAgICAgdGhpcy5kcmFnSGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kcmFnSGFuZGxlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKSc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kcmFnSGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRyYWdIYW5kbGUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTYyRDZcdTYyRkRcdTU2RkVcdTY4MDdcclxuICAgICAgICBzZXRJY29uKHRoaXMuZHJhZ0hhbmRsZSwgJ2dyaXAtdmVydGljYWwnKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTVERTVcdTUxNzdcdTY4MEZcdTUxODVcdTVCQjlcdTVCQjlcdTU2NjhcclxuICAgICAgICB0aGlzLnRvb2xiYXJDb250ZW50ID0gdGhpcy50b29sYmFyLmNyZWF0ZUVsKCdkaXYnLCB7XHJcbiAgICAgICAgICAgIGNsczogJ2FkdmFuY2VkLXRhYmxlLXRvb2xiYXItY29udGVudCdcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvb2xiYXJDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgdGhpcy50b29sYmFyQ29udGVudC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ3Jvdyc7XHJcbiAgICAgICAgdGhpcy50b29sYmFyQ29udGVudC5zdHlsZS5nYXAgPSAnNXB4JztcclxuICAgICAgICB0aGlzLnRvb2xiYXJDb250ZW50LnN0eWxlLmZsZXhHcm93ID0gJzEnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjMwOVx1OTRBRVx1NTIwNlx1N0VDNFxyXG4gICAgICAgIHRoaXMuY3JlYXRlQnV0dG9uR3JvdXAoJ1x1NUJGOVx1OUY1MCcsIFtcclxuICAgICAgICAgICAgeyBpZDogJ2FsaWduLWxlZnQnLCB0b29sdGlwOiAnXHU1REU2XHU1QkY5XHU5RjUwJywgaWNvbjogJ2FsaWduLWxlZnQnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6ICdhbGlnbi1jZW50ZXInLCB0b29sdGlwOiAnXHU1QzQ1XHU0RTJEXHU1QkY5XHU5RjUwJywgaWNvbjogJ2FsaWduLWNlbnRlcicgfSxcclxuICAgICAgICAgICAgeyBpZDogJ2FsaWduLXJpZ2h0JywgdG9vbHRpcDogJ1x1NTNGM1x1NUJGOVx1OUY1MCcsIGljb246ICdhbGlnbi1yaWdodCcgfSxcclxuICAgICAgICAgICAgeyBpZDogJ2FsaWduLXRvcCcsIHRvb2x0aXA6ICdcdTk4NzZcdTkwRThcdTVCRjlcdTlGNTAnLCBpY29uOiAnYWxpZ24tdG9wJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAnYWxpZ24tbWlkZGxlJywgdG9vbHRpcDogJ1x1NTc4Mlx1NzZGNFx1NUM0NVx1NEUyRCcsIGljb246ICdhbGlnbi1taWRkbGUnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6ICdhbGlnbi1ib3R0b20nLCB0b29sdGlwOiAnXHU1RTk1XHU5MEU4XHU1QkY5XHU5RjUwJywgaWNvbjogJ2FsaWduLWJvdHRvbScgfSxcclxuICAgICAgICAgICAgeyBpZDogJ2FsaWduLWFsbCcsIHRvb2x0aXA6ICdcdTUxNjhcdTkwRThcdTVDNDVcdTRFMkQnLCBpY29uOiAnYWxpZ24tYWxsJyB9XHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jcmVhdGVTZXBhcmF0b3IoKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNyZWF0ZUJ1dHRvbkdyb3VwKCdcdTU0MDhcdTVFNzYnLCBbXHJcbiAgICAgICAgICAgIHsgaWQ6ICdtZXJnZS1jZWxscycsIHRvb2x0aXA6ICdcdTU0MDhcdTVFNzZcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0MnLCBpY29uOiAnbWVyZ2UtY2VsbHMnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6ICdtZXJnZS1yaWdodCcsIHRvb2x0aXA6ICdcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzYnLCBpY29uOiAnbWVyZ2UtcmlnaHQnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6ICdtZXJnZS1kb3duJywgdG9vbHRpcDogJ1x1NTQxMVx1NEUwQlx1NTQwOFx1NUU3NicsIGljb246ICdtZXJnZS1kb3duJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAnc3BsaXQnLCB0b29sdGlwOiAnXHU2MkM2XHU1MjA2XHU1MzU1XHU1MTQzXHU2ODNDJywgaWNvbjogJ3NwbGl0JyB9XHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jcmVhdGVTZXBhcmF0b3IoKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNyZWF0ZUJ1dHRvbkdyb3VwKCdcdTg4NjhcdTY4M0MnLCBbXHJcbiAgICAgICAgICAgIHsgaWQ6ICd0YWJsZS1pZCcsIHRvb2x0aXA6ICdcdTc1MUZcdTYyMTBcdTg4NjhcdTY4M0NJRCcsIGljb246ICd0YWJsZS1pZCcgfSxcclxuICAgICAgICAgICAgeyBpZDogJ3RhYmxlLXJvdy1hZGQnLCB0b29sdGlwOiAnXHU2REZCXHU1MkEwXHU4ODRDJywgaWNvbjogJ3RhYmxlLXJvdy1hZGQnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6ICd0YWJsZS1zdHlsZScsIHRvb2x0aXA6ICdcdTg4NjhcdTY4M0NcdTY4MzdcdTVGMEYnLCBpY29uOiAndGFibGUtc3R5bGUnIH1cclxuICAgICAgICBdKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTY1MzZcdThENzdcdTYzMDlcdTk0QUVcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uID0gdGhpcy50b29sYmFyLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgIGNsczogJ2FkdmFuY2VkLXRhYmxlLXRvb2xiYXItY29sbGFwc2UtYnV0dG9uJyxcclxuICAgICAgICAgICAgYXR0cjogeyAnYXJpYS1sYWJlbCc6ICdcdTY1MzZcdThENzcvXHU1QzU1XHU1RjAwXHU1REU1XHU1MTc3XHU2ODBGJywgJ3RpdGxlJzogJ1x1NjUzNlx1OEQ3N1x1NURFNVx1NTE3N1x1NjgwRicgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29sbGFwc2VCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2NlbnRlcic7XHJcbiAgICAgICAgdGhpcy5jb2xsYXBzZUJ1dHRvbi5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XHJcbiAgICAgICAgdGhpcy5jb2xsYXBzZUJ1dHRvbi5zdHlsZS53aWR0aCA9ICcyOHB4JztcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLnN0eWxlLmhlaWdodCA9ICcyOHB4JztcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLnN0eWxlLnBhZGRpbmcgPSAnM3B4JztcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLnN0eWxlLmJvcmRlciA9ICdub25lJztcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLnN0eWxlLmJvcmRlclJhZGl1cyA9ICczcHgnO1xyXG4gICAgICAgIHRoaXMuY29sbGFwc2VCdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSAnNXB4JztcclxuICAgICAgICBcclxuICAgICAgICBzZXRJY29uKHRoaXMuY29sbGFwc2VCdXR0b24sICdjaGV2cm9uLWxlZnQnKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsYXBzZUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ob3ZlciknO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29sbGFwc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2VCdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUNvbGxhcHNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU2MkQ2XHU2MkZEXHU0RThCXHU0RUY2XHJcbiAgICAgICAgdGhpcy5zZXR1cERyYWdnYWJsZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1OEMwM1x1OEJENVx1NEZFMVx1NjA2RlxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdcdTVERTVcdTUxNzdcdTY4MEZcdTVERjJcdTUyMUJcdTVFRkFcdUZGMENcdTYyRDZcdTYyRkRcdTYyNEJcdTY3QzRcdTcyQjZcdTYwMDE6Jywge1xyXG4gICAgICAgICAgICBkcmFnSGFuZGxlRXhpc3RzOiAhIXRoaXMuZHJhZ0hhbmRsZSxcclxuICAgICAgICAgICAgZHJhZ0hhbmRsZVBhcmVudDogdGhpcy5kcmFnSGFuZGxlPy5wYXJlbnRFbGVtZW50LFxyXG4gICAgICAgICAgICBkcmFnSGFuZGxlRGlzcGxheTogdGhpcy5kcmFnSGFuZGxlPy5zdHlsZS5kaXNwbGF5LFxyXG4gICAgICAgICAgICBkcmFnSGFuZGxlSWNvbjogdGhpcy5kcmFnSGFuZGxlPy5pbm5lckhUTUwsXHJcbiAgICAgICAgICAgIHRvb2xiYXJDaGlsZHJlbjogQXJyYXkuZnJvbSh0aGlzLnRvb2xiYXIuY2hpbGRyZW4pLm1hcChjaGlsZCA9PiBjaGlsZC5jbGFzc05hbWUpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU4QkJFXHU3RjZFXHU1REU1XHU1MTc3XHU2ODBGXHU1M0VGXHU2MkQ2XHU2MkZEXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0dXBEcmFnZ2FibGUoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbDtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTlGMjBcdTY4MDdcdTYzMDlcdTRFMEJcdTRFOEJcdTRFRjZcclxuICAgICAgICB0aGlzLmRyYWdIYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgLy8gXHU1M0VBXHU1NENEXHU1RTk0XHU1REU2XHU5NTJFXHJcbiAgICAgICAgICAgIGlmIChlLmJ1dHRvbiAhPT0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRYID0gZS5jbGllbnRYO1xyXG4gICAgICAgICAgICB0aGlzLmRyYWdTdGFydFkgPSBlLmNsaWVudFk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdThCQjBcdTVGNTVcdTUyMURcdTU5Q0JcdTRGNERcdTdGNkVcclxuICAgICAgICAgICAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBjb250YWluZXIuc3R5bGUubGVmdCB8fCAnNTAlJyxcclxuICAgICAgICAgICAgICAgIHRvcDogY29udGFpbmVyLnN0eWxlLnRvcCB8fCAnMTBweCdcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjUzOVx1NTNEOFx1NTE0OVx1NjgwN1x1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICB0aGlzLmRyYWdIYW5kbGUuc3R5bGUuY3Vyc29yID0gJ2dyYWJiaW5nJztcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAnZ3JhYmJpbmcnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU5NjNCXHU2QjYyXHU0RThCXHU0RUY2XHU1MTkyXHU2Q0UxXHU1NDhDXHU5RUQ4XHU4QkE0XHU4ODRDXHU0RTNBXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTlGMjBcdTY4MDdcdTc5RkJcdTUyQThcdTRFOEJcdTRFRjYgKFx1N0VEMVx1NUI5QVx1NTIzMGRvY3VtZW50XHU0RUU1XHU2MzU1XHU4M0I3XHU2MjQwXHU2NzA5XHU3OUZCXHU1MkE4KVxyXG4gICAgICAgIGNvbnN0IG1vdXNlTW92ZUhhbmRsZXIgPSAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNEcmFnZ2luZykgcmV0dXJuO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU0RjREXHU3OUZCXHJcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhWCA9IGUuY2xpZW50WCAtIHRoaXMuZHJhZ1N0YXJ0WDtcclxuICAgICAgICAgICAgY29uc3QgZGVsdGFZID0gZS5jbGllbnRZIC0gdGhpcy5kcmFnU3RhcnRZO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU0RjREXHU3RjZFXHJcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdThCQTFcdTdCOTdcdTY1QjBcdTRGNERcdTdGNkUgKFx1NzZGOFx1NUJGOVx1NEU4RVx1ODlDNlx1NTNFMylcclxuICAgICAgICAgICAgbGV0IG5ld0xlZnQ6IHN0cmluZztcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbFBvc2l0aW9uLmxlZnQuZW5kc1dpdGgoJyUnKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU1MjFEXHU1OUNCXHU0RjREXHU3RjZFXHU2NjJGXHU3NjdFXHU1MjA2XHU2QkQ0XHVGRjBDXHU4RjZDXHU2MzYyXHU0RTNBXHU1MENGXHU3RDIwXHJcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3cG9ydFdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5pdGlhbExlZnRQeCA9IChwYXJzZUZsb2F0KHRoaXMuaW5pdGlhbFBvc2l0aW9uLmxlZnQpIC8gMTAwKSAqIHZpZXdwb3J0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBuZXdMZWZ0ID0gYCR7aW5pdGlhbExlZnRQeCArIGRlbHRhWH1weGA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTUyMURcdTU5Q0JcdTRGNERcdTdGNkVcdTY2MkZcdTUwQ0ZcdTdEMjBcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxMZWZ0UHggPSBwYXJzZUZsb2F0KHRoaXMuaW5pdGlhbFBvc2l0aW9uLmxlZnQpO1xyXG4gICAgICAgICAgICAgICAgbmV3TGVmdCA9IGAke2luaXRpYWxMZWZ0UHggKyBkZWx0YVh9cHhgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBuZXdUb3AgPSBgJHtwYXJzZUZsb2F0KHRoaXMuaW5pdGlhbFBvc2l0aW9uLnRvcCkgKyBkZWx0YVl9cHhgO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU2NUIwXHU0RjREXHU3RjZFXHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gbmV3TGVmdDtcclxuICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9IG5ld1RvcDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NzlGQlx1NTJBOFx1NjVGNlx1NTNENlx1NkQ4OHRyYW5zZm9ybVx1NUM0NVx1NEUyRFxyXG4gICAgICAgICAgICBjb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU5NjNCXHU2QjYyXHU0RThCXHU0RUY2XHU1MTkyXHU2Q0UxXHU1NDhDXHU5RUQ4XHU4QkE0XHU4ODRDXHU0RTNBXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OUYyMFx1NjgwN1x1OTFDQVx1NjUzRVx1NEU4Qlx1NEVGNlxyXG4gICAgICAgIGNvbnN0IG1vdXNlVXBIYW5kbGVyID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRHJhZ2dpbmcpIHJldHVybjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2MDYyXHU1OTBEXHU1MTQ5XHU2ODA3XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ0hhbmRsZS5zdHlsZS5jdXJzb3IgPSAnZ3JhYic7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJyc7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTk2M0JcdTZCNjJcdTRFOEJcdTRFRjZcdTUxOTJcdTZDRTFcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1N0VEMVx1NUI5QVx1NTE2OFx1NUM0MFx1NEU4Qlx1NEVGNlxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU1NzI4XHU2M0QyXHU0RUY2XHU1Mzc4XHU4RjdEXHU2NUY2XHU2RTA1XHU3NDA2XHU0RThCXHU0RUY2XHU3NkQxXHU1NDJDXHU1NjY4XHJcbiAgICAgICAgdGhpcy5wbHVnaW4ucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpO1xyXG4gICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NTIwN1x1NjM2Mlx1NURFNVx1NTE3N1x1NjgwRlx1NzY4NFx1NjUzNlx1OEQ3Ny9cdTVDNTVcdTVGMDBcdTcyQjZcdTYwMDFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSB0b2dnbGVDb2xsYXBzZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmlzQ29sbGFwc2VkID0gIXRoaXMuaXNDb2xsYXBzZWQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgLy8gXHU2NTM2XHU4RDc3XHU1REU1XHU1MTc3XHU2ODBGXHJcbiAgICAgICAgICAgIHRoaXMudG9vbGJhckNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgc2V0SWNvbih0aGlzLmNvbGxhcHNlQnV0dG9uLCAnY2hldnJvbi1yaWdodCcpO1xyXG4gICAgICAgICAgICB0aGlzLnRvb2xiYXIuc3R5bGUud2lkdGggPSAnYXV0byc7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbGJhci5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZWQnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEMwM1x1NjU3NFx1NUJCOVx1NTY2OFx1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLndpZHRoID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjNEMFx1NzkzQVxyXG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNlQnV0dG9uLnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnXHU1QzU1XHU1RjAwXHU1REU1XHU1MTc3XHU2ODBGJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gXHU1QzU1XHU1RjAwXHU1REU1XHU1MTc3XHU2ODBGXHJcbiAgICAgICAgICAgIHRoaXMudG9vbGJhckNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICAgICAgc2V0SWNvbih0aGlzLmNvbGxhcHNlQnV0dG9uLCAnY2hldnJvbi1sZWZ0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbGJhci5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLnRvb2xiYXIuY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2VkJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTYwNjJcdTU5MERcdTVCQjlcdTU2NjhcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2NkY0XHU2NUIwXHU2M0QwXHU3OTNBXHJcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2VCdXR0b24uc2V0QXR0cmlidXRlKCd0aXRsZScsICdcdTY1MzZcdThENzdcdTVERTVcdTUxNzdcdTY4MEYnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU1MjFCXHU1RUZBXHU2MzA5XHU5NEFFXHU3RUM0XHJcbiAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIFx1N0VDNFx1NTQwRFxyXG4gICAgICogQHBhcmFtIGJ1dHRvbnMgXHU2MzA5XHU5NEFFXHU5MTREXHU3RjZFXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlQnV0dG9uR3JvdXAoZ3JvdXBOYW1lOiBzdHJpbmcsIGJ1dHRvbnM6IHtpZDogc3RyaW5nLCB0b29sdGlwOiBzdHJpbmcsIGljb246IHN0cmluZ31bXSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy50b29sYmFyQ29udGVudC5jcmVhdGVFbCgnZGl2Jywge1xyXG4gICAgICAgICAgICBjbHM6ICdhZHZhbmNlZC10YWJsZS10b29sYmFyLWdyb3VwJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGdyb3VwLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgZ3JvdXAuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdyb3cnO1xyXG4gICAgICAgIGdyb3VwLnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJztcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTdFQzRcdTY4MDdcdTdCN0VcclxuICAgICAgICBjb25zdCBsYWJlbCA9IGdyb3VwLmNyZWF0ZUVsKCdzcGFuJywge1xyXG4gICAgICAgICAgICB0ZXh0OiBncm91cE5hbWUsXHJcbiAgICAgICAgICAgIGNsczogJ2FkdmFuY2VkLXRhYmxlLXRvb2xiYXItZ3JvdXAtbGFiZWwnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGFiZWwuc3R5bGUuZm9udFNpemUgPSAnMTJweCc7XHJcbiAgICAgICAgbGFiZWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnNXB4JztcclxuICAgICAgICBsYWJlbC5zdHlsZS5vcGFjaXR5ID0gJzAuNyc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2MzA5XHU5NEFFXHJcbiAgICAgICAgYnV0dG9ucy5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGdyb3VwLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgICAgICBjbHM6IGBhZHZhbmNlZC10YWJsZS10b29sYmFyLWJ1dHRvbiAke2J0bi5pZH1gLFxyXG4gICAgICAgICAgICAgICAgYXR0cjogeyAnYXJpYS1sYWJlbCc6IGJ0bi50b29sdGlwIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnY2VudGVyJztcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJztcclxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLndpZHRoID0gJzI4cHgnO1xyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuaGVpZ2h0ID0gJzI4cHgnO1xyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUucGFkZGluZyA9ICczcHgnO1xyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuYm9yZGVyID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuYm9yZGVyUmFkaXVzID0gJzNweCc7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgICAgICAgICBidXR0b24uc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU1NkZFXHU2ODA3XHJcbiAgICAgICAgICAgIHNldEljb24oYnV0dG9uLCBidG4uaWNvbik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTYwQUNcdTUwNUNcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ob3ZlciknO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd0cmFuc3BhcmVudCc7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQnV0dG9uQ2xpY2soYnRuLmlkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTYwQUNcdTUwNUNcdTYzRDBcdTc5M0FcclxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBidG4udG9vbHRpcCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU1MjFCXHU1RUZBXHU1MjA2XHU5Njk0XHU3RUJGXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlU2VwYXJhdG9yKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNlcGFyYXRvciA9IHRoaXMudG9vbGJhckNvbnRlbnQuY3JlYXRlRWwoJ2RpdicsIHtcclxuICAgICAgICAgICAgY2xzOiAnYWR2YW5jZWQtdGFibGUtdG9vbGJhci1zZXBhcmF0b3InXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2VwYXJhdG9yLnN0eWxlLndpZHRoID0gJzFweCc7XHJcbiAgICAgICAgc2VwYXJhdG9yLnN0eWxlLmhlaWdodCA9ICcyNHB4JztcclxuICAgICAgICBzZXBhcmF0b3Iuc3R5bGUubWFyZ2luID0gJzAgNXB4JztcclxuICAgICAgICBzZXBhcmF0b3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKSc7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU1OTA0XHU3NDA2XHU2MzA5XHU5NEFFXHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHJcbiAgICAgKiBAcGFyYW0gYnV0dG9uSWQgXHU2MzA5XHU5NEFFSURcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVCdXR0b25DbGljayhidXR0b25JZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU4QkIwXHU1RjU1XHU4QzAzXHU4QkQ1XHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTcwQjlcdTUxRkJcdTRFODZcdTYzMDlcdTk0QUU6ICR7YnV0dG9uSWR9YCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTU3MjhcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcclxuICAgICAgICAgICAgY29uc3QgaXNFZGl0TW9kZSA9IHRoaXMuaXNJbkVkaXRNb2RlKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzd2l0Y2ggKGJ1dHRvbklkKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlnbi1sZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5QWxpZ25tZW50VG9TZWxlY3RlZENlbGxzKCdsZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlnbi1jZW50ZXInOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbGlnbm1lbnRUb1NlbGVjdGVkQ2VsbHMoJ2NlbnRlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWxpZ24tcmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbGlnbm1lbnRUb1NlbGVjdGVkQ2VsbHMoJ3JpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlnbi10b3AnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbGlnbm1lbnRUb1NlbGVjdGVkQ2VsbHModW5kZWZpbmVkLCAndG9wJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlnbi1taWRkbGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbGlnbm1lbnRUb1NlbGVjdGVkQ2VsbHModW5kZWZpbmVkLCAnbWlkZGxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlnbi1ib3R0b20nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbGlnbm1lbnRUb1NlbGVjdGVkQ2VsbHModW5kZWZpbmVkLCAnYm90dG9tJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlnbi1hbGwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbGlnbm1lbnRUb1NlbGVjdGVkQ2VsbHMoJ2NlbnRlcicsICdtaWRkbGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lcmdlLWNlbGxzJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFZGl0TW9kZSAmJiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVFZGl0TW9kZU9wZXJhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU2NjgyXHU0RTBEXHU2NTJGXHU2MzAxXHU1OTFBXHU5MDA5XHU1NDA4XHU1RTc2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NjY4Mlx1NEUwRFx1NjUyRlx1NjMwMVx1NTkxQVx1OTAwOVx1NTQwOFx1NUU3Nlx1RkYwQ1x1OEJGN1x1NEY3Rlx1NzUyOFx1NTQxMVx1NTNGM1x1NjIxNlx1NTQxMVx1NEUwQlx1NTQwOFx1NUU3NicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVyZ2VDZWxscygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lcmdlLXJpZ2h0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lcmdlUmlnaHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lcmdlLWRvd24nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVyZ2VEb3duKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzcGxpdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRWRpdE1vZGUgJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlRWRpdE1vZGVPcGVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NEY3Rlx1NzUyOCBNYXJrZG93blNvdXJjZUVkaXRvciBcdThGREJcdTg4NENcdTYyQzZcdTUyMDZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ubWFya2Rvd25Tb3VyY2VFZGl0b3Iuc3BsaXRNZXJnZWRDZWxscygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihzdWNjZXNzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTZFMDVcdTk2NjRcdTkwMDlcdTYyRTlcdUZGMENcdTU2RTBcdTRFM0FcdTZFOTBcdTc4MDFcdTVERjJcdTdFQ0ZcdTRGRUVcdTY1MzlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNlbGxTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTYyQzZcdTUyMDZcdTUzNTVcdTUxNDNcdTY4M0NcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1NjJDNlx1NTIwNlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjVGNlx1NTFGQVx1OTUxOTogJHtlcnJvci5tZXNzYWdlIHx8ICdcdTY3MkFcdTc3RTVcdTk1MTlcdThCRUYnfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdENlbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0YWJsZS1pZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVRhYmxlSWQoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RhYmxlLXJvdy1hZGQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0VkaXRNb2RlICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZUVkaXRNb2RlT3BlcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTY2ODJcdTRFMERcdTY1MkZcdTYzMDFcdTZERkJcdTUyQTBcdTg4NENcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU2NjgyXHU0RTBEXHU2NTJGXHU2MzAxXHU5MDFBXHU4RkM3XHU1REU1XHU1MTc3XHU2ODBGXHU2REZCXHU1MkEwXHU4ODRDXHVGRjBDXHU4QkY3XHU3NkY0XHU2M0E1XHU3RjE2XHU4RjkxTWFya2Rvd25cdTZFOTBcdTc4MDEnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dSb3dBZGRNZW51KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndGFibGUtc3R5bGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0VkaXRNb2RlICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZUVkaXRNb2RlT3BlcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTY2ODJcdTRFMERcdTY1MkZcdTYzMDFcdTY4MzdcdTVGMEZcdThCQkVcdTdGNkVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU2NjgyXHU0RTBEXHU2NTJGXHU2MzAxXHU2ODM3XHU1RjBGXHU4QkJFXHU3RjZFJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93U3R5bGVNZW51KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2NzJBXHU1OTA0XHU3NDA2XHU3Njg0XHU2MzA5XHU5NEFFSUQ6ICR7YnV0dG9uSWR9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBcdTU5MDRcdTc0MDZcdTYzMDlcdTk0QUVcdTcwQjlcdTUxRkJcdTY1RjZcdTUxRkFcdTk1MTk6ICR7YnV0dG9uSWR9YCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdThCQjBcdTVGNTVcdThDMDNcdThCRDVcdTRGRTFcdTYwNkZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBsb2dEZWJ1Z0luZm8oKTogdm9pZCB7XHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2NTg3XHU2ODYzXHU0RTJEXHU2MjQwXHU2NzA5XHU4ODY4XHU2ODNDXHJcbiAgICAgICAgY29uc3QgYWxsVGFibGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGFibGUnKS5sZW5ndGg7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2MjQwXHU2NzA5XHU1REYyXHU5MDA5XHU2MkU5XHU3Njg0XHU4ODY4XHU2ODNDXHU1MTQzXHU3RDIwXHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRUYWJsZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGFibGVbZGF0YS10YWJsZS1zZWxlY3RlZD1cInRydWVcIl0nKS5sZW5ndGg7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1x1NUY1M1x1NTI0RFx1NzJCNlx1NjAwMTonLCB7XHJcbiAgICAgICAgICAgIGFjdGl2ZVRhYmxlOiB0aGlzLmFjdGl2ZVRhYmxlLFxyXG4gICAgICAgICAgICBhbGxUYWJsZXM6IGFsbFRhYmxlcyxcclxuICAgICAgICAgICAgc2VsZWN0ZWRDZWxsczogdGhpcy5zZWxlY3RlZENlbGxzLFxyXG4gICAgICAgICAgICBzZWxlY3RlZFRhYmxlRWxlbWVudHM6IHNlbGVjdGVkVGFibGVFbGVtZW50cyxcclxuICAgICAgICAgICAgdG9vbGJhckNvbnRhaW5lcjogdGhpcy5jb250YWluZXJFbFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NUU5NFx1NzUyOFx1NUJGOVx1OUY1MFx1NjgzN1x1NUYwRlx1NTIzMFx1OTAwOVx1NEUyRFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICogQHBhcmFtIGhvcml6b250YWxBbGlnbiBcdTZDMzRcdTVFNzNcdTVCRjlcdTlGNTBcdTY1QjlcdTVGMEZcclxuICAgICAqIEBwYXJhbSB2ZXJ0aWNhbEFsaWduIFx1NTc4Mlx1NzZGNFx1NUJGOVx1OUY1MFx1NjVCOVx1NUYwRlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFwcGx5QWxpZ25tZW50VG9TZWxlY3RlZENlbGxzKGhvcml6b250YWxBbGlnbj86IHN0cmluZywgdmVydGljYWxBbGlnbj86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTVFOTRcdTc1MjhcdTVCRjlcdTlGNTA6Jywge2hvcml6b250YWxBbGlnbiwgdmVydGljYWxBbGlnbn0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU5OTk2XHU1MTQ4XHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGXHU1MjMwRE9NXHU1MTQzXHU3RDIwXHVGRjBDXHU3ODZFXHU0RkREXHU3NTI4XHU2MjM3XHU3QUNCXHU1MzczXHU3NzBCXHU1MjMwXHU2NTQ4XHU2NzlDXHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlBbGlnbm1lbnRTdHlsZXNPbmx5KGhvcml6b250YWxBbGlnbiwgdmVydGljYWxBbGlnbik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTYyMTZcdTZDQTFcdTY3MDlcdTZEM0JcdTUyQThcdTg4NjhcdTY4M0NcdUZGMENcdTUyMTlcdTc2RjRcdTYzQTVcdThGRDRcdTU2REVcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZVRhYmxlIHx8ICh0aGlzLnNlbGVjdGVkQ2VsbHMubGVuZ3RoID09PSAwICYmICF0aGlzLmFwcGx5VG9FbnRpcmVUYWJsZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignXHU2Q0ExXHU2NzA5XHU5MDA5XHU0RTJEXHU1MzU1XHU1MTQzXHU2ODNDXHU2MjE2XHU2RDNCXHU1MkE4XHU4ODY4XHU2ODNDJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NEY3Rlx1NzUyOFx1NjVCMFx1NjVCOVx1NkNENVx1NEVDRU1hcmtkb3duXHU2NTg3XHU0RUY2XHU0RTJEXHU4QkZCXHU1M0Q2XHU4ODY4XHU2ODNDSURcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4ucmVhZFRhYmxlSWRGcm9tTWFya2Rvd24odGhpcy5hY3RpdmVUYWJsZSkudGhlbih0YWJsZUlkID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTRFQ0VNYXJrZG93blx1NjU4N1x1NEVGNlx1NEUyRFx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEOiAke3RhYmxlSWR9YCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NkNBMVx1NjcwOVx1NEVDRU1hcmtkb3duXHU2NTg3XHU0RUY2XHU0RTJEXHU4M0I3XHU1M0Q2XHU1MjMwXHU2NzA5XHU2NTQ4XHU3Njg0XHU4ODY4XHU2ODNDSURcdUZGMENcdTUyMTlcdTUzRUFcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEZcdTRGNDZcdTRFMERcdTRGRERcdTVCNThcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgICAgIGlmICghdGFibGVJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignXHU2NzJBXHU2MjdFXHU1MjMwSFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1NUI5QVx1NEU0OVx1NzY4NFx1ODg2OFx1NjgzQ0lEXHVGRjBDXHU1QzA2XHU1M0VBXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGXHU0RjQ2XHU0RTBEXHU0RkREXHU1QjU4XHU2NTcwXHU2MzZFJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NzJBXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSURcdUZGMENcdTY4MzdcdTVGMEZcdTVERjJcdTVFOTRcdTc1MjhcdTRGNDZcdTY3MkFcdTRGRERcdTVCNThcdTUyMzBcdTY1NzBcdTYzNkVcdTY1ODdcdTRFRjYnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NEZERFx1NUI1OFx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRlx1NTIzMFx1NjU3MFx1NjM2RVx1NjU4N1x1NEVGNlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlVGFibGUpIHsgLy8gXHU3ODZFXHU0RkREYWN0aXZlVGFibGVcdTRFQ0RcdTcxMzZcdTVCNThcdTU3MjhcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVUYWJsZSA9IHRoaXMuYWN0aXZlVGFibGU7IC8vIFx1NTIxQlx1NUVGQVx1NEUwMFx1NEUyQVx1NUYxNVx1NzUyOFx1RkYwQ1x1Nzg2RVx1NEZERFx1NTcyOFx1NUYwMlx1NkI2NVx1NjRDRFx1NEY1Q1x1NEUyRFx1NEUwRFx1NEYxQVx1NEUzQW51bGxcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5nZXRBcHAoKS53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWN0aXZlRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1x1NjVFMFx1NkNENVx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NjU4N1x1NEVGNlx1OERFRlx1NUY4NCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1OTAwOVx1NEUyRFx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1NEY0RFx1N0Y2RVx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ2VsbFBvc2l0aW9ucyA9IHRoaXMuZ2V0U2VsZWN0ZWRDZWxsUG9zaXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1OTAwOVx1NEUyRFx1NTM1NVx1NTE0M1x1NjgzQ1x1NEY0RFx1N0Y2RTonLCBzZWxlY3RlZENlbGxQb3NpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTJBMFx1OEY3RFx1NzNCMFx1NjcwOVx1NjU3MFx1NjM2RVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmxvYWREYXRhKCkudGhlbigoZXhpc3RpbmdEYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU1QjU4XHU1NzI4XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1QkY5XHU4QzYxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmdEYXRhLnRhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdEYXRhLnRhYmxlcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGVEYXRhID0gZXhpc3RpbmdEYXRhLnRhYmxlc1t0YWJsZUlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NEUwRFx1NUI1OFx1NTcyOFx1RkYwQ1x1NTIxQlx1NUVGQVx1NEUwMFx1NEUyQVx1NjVCMFx1NzY4NFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhYmxlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTIxQlx1NUVGQVx1NjVCMFx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RTogJHt0YWJsZUlkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTc2ODRcdTg4NENcdTY1NzBcdTU0OENcdTUyMTdcdTY1NzBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd3MgPSBhY3RpdmVUYWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93Q291bnQgPSByb3dzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2xDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93Q291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RSb3cgPSByb3dzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbENvdW50ID0gZmlyc3RSb3cucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJykubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY1QjBcdTc2ODRcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdGFibGVJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYWN0aXZlRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0NvdW50OiByb3dDb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sQ291bnQ6IGNvbENvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNIZWFkZXJzOiByb3dzLmxlbmd0aCA+IDAgJiYgcm93c1swXS5xdWVyeVNlbGVjdG9yQWxsKCd0aCcpLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SGVpZ2h0czogQXJyYXkocm93Q291bnQpLmZpbGwoJ2F1dG8nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sV2lkdGhzOiBBcnJheShjb2xDb3VudCkuZmlsbCgnYXV0bycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFycmF5KGNvbENvdW50KS5maWxsKCdsZWZ0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxTdHlsZXM6IFtdIC8vIFx1NjVCMFx1NTg5RVx1RkYxQVx1NzUyOFx1NEU4RVx1NUI1OFx1NTBBOFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NUMwNlx1NjVCMFx1NTIxQlx1NUVGQVx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NkRGQlx1NTJBMFx1NTIzMGV4aXN0aW5nRGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdEYXRhLnRhYmxlc1t0YWJsZUlkXSA9IHRhYmxlRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVERjJcdTUyMUJcdTVFRkFcdTY1QjBcdTc2ODRcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdThCQjBcdTVGNTU6ICR7dGFibGVJZH1gLCB0YWJsZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NjI3RVx1NTIzMFx1NzNCMFx1NjcwOVx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RTogJHt0YWJsZUlkfWAsIHRhYmxlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1Nzg2RVx1NEZERFx1N0VEM1x1Njc4NFx1NjU3MFx1NjM2RVx1NUI1OFx1NTcyOFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWJsZURhdGEuc3RydWN0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93cyA9IGFjdGl2ZVRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93Q291bnQgPSByb3dzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29sQ291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RSb3cgPSByb3dzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xDb3VudCA9IGZpcnN0Um93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhLnN0cnVjdHVyZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93Q291bnQ6IHJvd0NvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xDb3VudDogY29sQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0hlYWRlcnM6IHJvd3MubGVuZ3RoID4gMCAmJiByb3dzWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoJykubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1Nzg2RVx1NEZERHN0eWxpbmdcdTY1NzBcdTYzNkVcdTVCNThcdTU3MjhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFibGVEYXRhLnN0eWxpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEuc3R5bGluZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SGVpZ2h0czogQXJyYXkodGFibGVEYXRhLnN0cnVjdHVyZS5yb3dDb3VudCkuZmlsbCgnYXV0bycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xXaWR0aHM6IEFycmF5KHRhYmxlRGF0YS5zdHJ1Y3R1cmUuY29sQ291bnQpLmZpbGwoJ2F1dG8nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBcnJheSh0YWJsZURhdGEuc3RydWN0dXJlLmNvbENvdW50KS5maWxsKCdsZWZ0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxTdHlsZXM6IFtdIC8vIFx1NjVCMFx1NTg5RVx1RkYxQVx1NzUyOFx1NEU4RVx1NUI1OFx1NTBBOFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1Nzg2RVx1NEZERGNlbGxTdHlsZXNcdTY1NzBcdTdFQzRcdTVCNThcdTU3MjhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFibGVEYXRhLnN0eWxpbmcuY2VsbFN0eWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YS5zdHlsaW5nLmNlbGxTdHlsZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU3ODZFXHU0RkREbG9jYXRpb25zXHU2NTcwXHU2MzZFXHU1MzA1XHU1NDJCXHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhYmxlRGF0YS5sb2NhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEubG9jYXRpb25zID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYWN0aXZlRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTVGNTNcdTUyNERcdTY1ODdcdTRFRjZcdTY2MkZcdTU0MjZcdTVERjJcdTU3Mjhsb2NhdGlvbnNcdTRFMkRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlUGF0aEV4aXN0cyA9IHRhYmxlRGF0YS5sb2NhdGlvbnMuc29tZSgobG9jOiB7cGF0aDogc3RyaW5nfSkgPT4gbG9jLnBhdGggPT09IGFjdGl2ZUZpbGUucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWxlUGF0aEV4aXN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEubG9jYXRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYWN0aXZlRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTkwMDlcdTYyRTlcdTRFODZcdTVFOTRcdTc1MjhcdTUyMzBcdTY1NzRcdTRFMkFcdTg4NjhcdTY4M0NcdUZGMENcdTUyMTlcdTY2RjRcdTY1QjBcdTUyMTdcdTVCRjlcdTlGNTBcdTY1QjlcdTVGMEZcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGggPT09IDAgfHwgdGhpcy5hcHBseVRvRW50aXJlVGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3Jpem9udGFsQWxpZ24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTc4NkVcdTRGRERzdHlsaW5nXHU1NDhDYWxpZ25tZW50XHU1QjU4XHU1NzI4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhLnN0eWxpbmcgPSB0YWJsZURhdGEuc3R5bGluZyB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEuc3R5bGluZy5hbGlnbm1lbnQgPSB0YWJsZURhdGEuc3R5bGluZy5hbGlnbm1lbnQgfHwgW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2NkY0XHU2NUIwXHU2MjQwXHU2NzA5XHU1MjE3XHU3Njg0XHU1QkY5XHU5RjUwXHU2NUI5XHU1RjBGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sQ291bnQgPSB0YWJsZURhdGEuc3RydWN0dXJlPy5jb2xDb3VudCB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEuc3R5bGluZy5hbGlnbm1lbnRbaV0gPSBob3Jpem9udGFsQWxpZ247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTY2RjRcdTY1QjBcdTg4NjhcdTY4M0NcdTVCRjlcdTlGNTBcdTY1NzBcdTYzNkU6ICR7dGFibGVJZH1gLCB0YWJsZURhdGEuc3R5bGluZy5hbGlnbm1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTU0MjZcdTUyMTlcdUZGMENcdTUzRUFcdTY2RjRcdTY1QjBcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTc2ODRcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTc2ODRcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2VsbFBvc2l0aW9ucy5mb3JFYWNoKHBvcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2N0U1XHU2MjdFXHU2NjJGXHU1NDI2XHU1REYyXHU2NzA5XHU2QjY0XHU1MzU1XHU1MTQzXHU2ODNDXHU3Njg0XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdTdHlsZUluZGV4ID0gdGFibGVEYXRhLnN0eWxpbmcuY2VsbFN0eWxlcy5maW5kSW5kZXgoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdHlsZTogYW55KSA9PiBzdHlsZS5yb3cgPT09IHBvcy5yb3cgJiYgc3R5bGUuY29sID09PSBwb3MuY29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTVERjJcdTY3MDlcdTY4MzdcdTVGMEZcdUZGMENcdTY2RjRcdTY1QjBcdTVCODNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdTdHlsZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG9yaXpvbnRhbEFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEuc3R5bGluZy5jZWxsU3R5bGVzW2V4aXN0aW5nU3R5bGVJbmRleF0udGV4dEFsaWduID0gaG9yaXpvbnRhbEFsaWduO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNhbEFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEuc3R5bGluZy5jZWxsU3R5bGVzW2V4aXN0aW5nU3R5bGVJbmRleF0udmVydGljYWxBbGlnbiA9IHZlcnRpY2FsQWxpZ247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTQyNlx1NTIxOVx1RkYwQ1x1NkRGQlx1NTJBMFx1NjVCMFx1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdTdHlsZTogYW55ID0geyByb3c6IHBvcy5yb3csIGNvbDogcG9zLmNvbCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG9yaXpvbnRhbEFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdHlsZS50ZXh0QWxpZ24gPSBob3Jpem9udGFsQWxpZ247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnRpY2FsQWxpZ24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0eWxlLnZlcnRpY2FsQWxpZ24gPSB2ZXJ0aWNhbEFsaWduO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YS5zdHlsaW5nLmNlbGxTdHlsZXMucHVzaChuZXdTdHlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTY2RjRcdTY1QjBcdTUzNTVcdTUxNDNcdTY4M0NcdTY4MzdcdTVGMEZcdTY1NzBcdTYzNkU6ICR7dGFibGVJZH1gLCB0YWJsZURhdGEuc3R5bGluZy5jZWxsU3R5bGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU0RkREXHU1QjU4XHU2NkY0XHU2NUIwXHU1NDBFXHU3Njg0XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVEYXRhKGV4aXN0aW5nRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVERjJcdTRGRERcdTVCNThcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkU6ICR7dGFibGVJZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NjYzRVx1NzkzQVx1NjIxMFx1NTI5Rlx1OTAxQVx1NzdFNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBcdTVERjJcdTVDMDYke2hvcml6b250YWxBbGlnbiB8fCAnJ30ke2hvcml6b250YWxBbGlnbiAmJiB2ZXJ0aWNhbEFsaWduID8gJ1x1NTQ4QycgOiAnJ30ke3ZlcnRpY2FsQWxpZ24gfHwgJyd9XHU1QkY5XHU5RjUwXHU1RTk0XHU3NTI4XHU1MjMwJHt0aGlzLnNlbGVjdGVkQ2VsbHMubGVuZ3RoID4gMCA/ICdcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0MnIDogJ1x1NjU3NFx1NEUyQVx1ODg2OFx1NjgzQyd9XHU1RTc2XHU0RkREXHU1QjU4XHU1MjMwXHU2NTcwXHU2MzZFXHU2NTg3XHU0RUY2YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NEZERFx1NUI1OFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBcdTRGRERcdTVCNThcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTU5MzFcdThEMjU6ICR7ZXJyLm1lc3NhZ2UgfHwgJ1x1NjcyQVx1NzdFNVx1OTUxOVx1OEJFRid9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignXHU0RkREXHU1QjU4XHU2NTcwXHU2MzZFXHU2NUY2XHU4ODY4XHU2ODNDXHU0RTBEXHU1MThEXHU1QjU4XHU1NzI4Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHU1OTMxXHU4RDI1OiAke2Vycm9yLm1lc3NhZ2UgfHwgJ1x1NjcyQVx1NzdFNVx1OTUxOVx1OEJFRid9YCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NUJGOVx1OUY1MFx1NUU5NFx1NzUyOFx1NUI4Q1x1NjIxMCcpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NUU5NFx1NzUyOFx1NUJGOVx1OUY1MFx1NTkzMVx1OEQyNTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1NUU5NFx1NzUyOFx1NUJGOVx1OUY1MFx1NTkzMVx1OEQyNTogJHtlcnJvci5tZXNzYWdlIHx8ICdcdTY3MkFcdTc3RTVcdTk1MTlcdThCRUYnfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTgzQjdcdTUzRDZcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTc2ODRcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcdUZGMDhcdTg4NENcdTUyMTdcdTdEMjJcdTVGMTVcdUZGMDlcclxuICAgICAqIEByZXR1cm5zIFx1OTAwOVx1NEUyRFx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1NEY0RFx1N0Y2RVx1NjU3MFx1N0VDNFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldFNlbGVjdGVkQ2VsbFBvc2l0aW9ucygpOiBBcnJheTx7cm93OiBudW1iZXIsIGNvbDogbnVtYmVyfT4ge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uczogQXJyYXk8e3JvdzogbnVtYmVyLCBjb2w6IG51bWJlcn0+ID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZVRhYmxlIHx8IHRoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9ucztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU5MDREXHU1Mzg2XHU5MDA5XHU0RTJEXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZENlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjI0MFx1NTcyOFx1NzY4NFx1ODg0Q1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSBjZWxsLmNsb3Nlc3QoJ3RyJyk7XHJcbiAgICAgICAgICAgIGlmICghcm93KSByZXR1cm47XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NENcdTdEMjJcdTVGMTVcclxuICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSBBcnJheS5mcm9tKHRoaXMuYWN0aXZlVGFibGUhLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJykpLmluZGV4T2Yocm93KTtcclxuICAgICAgICAgICAgaWYgKHJvd0luZGV4ID09PSAtMSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1MzU1XHU1MTQzXHU2ODNDXHU1NzI4XHU4ODRDXHU0RTJEXHU3Njg0XHU3RDIyXHU1RjE1XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbEluZGV4ID0gQXJyYXkuZnJvbShyb3cucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJykpLmluZGV4T2YoY2VsbCk7XHJcbiAgICAgICAgICAgIGlmIChjb2xJbmRleCA9PT0gLTEpIHJldHVybjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NTIzMFx1NEY0RFx1N0Y2RVx1NjU3MFx1N0VDNFxyXG4gICAgICAgICAgICBwb3NpdGlvbnMucHVzaCh7IHJvdzogcm93SW5kZXgsIGNvbDogY29sSW5kZXggfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9ucztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTRFQzVcdTVFOTRcdTc1MjhcdTVCRjlcdTlGNTBcdTY4MzdcdTVGMEZcdUZGMENcdTRFMERcdTRGRERcdTVCNThcdTY1NzBcdTYzNkVcclxuICAgICAqIEBwYXJhbSBob3Jpem9udGFsQWxpZ24gXHU2QzM0XHU1RTczXHU1QkY5XHU5RjUwXHU2NUI5XHU1RjBGXHJcbiAgICAgKiBAcGFyYW0gdmVydGljYWxBbGlnbiBcdTU3ODJcdTc2RjRcdTVCRjlcdTlGNTBcdTY1QjlcdTVGMEZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhcHBseUFsaWdubWVudFN0eWxlc09ubHkoaG9yaXpvbnRhbEFsaWduPzogc3RyaW5nLCB2ZXJ0aWNhbEFsaWduPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5XHU5MDA5XHU0RTJEXHU1MzU1XHU1MTQzXHU2ODNDXHVGRjBDXHU1MjE5XHU1RTk0XHU3NTI4XHU1MjMwXHU2NTc0XHU0RTJBXHU4ODY4XHU2ODNDXHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGggPT09IDAgJiYgdGhpcy5hY3RpdmVUYWJsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJyk7XHJcbiAgICAgICAgICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsRWwgPSBjZWxsIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKGhvcml6b250YWxBbGlnbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxFbC5zdHlsZS50ZXh0QWxpZ24gPSBob3Jpem9udGFsQWxpZ247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWxBbGlnbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxFbC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gdmVydGljYWxBbGlnbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1NURGMlx1NUMwNiR7aG9yaXpvbnRhbEFsaWduIHx8ICcnfSR7aG9yaXpvbnRhbEFsaWduICYmIHZlcnRpY2FsQWxpZ24gPyAnXHU1NDhDJyA6ICcnfSR7dmVydGljYWxBbGlnbiB8fCAnJ31cdTVCRjlcdTlGNTBcdTVFOTRcdTc1MjhcdTUyMzBcdTY1NzRcdTRFMkFcdTg4NjhcdTY4M0NgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTUyMzBcdTkwMDlcdTRFMkRcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9yaXpvbnRhbEFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS50ZXh0QWxpZ24gPSBob3Jpem9udGFsQWxpZ247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWxBbGlnbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUudmVydGljYWxBbGlnbiA9IHZlcnRpY2FsQWxpZ247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBcdTVERjJcdTVDMDYke2hvcml6b250YWxBbGlnbiB8fCAnJ30ke2hvcml6b250YWxBbGlnbiAmJiB2ZXJ0aWNhbEFsaWduID8gJ1x1NTQ4QycgOiAnJ30ke3ZlcnRpY2FsQWxpZ24gfHwgJyd9XHU1QkY5XHU5RjUwXHU1RTk0XHU3NTI4XHU1MjMwXHU5MDA5XHU0RTJEXHU1MzU1XHU1MTQzXHU2ODNDYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NTQwOFx1NUU3Nlx1OTAwOVx1NEUyRFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIG1lcmdlQ2VsbHMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NUMxRFx1OEJENVx1NTQwOFx1NUU3Nlx1OTAwOVx1NEUyRFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4OUM2XHU1NkZFXHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmdldEFwcCgpLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcbiAgICAgICAgICAgIGlmICghYWN0aXZlVmlldykge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NUUwXHU2Q0Q1XHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4OUM2XHU1NkZFJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NUY1M1x1NTI0RFx1NkEyMVx1NUYwRlxyXG4gICAgICAgICAgICBjb25zdCBpc0VkaXRNb2RlID0gYWN0aXZlVmlldy5nZXRNb2RlKCkgPT09ICdzb3VyY2UnO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1RjUzXHU1MjREXHU2QTIxXHU1RjBGOiAke2lzRWRpdE1vZGUgPyAnXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGJyA6ICdcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEYnfWApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGlzRWRpdE1vZGUgJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlRWRpdE1vZGVPcGVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1NzI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU0RjdGXHU3NTI4IE1hcmtkb3duU291cmNlRWRpdG9yIFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTU3MjhcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTRGN0ZcdTc1MjggTWFya2Rvd25Tb3VyY2VFZGl0b3JcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCB0aGlzLnBsdWdpbi5tYXJrZG93blNvdXJjZUVkaXRvci5tZXJnZUNlbGxzKCdyaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTZFMDVcdTk2NjRcdTVGNTNcdTUyNERcdTkwMDlcdTYyRTlcdUZGMENcdTU2RTBcdTRFM0FcdTZFOTBcdTc4MDFcdTVERjJcdTdFQ0ZcdTRGRUVcdTY1MzlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2VsbFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTYyMTBcdTUyOUYnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTkzMVx1OEQyNScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1NzI4XHU5ODg0XHU4OUM4XHU2QTIxXHU1RjBGXHU0RTBCXHVGRjBDXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU2NzA5XHU5MDA5XHU0RTJEXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZENlbGxzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdThCRjdcdTkwMDlcdTYyRTlcdTgxRjNcdTVDMTEyXHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDXHU4RkRCXHU4ODRDXHU1NDA4XHU1RTc2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTc2ODRcdThGQjlcdTc1NENcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5kYXJ5ID0gdGhpcy5nZXRTZWxlY3RlZENlbGxzQm91bmRhcnkoKTtcclxuICAgICAgICAgICAgICAgIGlmICghYm91bmRhcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTY1RTBcdTZDRDVcdTc4NkVcdTVCOUFcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTc2ODRcdThGQjlcdTc1NEMnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgbWluUm93LCBtYXhSb3csIG1pbkNvbCwgbWF4Q29sIH0gPSBib3VuZGFyeTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU1RjYyXHU2MjEwXHU1QjhDXHU2NTc0XHU3Njg0XHU3N0U5XHU1RjYyXHJcbiAgICAgICAgICAgICAgICBjb25zdCBleHBlY3RlZENlbGxDb3VudCA9IChtYXhSb3cgLSBtaW5Sb3cgKyAxKSAqIChtYXhDb2wgLSBtaW5Db2wgKyAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChleHBlY3RlZENlbGxDb3VudCAhPT0gdGhpcy5zZWxlY3RlZENlbGxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NTNFQVx1ODBGRFx1NTQwOFx1NUU3Nlx1NUY2Mlx1NjIxMFx1NUI4Q1x1NjU3NFx1NzdFOVx1NUY2Mlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHVGRjA4XHU1REU2XHU0RTBBXHU4OUQyXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHVGRjA5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYWluQ2VsbCA9IHRoaXMuYWN0aXZlVGFibGU/LnF1ZXJ5U2VsZWN0b3IoYFtyb3ctaW5kZXg9XCIke21pblJvd31cIl1bY29sLWluZGV4PVwiJHttaW5Db2x9XCJdYCkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW1haW5DZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NUUwXHU2Q0Q1XHU2MjdFXHU1MjMwXHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTY3MDlcdTk3NUVcdTdBN0FcdTUxODVcdTVCQjlcdTk3MDBcdTg5ODFcdTc4NkVcdThCQTRcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25maXJtTWVyZ2VOb25FbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vbkVtcHR5Q2VsbHMgPSB0aGlzLnNlbGVjdGVkQ2VsbHMuZmlsdGVyKGNlbGwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbCA9PT0gbWFpbkNlbGwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGNlbGwudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQgIT09ICcnICYmIGNvbnRlbnQgIT09ICc8JyAmJiBjb250ZW50ICE9PSAnXic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vbkVtcHR5Q2VsbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsQ29udGVudHMgPSBub25FbXB0eUNlbGxzLm1hcChjZWxsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgXCIke2NlbGwudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnKFx1N0E3QSknfVwiYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbignLCAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1NZXJnZSA9IGF3YWl0IHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXHU4OTgxXHU1NDA4XHU1RTc2XHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU1MzA1XHU1NDJCXHU1MTg1XHU1QkI5JHtjZWxsQ29udGVudHN9XHVGRjBDXHU3ODZFXHU1QjlBXHU4OTgxXHU1NDA4XHU1RTc2XHU1NDE3XHVGRjFGYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm1NZXJnZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU5NzAwXHU4OTgxXHU1NDA4XHU1RTc2XHU3Njg0XHU4ODRDXHU2NTcwXHU1NDhDXHU1MjE3XHU2NTcwXHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3dTcGFuVmFsdWUgPSBtYXhSb3cgLSBtaW5Sb3cgKyAxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29sU3BhblZhbHVlID0gbWF4Q29sIC0gbWluQ29sICsgMTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHU3Njg0XHU1NDA4XHU1RTc2XHU1QzVFXHU2MDI3XHJcbiAgICAgICAgICAgICAgICBpZiAocm93U3BhblZhbHVlID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1haW5DZWxsLnNldEF0dHJpYnV0ZSgncm93c3BhbicsIHJvd1NwYW5WYWx1ZS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbFNwYW5WYWx1ZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYWluQ2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHNwYW4nLCBjb2xTcGFuVmFsdWUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NEUzQVx1NTE3Nlx1NEVENlx1NTM1NVx1NTE0M1x1NjgzQ1x1NkRGQlx1NTJBMFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjZWxsIG9mIHRoaXMuc2VsZWN0ZWRDZWxscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxsID09PSBtYWluQ2VsbCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgncm93LWluZGV4JykgfHwgJzAnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xJbmRleCA9IHBhcnNlSW50KGNlbGwuZ2V0QXR0cmlidXRlKCdjb2wtaW5kZXgnKSB8fCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjgzOVx1NjM2RVx1NEY0RFx1N0Y2RVx1OEJCRVx1N0Y2RVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dJbmRleCA9PT0gbWluUm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTQwQ1x1NEUwMFx1ODg0Q1x1RkYwQ1x1OEJCRVx1N0Y2RVx1NkMzNFx1NUU3M1x1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJDb3VudCA9IGNvbEluZGV4IC0gbWluQ29sO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gJzwnLnJlcGVhdChtYXJrZXJDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlLWRpcmVjdGlvbicsICdsZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlLWNvdW50JywgbWFya2VyQ291bnQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xJbmRleCA9PT0gbWluQ29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTQwQ1x1NEUwMFx1NTIxN1x1RkYwQ1x1OEJCRVx1N0Y2RVx1NTc4Mlx1NzZGNFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJDb3VudCA9IHJvd0luZGV4IC0gbWluUm93O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gJ14nLnJlcGVhdChtYXJrZXJDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlLWRpcmVjdGlvbicsICd1cCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1tZXJnZS1jb3VudCcsIG1hcmtlckNvdW50LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTE3Nlx1NEVENlx1NTM1NVx1NTE0M1x1NjgzQ1x1RkYwQ1x1NjgzOVx1NjM2RVx1NjBDNVx1NTFCNVx1OEJCRVx1N0Y2RVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93SW5kZXggPiBtaW5Sb3cgJiYgY29sSW5kZXggPiBtaW5Db2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTNFRlx1NEVFNVx1OTAwOVx1NjJFOVx1NTQxMVx1NEUwQVx1NjIxNlx1NTQxMVx1NURFNlx1NTQwOFx1NUU3Nlx1RkYwQ1x1OEZEOVx1OTFDQ1x1OTAwOVx1NjJFOVx1NTQxMVx1NURFNlx1NTQwOFx1NUU3NlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2VyQ291bnQgPSBjb2xJbmRleCAtIG1pbkNvbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwudGV4dENvbnRlbnQgPSAnPCcucmVwZWF0KG1hcmtlckNvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1tZXJnZS1kaXJlY3Rpb24nLCAnbGVmdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWVyZ2UtY291bnQnLCBtYXJrZXJDb3VudC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTk2OTBcdTg1Q0ZcdTg4QUJcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NTQwOFx1NUU3Nlx1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseU1lcmdlZENlbGxTdHlsZXMobWFpbkNlbGwsIHRoaXMuc2VsZWN0ZWRDZWxscy5maWx0ZXIoY2VsbCA9PiBjZWxsICE9PSBtYWluQ2VsbCkpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBcdTVERjJcdTYyMTBcdTUyOUZcdTU0MDhcdTVFNzYke3RoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGh9XHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDYCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU5ODg0XHU4OUM4XHU2QTIxXHU1RjBGXHU0RTBCXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU2MjEwXHU1MjlGJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NkUwNVx1OTY2NFx1NTM1NVx1NTE0M1x1NjgzQ1x1OTAwOVx1NjJFOVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckNlbGxTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTkzMVx1OEQyNTogJHtlcnJvci5tZXNzYWdlIHx8ICdcdTY3MkFcdTc3RTVcdTk1MTlcdThCRUYnfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBtZXJnZVJpZ2h0KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTVDMURcdThCRDVcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1ODlDNlx1NTZGRVxyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5nZXRBcHAoKS53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVZpZXcpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NjVFMFx1NkNENVx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1ODlDNlx1NTZGRScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTVGNTNcdTUyNERcdTZBMjFcdTVGMEZcclxuICAgICAgICAgICAgY29uc3QgaXNFZGl0TW9kZSA9IGFjdGl2ZVZpZXcuZ2V0TW9kZSgpID09PSAnc291cmNlJztcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NUY1M1x1NTI0RFx1NkEyMVx1NUYwRjogJHtpc0VkaXRNb2RlID8gJ1x1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRicgOiAnXHU5ODg0XHU4OUM4XHU2QTIxXHU1RjBGJ31gKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChpc0VkaXRNb2RlICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZUVkaXRNb2RlT3BlcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NEY3Rlx1NzUyOCBNYXJrZG93blNvdXJjZUVkaXRvciBcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU1NzI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU0RjdGXHU3NTI4IE1hcmtkb3duU291cmNlRWRpdG9yXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgdGhpcy5wbHVnaW4ubWFya2Rvd25Tb3VyY2VFZGl0b3IubWVyZ2VDZWxscygncmlnaHQnKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2RTA1XHU5NjY0XHU1RjUzXHU1MjREXHU5MDA5XHU2MkU5XHVGRjBDXHU1NkUwXHU0RTNBXHU2RTkwXHU3ODAxXHU1REYyXHU3RUNGXHU0RkVFXHU2NTM5XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNlbGxTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU2MjEwXHU1MjlGJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTU5MzFcdThEMjUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NTcyOFx1OTg4NFx1ODlDOFx1NkEyMVx1NUYwRlx1NEUwQlx1RkYwQ1x1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NjcwOVx1OTAwOVx1NEUyRFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdThCRjdcdTUxNDhcdTkwMDlcdTYyRTlcdTg5ODFcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NTkwNFx1NzQwNlx1NTkxQVx1NEUyQVx1OTAwOVx1NEUyRFx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1NjBDNVx1NTFCNVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU5MDA5XHU0RTJEXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU2NjJGXHU1NDI2XHU1NzI4XHU1NDBDXHU0RTAwXHU4ODRDXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93SW5kaWNlcyA9IG5ldyBTZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNlbGwgb2YgdGhpcy5zZWxlY3RlZENlbGxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvdy1pbmRleCcpIHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGljZXMuYWRkKHJvd0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd0luZGljZXMuc2l6ZSAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzZcdTk3MDBcdTg5ODFcdTkwMDlcdTYyRTlcdTU0MENcdTRFMDBcdTg4NENcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTUyMTdcdTdEMjJcdTVGMTVcdTVFNzZcdTYzOTJcdTVFOEZcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsc1dpdGhJbmRpY2VzID0gdGhpcy5zZWxlY3RlZENlbGxzLm1hcChjZWxsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xJbmRleDogcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ2NvbC1pbmRleCcpIHx8ICcwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5zb3J0KChhLCBiKSA9PiBhLmNvbEluZGV4IC0gYi5jb2xJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU4RkRFXHU3RUVEXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjZWxsc1dpdGhJbmRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsc1dpdGhJbmRpY2VzW2ldLmNvbEluZGV4ICE9PSBjZWxsc1dpdGhJbmRpY2VzW2ktMV0uY29sSW5kZXggKyAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTk3MDBcdTg5ODFcdTkwMDlcdTYyRTlcdThGREVcdTdFRURcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdThGREJcdTg4NENcdTU0MDhcdTVFNzYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTRFM0JcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMDhcdTY3MDBcdTVERTZcdTRGQTdcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMDlcdTU0OENcdTU0MDhcdTVFNzZcdTY1NzBcdTkxQ0ZcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYWluQ2VsbCA9IGNlbGxzV2l0aEluZGljZXNbMF0uY2VsbDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZUNvdW50ID0gY2VsbHNXaXRoSW5kaWNlcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NjcwOVx1OTc1RVx1N0E3QVx1NTE4NVx1NUJCOVx1OTcwMFx1ODk4MVx1Nzg2RVx1OEJBNFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25maXJtTWVyZ2VOb25FbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub25FbXB0eUNlbGxzID0gY2VsbHNXaXRoSW5kaWNlcy5zbGljZSgxKS5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gaXRlbS5jZWxsLnRleHRDb250ZW50Py50cmltKCkgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudCAhPT0gJycgJiYgY29udGVudCAhPT0gJzwnICYmIGNvbnRlbnQgIT09ICdeJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9uRW1wdHlDZWxscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsQ29udGVudHMgPSBub25FbXB0eUNlbGxzLm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFwiJHtpdGVtLmNlbGwudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnKFx1N0E3QSknfVwiYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oJywgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1NZXJnZSA9IGF3YWl0IHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFx1ODk4MVx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1NTMwNVx1NTQyQlx1NTE4NVx1NUJCOSR7Y2VsbENvbnRlbnRzfVx1RkYwQ1x1Nzg2RVx1NUI5QVx1ODk4MVx1NTQwOFx1NUU3Nlx1NTQxN1x1RkYxRmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm1NZXJnZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NEUzQVx1NjI0MFx1NjcwOVx1OTcwMFx1ODk4MVx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1OEJCRVx1N0Y2RVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY2VsbHNXaXRoSW5kaWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY2VsbHNXaXRoSW5kaWNlc1tpXS5jZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcdUZGMENcdTRGN0ZcdTc1MjhcdThGREVcdTdFRURcdTc2ODQgPCBcdTdCMjZcdTUzRjdcdTg4NjhcdTc5M0FcdTU0MDhcdTVFNzZcdTU5MUFcdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC50ZXh0Q29udGVudCA9ICc8Jy5yZXBlYXQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlLWRpcmVjdGlvbicsICdsZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlLWNvdW50JywgaS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU1NDA4XHU1RTc2XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseU1lcmdlZENlbGxTdHlsZXMobWFpbkNlbGwsIGNlbGxzV2l0aEluZGljZXMuc2xpY2UoMSkubWFwKGl0ZW0gPT4gaXRlbS5jZWxsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgXHU1REYyXHU1NDExXHU1M0YzXHU1NDA4XHU1RTc2JHttZXJnZUNvdW50fVx1NEUyQVx1NTM1NVx1NTE0M1x1NjgzQ2ApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzYke21lcmdlQ291bnR9XHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDXHU2MjEwXHU1MjlGYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNlbGxTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NTkwNFx1NzQwNlx1NTM1NVx1NEUyQVx1OTAwOVx1NEUyRFx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1NjBDNVx1NTFCNVx1RkYwOFx1NTM5Rlx1NjcwOVx1OTAzQlx1OEY5MVx1RkYwOVxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMuc2VsZWN0ZWRDZWxsc1swXTtcclxuICAgICAgICAgICAgICAgIGlmICghY2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTkwMDlcdTRFMkRcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1ODg0Q1x1NTIxN1x1N0QyMlx1NUYxNVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgncm93LWluZGV4JykgfHwgJzAnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbEluZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ2NvbC1pbmRleCcpIHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTRGNERcdTdGNkU6IFx1ODg0Qz0ke3Jvd0luZGV4fSwgXHU1MjE3PSR7Y29sSW5kZXh9YCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NTNGM1x1NEZBN1x1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHRDZWxsID0gdGhpcy5hY3RpdmVUYWJsZT8ucXVlcnlTZWxlY3RvcihgW3Jvdy1pbmRleD1cIiR7cm93SW5kZXh9XCJdW2NvbC1pbmRleD1cIiR7Y29sSW5kZXggKyAxfVwiXWApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyaWdodENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTUzRjNcdTRGQTdcdTZDQTFcdTY3MDlcdTUzNTVcdTUxNDNcdTY4M0NcdTUzRUZcdTU0MDhcdTVFNzYnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NTNGM1x1NEZBN1x1NTM1NVx1NTE0M1x1NjgzQ1x1NjYyRlx1NTQyNlx1NjcwOVx1NTE4NVx1NUJCOVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHRDb250ZW50ID0gcmlnaHRDZWxsLnRleHRDb250ZW50Py50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29uZmlybU1lcmdlTm9uRW1wdHkgJiYgXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRDb250ZW50ICYmIHJpZ2h0Q29udGVudCAhPT0gJzwnICYmIHJpZ2h0Q29udGVudCAhPT0gJ14nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlybWVkID0gYXdhaXQgdGhpcy5zaG93Q29uZmlybURpYWxvZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFx1ODk4MVx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1NTMwNVx1NTQyQlx1NTE4NVx1NUJCOVwiJHtyaWdodENvbnRlbnR9XCJcdUZGMENcdTc4NkVcdTVCOUFcdTg5ODFcdTU0MDhcdTVFNzZcdTU0MTdcdUZGMUZgXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm1lZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTUzRjNcdTRGQTdcdTUzNTVcdTUxNDNcdTY4M0NcdTRFM0FcdTZDMzRcdTVFNzNcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgICAgIHJpZ2h0Q2VsbC50ZXh0Q29udGVudCA9ICc8JztcclxuICAgICAgICAgICAgICAgIHJpZ2h0Q2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWVyZ2VkJywgJ3RydWUnKTtcclxuICAgICAgICAgICAgICAgIHJpZ2h0Q2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWVyZ2UtZGlyZWN0aW9uJywgJ2xlZnQnKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5TWVyZ2VkQ2VsbFN0eWxlcyhjZWxsLCBbcmlnaHRDZWxsXSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NURGMlx1NTQxMVx1NTNGM1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1OTg4NFx1ODlDOFx1NkEyMVx1NUYwRlx1NEUwQlx1NTQxMVx1NTNGM1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjIxMFx1NTI5RicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU1NDExXHU1M0YzXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgXHU1NDExXHU1M0YzXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU1OTMxXHU4RDI1OiAke2Vycm9yLm1lc3NhZ2UgfHwgJ1x1NjcyQVx1NzdFNVx1OTUxOVx1OEJFRid9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NTQxMVx1NEUwQlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIG1lcmdlRG93bigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1QzFEXHU4QkQ1XHU1NDExXHU0RTBCXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTg5QzZcdTU2RkVcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlVmlldyA9IHRoaXMuZ2V0QXBwKCkud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuICAgICAgICAgICAgaWYgKCFhY3RpdmVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTY1RTBcdTZDRDVcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTg5QzZcdTU2RkUnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1RjUzXHU1MjREXHU2QTIxXHU1RjBGXHJcbiAgICAgICAgICAgIGNvbnN0IGlzRWRpdE1vZGUgPSBhY3RpdmVWaWV3LmdldE1vZGUoKSA9PT0gJ3NvdXJjZSc7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVGNTNcdTUyNERcdTZBMjFcdTVGMEY6ICR7aXNFZGl0TW9kZSA/ICdcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEYnIDogJ1x1OTg4NFx1ODlDOFx1NkEyMVx1NUYwRid9YCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoaXNFZGl0TW9kZSAmJiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVFZGl0TW9kZU9wZXJhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTU3MjhcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTRGN0ZcdTc1MjggTWFya2Rvd25Tb3VyY2VFZGl0b3IgXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NEY3Rlx1NzUyOCBNYXJrZG93blNvdXJjZUVkaXRvclxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHRoaXMucGx1Z2luLm1hcmtkb3duU291cmNlRWRpdG9yLm1lcmdlQ2VsbHMoJ2Rvd24nKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2RTA1XHU5NjY0XHU1RjUzXHU1MjREXHU5MDA5XHU2MkU5XHVGRjBDXHU1NkUwXHU0RTNBXHU2RTkwXHU3ODAxXHU1REYyXHU3RUNGXHU0RkVFXHU2NTM5XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNlbGxTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1NDExXHU0RTBCXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU2MjEwXHU1MjlGJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTU0MTFcdTRFMEJcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTU5MzFcdThEMjUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NTcyOFx1OTg4NFx1ODlDOFx1NkEyMVx1NUYwRlx1NEUwQlx1RkYwQ1x1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NjcwOVx1OTAwOVx1NEUyRFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdThCRjdcdTUxNDhcdTkwMDlcdTYyRTlcdTg5ODFcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NTkwNFx1NzQwNlx1NTkxQVx1NEUyQVx1OTAwOVx1NEUyRFx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1NjBDNVx1NTFCNVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU5MDA5XHU0RTJEXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU2NjJGXHU1NDI2XHU1NzI4XHU1NDBDXHU0RTAwXHU1MjE3XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sSW5kaWNlcyA9IG5ldyBTZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNlbGwgb2YgdGhpcy5zZWxlY3RlZENlbGxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbEluZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ2NvbC1pbmRleCcpIHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEluZGljZXMuYWRkKGNvbEluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbEluZGljZXMuc2l6ZSAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTU0MTFcdTRFMEJcdTU0MDhcdTVFNzZcdTk3MDBcdTg5ODFcdTkwMDlcdTYyRTlcdTU0MENcdTRFMDBcdTUyMTdcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NENcdTdEMjJcdTVGMTVcdTVFNzZcdTYzOTJcdTVFOEZcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsc1dpdGhJbmRpY2VzID0gdGhpcy5zZWxlY3RlZENlbGxzLm1hcChjZWxsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleDogcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvdy1pbmRleCcpIHx8ICcwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5zb3J0KChhLCBiKSA9PiBhLnJvd0luZGV4IC0gYi5yb3dJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU4RkRFXHU3RUVEXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjZWxsc1dpdGhJbmRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsc1dpdGhJbmRpY2VzW2ldLnJvd0luZGV4ICE9PSBjZWxsc1dpdGhJbmRpY2VzW2ktMV0ucm93SW5kZXggKyAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTk3MDBcdTg5ODFcdTkwMDlcdTYyRTlcdThGREVcdTdFRURcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdThGREJcdTg4NENcdTU0MDhcdTVFNzYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTRFM0JcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMDhcdTY3MDBcdTRFMEFcdTY1QjlcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMDlcdTU0OENcdTU0MDhcdTVFNzZcdTY1NzBcdTkxQ0ZcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYWluQ2VsbCA9IGNlbGxzV2l0aEluZGljZXNbMF0uY2VsbDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZUNvdW50ID0gY2VsbHNXaXRoSW5kaWNlcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NjcwOVx1OTc1RVx1N0E3QVx1NTE4NVx1NUJCOVx1OTcwMFx1ODk4MVx1Nzg2RVx1OEJBNFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25maXJtTWVyZ2VOb25FbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub25FbXB0eUNlbGxzID0gY2VsbHNXaXRoSW5kaWNlcy5zbGljZSgxKS5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gaXRlbS5jZWxsLnRleHRDb250ZW50Py50cmltKCkgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudCAhPT0gJycgJiYgY29udGVudCAhPT0gJzwnICYmIGNvbnRlbnQgIT09ICdeJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9uRW1wdHlDZWxscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsQ29udGVudHMgPSBub25FbXB0eUNlbGxzLm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFwiJHtpdGVtLmNlbGwudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnKFx1N0E3QSknfVwiYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oJywgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1NZXJnZSA9IGF3YWl0IHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFx1ODk4MVx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1NTMwNVx1NTQyQlx1NTE4NVx1NUJCOSR7Y2VsbENvbnRlbnRzfVx1RkYwQ1x1Nzg2RVx1NUI5QVx1ODk4MVx1NTQwOFx1NUU3Nlx1NTQxN1x1RkYxRmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm1NZXJnZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NEUzQVx1NjI0MFx1NjcwOVx1OTcwMFx1ODk4MVx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1OEJCRVx1N0Y2RVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY2VsbHNXaXRoSW5kaWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY2VsbHNXaXRoSW5kaWNlc1tpXS5jZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcdUZGMENcdTRGN0ZcdTc1MjhcdThGREVcdTdFRURcdTc2ODQgXiBcdTdCMjZcdTUzRjdcdTg4NjhcdTc5M0FcdTU0MDhcdTVFNzZcdTU5MUFcdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC50ZXh0Q29udGVudCA9ICdeJy5yZXBlYXQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlLWRpcmVjdGlvbicsICd1cCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1tZXJnZS1jb3VudCcsIGkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NTQwOFx1NUU3Nlx1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlNZXJnZWRDZWxsU3R5bGVzKG1haW5DZWxsLCBjZWxsc1dpdGhJbmRpY2VzLnNsaWNlKDEpLm1hcChpdGVtID0+IGl0ZW0uY2VsbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1NURGMlx1NTQxMVx1NEUwQlx1NTQwOFx1NUU3NiR7bWVyZ2VDb3VudH1cdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NgKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU5ODg0XHU4OUM4XHU2QTIxXHU1RjBGXHU0RTBCXHU1NDExXHU0RTBCXHU1NDA4XHU1RTc2JHttZXJnZUNvdW50fVx1NEUyQVx1NTM1NVx1NTE0M1x1NjgzQ1x1NjIxMFx1NTI5RmApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDZWxsU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTU5MDRcdTc0MDZcdTUzNTVcdTRFMkFcdTkwMDlcdTRFMkRcdTUzNTVcdTUxNDNcdTY4M0NcdTc2ODRcdTYwQzVcdTUxQjVcdUZGMDhcdTUzOUZcdTY3MDlcdTkwM0JcdThGOTFcdUZGMDlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLnNlbGVjdGVkQ2VsbHNbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU2NzJBXHU2MjdFXHU1MjMwXHU5MDA5XHU0RTJEXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NENcdTUyMTdcdTdEMjJcdTVGMTVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvdy1pbmRleCcpIHx8ICcwJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xJbmRleCA9IHBhcnNlSW50KGNlbGwuZ2V0QXR0cmlidXRlKCdjb2wtaW5kZXgnKSB8fCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU5MDA5XHU0RTJEXHU1MzU1XHU1MTQzXHU2ODNDXHU0RjREXHU3RjZFOiBcdTg4NEM9JHtyb3dJbmRleH0sIFx1NTIxNz0ke2NvbEluZGV4fWApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTRFMEJcdTY1QjlcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJlbG93Q2VsbCA9IHRoaXMuYWN0aXZlVGFibGU/LnF1ZXJ5U2VsZWN0b3IoYFtyb3ctaW5kZXg9XCIke3Jvd0luZGV4ICsgMX1cIl1bY29sLWluZGV4PVwiJHtjb2xJbmRleH1cIl1gKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGlmICghYmVsb3dDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU0RTBCXHU2NUI5XHU2Q0ExXHU2NzA5XHU1MzU1XHU1MTQzXHU2ODNDXHU1M0VGXHU1NDA4XHU1RTc2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTRFMEJcdTY1QjlcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTY3MDlcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJlbG93Q29udGVudCA9IGJlbG93Q2VsbC50ZXh0Q29udGVudD8udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbmZpcm1NZXJnZU5vbkVtcHR5ICYmIFxyXG4gICAgICAgICAgICAgICAgICAgIGJlbG93Q29udGVudCAmJiBiZWxvd0NvbnRlbnQgIT09ICc8JyAmJiBiZWxvd0NvbnRlbnQgIT09ICdeJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1lZCA9IGF3YWl0IHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcdTg5ODFcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTUzMDVcdTU0MkJcdTUxODVcdTVCQjlcIiR7YmVsb3dDb250ZW50fVwiXHVGRjBDXHU3ODZFXHU1QjlBXHU4OTgxXHU1NDA4XHU1RTc2XHU1NDE3XHVGRjFGYFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25maXJtZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU0RTBCXHU2NUI5XHU1MzU1XHU1MTQzXHU2ODNDXHU0RTNBXHU1NzgyXHU3NkY0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgICAgICBiZWxvd0NlbGwudGV4dENvbnRlbnQgPSAnXic7XHJcbiAgICAgICAgICAgICAgICBiZWxvd0NlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgICBiZWxvd0NlbGwuc2V0QXR0cmlidXRlKCdkYXRhLW1lcmdlLWRpcmVjdGlvbicsICd1cCcpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlNZXJnZWRDZWxsU3R5bGVzKGNlbGwsIFtiZWxvd0NlbGxdKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU1REYyXHU1NDExXHU0RTBCXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU5ODg0XHU4OUM4XHU2QTIxXHU1RjBGXHU0RTBCXHU1NDExXHU0RTBCXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU2MjEwXHU1MjlGJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTU0MTFcdTRFMEJcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBcdTU0MTFcdTRFMEJcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTU5MzFcdThEMjU6ICR7ZXJyb3IubWVzc2FnZSB8fCAnXHU2NzJBXHU3N0U1XHU5NTE5XHU4QkVGJ31gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU2MkM2XHU1MjA2XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3BsaXRDZWxsKCk6IHZvaWQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQ2VsbHMubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU5NzAwXHU4OTgxXHU5MDA5XHU2MkU5XHU0RTAwXHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDXHU4RkRCXHU4ODRDXHU2MkM2XHU1MjA2Jyk7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdThCRjdcdTkwMDlcdTYyRTlcdTRFMDBcdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NcdThGREJcdTg4NENcdTYyQzZcdTUyMDYnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NUYwMFx1NTlDQlx1NjJDNlx1NTIwNlx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMuc2VsZWN0ZWRDZWxsc1swXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1ODg0Q1x1NTIxN1x1N0QyMlx1NUYxNVxyXG4gICAgICAgICAgICBjb25zdCByb3dJbmRleCA9IHBhcnNlSW50KGNlbGwuZ2V0QXR0cmlidXRlKCdyb3ctaW5kZXgnKSB8fCAnMCcpO1xyXG4gICAgICAgICAgICBjb25zdCBjb2xJbmRleCA9IHBhcnNlSW50KGNlbGwuZ2V0QXR0cmlidXRlKCdjb2wtaW5kZXgnKSB8fCAnMCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1MzU1XHU1MTQzXHU2ODNDXHU2NjJGXHU1NDI2XHU1REYyXHU4OEFCXHU1NDA4XHU1RTc2XHVGRjA4XHU5MDFBXHU4RkM3IGNvbHNwYW4gXHU2MjE2IHJvd3NwYW4gXHU1QzVFXHU2MDI3XHVGRjA5XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbFNwYW4gPSBjZWxsLmdldEF0dHJpYnV0ZSgnY29sc3BhbicpO1xyXG4gICAgICAgICAgICBjb25zdCByb3dTcGFuID0gY2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvd3NwYW4nKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NTQ2OFx1NTZGNFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjYyRlx1NTQyNlx1NjcwOVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICBjb25zdCB0YWJsZSA9IGNlbGwuY2xvc2VzdCgndGFibGUnKTtcclxuICAgICAgICAgICAgbGV0IGhhc01lcmdlTWFya2VycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTUzRjNcdTRGQTdcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0Q2VsbCA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3IoYFtyb3ctaW5kZXg9XCIke3Jvd0luZGV4fVwiXVtjb2wtaW5kZXg9XCIke2NvbEluZGV4ICsgMX1cIl1gKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGlmIChyaWdodENlbGwgJiYgcmlnaHRDZWxsLnRleHRDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmlnaHRDb250ZW50ID0gcmlnaHRDZWxsLnRleHRDb250ZW50LnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmlnaHRDb250ZW50ID09PSAnPCcgfHwgcmlnaHRDb250ZW50ID09PSAnXicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzTWVyZ2VNYXJrZXJzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHRDZWxsLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTVERjJcdTZFMDVcdTk2NjRcdTUzRjNcdTRGQTdcdTUzNTVcdTUxNDNcdTY4M0NcdTc2ODRcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjAnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NEUwQlx1NjVCOVx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmVsb3dDZWxsID0gdGFibGUucXVlcnlTZWxlY3RvcihgW3Jvdy1pbmRleD1cIiR7cm93SW5kZXggKyAxfVwiXVtjb2wtaW5kZXg9XCIke2NvbEluZGV4fVwiXWApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKGJlbG93Q2VsbCAmJiBiZWxvd0NlbGwudGV4dENvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiZWxvd0NvbnRlbnQgPSBiZWxvd0NlbGwudGV4dENvbnRlbnQudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWxvd0NvbnRlbnQgPT09ICc8JyB8fCBiZWxvd0NvbnRlbnQgPT09ICdeJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNNZXJnZU1hcmtlcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWxvd0NlbGwudGV4dENvbnRlbnQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NURGMlx1NkUwNVx1OTY2NFx1NEUwQlx1NjVCOVx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU5MDEyXHU1RjUyXHU2OEMwXHU2N0U1XHU1NDhDXHU2RTA1XHU5NjY0XHU1M0YzXHU0RkE3XHU4RkRFXHU3RUVEXHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gY29sSW5kZXggKyAxOyBpIDwgY29sSW5kZXggKyAxMDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dENlbGwgPSB0YWJsZS5xdWVyeVNlbGVjdG9yKGBbcm93LWluZGV4PVwiJHtyb3dJbmRleH1cIl1bY29sLWluZGV4PVwiJHtpfVwiXWApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Q2VsbCAmJiBuZXh0Q2VsbC50ZXh0Q29udGVudCAmJiBuZXh0Q2VsbC50ZXh0Q29udGVudC50cmltKCkgPT09ICc8Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q2VsbC50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNNZXJnZU1hcmtlcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1REYyXHU2RTA1XHU5NjY0XHU0RjREXHU3RjZFICgke3Jvd0luZGV4fSwgJHtpfSkgXHU3Njg0XHU2QzM0XHU1RTczXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTkwMTJcdTVGNTJcdTY4QzBcdTY3RTVcdTU0OENcdTZFMDVcdTk2NjRcdTRFMEJcdTY1QjlcdThGREVcdTdFRURcdTc2ODRcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSByb3dJbmRleCArIDE7IGkgPCByb3dJbmRleCArIDEwOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2VsbCA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3IoYFtyb3ctaW5kZXg9XCIke2l9XCJdW2NvbC1pbmRleD1cIiR7Y29sSW5kZXh9XCJdYCkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRDZWxsICYmIG5leHRDZWxsLnRleHRDb250ZW50ICYmIG5leHRDZWxsLnRleHRDb250ZW50LnRyaW0oKSA9PT0gJ14nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRDZWxsLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc01lcmdlTWFya2VycyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVERjJcdTZFMDVcdTk2NjRcdTRGNERcdTdGNkUgKCR7aX0sICR7Y29sSW5kZXh9KSBcdTc2ODRcdTU3ODJcdTc2RjRcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBgKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghY29sU3BhbiAmJiAhcm93U3BhbiAmJiAhaGFzTWVyZ2VNYXJrZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU5MDA5XHU0RTJEXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU2Q0ExXHU2NzA5XHU1NDA4XHU1RTc2XHU1QzVFXHU2MDI3XHVGRjBDXHU2NUUwXHU5NzAwXHU2MkM2XHU1MjA2Jyk7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTkwMDlcdTRFMkRcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTZDQTFcdTY3MDlcdTU0MDhcdTVFNzZcdTVDNUVcdTYwMjdcdUZGMENcdTY1RTBcdTk3MDBcdTYyQzZcdTUyMDYnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1NzI4IEhUTUwgXHU5ODg0XHU4OUM4XHU0RTJEXHVGRjBDXHU2MjExXHU0RUVDXHU1M0VBXHU4MEZEXHU5MDFBXHU4RkM3XHU0RkVFXHU2NTM5IERPTSBcdTY3NjVcdTZBMjFcdTYyREZcdTYyQzZcdTUyMDZcclxuICAgICAgICAgICAgLy8gXHU1QjlFXHU5NjQ1XHU0RTBBXHU5NzAwXHU4OTgxXHU0RkVFXHU2NTM5IE1hcmtkb3duIFx1NkU5MFx1NzgwMVx1NjI0RFx1ODBGRFx1NzcxRlx1NkI2M1x1NjJDNlx1NTIwNlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU3OUZCXHU5NjY0XHU1NDA4XHU1RTc2XHU1QzVFXHU2MDI3XHJcbiAgICAgICAgICAgIGlmIChjb2xTcGFuKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZUF0dHJpYnV0ZSgnY29sc3BhbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyb3dTcGFuKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZUF0dHJpYnV0ZSgncm93c3BhbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY2M0VcdTc5M0FcdTRFNEJcdTUyNERcdTk2OTBcdTg1Q0ZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoaWRkZW5DZWxscyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkW3N0eWxlKj1cImRpc3BsYXk6IG5vbmVcIl0sIHRoW3N0eWxlKj1cImRpc3BsYXk6IG5vbmVcIl0nKTtcclxuICAgICAgICAgICAgICAgIGhpZGRlbkNlbGxzLmZvckVhY2goaGlkZGVuQ2VsbCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgKGhpZGRlbkNlbGwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBuZXcgTm90aWNlKCdcdTVERjJcdTYyQzZcdTUyMDZcdTUzNTVcdTUxNDNcdTY4M0MnKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NTM1NVx1NTE0M1x1NjgzQ1x1NjJDNlx1NTIwNlx1NUI4Q1x1NjIxMCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2RTA1XHU5NjY0XHU5MDA5XHU2MkU5XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDZWxsU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU2MkM2XHU1MjA2XHU1MzU1XHU1MTQzXHU2ODNDXHU1OTMxXHU4RDI1OicsIGVycm9yKTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgXHU2MkM2XHU1MjA2XHU1MzU1XHU1MTQzXHU2ODNDXHU1OTMxXHU4RDI1OiAke2Vycm9yLm1lc3NhZ2UgfHwgJ1x1NjcyQVx1NzdFNVx1OTUxOVx1OEJFRid9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NzUxRlx1NjIxMFx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVUYWJsZUlkKCk6IHZvaWQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1ODlDNlx1NTZGRVxyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5nZXRBcHAoKS53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVZpZXcpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NjVFMFx1NkNENVx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1ODlDNlx1NTZGRScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTVGNTNcdTUyNERcdTZBMjFcdTVGMEZcclxuICAgICAgICAgICAgY29uc3QgaXNFZGl0TW9kZSA9IGFjdGl2ZVZpZXcuZ2V0TW9kZSgpID09PSAnc291cmNlJztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChpc0VkaXRNb2RlICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZUVkaXRNb2RlT3BlcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1NzI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHVGRjBDXHU0RjdGXHU3NTI4XHU3ODZFXHU4QkE0XHU1QkY5XHU4QkREXHU2ODQ2XHU4QkUyXHU5NUVFXHU3NTI4XHU2MjM3XHU2NjJGXHU1NDI2XHU4OTgxXHU1MjFCXHU1RUZBSURcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coJ1x1NjYyRlx1NTQyNlx1NEUzQVx1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ1x1NTIxQlx1NUVGQUlEXHVGRjFGXHU1MjFCXHU1RUZBXHU1NDBFXHU1QzA2XHU1NzI4XHU4ODY4XHU2ODNDXHU1MjREXHU2REZCXHU1MkEwSFRNTFx1NkNFOFx1OTFDQVx1MzAwMicpLnRoZW4oY29uZmlybWVkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTdGMTZcdThGOTFcdTU2NjhcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTVCOUFcdTRGNERcdTVGNTNcdTUyNERcdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlSW5mbyA9IHRoaXMucGx1Z2luLm1hcmtkb3duU291cmNlRWRpdG9yLmxvY2F0ZVRhYmxlSW5NYXJrZG93bihlZGl0b3IpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlSW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1ODg2OFx1NjgzQ1x1NjYyRlx1NTQyNlx1NURGMlx1NjcwOUlEXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlSW5mby50YWJsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1ODg2OFx1NjgzQ1x1NURGMlx1NjcwOUlEOiAke3RhYmxlSW5mby50YWJsZUlkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU3NTFGXHU2MjEwXHU0RTAwXHU0RTJBXHU2NUIwSURcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3SWQgPSB0aGlzLmdlbmVyYXRlVW5pcXVlVGFibGVJZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ1x1NUYwMFx1NTlDQlx1ODg0Q1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlU3RhcnRMaW5lID0gdGFibGVJbmZvLnN0YXJ0TGluZTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU1NzI4XHU4ODY4XHU2ODNDXHU1MjREXHU2M0QyXHU1MTY1XHU3QTdBXHU4ODRDXHU1NDhDXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShgPCEtLSB0YWJsZS1pZDogJHtuZXdJZH0gLS0+XFxuYCwgeyBsaW5lOiB0YWJsZVN0YXJ0TGluZSwgY2g6IDAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2MDYyXHU1OTBEXHU1MTQ5XHU2ODA3XHU0RjREXHU3RjZFXHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcihjdXJyZW50UG9zKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgXHU1REYyXHU0RTNBXHU4ODY4XHU2ODNDXHU2REZCXHU1MkEwSUQ6ICR7bmV3SWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTVERjJcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBJRDonLCBuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NjcyQVx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ1x1RkYwQ1x1OEJGN1x1Nzg2RVx1NEZERFx1NTE0OVx1NjgwN1x1NTcyOFx1ODg2OFx1NjgzQ1x1NTE4NScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTU3MjhcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdUZGMENcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTY3MDlcdTZEM0JcdTUyQThcdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmVUYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1OEJGN1x1NTE0OFx1OTAwOVx1NjJFOVx1NEUwMFx1NEUyQVx1ODg2OFx1NjgzQycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU3ODZFXHU4QkE0XHU1QkY5XHU4QkREXHU2ODQ2XHU4QkUyXHU5NUVFXHU3NTI4XHU2MjM3XHU2NjJGXHU1NDI2XHU4OTgxXHU1MjFCXHU1RUZBSURcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0NvbmZpcm1EaWFsb2coJ1x1NjYyRlx1NTQyNlx1NEUzQVx1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ1x1NTIxQlx1NUVGQUlEXHVGRjFGJykudGhlbihjb25maXJtZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29uZmlybWVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4VGFibGVJZE1hbmFnZXJcdTc2ODRjb25maXJtQW5kQ3JlYXRlVGFibGVJZFx1NjVCOVx1NkNENVx1NTIxQlx1NUVGQUlEXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFibGVJZCA9IHRoaXMuYWN0aXZlVGFibGUgPyB0aGlzLnBsdWdpbi50YWJsZUlkTWFuYWdlci5jb25maXJtQW5kQ3JlYXRlVGFibGVJZCh0aGlzLmFjdGl2ZVRhYmxlKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTIzN1x1NjVCMFx1OTg4NFx1ODlDOFx1NEVFNVx1NjYzRVx1NzkzQVx1NjVCMFx1NkRGQlx1NTJBMFx1NzY4NElEXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmdldEFwcCgpLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVWaWV3LnByZXZpZXdNb2RlLnJlcmVuZGVyKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1REYyXHU0RTNBXHU4ODY4XHU2ODNDXHU2REZCXHU1MkEwSUQ6JywgdGFibGVJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU1MjFCXHU1RUZBXHU4ODY4XHU2ODNDSURcdTU5MzFcdThEMjUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU1MjFCXHU1RUZBXHU4ODY4XHU2ODNDSURcdTU5MzFcdThEMjVcdUZGMENcdThCRjdcdTYyNEJcdTUyQThcdTZERkJcdTUyQTAnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NzUxRlx1NjIxMFx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgXHU3NTFGXHU2MjEwXHU4ODY4XHU2ODNDSURcdTY1RjZcdTUxRkFcdTk1MTk6ICR7ZXJyb3IubWVzc2FnZSB8fCAnXHU2NzJBXHU3N0U1XHU5NTE5XHU4QkVGJ31gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU3NTFGXHU2MjEwXHU1NTJGXHU0RTAwXHU3Njg0XHU4ODY4XHU2ODNDSURcclxuICAgICAqIEByZXR1cm5zIFx1NjgzQ1x1NUYwRlx1NEUzQSB0YmwtWVlZWU1NREQteHh4eHh4eHggXHU3Njg0XHU1NTJGXHU0RTAwSURcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVVuaXF1ZVRhYmxlSWQoKTogc3RyaW5nIHtcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTY1RTVcdTY3MUZcdTVFNzZcdTY4M0NcdTVGMEZcdTUzMTZcdTRFM0FZWVlZTU1ERFxyXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgY29uc3QgeWVhciA9IG5vdy5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgIGNvbnN0IG1vbnRoID0gU3RyaW5nKG5vdy5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgICAgICBjb25zdCBkYXkgPSBTdHJpbmcobm93LmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgICAgICBjb25zdCBkYXRlU3RyID0gYCR7eWVhcn0ke21vbnRofSR7ZGF5fWA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU3NTFGXHU2MjEwOFx1NEY0RFx1OTY4Rlx1NjczQVx1NUI1N1x1N0IyNlx1NEUzMlx1RkYwOFx1NUI1N1x1NkJDRFx1NTQ4Q1x1NjU3MFx1NUI1N1x1RkYwOVxyXG4gICAgICAgIGNvbnN0IHJhbmRvbUNoYXJzID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XHJcbiAgICAgICAgbGV0IHJhbmRvbVN0ciA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJhbmRvbVN0ciArPSByYW5kb21DaGFycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZG9tQ2hhcnMubGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1N0VDNFx1NTQwOElEXHJcbiAgICAgICAgcmV0dXJuIGB0YmwtJHtkYXRlU3RyfS0ke3JhbmRvbVN0cn1gO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NjhDMFx1NjdFNVx1ODg2OFx1NjgzQ1x1NjYyRlx1NTQyNlx1NURGMlx1NjcwOUlEXHJcbiAgICAgKiBAcGFyYW0gZWRpdG9yIFx1N0YxNlx1OEY5MVx1NTY2OFx1NUI5RVx1NEY4QlxyXG4gICAgICogQHJldHVybnMgXHU1REYyXHU2NzA5SURcdTYyMTZudWxsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2hlY2tFeGlzdGluZ1RhYmxlSWQoZWRpdG9yOiBFZGl0b3IpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gZWRpdG9yLmdldFZhbHVlKCk7XHJcbiAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NcdTVGMDBcdTU5Q0JcdTc2ODRcdTg4NENcclxuICAgICAgICBsZXQgdGFibGVTdGFydExpbmUgPSAtMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsaW5lc1tpXS50cmltKCkuc3RhcnRzV2l0aCgnfCcpICYmIGxpbmVzW2ldLmluY2x1ZGVzKCd8JykpIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NjYyRlx1ODg2OFx1NjgzQ1x1NzY4NFx1N0IyQ1x1NEUwMFx1ODg0Q1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgKyAxIDwgbGluZXMubGVuZ3RoICYmIGxpbmVzW2kgKyAxXS50cmltKCkubWF0Y2goL15cXHxbLTpcXHN8XSpcXHwkLykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZVN0YXJ0TGluZSA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRhYmxlU3RhcnRMaW5lID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gXHU2NzJBXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1ODg2OFx1NjgzQ1x1NTI0RFx1NjYyRlx1NTQyNlx1NURGMlx1NjcwOUlEXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgbGV0IGlkQ29tbWVudExpbmUgPSB0YWJsZVN0YXJ0TGluZSAtIDE7XHJcbiAgICAgICAgd2hpbGUgKGlkQ29tbWVudExpbmUgPj0gMCAmJiAobGluZXNbaWRDb21tZW50TGluZV0udHJpbSgpID09PSAnJyB8fCBsaW5lc1tpZENvbW1lbnRMaW5lXS50cmltKCkuc3RhcnRzV2l0aCgnPCEtLScpKSkge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaWRDb21tZW50TGluZV0udHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAobGluZS5pbmNsdWRlcygndGFibGUtaWQ6JykpIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NjNEMFx1NTNENklEXHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2goL3RhYmxlLWlkOlxccyooW15cXHM+XSspLyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWRDb21tZW50TGluZS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTYzRDBcdTUzRDZcdTVFNzZcdTVCNThcdTUwQThcdTg4NjhcdTY4M0NcdTRGRTFcdTYwNkZcclxuICAgICAqIEBwYXJhbSB0YWJsZUlkIFx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgKiBAcGFyYW0gdGFibGVFbGVtZW50IFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFxyXG4gICAgICogQHBhcmFtIGZpbGVQYXRoIFx1NjU4N1x1NEVGNlx1OERFRlx1NUY4NFxyXG4gICAgICovXHJcbiAgICBleHRyYWN0QW5kU3RvcmVUYWJsZUluZm8odGFibGVJZDogc3RyaW5nLCB0YWJsZUVsZW1lbnQ6IEhUTUxFbGVtZW50LCBmaWxlUGF0aDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU3RUQzXHU2Nzg0XHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgIGNvbnN0IHJvd3MgPSB0YWJsZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICAgICAgY29uc3Qgcm93Q291bnQgPSByb3dzLmxlbmd0aDtcclxuICAgICAgICAgICAgbGV0IGNvbENvdW50ID0gMDtcclxuICAgICAgICAgICAgbGV0IGhhc0hlYWRlcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1Nzg2RVx1NUI5QVx1NTIxN1x1NjU3MFx1NTQ4Q1x1ODg2OFx1NTkzNFx1NzJCNlx1NjAwMVxyXG4gICAgICAgICAgICBpZiAocm93Q291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTdCMkNcdTRFMDBcdTg4NENcdTY2MkZcdTU0MjZcdTY3MDl0aFx1NTE0M1x1N0QyMFx1RkYwOFx1ODg2OFx1NTkzNFx1RkYwOVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RSb3cgPSByb3dzWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyQ2VsbHMgPSBmaXJzdFJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0aCcpO1xyXG4gICAgICAgICAgICAgICAgaGFzSGVhZGVycyA9IGhlYWRlckNlbGxzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NjI0MFx1NjcwOVx1ODg0Q1x1NzY4NFx1NjcwMFx1NTkyN1x1NTIxN1x1NjU3MFxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCByb3cgb2YgQXJyYXkuZnJvbShyb3dzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxDb3VudCA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sQ291bnQgPSBNYXRoLm1heChjb2xDb3VudCwgY2VsbENvdW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU1NDA4XHU1RTc2XHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlSW5mbyA9IHRoaXMuZXh0cmFjdE1lcmdlSW5mbyh0YWJsZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU1NDA4XHU1RTc2XHU0RkUxXHU2MDZGOmAsIG1lcmdlSW5mbyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTdCODBcdTUzMTZcdTc2ODRcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTdFRDNcdTY3ODRcclxuICAgICAgICAgICAgY29uc3QgdGFibGVJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHRhYmxlSWQsXHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGZpbGVQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBzdHJ1Y3R1cmU6IHtcclxuICAgICAgICAgICAgICAgICAgICByb3dDb3VudDogcm93Q291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sQ291bnQ6IGNvbENvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGhhc0hlYWRlcnM6IGhhc0hlYWRlcnNcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzdHlsaW5nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93SGVpZ2h0czogQXJyYXkocm93Q291bnQpLmZpbGwoJ2F1dG8nKSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xXaWR0aHM6IEFycmF5KGNvbENvdW50KS5maWxsKCdhdXRvJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBBcnJheShjb2xDb3VudCkuZmlsbCgnbGVmdCcpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RkREXHU1QjU4XHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGOiBJRD0ke3RhYmxlSWR9LCBcdTg4NENcdTY1NzA9JHtyb3dDb3VudH0sIFx1NTIxN1x1NjU3MD0ke2NvbENvdW50fSwgXHU4ODY4XHU1OTM0PSR7aGFzSGVhZGVyc31gKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NEZERFx1NUI1OFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlVGFibGVEYXRhKHRhYmxlSW5mbyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU3Njg0XHU1NDA4XHU1RTc2XHU0RkUxXHU2MDZGXHJcbiAgICAgKiBAcGFyYW0gdGFibGVFbGVtZW50IFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFxyXG4gICAgICogQHJldHVybnMgXHU1NDA4XHU1RTc2XHU0RkUxXHU2MDZGXHU1QkY5XHU4QzYxXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZXh0cmFjdE1lcmdlSW5mbyh0YWJsZUVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYW55IHtcclxuICAgICAgICBpbnRlcmZhY2UgTWVyZ2VDZWxsIHtcclxuICAgICAgICAgICAgcm93OiBudW1iZXI7XHJcbiAgICAgICAgICAgIGNvbDogbnVtYmVyO1xyXG4gICAgICAgICAgICBjb3VudDogbnVtYmVyO1xyXG4gICAgICAgICAgICBjb250ZW50OiBzdHJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG1lcmdlSW5mbzoge1xyXG4gICAgICAgICAgICBob3Jpem9udGFsOiBNZXJnZUNlbGxbXTtcclxuICAgICAgICAgICAgdmVydGljYWw6IE1lcmdlQ2VsbFtdO1xyXG4gICAgICAgIH0gPSB7XHJcbiAgICAgICAgICAgIGhvcml6b250YWw6IFtdLFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbDogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJvd3MgPSB0YWJsZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICBmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgcm93cy5sZW5ndGg7IHJvd0luZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93ID0gcm93c1tyb3dJbmRleF07XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IGNlbGxzLmxlbmd0aDsgY29sSW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGNlbGxzW2NvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBjZWxsLnRleHRDb250ZW50Py50cmltKCkgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NTQxMVx1NURFNlx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdE1hdGNoID0gY29udGVudC5tYXRjaCgvXig8KykkLyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVmdE1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSBsZWZ0TWF0Y2hbMV0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlSW5mby5ob3Jpem9udGFsLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3c6IHJvd0luZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogY291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1NDExXHU0RTBBXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgICAgICBjb25zdCB1cE1hdGNoID0gY29udGVudC5tYXRjaCgvXihcXF4rKSQvKTtcclxuICAgICAgICAgICAgICAgIGlmICh1cE1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB1cE1hdGNoWzFdLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBtZXJnZUluZm8udmVydGljYWwucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogcm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiBjb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVjb2xzcGFuXHU1NDhDcm93c3Bhblx1NUM1RVx1NjAyN1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29sc3BhbiA9IHBhcnNlSW50KGNlbGwuZ2V0QXR0cmlidXRlKCdjb2xzcGFuJykgfHwgJzEnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd3NwYW4gPSBwYXJzZUludChjZWxsLmdldEF0dHJpYnV0ZSgncm93c3BhbicpIHx8ICcxJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChjb2xzcGFuID4gMSB8fCByb3dzcGFuID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTUzRDFcdTczQjBcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0M6IFx1NEY0RFx1N0Y2RSgke3Jvd0luZGV4fSwke2NvbEluZGV4fSksIGNvbHNwYW49JHtjb2xzcGFufSwgcm93c3Bhbj0ke3Jvd3NwYW59YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG1lcmdlSW5mbztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTY2M0VcdTc5M0FcdTZERkJcdTUyQTBcdTg4NENcdTgzRENcdTUzNTVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzaG93Um93QWRkTWVudSgpOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlVGFibGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTY1RTBcdTZEM0JcdTUyQThcdTg4NjhcdTY4M0NcdUZGMENcdTY1RTBcdTZDRDVcdTZERkJcdTUyQTBcdTg4NEMnKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1OEJGN1x1NTE0OFx1OTAwOVx1NjJFOVx1NEUwMFx1NEUyQVx1ODg2OFx1NjgzQycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXHU2NjNFXHU3OTNBXHU2REZCXHU1MkEwXHU4ODRDXHU4M0RDXHU1MzU1Jyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTgzRENcdTUzNTVcclxuICAgICAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTgzRENcdTUzNTVcdTk4NzlcclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtOiBhbnkpID0+IFxyXG4gICAgICAgICAgICAgICAgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZSgnXHU1NzI4XHU0RTBBXHU2NUI5XHU2REZCXHU1MkEwXHU4ODRDJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbignYXJyb3ctdXAnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRoaXMuYWRkUm93KCdhYm92ZScpKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtOiBhbnkpID0+IFxyXG4gICAgICAgICAgICAgICAgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZSgnXHU1NzI4XHU0RTBCXHU2NUI5XHU2REZCXHU1MkEwXHU4ODRDJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbignYXJyb3ctZG93bicpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4gdGhpcy5hZGRSb3coJ2JlbG93JykpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY2M0VcdTc5M0FcdTgzRENcdTUzNTVcclxuICAgICAgICAgICAgY29uc3QgdG9vbGJhckVsID0gdGhpcy50b29sYmFyO1xyXG4gICAgICAgICAgICBpZiAodG9vbGJhckVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gdG9vbGJhckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgbWVudS5zaG93QXRQb3NpdGlvbih7IHg6IHJlY3QubGVmdCwgeTogcmVjdC5ib3R0b20gfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZlbnQgYXMgTW91c2VFdmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTY2M0VcdTc5M0FcdTZERkJcdTUyQTBcdTg4NENcdTgzRENcdTUzNTVcdTU5MzFcdThEMjU6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBcdTY2M0VcdTc5M0FcdTZERkJcdTUyQTBcdTg4NENcdTgzRENcdTUzNTVcdTU5MzFcdThEMjU6ICR7ZXJyb3IubWVzc2FnZSB8fCAnXHU2NzJBXHU3N0U1XHU5NTE5XHU4QkVGJ31gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU2REZCXHU1MkEwXHU4ODRDXHJcbiAgICAgKiBAcGFyYW0gcG9zaXRpb24gXHU0RjREXHU3RjZFXHVGRjBDYWJvdmUgXHU2MjE2IGJlbG93XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWRkUm93KHBvc2l0aW9uOiAnYWJvdmUnIHwgJ2JlbG93Jyk6IHZvaWQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmVUYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjVFMFx1NkQzQlx1NTJBOFx1ODg2OFx1NjgzQ1x1RkYwQ1x1NjVFMFx1NkNENVx1NkRGQlx1NTJBMFx1ODg0QycpO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU4QkY3XHU1MTQ4XHU5MDA5XHU2MkU5XHU0RTAwXHU0RTJBXHU4ODY4XHU2ODNDJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTVGMDBcdTU5Q0JcdTZERkJcdTUyQTBcdTg4NEM6JywgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU5MDA5XHU0RTJEXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU2MjE2XHU3QjJDXHU0RTAwXHU4ODRDXHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRSb3c6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZENlbGxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NEY3Rlx1NzUyOFx1OTAwOVx1NEUyRFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjI0MFx1NTcyOFx1ODg0Q1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Um93ID0gdGhpcy5zZWxlY3RlZENlbGxzWzBdLmNsb3Nlc3QoJ3RyJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTg4NjhcdTY4M0NcdTc2ODRcdTdCMkNcdTRFMDBcdTg4NENcclxuICAgICAgICAgICAgICAgIHRhcmdldFJvdyA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvcigndHInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKCF0YXJnZXRSb3cpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NjVFMFx1NkNENVx1NjI3RVx1NTIzMFx1NzZFRVx1NjgwN1x1ODg0QycpO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NUUwXHU2Q0Q1XHU2MjdFXHU1MjMwXHU3NkVFXHU2ODA3XHU4ODRDJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1ODg0Q1x1NEUyRFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjU3MFx1OTFDRlxyXG4gICAgICAgICAgICBjb25zdCBjZWxsQ291bnQgPSB0YXJnZXRSb3cucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJykubGVuZ3RoO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU2NUIwXHU4ODRDXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1JvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZWxsQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgICAgICAgICBjZWxsLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBuZXdSb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjNEMlx1NTE2NVx1NjVCMFx1ODg0Q1xyXG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdhYm92ZScpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldFJvdy5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUobmV3Um93LCB0YXJnZXRSb3cpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Um93LnBhcmVudE5vZGU/Lmluc2VydEJlZm9yZShuZXdSb3csIHRhcmdldFJvdy5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1NURGMlx1NTcyOCR7cG9zaXRpb24gPT09ICdhYm92ZScgPyAnXHU0RTBBXHU2NUI5JyA6ICdcdTRFMEJcdTY1QjknfVx1NkRGQlx1NTJBMFx1ODg0Q2ApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXHU2REZCXHU1MkEwXHU4ODRDXHU1QjhDXHU2MjEwOicsIHBvc2l0aW9uKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTZERkJcdTUyQTBcdTg4NENcdTU5MzFcdThEMjU6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBcdTZERkJcdTUyQTBcdTg4NENcdTU5MzFcdThEMjU6ICR7ZXJyb3IubWVzc2FnZSB8fCAnXHU2NzJBXHU3N0U1XHU5NTE5XHU4QkVGJ31gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU2NkY0XHU2NUIwXHU4ODRDXHU3RDIyXHU1RjE1XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlUm93SW5kaWNlcygpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlVGFibGUpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCByb3dzID0gdGhpcy5hY3RpdmVUYWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG4gICAgICAgIHJvd3MuZm9yRWFjaCgocm93LCByb3dJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCwgY29sSW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdyb3ctaW5kZXgnLCByb3dJbmRleC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdjb2wtaW5kZXgnLCBjb2xJbmRleC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU2NjNFXHU3OTNBXHU2ODM3XHU1RjBGXHU4M0RDXHU1MzU1XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2hvd1N0eWxlTWVudSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcclxuICAgICAgICBcclxuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW06IGFueSkgPT4gXHJcbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoJ1x1OEJCRVx1N0Y2RVx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRicpXHJcbiAgICAgICAgICAgICAgICAuc2V0SWNvbignYnJ1c2gnKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjYzRVx1NzkzQVx1NjgzN1x1NUYwRlx1NUJGOVx1OEJERFx1Njg0NlxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NjgzN1x1NUYwRlx1OEJCRVx1N0Y2RVx1NTI5Rlx1ODBGRFx1NkI2M1x1NTcyOFx1NUYwMFx1NTNEMVx1NEUyRCcpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbTogYW55KSA9PiBcclxuICAgICAgICAgICAgaXRlbS5zZXRUaXRsZSgnXHU4QkJFXHU3RjZFXHU2NzYxXHU3RUI5XHU2ODM3XHU1RjBGJylcclxuICAgICAgICAgICAgICAgIC5zZXRJY29uKCdsaW5lcycpXHJcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLmFwcGx5U3RyaXBlZFN0eWxlKCkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBcclxuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW06IGFueSkgPT4gXHJcbiAgICAgICAgICAgIGl0ZW0uc2V0VGl0bGUoJ1x1OEJCRVx1N0Y2RVx1OEZCOVx1Njg0Nlx1NjgzN1x1NUYwRicpXHJcbiAgICAgICAgICAgICAgICAuc2V0SWNvbignYm94JylcclxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRoaXMuYXBwbHlCb3JkZXJlZFN0eWxlKCkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTlGMjBcdTY4MDdcdTRGNERcdTdGNkVcdTY2M0VcdTc5M0FcdTgzRENcdTUzNTVcclxuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLnRvb2xiYXIucXVlcnlTZWxlY3RvcignLnRhYmxlLXN0eWxlJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgcmVjdCA9IGJ1dHRvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBtZW51LnNob3dBdFBvc2l0aW9uKHsgeDogcmVjdC5sZWZ0LCB5OiByZWN0LmJvdHRvbSB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTVFOTRcdTc1MjhcdTY3NjFcdTdFQjlcdTY4MzdcdTVGMEZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhcHBseVN0cmlwZWRTdHlsZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlVGFibGUpIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU4QkY3XHU1MTQ4XHU5MDA5XHU2MkU5XHU0RTAwXHU0RTJBXHU4ODY4XHU2ODNDJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgcm93cyA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICByb3dzLmZvckVhY2goKHJvdywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCAmJiBpbmRleCAlIDIgPT09IDEpIHsgLy8gXHU4REYzXHU4RkM3XHU4ODY4XHU1OTM0XHU4ODRDXHVGRjBDXHU1M0VBXHU4QkJFXHU3RjZFXHU1OTQ3XHU2NTcwXHU4ODRDXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxscyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCcpO1xyXG4gICAgICAgICAgICAgICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAoY2VsbCBhcyBIVE1MRWxlbWVudCkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KSc7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5ldyBOb3RpY2UoJ1x1NURGMlx1NUU5NFx1NzUyOFx1Njc2MVx1N0VCOVx1NjgzN1x1NUYwRicpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NUU5NFx1NzUyOFx1OEZCOVx1Njg0Nlx1NjgzN1x1NUYwRlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFwcGx5Qm9yZGVyZWRTdHlsZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlVGFibGUpIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU4QkY3XHU1MTQ4XHU5MDA5XHU2MkU5XHU0RTAwXHU0RTJBXHU4ODY4XHU2ODNDJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hY3RpdmVUYWJsZS5zdHlsZS5ib3JkZXJDb2xsYXBzZSA9ICdjb2xsYXBzZSc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY2VsbHMgPSB0aGlzLmFjdGl2ZVRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLCB0aCcpO1xyXG4gICAgICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgICAgICAgIChjZWxsIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKSc7XHJcbiAgICAgICAgICAgIChjZWxsIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5wYWRkaW5nID0gJzRweCA4cHgnO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5ldyBOb3RpY2UoJ1x1NURGMlx1NUU5NFx1NzUyOFx1OEZCOVx1Njg0Nlx1NjgzN1x1NUYwRicpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1OEJCRVx1N0Y2RVx1NkQzQlx1NTJBOFx1ODg2OFx1NjgzQ1xyXG4gICAgICogQHBhcmFtIHRhYmxlIFx1ODg2OFx1NjgzQ0hUTUxcdTUxNDNcdTdEMjBcclxuICAgICAqL1xyXG4gICAgc2V0QWN0aXZlVGFibGUodGFibGU6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1OEJCRVx1N0Y2RVx1NkQzQlx1NTJBOFx1ODg2OFx1NjgzQycpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4QkIwXHU1RjU1XHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTg4NjhcdTY4M0NET01cdTdFRDNcdTY3ODQ6JywgdGFibGUub3V0ZXJIVE1MLnN1YnN0cmluZygwLCAyMDApICsgJy4uLicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU2NjJGXHU1NDI2XHU2NzA5SURcclxuICAgICAgICAgICAgY29uc3QgdGFibGVJZCA9IHRoaXMucGx1Z2luLnRhYmxlSWRNYW5hZ2VyLmdldFRhYmxlSWRlbnRpZmllcih0YWJsZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTg4NjhcdTY4M0NJRFx1NjhDMFx1NjdFNVx1N0VEM1x1Njc5QzogJHt0YWJsZUlkIHx8ICdcdTY3MkFcdTYyN0VcdTUyMzAnfWApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU3Njg0XHU1MjREXHU3RjZFXHU4MjgyXHU3MEI5XHJcbiAgICAgICAgICAgIGxldCBwcmV2Tm9kZSA9IHRhYmxlLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgbGV0IG5vZGVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTg4NjhcdTY4M0NcdTUyNERcdTdGNkVcdTgyODJcdTcwQjlcdTY4QzBcdTY3RTU6Jyk7XHJcbiAgICAgICAgICAgIHdoaWxlIChwcmV2Tm9kZSAmJiBub2RlQ291bnQgPCA1KSB7XHJcbiAgICAgICAgICAgICAgICBub2RlQ291bnQrKztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVUeXBlID0gcHJldk5vZGUubm9kZVR5cGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlVHlwZVN0ciA9IG5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERSA/ICdDT01NRU5UJyA6IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFID8gJ1RFWFQnIDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgPyAnRUxFTUVOVCcgOiAnT1RIRVInO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAgXHU1MjREXHU3RjZFXHU4MjgyXHU3MEI5IyR7bm9kZUNvdW50fTogXHU3QzdCXHU1NzhCPSR7bm9kZVR5cGVTdHJ9LCBcdTUxODVcdTVCQjk9XCIke3ByZXZOb2RlLnRleHRDb250ZW50Py50cmltKCkgfHwgJyd9XCJgKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHByZXZOb2RlLnRleHRDb250ZW50Py50cmltKCkgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCAgXHU1MjREXHU3RjZFXHU4MjgyXHU3MEI5IyR7bm9kZUNvdW50fTogXHU3QzdCXHU1NzhCPSR7bm9kZVR5cGVTdHJ9LCBcdTUxODVcdTVCQjk9XCIke3RleHQuc3Vic3RyaW5nKDAsIDIwKX0ke3RleHQubGVuZ3RoID4gMjAgPyAnLi4uJyA6ICcnfVwiYCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgIFx1NTI0RFx1N0Y2RVx1ODI4Mlx1NzBCOSMke25vZGVDb3VudH06IFx1N0M3Qlx1NTc4Qj0ke25vZGVUeXBlU3RyfSwgXHU2ODA3XHU3QjdFPTwkeyhwcmV2Tm9kZSBhcyBFbGVtZW50KS50YWdOYW1lLnRvTG93ZXJDYXNlKCl9PmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcHJldk5vZGUgPSBwcmV2Tm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEJCRVx1N0Y2RVx1NkQzQlx1NTJBOFx1ODg2OFx1NjgzQ1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVRhYmxlID0gdGFibGU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTc5RkJcdTk2NjRcdTYyNDBcdTY3MDlcdTg4NjhcdTY4M0NcdTlBRDhcdTRFQUVcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4ucmVtb3ZlQWxsVGFibGVIaWdobGlnaHRzKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTlBRDhcdTRFQUVcdTVGNTNcdTUyNERcdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uaGlnaGxpZ2h0U2VsZWN0ZWRUYWJsZSh0YWJsZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTg4NjhcdTY4M0NcdTUzNTVcdTUxNDNcdTY4M0NcdTkwMDlcdTYyRTlcclxuICAgICAgICAgICAgdGhpcy5zZXR1cENlbGxTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTZEM0JcdTUyQThcdTg4NjhcdTY4M0NcdThCQkVcdTdGNkVcdTVCOENcdTYyMTAnKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdThCQkVcdTdGNkVcdTZEM0JcdTUyQThcdTg4NjhcdTY4M0NcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdThCQkVcdTdGNkVcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEZcdTRFMEJcdTc2ODRcdTZEM0JcdTUyQThcdTg4NjhcdTY4M0NcclxuICAgICAqIEBwYXJhbSB0YWJsZUluZm8gXHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcbiAgICAgKi9cclxuICAgIHNldEFjdGl2ZUVkaXRNb2RlVGFibGUodGFibGVJbmZvOiB7IHN0YXJ0TGluZTogbnVtYmVyLCBlbmRMaW5lOiBudW1iZXIsIGNvbnRlbnQ6IHN0cmluZyB9KTogdm9pZCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU2RTA1XHU5NjY0XHU0RTRCXHU1MjREXHU3Njg0XHU5MDA5XHU2MkU5XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2VsbFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTZFMDVcdTk2NjRcdTRFNEJcdTUyNERcdTg4NjhcdTY4M0NcdTc2ODRcdTkwMDlcdTRFMkRcdTcyQjZcdTYwMDFcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlVGFibGUuZGF0YXNldC50YWJsZVNlbGVjdGVkID0gJ2ZhbHNlJztcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlVGFibGUuc3R5bGUub3V0bGluZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVUYWJsZS5zdHlsZS5vdXRsaW5lT2Zmc2V0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVRhYmxlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1NzI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHVGRjBDXHU2MjExXHU0RUVDXHU2Q0ExXHU2NzA5XHU1QjlFXHU5NjQ1XHU3Njg0XHU4ODY4XHU2ODNDXHU1MTQzXHU3RDIwXHJcbiAgICAgICAgICAgIC8vIFx1NEY0Nlx1NTNFRlx1NEVFNVx1OEJCMFx1NUY1NVx1ODg2OFx1NjgzQ1x1NzY4NFx1NEY0RFx1N0Y2RVx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICB0aGlzLmVkaXRNb2RlVGFibGVJbmZvID0gdGFibGVJbmZvO1xyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdThCQjBcdTVGNTVcdTY1RTVcdTVGRDdcdTRFRTVcdTRGQkZcdThDMDNcdThCRDVcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1OTAwOVx1NjJFOVx1NEU4Nlx1ODg2OFx1NjgzQzonLCB0YWJsZUluZm8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OEJCRVx1N0Y2RVx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NkQzQlx1NTJBOFx1ODg2OFx1NjgzQ1x1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NjhDMFx1NjdFNVx1NUY1M1x1NTI0RFx1NjYyRlx1NTQyNlx1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlxyXG4gICAgICogQHJldHVybnMgXHU2NjJGXHU1NDI2XHU1NzI4XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHJcbiAgICAgKi9cclxuICAgIGlzSW5FZGl0TW9kZSgpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5nZXRBcHAoKS53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG4gICAgICAgIHJldHVybiBhY3RpdmVWaWV3ID8gYWN0aXZlVmlldy5nZXRNb2RlKCkgPT09ICdzb3VyY2UnIDogZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU4QkJFXHU3RjZFXHU1MzU1XHU1MTQzXHU2ODNDXHU5MDA5XHU2MkU5XHU1MjlGXHU4MEZEXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0dXBDZWxsU2VsZWN0aW9uKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVUYWJsZSkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNlbGxzID0gdGhpcy5hY3RpdmVUYWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTgxRUFcdTVCOUFcdTRFNDlcdTVDNUVcdTYwMjdcdTRFRTVcdTY4MDdcdThCQzZcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgY29uc3QgY2VsbEVsID0gY2VsbCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NEU4Qlx1NEVGNlx1NzZEMVx1NTQyQ1x1NTY2OFxyXG4gICAgICAgICAgICBjZWxsRWwub25jbGljayA9IChldmVudDogTW91c2VFdmVudCkgPT4gdGhpcy5oYW5kbGVDZWxsQ2xpY2soY2VsbEVsLCBldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogXHU1OTA0XHU3NDA2XHU1MzU1XHU1MTQzXHU2ODNDXHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHJcbiAgICAgKiBAcGFyYW0gY2VsbCBcdTUzNTVcdTUxNDNcdTY4M0NcdTUxNDNcdTdEMjBcclxuICAgICAqIEBwYXJhbSBldmVudCBcdTRFOEJcdTRFRjZcdTVCRjlcdThDNjFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVDZWxsQ2xpY2soY2VsbDogSFRNTEVsZW1lbnQsIGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgLy8gXHU5NjNCXHU2QjYyXHU0RThCXHU0RUY2XHU1MTkyXHU2Q0UxXHVGRjBDXHU3ODZFXHU0RkREXHU0RTBEXHU0RjFBXHU4OUU2XHU1M0QxXHU4ODY4XHU2ODNDXHU3Njg0XHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU2MzA5XHU0RjRGXHU0RTg2Q3RybFx1OTUyRVx1RkYwOFx1NTkxQVx1OTAwOVx1RkYwOVxyXG4gICAgICAgIGlmICghZXZlbnQuY3RybEtleSAmJiAhZXZlbnQubWV0YUtleSkge1xyXG4gICAgICAgICAgICAvLyBcdTUzRDZcdTZEODhcdTRFNEJcdTUyNERcdTc2ODRcdTkwMDlcdTYyRTlcclxuICAgICAgICAgICAgdGhpcy5jbGVhckNlbGxTZWxlY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjA3XHU2MzYyXHU1MzU1XHU1MTQzXHU2ODNDXHU5MDA5XHU2MkU5XHU3MkI2XHU2MDAxXHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnNlbGVjdGVkQ2VsbHMuaW5kZXhPZihjZWxsKTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDZWxscy5wdXNoKGNlbGwpO1xyXG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkLWNlbGwnKTtcclxuICAgICAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndmFyKC0tdGV4dC1zZWxlY3Rpb24pJztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjYzRVx1NzkzQVx1N0I4MFx1NzdFRFx1NjNEMFx1NzkzQVxyXG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuc2VsZWN0ZWRDZWxscy5sZW5ndGggPiAxID8gJ1x1NTkxQVx1OTAwOVx1NkEyMVx1NUYwRicgOiAnXHU1REYyXHU5MDA5XHU2MkU5XHU1MzU1XHU1MTQzXHU2ODNDJztcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgJHtwb3NpdGlvbn0gKCR7dGhpcy5zZWxlY3RlZENlbGxzLmxlbmd0aH0pYCwgMTAwMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENlbGxzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2NjNFXHU3OTNBXHU1M0Q2XHU2RDg4XHU5MDA5XHU2MkU5XHU2M0QwXHU3OTNBXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQ2VsbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgXHU1REYyXHU5MDA5XHU2MkU5ICR7dGhpcy5zZWxlY3RlZENlbGxzLmxlbmd0aH0gXHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDYCwgMTAwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4QkIwXHU1RjU1XHU5MDA5XHU2MkU5XHU3MkI2XHU2MDAxXHU0RUU1XHU0RkJGXHU4QzAzXHU4QkQ1XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1x1NURGMlx1OTAwOVx1NjJFOVx1NTM1NVx1NTE0M1x1NjgzQzonLCB0aGlzLnNlbGVjdGVkQ2VsbHMubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTZFMDVcdTk2NjRcdTUzNTVcdTUxNDNcdTY4M0NcdTkwMDlcdTYyRTlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjbGVhckNlbGxTZWxlY3Rpb24oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZENlbGxzLmZvckVhY2goY2VsbCA9PiB7XHJcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQtY2VsbCcpO1xyXG4gICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcnO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRDZWxscyA9IFtdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NjYzRVx1NzkzQVx1Nzg2RVx1OEJBNFx1NUJGOVx1OEJERFx1Njg0NlxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgXHU3ODZFXHU4QkE0XHU2RDg4XHU2MDZGXHJcbiAgICAgKiBAcmV0dXJucyBcdTc1MjhcdTYyMzdcdTY2MkZcdTU0MjZcdTc4NkVcdThCQTRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBzaG93Q29uZmlybURpYWxvZyhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU0RTAwXHU0RTJBXHU0RTBEXHU0RjFBXHU4MUVBXHU1MkE4XHU2RDg4XHU1OTMxXHU3Njg0XHU5MDFBXHU3N0U1XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdGljZSA9IG5ldyBOb3RpY2UobWVzc2FnZSwgMCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTYzMDlcdTk0QUVcdTVCQjlcdTU2NjhcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgICAgICBidXR0b25Db250YWluZXIuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnc3BhY2UtYmV0d2Vlbic7XHJcbiAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5tYXJnaW5Ub3AgPSAnMTBweCc7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUzRDZcdTZEODhcdTYzMDlcdTk0QUVcclxuICAgICAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbi50ZXh0Q29udGVudCA9ICdcdTUzRDZcdTZEODgnO1xyXG4gICAgICAgICAgICBjYW5jZWxCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG5vdGljZS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1Nzg2RVx1OEJBNFx1NjMwOVx1OTRBRVxyXG4gICAgICAgICAgICBjb25zdCBjb25maXJtQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b24udGV4dENvbnRlbnQgPSAnXHU3ODZFXHU1QjlBJztcclxuICAgICAgICAgICAgY29uZmlybUJ1dHRvbi5zdHlsZS5tYXJnaW5MZWZ0ID0gJzEwcHgnO1xyXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBub3RpY2UuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjMwOVx1OTRBRVx1NTIzMFx1NUJCOVx1NTY2OFxyXG4gICAgICAgICAgICBidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoY2FuY2VsQnV0dG9uKTtcclxuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNvbmZpcm1CdXR0b24pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2MzA5XHU5NEFFXHU1QkI5XHU1NjY4XHU1MjMwXHU5MDFBXHU3N0U1XHJcbiAgICAgICAgICAgIG5vdGljZS5ub3RpY2VFbC5hcHBlbmRDaGlsZChidXR0b25Db250YWluZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NUU5NFx1NzUyOFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1NjgzN1x1NUYwRlxyXG4gICAgICogQHBhcmFtIG1haW5DZWxsIFx1NEUzQlx1NTM1NVx1NTE0M1x1NjgzQ1x1RkYwOFx1NEZERFx1NzU1OVx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1RkYwOVxyXG4gICAgICogQHBhcmFtIG1lcmdlZENlbGxzIFx1ODhBQlx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1x1RkYwOFx1NUMwNlx1ODhBQlx1OTY5MFx1ODVDRlx1RkYwOVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFwcGx5TWVyZ2VkQ2VsbFN0eWxlcyhtYWluQ2VsbDogSFRNTEVsZW1lbnQsIG1lcmdlZENlbGxzOiBIVE1MRWxlbWVudFtdKTogdm9pZCB7XHJcbiAgICAgICAgLy8gXHU0RTNBXHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHU2REZCXHU1MkEwXHU1NDA4XHU1RTc2XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgbWFpbkNlbGwuY2xhc3NMaXN0LmFkZCgnb2JzLW1lcmdlZC1jZWxsLW1haW4nKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdThCQkVcdTdGNkVcdTRFODZcdTgxRUFcdTUyQThcdTVDNDVcdTRFMkRcdUZGMENcdTUyMTlcdTVFOTRcdTc1MjhcdTVDNDVcdTRFMkRcdTY4MzdcdTVGMEZcclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b0NlbnRlck1lcmdlZENlbGxzKSB7XHJcbiAgICAgICAgICAgIG1haW5DZWxsLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICAgICAgICBtYWluQ2VsbC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gJ21pZGRsZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OTY5MFx1ODVDRlx1ODhBQlx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgIGZvciAoY29uc3QgY2VsbCBvZiBtZXJnZWRDZWxscykge1xyXG4gICAgICAgICAgICBjZWxsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NjgwN1x1OEJCMFx1NEUzQlx1NTM1NVx1NTE0M1x1NjgzQ1x1NEUzQVx1NURGMlx1NTQwOFx1NUU3NlxyXG4gICAgICAgIG1haW5DZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1tZXJnZWQtbWFpbicsICd0cnVlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTZFMDVcdTk2NjRcdTg4NjhcdTY4M0NcdTkwMDlcdTYyRTlcclxuICAgICAqL1xyXG4gICAgY2xlYXJTZWxlY3Rpb24oKTogdm9pZCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU2RTA1XHU5NjY0XHU1MzU1XHU1MTQzXHU2ODNDXHU5MDA5XHU2MkU5XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDZWxsU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZFMDVcdTk2NjRcdTg4NjhcdTY4M0NcdTkwMDlcdTYyRTlcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlVGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlVGFibGUuZGF0YXNldC50YWJsZVNlbGVjdGVkID0gJ2ZhbHNlJztcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlVGFibGUuc3R5bGUub3V0bGluZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVUYWJsZS5zdHlsZS5vdXRsaW5lT2Zmc2V0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVRhYmxlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2RTA1XHU5NjY0XHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgIHRoaXMuZWRpdE1vZGVUYWJsZUluZm8gPSBudWxsO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NURGMlx1NkUwNVx1OTY2NFx1ODg2OFx1NjgzQ1x1OTAwOVx1NjJFOScpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NkUwNVx1OTY2NFx1ODg2OFx1NjgzQ1x1OTAwOVx1NjJFOVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4M0I3XHU1M0Q2XHU5MDA5XHU0RTJEXHU1MzU1XHU1MTQzXHU2ODNDXHU3Njg0XHU4RkI5XHU3NTRDXHJcbiAgICAgKiBAcmV0dXJucyBcdThGQjlcdTc1NENcdTRGRTFcdTYwNkYge21pblJvdywgbWF4Um93LCBtaW5Db2wsIG1heENvbH1cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRTZWxlY3RlZENlbGxzQm91bmRhcnkoKTogeyBtaW5Sb3c6IG51bWJlciwgbWF4Um93OiBudW1iZXIsIG1pbkNvbDogbnVtYmVyLCBtYXhDb2w6IG51bWJlciB9IHwgbnVsbCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkQ2VsbHMgfHwgdGhpcy5zZWxlY3RlZENlbGxzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IG1pblJvdyA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gICAgICAgIGxldCBtYXhSb3cgPSAwO1xyXG4gICAgICAgIGxldCBtaW5Db2wgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICAgICAgICBsZXQgbWF4Q29sID0gMDtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGNvbnN0IGNlbGwgb2YgdGhpcy5zZWxlY3RlZENlbGxzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ3Jvdy1pbmRleCcpIHx8ICcwJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbEluZGV4ID0gcGFyc2VJbnQoY2VsbC5nZXRBdHRyaWJ1dGUoJ2NvbC1pbmRleCcpIHx8ICcwJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBtaW5Sb3cgPSBNYXRoLm1pbihtaW5Sb3csIHJvd0luZGV4KTtcclxuICAgICAgICAgICAgbWF4Um93ID0gTWF0aC5tYXgobWF4Um93LCByb3dJbmRleCk7XHJcbiAgICAgICAgICAgIG1pbkNvbCA9IE1hdGgubWluKG1pbkNvbCwgY29sSW5kZXgpO1xyXG4gICAgICAgICAgICBtYXhDb2wgPSBNYXRoLm1heChtYXhDb2wsIGNvbEluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHsgbWluUm93LCBtYXhSb3csIG1pbkNvbCwgbWF4Q29sIH07XHJcbiAgICB9XHJcbn1cclxuIiwgImltcG9ydCB7IE9ic2lkaWFuU3ByZWFkc2hlZXQgfSBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBOb3RpY2UsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbi8qKlxyXG4gKiBNYXJrZG93blx1NkU5MFx1NzgwMVx1N0YxNlx1OEY5MVx1NTY2OCAtIFx1OEQxRlx1OEQyM1x1NTcyOFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1NEUwQlx1NzZGNFx1NjNBNVx1NEZFRVx1NjUzOU1hcmtkb3duXHU2RTkwXHU3ODAxXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWFya2Rvd25Tb3VyY2VFZGl0b3Ige1xyXG4gICAgcHJpdmF0ZSBwbHVnaW46IE9ic2lkaWFuU3ByZWFkc2hlZXQ7XHJcbiAgICBcclxuICAgIC8vIFx1OEY4NVx1NTJBOVx1NjVCOVx1NkNENVx1RkYwQ1x1ODNCN1x1NTNENmFwcFx1NUJGOVx1OEM2MVxyXG4gICAgcHJpdmF0ZSBnZXRBcHAoKTogQXBwIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucGx1Z2luIGFzIHVua25vd24gYXMgUGx1Z2luKS5hcHA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogT2JzaWRpYW5TcHJlYWRzaGVldCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNYXJrZG93blNvdXJjZUVkaXRvciBpbml0aWFsaXplZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU2RDNCXHU1MkE4XHU3Njg0XHU3RjE2XHU4RjkxXHU1NjY4XHJcbiAgICAgKiBAcmV0dXJucyBcdTdGMTZcdThGOTFcdTU2NjhcdTVCOUVcdTRGOEJcdTYyMTZudWxsXHJcbiAgICAgKi9cclxuICAgIGdldEFjdGl2ZUVkaXRvcigpOiBFZGl0b3IgfCBudWxsIHtcclxuICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5nZXRBcHAoKS53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG4gICAgICAgIGlmIChhY3RpdmVWaWV3ICYmIGFjdGl2ZVZpZXcuZWRpdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhY3RpdmVWaWV3LmVkaXRvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTU3MjhNYXJrZG93blx1NkU5MFx1NzgwMVx1NEUyRFx1NUI5QVx1NEY0RFx1ODg2OFx1NjgzQ1xyXG4gICAgICogQHBhcmFtIGVkaXRvciBcdTdGMTZcdThGOTFcdTU2NjhcdTVCOUVcdTRGOEJcclxuICAgICAqIEByZXR1cm5zIFx1ODg2OFx1NjgzQ1x1NEZFMVx1NjA2Rlx1NjIxNm51bGxcclxuICAgICAqL1xyXG4gICAgbG9jYXRlVGFibGVJbk1hcmtkb3duKGVkaXRvcjogRWRpdG9yKTogeyBzdGFydExpbmU6IG51bWJlciwgZW5kTGluZTogbnVtYmVyLCBjb250ZW50OiBzdHJpbmcsIHRhYmxlSWQ/OiBzdHJpbmcgfSB8IG51bGwge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBlZGl0b3IuZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1MTQ5XHU2ODA3XHU2NjJGXHU1NDI2XHU1NzI4XHU4ODY4XHU2ODNDXHU1MTg1XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnNvckxpbmUgPSBsaW5lc1tjdXJzb3IubGluZV07XHJcbiAgICAgICAgICAgIGNvbnN0IGlzSW5UYWJsZVJvdyA9IGN1cnNvckxpbmUgJiYgY3Vyc29yTGluZS50cmltKCkuc3RhcnRzV2l0aCgnfCcpICYmIGN1cnNvckxpbmUudHJpbSgpLmVuZHNXaXRoKCd8Jyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTUxNDlcdTY4MDdcdTRFMERcdTU3MjhcdTg4NjhcdTY4M0NcdTg4NENcdTUxODVcdUZGMENcdThGRDRcdTU2REVudWxsXHJcbiAgICAgICAgICAgIGlmICghaXNJblRhYmxlUm93KSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTQxMVx1NEUwQVx1NjQxQ1x1N0QyMlx1ODg2OFx1NjgzQ1x1NUYwMFx1NTlDQlxyXG4gICAgICAgICAgICBsZXQgc3RhcnRMaW5lID0gY3Vyc29yLmxpbmU7XHJcbiAgICAgICAgICAgIHdoaWxlIChzdGFydExpbmUgPiAwICYmIGxpbmVzW3N0YXJ0TGluZSAtIDFdLnRyaW0oKS5zdGFydHNXaXRoKCd8JykpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0TGluZS0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU0MTFcdTRFMEJcdTY0MUNcdTdEMjJcdTg4NjhcdTY4M0NcdTdFRDNcdTY3NUZcclxuICAgICAgICAgICAgbGV0IGVuZExpbmUgPSBjdXJzb3IubGluZTtcclxuICAgICAgICAgICAgd2hpbGUgKGVuZExpbmUgPCBsaW5lcy5sZW5ndGggLSAxICYmIGxpbmVzW2VuZExpbmUgKyAxXS50cmltKCkuc3RhcnRzV2l0aCgnfCcpKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRMaW5lKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OUE4Q1x1OEJDMVx1NjYyRlx1NTQyNlx1NjI3RVx1NTIzMFx1NjcwOVx1NjU0OFx1ODg2OFx1NjgzQ1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZFRhYmxlKGxpbmVzLnNsaWNlKHN0YXJ0TGluZSwgZW5kTGluZSArIDEpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlSWQgPSB0aGlzLmZpbmRUYWJsZUlkQWJvdmUoZWRpdG9yLCBzdGFydExpbmUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0TGluZSxcclxuICAgICAgICAgICAgICAgIGVuZExpbmUsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBsaW5lcy5zbGljZShzdGFydExpbmUsIGVuZExpbmUgKyAxKS5qb2luKCdcXG4nKSxcclxuICAgICAgICAgICAgICAgIHRhYmxlSWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTVCOUFcdTRGNERNYXJrZG93blx1ODg2OFx1NjgzQ1x1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTU3MjhcdTg4NjhcdTY4M0NcdTRFMEFcdTY1QjlcdTY3RTVcdTYyN0VcdTg4NjhcdTY4M0NJRFxyXG4gICAgICogQHBhcmFtIGVkaXRvciBcdTdGMTZcdThGOTFcdTU2NjhcdTVCOUVcdTRGOEJcclxuICAgICAqIEBwYXJhbSB0YWJsZUxpbmUgXHU4ODY4XHU2ODNDXHU4RDc3XHU1OUNCXHU4ODRDXHJcbiAgICAgKiBAcmV0dXJucyBcdTg4NjhcdTY4M0NJRFx1NjIxNnVuZGVmaW5lZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGZpbmRUYWJsZUlkQWJvdmUoZWRpdG9yOiBFZGl0b3IsIHRhYmxlTGluZTogbnVtYmVyKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgXHU2N0U1XHU2MjdFXHU4ODY4XHU2ODNDSUQ6IFx1ODg2OFx1NjgzQ1x1OEQ3N1x1NTlDQlx1ODg0Qz0ke3RhYmxlTGluZX1gKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTU0MTFcdTRFMEFcdTY3MDBcdTU5MUFcdTY3RTVcdTYyN0UxMFx1ODg0Q1xyXG4gICAgICAgIGNvbnN0IG1heExpbmVzVG9DaGVjayA9IDEwO1xyXG4gICAgICAgIGxldCBjdXJyZW50TGluZSA9IHRhYmxlTGluZSAtIDE7XHJcbiAgICAgICAgY29uc3QgbWluTGluZSA9IE1hdGgubWF4KDAsIHRhYmxlTGluZSAtIG1heExpbmVzVG9DaGVjayk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgd2hpbGUgKGN1cnJlbnRMaW5lID49IG1pbkxpbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGN1cnJlbnRMaW5lKTtcclxuICAgICAgICAgICAgaWYgKCFsaW5lKSBicmVhaztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTY4QzBcdTY3RTVcdTg4NEMgJHtjdXJyZW50TGluZX06IFwiJHtsaW5lfVwiYCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTU5MUFcdTc5Q0RcdTUzRUZcdTgwRkRcdTc2ODRJRFx1NkNFOFx1OTFDQVx1NjgzQ1x1NUYwRlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gMS4gPCEtLSB0YWJsZS1pZDogeHh4IC0tPlxyXG4gICAgICAgICAgICBjb25zdCBzdGFuZGFyZElkTWF0Y2ggPSBsaW5lLm1hdGNoKC88IS0tXFxzKnRhYmxlLWlkOlxccyooW2EtekEtWjAtOV9cXC06Ll0rKVxccyotLT4vaSk7XHJcbiAgICAgICAgICAgIGlmIChzdGFuZGFyZElkTWF0Y2ggJiYgc3RhbmRhcmRJZE1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHN0YW5kYXJkSWRNYXRjaFsxXTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTU3MjhcdTg4NEMgJHtjdXJyZW50TGluZX0gXHU2MjdFXHU1MjMwXHU2ODA3XHU1MUM2XHU2ODNDXHU1RjBGXHU4ODY4XHU2ODNDSUQ6ICR7aWR9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIDIuIDwhLS0gdGFibGVpZDogeHh4IC0tPlxyXG4gICAgICAgICAgICBjb25zdCBub0h5cGhlbklkTWF0Y2ggPSBsaW5lLm1hdGNoKC88IS0tXFxzKnRhYmxlaWQ6XFxzKihbYS16QS1aMC05X1xcLTouXSspXFxzKi0tPi9pKTtcclxuICAgICAgICAgICAgaWYgKG5vSHlwaGVuSWRNYXRjaCAmJiBub0h5cGhlbklkTWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gbm9IeXBoZW5JZE1hdGNoWzFdO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTcyOFx1ODg0QyAke2N1cnJlbnRMaW5lfSBcdTYyN0VcdTUyMzBcdTY1RTBcdThGREVcdTVCNTdcdTdCMjZcdTY4M0NcdTVGMEZcdTg4NjhcdTY4M0NJRDogJHtpZH1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gMy4gPCEtLSBpZDogeHh4IC0tPlxyXG4gICAgICAgICAgICBjb25zdCBzaW1wbGVJZE1hdGNoID0gbGluZS5tYXRjaCgvPCEtLVxccyppZDpcXHMqKFthLXpBLVowLTlfXFwtOi5dKylcXHMqLS0+L2kpO1xyXG4gICAgICAgICAgICBpZiAoc2ltcGxlSWRNYXRjaCAmJiBzaW1wbGVJZE1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHNpbXBsZUlkTWF0Y2hbMV07XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1NzI4XHU4ODRDICR7Y3VycmVudExpbmV9IFx1NjI3RVx1NTIzMFx1N0I4MFx1NTMxNlx1NjgzQ1x1NUYwRlx1ODg2OFx1NjgzQ0lEOiAke2lkfWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyA0LiA8IS0tIHRhYmxlOiB4eHggLS0+IFx1NjIxNiA8IS0tIHRibDogeHh4IC0tPlxyXG4gICAgICAgICAgICBjb25zdCB0YWJsZU5hbWVJZE1hdGNoID0gbGluZS5tYXRjaCgvPCEtLVxccyoodGFibGV8dGJsKTpcXHMqKFthLXpBLVowLTlfXFwtOi5dKylcXHMqLS0+L2kpO1xyXG4gICAgICAgICAgICBpZiAodGFibGVOYW1lSWRNYXRjaCAmJiB0YWJsZU5hbWVJZE1hdGNoWzJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHRhYmxlTmFtZUlkTWF0Y2hbMl07XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1NzI4XHU4ODRDICR7Y3VycmVudExpbmV9IFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ1x1NTQwRFx1NzlGMFx1NjgzQ1x1NUYwRklEOiAke2lkfWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyA1LiBcdTY4QzBcdTY3RTVcdTRFMERcdTVFMjZcdTdBN0FcdTY4M0NcdTc2ODRcdTY4M0NcdTVGMEYgPCEtLXRhYmxlLWlkOnh4eC0tPlxyXG4gICAgICAgICAgICBjb25zdCBub1NwYWNlSWRNYXRjaCA9IGxpbmUubWF0Y2goLzwhLS10YWJsZS1pZDooW2EtekEtWjAtOV9cXC06Ll0rKS0tPi9pKTtcclxuICAgICAgICAgICAgaWYgKG5vU3BhY2VJZE1hdGNoICYmIG5vU3BhY2VJZE1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IG5vU3BhY2VJZE1hdGNoWzFdO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTcyOFx1ODg0QyAke2N1cnJlbnRMaW5lfSBcdTYyN0VcdTUyMzBcdTY1RTBcdTdBN0FcdTY4M0NcdTY4M0NcdTVGMEZcdTg4NjhcdTY4M0NJRDogJHtpZH1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU5MDQ3XHU1MjMwXHU5NzVFXHU3QTdBXHU4ODRDXHU0RTE0XHU0RTBEXHU2NjJGXHU2Q0U4XHU5MUNBXHU4ODRDXHVGRjBDXHU1MjE5XHU1MDVDXHU2QjYyXHU2NDFDXHU3RDIyXHJcbiAgICAgICAgICAgIC8vIFx1NEY0Nlx1NTE0MVx1OEJCOFx1N0E3QVx1ODg0Q1x1NTQ4Q1x1NTE3Nlx1NEVENlx1NkNFOFx1OTFDQVx1ODg0Q1xyXG4gICAgICAgICAgICBpZiAobGluZS50cmltKCkgIT09ICcnICYmICFsaW5lLnRyaW0oKS5zdGFydHNXaXRoKCc8IS0tJykgJiYgIWxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJy8vJykpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTU3MjhcdTg4NEMgJHtjdXJyZW50TGluZX0gXHU5MDQ3XHU1MjMwXHU5NzVFXHU3QTdBXHU5NzVFXHU2Q0U4XHU5MUNBXHU4ODRDXHVGRjBDXHU1MDVDXHU2QjYyXHU2NDFDXHU3RDIyYCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY3VycmVudExpbmUtLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1x1NjcyQVx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEJyk7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1OUE4Q1x1OEJDMU1hcmtkb3duXHU4ODY4XHU2ODNDXHU3RUQzXHU2Nzg0XHU2NjJGXHU1NDI2XHU2NzA5XHU2NTQ4XHJcbiAgICAgKiBAcGFyYW0gbGluZXMgXHU4ODY4XHU2ODNDXHU4ODRDXHU2NTcwXHU3RUM0XHJcbiAgICAgKiBAcmV0dXJucyBcdTY2MkZcdTU0MjZcdTRFM0FcdTY3MDlcdTY1NDhcdTg4NjhcdTY4M0NcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc1ZhbGlkVGFibGUobGluZXM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA8IDIpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTdCMkNcdTRFMDBcdTg4NENcdTY2MkZcdTU0MjZcdTY2MkZcdTg4NjhcdTU5MzRcclxuICAgICAgICBjb25zdCBmaXJzdExpbmUgPSBsaW5lc1swXS50cmltKCk7XHJcbiAgICAgICAgaWYgKCFmaXJzdExpbmUuc3RhcnRzV2l0aCgnfCcpIHx8ICFmaXJzdExpbmUuZW5kc1dpdGgoJ3wnKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1N0IyQ1x1NEU4Q1x1ODg0Q1x1NjYyRlx1NTQyNlx1NjYyRlx1NTIwNlx1OTY5NFx1ODg0Q1xyXG4gICAgICAgIGNvbnN0IHNlY29uZExpbmUgPSBsaW5lc1sxXS50cmltKCk7XHJcbiAgICAgICAgaWYgKCFzZWNvbmRMaW5lLnN0YXJ0c1dpdGgoJ3wnKSB8fCAhc2Vjb25kTGluZS5lbmRzV2l0aCgnfCcpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjA2XHU5Njk0XHU4ODRDXHU1RkM1XHU5ODdCXHU1MzA1XHU1NDJCIC0gXHU1QjU3XHU3QjI2XHJcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yQ2VsbHMgPSBzZWNvbmRMaW5lLnNwbGl0KCd8Jykuc2xpY2UoMSwgLTEpO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2VsbCBvZiBzZXBhcmF0b3JDZWxscykge1xyXG4gICAgICAgICAgICBjb25zdCB0cmltbWVkQ2VsbCA9IGNlbGwudHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAoIXRyaW1tZWRDZWxsLm1hdGNoKC9eOj8tKzo/JC8pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2MjQwXHU2NzA5XHU4ODRDXHU3Njg0XHU2ODNDXHU1RjBGXHU2NjJGXHU1NDI2XHU0RTAwXHU4MUY0XHVGRjA4XHU5MEZEXHU0RUU1IHwgXHU1RjAwXHU1OTM0XHU1NDhDXHU3RUQzXHU1QzNFXHVGRjA5XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDI7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAoIWxpbmUuc3RhcnRzV2l0aCgnfCcpIHx8ICFsaW5lLmVuZHNXaXRoKCd8JykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NEUzQU1hcmtkb3duXHU4ODY4XHU2ODNDXHU2REZCXHU1MkEwSURcclxuICAgICAqIEByZXR1cm5zIFx1NkRGQlx1NTJBMFx1NzY4NFx1ODg2OFx1NjgzQ0lEXHU2MjE2bnVsbFxyXG4gICAgICovXHJcbiAgICBhc3luYyBhZGRUYWJsZUlkVG9NYXJrZG93bigpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSB0aGlzLmdldEFjdGl2ZUVkaXRvcigpO1xyXG4gICAgICAgICAgICBpZiAoIWVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NzJBXHU2MjdFXHU1MjMwXHU2RDNCXHU1MkE4XHU3RjE2XHU4RjkxXHU1NjY4Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU1QjlBXHU0RjREXHU4ODY4XHU2ODNDXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlSW5mbyA9IHRoaXMubG9jYXRlVGFibGVJbk1hcmtkb3duKGVkaXRvcik7XHJcbiAgICAgICAgICAgIGlmICghdGFibGVJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0NcdUZGMENcdThCRjdcdTVDMDZcdTUxNDlcdTY4MDdcdTY1M0VcdTU3MjhcdTg4NjhcdTY4M0NcdTUxODUnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTg4NjhcdTY4M0NcdTUyNERcdTY2MkZcdTU0MjZcdTVERjJcdTY3MDlJRFxyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUlkID0gdGhpcy5jaGVja0V4aXN0aW5nVGFibGVJZChlZGl0b3IsIHRhYmxlSW5mby5zdGFydExpbmUpO1xyXG4gICAgICAgICAgICBpZiAodGFibGVJZCkge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgXHU4ODY4XHU2ODNDXHU1REYyXHU2NzA5SUQ6ICR7dGFibGVJZH1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZUlkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBcdTc1MUZcdTYyMTBcdTY1QjBcdTc2ODRcdTg4NjhcdTY4M0NJRFxyXG4gICAgICAgICAgICBjb25zdCBuZXdUYWJsZUlkID0gdGhpcy5nZW5lcmF0ZVVuaXF1ZVRhYmxlSWQoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBcdTY1QjBJRDogJHtuZXdUYWJsZUlkfSwgXHU4ODY4XHU2ODNDXHU4RDc3XHU1OUNCXHU4ODRDOiAke3RhYmxlSW5mby5zdGFydExpbmV9YCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTg4NjhcdTY4M0NcdTUyNERcdTY2MkZcdTU0MjZcdTY3MDlcdTdBN0FcdTg4NENcclxuICAgICAgICAgICAgbGV0IGluc2VydFBvc2l0aW9uID0geyBsaW5lOiB0YWJsZUluZm8uc3RhcnRMaW5lLCBjaDogMCB9O1xyXG4gICAgICAgICAgICBsZXQgaW5zZXJ0Q29udGVudCA9IGA8IS0tIHRhYmxlLWlkOiAke25ld1RhYmxlSWR9IC0tPlxcbmA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTg4NjhcdTY4M0NcdTUyNERcdTZDQTFcdTY3MDlcdTdBN0FcdTg4NENcdUZGMENcdTZERkJcdTUyQTBcdTRFMDBcdTRFMkFcdTdBN0FcdTg4NENcclxuICAgICAgICAgICAgaWYgKHRhYmxlSW5mby5zdGFydExpbmUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2TGluZSA9IGVkaXRvci5nZXRMaW5lKHRhYmxlSW5mby5zdGFydExpbmUgLSAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2TGluZSAmJiBwcmV2TGluZS50cmltKCkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0Q29udGVudCA9IGBcXG48IS0tIHRhYmxlLWlkOiAke25ld1RhYmxlSWR9IC0tPlxcbmA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTcyOFx1ODg2OFx1NjgzQ1x1NTI0RFx1NjNEMlx1NTE2NUlEXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoaW5zZXJ0Q29udGVudCwgaW5zZXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU0RkREXHU1QjU4XHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHU1MjMwXHU2M0QyXHU0RUY2XHU2NTcwXHU2MzZFXHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVRhYmxlSW5mbyhuZXdUYWJsZUlkLCB0YWJsZUluZm8pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NURGMlx1NEUzQVx1ODg2OFx1NjgzQ1x1NkRGQlx1NTJBMElEOiAke25ld1RhYmxlSWR9YCk7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1NURGMlx1NEUzQVx1ODg2OFx1NjgzQ1x1NkRGQlx1NTJBMElEOiAke25ld1RhYmxlSWR9YCk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdUYWJsZUlkO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NkRGQlx1NTJBMFx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1NEZERFx1NUI1OFx1ODg2OFx1NjgzQ1x1NEZFMVx1NjA2Rlx1NTIzMFx1NjNEMlx1NEVGNlx1NjU3MFx1NjM2RVxyXG4gICAgICogQHBhcmFtIHRhYmxlSWQgXHU4ODY4XHU2ODNDSURcclxuICAgICAqIEBwYXJhbSB0YWJsZUluZm8gXHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2F2ZVRhYmxlSW5mbyh0YWJsZUlkOiBzdHJpbmcsIHRhYmxlSW5mbzogeyBzdGFydExpbmU6IG51bWJlciwgZW5kTGluZTogbnVtYmVyLCBjb250ZW50OiBzdHJpbmcgfSk6IHZvaWQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NjU4N1x1NEVGNlx1OERFRlx1NUY4NFxyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5nZXRBcHAoKS53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVZpZXcgfHwgIWFjdGl2ZVZpZXcuZmlsZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBhY3RpdmVWaWV3LmZpbGUucGF0aDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1ODlFM1x1Njc5MFx1ODg2OFx1NjgzQ1x1N0VEM1x1Njc4NFxyXG4gICAgICAgICAgICBjb25zdCB7IHJvd3MsIGhhc0hlYWRlciB9ID0gdGhpcy5wYXJzZVRhYmxlU3RydWN0dXJlKHRhYmxlSW5mby5jb250ZW50KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxyXG4gICAgICAgICAgICBjb25zdCB0YWJsZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBpZDogdGFibGVJZCxcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogZmlsZVBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIHN0cnVjdHVyZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd0NvdW50OiByb3dzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICBjb2xDb3VudDogcm93cy5sZW5ndGggPiAwID8gcm93c1swXS5sZW5ndGggOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhc0hlYWRlcnM6IGhhc0hlYWRlclxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHN0eWxpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICByb3dIZWlnaHRzOiBBcnJheShyb3dzLmxlbmd0aCkuZmlsbCgnYXV0bycpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbFdpZHRoczogcm93cy5sZW5ndGggPiAwID8gQXJyYXkocm93c1swXS5sZW5ndGgpLmZpbGwoJ2F1dG8nKSA6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogcm93cy5sZW5ndGggPiAwID8gQXJyYXkocm93c1swXS5sZW5ndGgpLmZpbGwoJ2xlZnQnKSA6IFtdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTRGRERcdTVCNThcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVRhYmxlRGF0YSh0YWJsZURhdGEpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NEZERFx1NUI1OFx1ODg2OFx1NjgzQ1x1NEZFMVx1NjA2Rlx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU2NjJGXHU1NDI2XHU1REYyXHU2NzA5SURcclxuICAgICAqIEBwYXJhbSBlZGl0b3IgXHU3RjE2XHU4RjkxXHU1NjY4XHU1QjlFXHU0RjhCXHJcbiAgICAgKiBAcGFyYW0gdGFibGVMaW5lIFx1ODg2OFx1NjgzQ1x1OEQ3N1x1NTlDQlx1ODg0Q1xyXG4gICAgICogQHJldHVybnMgXHU4ODY4XHU2ODNDSURcdTYyMTZudWxsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2hlY2tFeGlzdGluZ1RhYmxlSWQoZWRpdG9yOiBFZGl0b3IsIHRhYmxlTGluZTogbnVtYmVyKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICAgICAgaWYgKHRhYmxlTGluZSA8PSAwKSByZXR1cm4gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhgXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU2NjJGXHU1NDI2XHU1REYyXHU2NzA5SUQ6IFx1ODg2OFx1NjgzQ1x1OEQ3N1x1NTlDQlx1ODg0Qz0ke3RhYmxlTGluZX1gKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTU0MTFcdTRFMEFcdTY3RTVcdTYyN0VcdTY3MDBcdTU5MUExMFx1ODg0Q1x1RkYwQ1x1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1NjcwOUlEXHU2Q0U4XHU5MUNBXHJcbiAgICAgICAgY29uc3QgbWF4TGluZXNUb0NoZWNrID0gMTA7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRMaW5lID0gdGFibGVMaW5lIC0gMTtcclxuICAgICAgICBjb25zdCBtaW5MaW5lID0gTWF0aC5tYXgoMCwgdGFibGVMaW5lIC0gbWF4TGluZXNUb0NoZWNrKTtcclxuICAgICAgICBcclxuICAgICAgICB3aGlsZSAoY3VycmVudExpbmUgPj0gbWluTGluZSkge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gZWRpdG9yLmdldExpbmUoY3VycmVudExpbmUpO1xyXG4gICAgICAgICAgICBpZiAoIWxpbmUpIGJyZWFrO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NjhDMFx1NjdFNVx1ODg0QyAke2N1cnJlbnRMaW5lfTogXCIke2xpbmV9XCJgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NTkxQVx1NzlDRFx1NTNFRlx1ODBGRFx1NzY4NElEXHU2Q0U4XHU5MUNBXHU2ODNDXHU1RjBGXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyAxLiA8IS0tIHRhYmxlLWlkOiB4eHggLS0+XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YW5kYXJkSWRNYXRjaCA9IGxpbmUubWF0Y2goLzwhLS1cXHMqdGFibGUtaWQ6XFxzKihbYS16QS1aMC05X1xcLTouXSspXFxzKi0tPi9pKTtcclxuICAgICAgICAgICAgaWYgKHN0YW5kYXJkSWRNYXRjaCAmJiBzdGFuZGFyZElkTWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gc3RhbmRhcmRJZE1hdGNoWzFdO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTcyOFx1ODg0QyAke2N1cnJlbnRMaW5lfSBcdTYyN0VcdTUyMzBcdTY4MDdcdTUxQzZcdTY4M0NcdTVGMEZcdTg4NjhcdTY4M0NJRDogJHtpZH1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gMi4gPCEtLSB0YWJsZWlkOiB4eHggLS0+XHJcbiAgICAgICAgICAgIGNvbnN0IG5vSHlwaGVuSWRNYXRjaCA9IGxpbmUubWF0Y2goLzwhLS1cXHMqdGFibGVpZDpcXHMqKFthLXpBLVowLTlfXFwtOi5dKylcXHMqLS0+L2kpO1xyXG4gICAgICAgICAgICBpZiAobm9IeXBoZW5JZE1hdGNoICYmIG5vSHlwaGVuSWRNYXRjaFsxXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBub0h5cGhlbklkTWF0Y2hbMV07XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1NzI4XHU4ODRDICR7Y3VycmVudExpbmV9IFx1NjI3RVx1NTIzMFx1NjVFMFx1OEZERVx1NUI1N1x1N0IyNlx1NjgzQ1x1NUYwRlx1ODg2OFx1NjgzQ0lEOiAke2lkfWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyAzLiA8IS0tIGlkOiB4eHggLS0+XHJcbiAgICAgICAgICAgIGNvbnN0IHNpbXBsZUlkTWF0Y2ggPSBsaW5lLm1hdGNoKC88IS0tXFxzKmlkOlxccyooW2EtekEtWjAtOV9cXC06Ll0rKVxccyotLT4vaSk7XHJcbiAgICAgICAgICAgIGlmIChzaW1wbGVJZE1hdGNoICYmIHNpbXBsZUlkTWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gc2ltcGxlSWRNYXRjaFsxXTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTU3MjhcdTg4NEMgJHtjdXJyZW50TGluZX0gXHU2MjdFXHU1MjMwXHU3QjgwXHU1MzE2XHU2ODNDXHU1RjBGXHU4ODY4XHU2ODNDSUQ6ICR7aWR9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIDQuIDwhLS0gdGFibGU6IHh4eCAtLT4gXHU2MjE2IDwhLS0gdGJsOiB4eHggLS0+XHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlTmFtZUlkTWF0Y2ggPSBsaW5lLm1hdGNoKC88IS0tXFxzKih0YWJsZXx0YmwpOlxccyooW2EtekEtWjAtOV9cXC06Ll0rKVxccyotLT4vaSk7XHJcbiAgICAgICAgICAgIGlmICh0YWJsZU5hbWVJZE1hdGNoICYmIHRhYmxlTmFtZUlkTWF0Y2hbMl0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gdGFibGVOYW1lSWRNYXRjaFsyXTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTU3MjhcdTg4NEMgJHtjdXJyZW50TGluZX0gXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDXHU1NDBEXHU3OUYwXHU2ODNDXHU1RjBGSUQ6ICR7aWR9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIDUuIFx1NjhDMFx1NjdFNVx1NEUwRFx1NUUyNlx1N0E3QVx1NjgzQ1x1NzY4NFx1NjgzQ1x1NUYwRiA8IS0tdGFibGUtaWQ6eHh4LS0+XHJcbiAgICAgICAgICAgIGNvbnN0IG5vU3BhY2VJZE1hdGNoID0gbGluZS5tYXRjaCgvPCEtLXRhYmxlLWlkOihbYS16QS1aMC05X1xcLTouXSspLS0+L2kpO1xyXG4gICAgICAgICAgICBpZiAobm9TcGFjZUlkTWF0Y2ggJiYgbm9TcGFjZUlkTWF0Y2hbMV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gbm9TcGFjZUlkTWF0Y2hbMV07XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1NzI4XHU4ODRDICR7Y3VycmVudExpbmV9IFx1NjI3RVx1NTIzMFx1NjVFMFx1N0E3QVx1NjgzQ1x1NjgzQ1x1NUYwRlx1ODg2OFx1NjgzQ0lEOiAke2lkfWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTkwNDdcdTUyMzBcdTk3NUVcdTdBN0FcdTg4NENcdTRFMTRcdTRFMERcdTY2MkZcdTZDRThcdTkxQ0FcdTg4NENcdUZGMENcdTUyMTlcdTUwNUNcdTZCNjJcdTY0MUNcdTdEMjJcclxuICAgICAgICAgICAgLy8gXHU0RjQ2XHU1MTQxXHU4QkI4XHU3QTdBXHU4ODRDXHU1NDhDXHU1MTc2XHU0RUQ2XHU2Q0U4XHU5MUNBXHU4ODRDXHJcbiAgICAgICAgICAgIGlmIChsaW5lLnRyaW0oKSAhPT0gJycgJiYgIWxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJzwhLS0nKSAmJiAhbGluZS50cmltKCkuc3RhcnRzV2l0aCgnLy8nKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTcyOFx1ODg0QyAke2N1cnJlbnRMaW5lfSBcdTkwNDdcdTUyMzBcdTk3NUVcdTdBN0FcdTk3NUVcdTZDRThcdTkxQ0FcdTg4NENcdUZGMENcdTUwNUNcdTZCNjJcdTY0MUNcdTdEMjJgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjdXJyZW50TGluZS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZygnXHU2NzJBXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSUQnKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NzUxRlx1NjIxMFx1NTUyRlx1NEUwMFx1NzY4NFx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgKiBAcmV0dXJucyBcdTg4NjhcdTY4M0NJRFx1NUI1N1x1N0IyNlx1NEUzMlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdlbmVyYXRlVW5pcXVlVGFibGVJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmlkUHJlZml4IHx8ICd0YmwnO1xyXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCkucmVwbGFjZSgvLS9nLCAnJyk7XHJcbiAgICAgICAgY29uc3QgcmFuZG9tSWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOCk7XHJcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0tJHt0aW1lc3RhbXB9LSR7cmFuZG9tSWR9YDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1ODlFM1x1Njc5MFx1ODg2OFx1NjgzQ1x1N0VEM1x1Njc4NFxyXG4gICAgICogQHBhcmFtIHRhYmxlQ29udGVudCBcdTg4NjhcdTY4M0NcdTUxODVcdTVCQjlcdTVCNTdcdTdCMjZcdTRFMzJcclxuICAgICAqIEByZXR1cm5zIFx1ODlFM1x1Njc5MFx1NTQwRVx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxyXG4gICAgICovXHJcbiAgICBwYXJzZVRhYmxlU3RydWN0dXJlKHRhYmxlQ29udGVudDogc3RyaW5nKTogeyByb3dzOiBzdHJpbmdbXVtdLCBoYXNIZWFkZXI6IGJvb2xlYW4gfSB7XHJcbiAgICAgICAgY29uc3QgbGluZXMgPSB0YWJsZUNvbnRlbnQuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgIGNvbnN0IHJvd3M6IHN0cmluZ1tdW10gPSBbXTtcclxuICAgICAgICBsZXQgaGFzSGVhZGVyID0gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAoIWxpbmUuc3RhcnRzV2l0aCgnfCcpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTIwNlx1OTY5NFx1ODg0Q1x1NTkwNFx1NzQwNlxyXG4gICAgICAgICAgICBpZiAobGluZS5pbmNsdWRlcygnLScpICYmIGkgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGhhc0hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4OUUzXHU2NzkwXHU4ODRDXHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gbGluZS5zcGxpdCgnfCcpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChjZWxsLCBpbmRleCwgYXJyYXkpID0+IGluZGV4ID4gMCAmJiBpbmRleCA8IGFycmF5Lmxlbmd0aCAtIDEpXHJcbiAgICAgICAgICAgICAgICAubWFwKGNlbGwgPT4gY2VsbC50cmltKCkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcm93cy5wdXNoKGNlbGxzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHsgcm93cywgaGFzSGVhZGVyIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTgzQjdcdTUzRDZcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAqIEBwYXJhbSB0YWJsZVJvd3MgXHU4ODY4XHU2ODNDXHU4ODRDXHU2NTcwXHU3RUM0XHJcbiAgICAgKiBAcGFyYW0gcm93SW5kZXggXHU4ODRDXHU3RDIyXHU1RjE1XHJcbiAgICAgKiBAcGFyYW0gY29sSW5kZXggXHU1MjE3XHU3RDIyXHU1RjE1XHJcbiAgICAgKiBAcmV0dXJucyBcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAqL1xyXG4gICAgZ2V0Q2VsbENvbnRlbnQodGFibGVSb3dzOiBzdHJpbmdbXVtdLCByb3dJbmRleDogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAocm93SW5kZXggPj0gMCAmJiByb3dJbmRleCA8IHRhYmxlUm93cy5sZW5ndGggJiYgXHJcbiAgICAgICAgICAgIGNvbEluZGV4ID49IDAgJiYgY29sSW5kZXggPCB0YWJsZVJvd3Nbcm93SW5kZXhdLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFibGVSb3dzW3Jvd0luZGV4XVtjb2xJbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1OEJCRVx1N0Y2RVx1NTM1NVx1NTE0M1x1NjgzQ1x1NTE4NVx1NUJCOVxyXG4gICAgICogQHBhcmFtIGVkaXRvciBcdTdGMTZcdThGOTFcdTU2NjhcdTVCOUVcdTRGOEJcclxuICAgICAqIEBwYXJhbSB0YWJsZUluZm8gXHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcbiAgICAgKiBAcGFyYW0gcm93SW5kZXggXHU4ODRDXHU3RDIyXHU1RjE1XHJcbiAgICAgKiBAcGFyYW0gY29sSW5kZXggXHU1MjE3XHU3RDIyXHU1RjE1XHJcbiAgICAgKiBAcGFyYW0gY29udGVudCBcdTY1QjBcdTUxODVcdTVCQjlcclxuICAgICAqL1xyXG4gICAgc2V0Q2VsbENvbnRlbnQoZWRpdG9yOiBFZGl0b3IsIHRhYmxlSW5mbzogeyBzdGFydExpbmU6IG51bWJlciwgZW5kTGluZTogbnVtYmVyIH0sIFxyXG4gICAgICAgICAgICAgICAgICByb3dJbmRleDogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyLCBjb250ZW50OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTg4NENcclxuICAgICAgICAgICAgY29uc3QgbGluZUluZGV4ID0gdGFibGVJbmZvLnN0YXJ0TGluZSArIHJvd0luZGV4O1xyXG4gICAgICAgICAgICBpZiAobGluZUluZGV4ID4gdGFibGVJbmZvLmVuZExpbmUpIHJldHVybjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoIWxpbmUpIHJldHVybjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTIwNlx1NTI3Mlx1ODg0Q1xyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IGxpbmUuc3BsaXQoJ3wnKTtcclxuICAgICAgICAgICAgaWYgKGNvbEluZGV4ICsgMSA+PSBjZWxscy5sZW5ndGggLSAxKSByZXR1cm47XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgY2VsbHNbY29sSW5kZXggKyAxXSA9IGAgJHtjb250ZW50fSBgO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2NkY0XHU2NUIwXHU2NTc0XHU4ODRDXHJcbiAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICBjZWxscy5qb2luKCd8JyksXHJcbiAgICAgICAgICAgICAgICB7IGxpbmU6IGxpbmVJbmRleCwgY2g6IDAgfSxcclxuICAgICAgICAgICAgICAgIHsgbGluZTogbGluZUluZGV4LCBjaDogbGluZS5sZW5ndGggfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OEJCRVx1N0Y2RVx1NTM1NVx1NTE0M1x1NjgzQ1x1NTE4NVx1NUJCOVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIFx1NTQwOFx1NUU3Nlx1NjVCOVx1NTQxMSAoJ3JpZ2h0JyBcdTYyMTYgJ2Rvd24nKVxyXG4gICAgICovXHJcbiAgICBhc3luYyBtZXJnZUNlbGxzKGRpcmVjdGlvbjogJ3JpZ2h0JyB8ICdkb3duJyk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVDMURcdThCRDUke2RpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/ICdcdTU0MTFcdTUzRjMnIDogJ1x1NTQxMVx1NEUwQid9XHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDYCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSB0aGlzLmdldEFjdGl2ZUVkaXRvcigpO1xyXG4gICAgICAgICAgICBpZiAoIWVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjcyQVx1NjI3RVx1NTIzMFx1NkQzQlx1NTJBOFx1N0YxNlx1OEY5MVx1NTY2OCcpO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NzJBXHU2MjdFXHU1MjMwXHU2RDNCXHU1MkE4XHU3RjE2XHU4RjkxXHU1NjY4Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NTM1NVx1NTE0M1x1NjgzQ1x1NEY0RFx1N0Y2RVx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICBjb25zdCBjZWxsUG9zaXRpb24gPSB0aGlzLmdldENlbGxQb3NpdGlvbihlZGl0b3IpO1xyXG4gICAgICAgICAgICBpZiAoIWNlbGxQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjcyQVx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ1x1NjIxNlx1NjVFMFx1NkNENVx1Nzg2RVx1NUI5QVx1NTM1NVx1NTE0M1x1NjgzQ1x1NEY0RFx1N0Y2RScpO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NzJBXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDXHU2MjE2XHU2NUUwXHU2Q0Q1XHU3ODZFXHU1QjlBXHU1MzU1XHU1MTQzXHU2ODNDXHU0RjREXHU3RjZFXHVGRjBDXHU4QkY3XHU1QzA2XHU1MTQ5XHU2ODA3XHU2NTNFXHU1NzI4XHU4ODY4XHU2ODNDXHU1MTg1Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHsgdGFibGVJbmZvLCByb3dJbmRleCwgY29sSW5kZXggfSA9IGNlbGxQb3NpdGlvbjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTFDNlx1NTkwNyR7ZGlyZWN0aW9uID09PSAncmlnaHQnID8gJ1x1NTQxMVx1NTNGMycgOiAnXHU1NDExXHU0RTBCJ31cdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0M6IFx1ODg0Qz0ke3Jvd0luZGV4fSwgXHU1MjE3PSR7Y29sSW5kZXh9YCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4MzlcdTYzNkVcdTY1QjlcdTU0MTFcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLm1lcmdlQ2VsbHNSaWdodChlZGl0b3IsIHRhYmxlSW5mbywgcm93SW5kZXgsIGNvbEluZGV4KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5tZXJnZUNlbGxzRG93bihlZGl0b3IsIHRhYmxlSW5mbywgcm93SW5kZXgsIGNvbEluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7ZGlyZWN0aW9uID09PSAncmlnaHQnID8gJ1x1NTQxMVx1NTNGMycgOiAnXHU1NDExXHU0RTBCJ31cdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTYyMTBcdTUyOUZgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2RpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/ICdcdTU0MTFcdTUzRjMnIDogJ1x1NTQxMVx1NEUwQid9XHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU1OTMxXHU4RDI1YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU2NUY2XHU1MUZBXHU5NTE5KCR7ZGlyZWN0aW9ufSk6YCwgZXJyb3IpO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTU5MzFcdThEMjU6ICR7ZXJyb3IubWVzc2FnZSB8fCAnXHU2NzJBXHU3N0U1XHU5NTE5XHU4QkVGJ31gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1ODNCN1x1NTNENlx1NTE0OVx1NjgwN1x1NjI0MFx1NTcyOFx1NzY4NFx1NTIxN1x1N0QyMlx1NUYxNVxyXG4gICAgICogQHBhcmFtIGxpbmUgXHU4ODRDXHU2NTg3XHU2NzJDXHJcbiAgICAgKiBAcGFyYW0gY3Vyc29yQ2ggXHU1MTQ5XHU2ODA3XHU1QjU3XHU3QjI2XHU0RjREXHU3RjZFXHJcbiAgICAgKiBAcmV0dXJucyBcdTUyMTdcdTdEMjJcdTVGMTVcdTYyMTYtMVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEN1cnNvckNvbHVtbkluZGV4KGxpbmU6IHN0cmluZywgY3Vyc29yQ2g6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU4ODRDXHU2NjJGXHU4ODY4XHU2ODNDXHU4ODRDXHJcbiAgICAgICAgICAgIGlmICghbGluZS50cmltKCkuc3RhcnRzV2l0aCgnfCcpIHx8ICFsaW5lLnRyaW0oKS5lbmRzV2l0aCgnfCcpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU4ODRDXHU0RTBEXHU2NjJGXHU2NzA5XHU2NTQ4XHU3Njg0XHU4ODY4XHU2ODNDXHU4ODRDOicsIGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUyMDZcdTUyNzJcdTg4NENcdTRFM0FcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSBsaW5lLnNwbGl0KCd8Jyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTc5RkJcdTk2NjRcdTk5OTZcdTVDM0VcdTdBN0FcdTUxNDNcdTdEMjBcdUZGMDhcdTU5ODJcdTY3OUNcdTY3MDlcdUZGMDlcclxuICAgICAgICAgICAgaWYgKGNlbGxzWzBdLnRyaW0oKSA9PT0gJycpIGNlbGxzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGlmIChjZWxsc1tjZWxscy5sZW5ndGggLSAxXS50cmltKCkgPT09ICcnKSBjZWxscy5wb3AoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NkJDRlx1NEUyQVx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1OEQ3N1x1NTlDQlx1NEY0RFx1N0Y2RVxyXG4gICAgICAgICAgICBsZXQgY3VycmVudFBvcyA9IGxpbmUuaW5kZXhPZignfCcpOyAvLyBcdTdCMkNcdTRFMDBcdTRFMkFcdTUyMDZcdTk2OTRcdTdCMjZcdTRGNERcdTdGNkVcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OTA0RFx1NTM4Nlx1NkJDRlx1NEUyQVx1NTM1NVx1NTE0M1x1NjgzQ1x1RkYwQ1x1NjI3RVx1NTIzMFx1NTE0OVx1NjgwN1x1NjI0MFx1NTcyOFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsV2lkdGggPSBjZWxsc1tpXS5sZW5ndGggKyAxOyAvLyArMSBmb3IgdGhlICd8JyBjaGFyYWN0ZXJcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRQb3MgPSBjdXJyZW50UG9zICsgY2VsbFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2OEMwXHU2N0U1XHU1MzU1XHU1MTQzXHU2ODNDICR7aX06IFx1ODMwM1x1NTZGND0ke2N1cnJlbnRQb3N9LSR7bmV4dFBvc30sIFx1NTE4NVx1NUJCOT1cIiR7Y2VsbHNbaV19XCJgKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnNvckNoID4gY3VycmVudFBvcyAmJiBjdXJzb3JDaCA8PSBuZXh0UG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTE0OVx1NjgwN1x1NTcyOFx1NTM1NVx1NTE0M1x1NjgzQyAke2l9IFx1NTE4NTogXHU0RjREXHU3RjZFPSR7Y3Vyc29yQ2h9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQb3MgPSBuZXh0UG9zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2NzJBXHU2MjdFXHU1MjMwXHU1MTQ5XHU2ODA3XHU2MjQwXHU1NzI4XHU1MzU1XHU1MTQzXHU2ODNDOiBjdXJzb3JDaD0ke2N1cnNvckNofSwgbGluZT1cIiR7bGluZX1cImApO1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU4M0I3XHU1M0Q2XHU1MTQ5XHU2ODA3XHU2MjQwXHU1NzI4XHU1MjE3XHU3RDIyXHU1RjE1XHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTgzQjdcdTUzRDZcdTUzNTVcdTUxNDNcdTY4M0NcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcclxuICAgICAqIEBwYXJhbSBlZGl0b3IgXHU3RjE2XHU4RjkxXHU1NjY4XHU1QjlFXHU0RjhCXHJcbiAgICAgKiBAcmV0dXJucyBcdTUzNTVcdTUxNDNcdTY4M0NcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcdTYyMTZudWxsXHJcbiAgICAgKi9cclxuICAgIGdldENlbGxQb3NpdGlvbihlZGl0b3I6IEVkaXRvcik6IHsgdGFibGVJbmZvOiB7IHN0YXJ0TGluZTogbnVtYmVyLCBlbmRMaW5lOiBudW1iZXIsIGNvbnRlbnQ6IHN0cmluZywgdGFibGVJZD86IHN0cmluZyB9LCByb3dJbmRleDogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyIH0gfCBudWxsIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBcdTVCOUFcdTRGNERcdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgY29uc3QgdGFibGVJbmZvID0gdGhpcy5sb2NhdGVUYWJsZUluTWFya2Rvd24oZWRpdG9yKTtcclxuICAgICAgICAgICAgaWYgKCF0YWJsZUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTg4NjhcdTY4M0MnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTUxNDlcdTY4MDdcdTRGNERcdTdGNkVcclxuICAgICAgICAgICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG4gICAgICAgICAgICBjb25zdCByb3dJbmRleCA9IGN1cnNvci5saW5lIC0gdGFibGVJbmZvLnN0YXJ0TGluZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1ODg0Q1x1N0QyMlx1NUYxNVx1NjYyRlx1NTQyNlx1NjcwOVx1NjU0OFxyXG4gICAgICAgICAgICBpZiAocm93SW5kZXggPCAwIHx8IHJvd0luZGV4ID4gdGFibGVJbmZvLmVuZExpbmUgLSB0YWJsZUluZm8uc3RhcnRMaW5lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU4ODRDXHU3RDIyXHU1RjE1XHU4RDg1XHU1MUZBXHU4MzAzXHU1NkY0OiByb3dJbmRleD0ke3Jvd0luZGV4fSwgdGFibGVSYW5nZT0ke3RhYmxlSW5mby5zdGFydExpbmV9LSR7dGFibGVJbmZvLmVuZExpbmV9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4ODRDXHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSk7XHJcbiAgICAgICAgICAgIGlmICghbGluZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjVFMFx1NkNENVx1ODNCN1x1NTNENlx1ODg0Q1x1NTE4NVx1NUJCOScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1ODg0Q1x1NjYyRlx1NTQyNlx1NjYyRlx1NjcwOVx1NjU0OFx1NzY4NFx1ODg2OFx1NjgzQ1x1ODg0Q1xyXG4gICAgICAgICAgICBpZiAoIWxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJ3wnKSB8fCAhbGluZS50cmltKCkuZW5kc1dpdGgoJ3wnKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NUY1M1x1NTI0RFx1ODg0Q1x1NEUwRFx1NjYyRlx1NjcwOVx1NjU0OFx1NzY4NFx1ODg2OFx1NjgzQ1x1ODg0QycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1Nzg2RVx1NUI5QVx1NTE0OVx1NjgwN1x1NjI0MFx1NTcyOFx1NzY4NFx1NTIxN1xyXG4gICAgICAgICAgICBjb25zdCBjb2xJbmRleCA9IHRoaXMuZ2V0Q3Vyc29yQ29sdW1uSW5kZXgobGluZSwgY3Vyc29yLmNoKTtcclxuICAgICAgICAgICAgaWYgKGNvbEluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjVFMFx1NkNENVx1Nzg2RVx1NUI5QVx1NTE0OVx1NjgwN1x1NjI0MFx1NTcyOFx1NTIxNycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTYyMTBcdTUyOUZcdTgzQjdcdTUzRDZcdTUzNTVcdTUxNDNcdTY4M0NcdTRGNERcdTdGNkU6IFx1ODg0Qz0ke3Jvd0luZGV4fSwgXHU1MjE3PSR7Y29sSW5kZXh9LCBcdTg4NjhcdTY4M0NcdTgzMDNcdTU2RjQ9JHt0YWJsZUluZm8uc3RhcnRMaW5lfS0ke3RhYmxlSW5mby5lbmRMaW5lfWApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlSW5mbyxcclxuICAgICAgICAgICAgICAgIHJvd0luZGV4LFxyXG4gICAgICAgICAgICAgICAgY29sSW5kZXhcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTgzQjdcdTUzRDZcdTUzNTVcdTUxNDNcdTY4M0NcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAqIEBwYXJhbSBlZGl0b3IgXHU3RjE2XHU4RjkxXHU1NjY4XHU1QjlFXHU0RjhCXHJcbiAgICAgKiBAcGFyYW0gdGFibGVJbmZvIFx1ODg2OFx1NjgzQ1x1NEZFMVx1NjA2RlxyXG4gICAgICogQHBhcmFtIHJvd0luZGV4IFx1ODg0Q1x1N0QyMlx1NUYxNVxyXG4gICAgICogQHBhcmFtIGNvbEluZGV4IFx1NTIxN1x1N0QyMlx1NUYxNVxyXG4gICAgICogQHBhcmFtIG1lcmdlQ291bnQgXHU1REYyXHU1NDA4XHU1RTc2XHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHU2NTcwXHU5MUNGXHVGRjBDXHU5RUQ4XHU4QkE0XHU0RTNBMFxyXG4gICAgICogQHJldHVybnMgXHU2NjJGXHU1NDI2XHU2MjEwXHU1MjlGXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgbWVyZ2VDZWxsc1JpZ2h0KGVkaXRvcjogRWRpdG9yLCB0YWJsZUluZm86IHsgc3RhcnRMaW5lOiBudW1iZXIsIGVuZExpbmU6IG51bWJlciwgY29udGVudDogc3RyaW5nLCB0YWJsZUlkPzogc3RyaW5nIH0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleDogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyLCBtZXJnZUNvdW50OiBudW1iZXIgPSAwKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgbGluZUluZGV4ID0gdGFibGVJbmZvLnN0YXJ0TGluZSArIHJvd0luZGV4O1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lID0gZWRpdG9yLmdldExpbmUobGluZUluZGV4KTtcclxuICAgICAgICAgICAgaWYgKCFsaW5lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2NUUwXHU2Q0Q1XHU4M0I3XHU1M0Q2XHU4ODRDXHU1MTg1XHU1QkI5OiBsaW5lSW5kZXg9JHtsaW5lSW5kZXh9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVDMURcdThCRDVcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0M6IFx1ODg0Qz0ke2xpbmVJbmRleH0sIFx1NTIxNz0ke2NvbEluZGV4fSwgXHU1REYyXHU1NDA4XHU1RTc2PSR7bWVyZ2VDb3VudH0sIFx1ODg0Q1x1NTE4NVx1NUJCOT1cIiR7bGluZX1cImApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1MjA2XHU1MjcyXHU4ODRDXHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gbGluZS5zcGxpdCgnfCcpO1xyXG4gICAgICAgICAgICBpZiAoY29sSW5kZXggKyAyID49IGNlbGxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTIxN1x1N0QyMlx1NUYxNVx1OEQ4NVx1NTFGQVx1ODMwM1x1NTZGNDogY29sSW5kZXg9JHtjb2xJbmRleH0sIGNlbGxzLmxlbmd0aD0ke2NlbGxzLmxlbmd0aH1gKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NTNGM1x1NEZBN1x1NkNBMVx1NjcwOVx1NTM1NVx1NTE0M1x1NjgzQ1x1NTNFRlx1NTQwOFx1NUU3NicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg5ODFcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgY29uc3QgbWFpbkNvbnRlbnQgPSBjZWxsc1tjb2xJbmRleCArIDFdLnRyaW0oKTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q29udGVudCA9IGNlbGxzW2NvbEluZGV4ICsgMl0udHJpbSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEUzQlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTE4NVx1NUJCOT1cIiR7bWFpbkNvbnRlbnR9XCIsIFx1NzZFRVx1NjgwN1x1NTM1NVx1NTE0M1x1NjgzQ1x1NTE4NVx1NUJCOT1cIiR7dGFyZ2V0Q29udGVudH1cImApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU3NkVFXHU2ODA3XHU1MzU1XHU1MTQzXHU2ODNDXHU2NjJGXHU1NDI2XHU1REYyXHU3RUNGXHU2NjJGXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgIGNvbnN0IGlzTWVyZ2VNYXJrZXIgPSAvXig8K3xcXF4rfFxcXFw8fFxcXFxefFxccyo8K1xccyp8XFxzKlxcXitcXHMqKSQvLnRlc3QodGFyZ2V0Q29udGVudCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTRFM0FcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjA6ICR7aXNNZXJnZU1hcmtlcn1gKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBtZXJnZUFjdGlvbiA9ICdyZXBsYWNlJztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1Nzg2RVx1OEJBNFx1NTQwOFx1NUU3Nlx1OTc1RVx1N0E3QVx1NEUxNFx1OTc1RVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Q29udGVudCAmJiAhaXNNZXJnZU1hcmtlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbmZpcm1NZXJnZU5vbkVtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU5MDA5XHU5ODc5XHU1QkY5XHU4QkREXHU2ODQ2XHJcbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VBY3Rpb24gPSBhd2FpdCB0aGlzLnNob3dNZXJnZUNlbGxPcHRpb25zRGlhbG9nKG1haW5Db250ZW50LCB0YXJnZXRDb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU3NTI4XHU2MjM3XHU5MDA5XHU2MkU5XHU3Njg0XHU1NDA4XHU1RTc2XHU2NENEXHU0RjVDOiAke21lcmdlQWN0aW9ufWApO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXJnZUFjdGlvbiA9PT0gJ2NhbmNlbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NzUyOFx1NjIzN1x1NTNENlx1NkQ4OFx1NEU4Nlx1NTQwOFx1NUU3Nlx1NjRDRFx1NEY1QycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4MzlcdTYzNkVcdTkwMDlcdTYyRTlcdTc2ODRcdTY0Q0RcdTRGNUNcdTU5MDRcdTc0MDZcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgaWYgKG1lcmdlQWN0aW9uID09PSAnbWVyZ2UnICYmIG1haW5Db250ZW50ICYmIHRhcmdldENvbnRlbnQgJiYgIWlzTWVyZ2VNYXJrZXIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NTQwOFx1NUU3Nlx1NEUyNFx1NEUyQVx1NTM1NVx1NTE0M1x1NjgzQ1x1NzY4NFx1NTE4NVx1NUJCOVx1NTIzMFx1NEUzQlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICAgICAgY2VsbHNbY29sSW5kZXggKyAxXSA9IGAgJHttYWluQ29udGVudH0gJHt0YXJnZXRDb250ZW50fSBgO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTQwOFx1NUU3Nlx1NTE4NVx1NUJCOTogXHU2NUIwXHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5PVwiJHtjZWxsc1tjb2xJbmRleCArIDFdfVwiYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFx1NjU3MFx1OTFDRiAtIFx1NEVDRVx1NEUzQlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTIzMFx1NUY1M1x1NTI0RFx1NTIxN1x1NzY4NFx1OERERFx1NzlCQlxyXG4gICAgICAgICAgICAvLyBcdTVCRjlcdTRFOEVcdTc2RjRcdTYzQTVcdTc2RjhcdTkwQkJcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMENcdTRGN0ZcdTc1MjhcdTUzNTVcdTRFMkEgPFxyXG4gICAgICAgICAgICAvLyBcdTVCRjlcdTRFOEVcdTdCMkNcdTRFMDlcdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMENcdTRGN0ZcdTc1MjggPDxcclxuICAgICAgICAgICAgLy8gXHU1QkY5XHU0RThFXHU3QjJDXHU1NkRCXHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDXHVGRjBDXHU0RjdGXHU3NTI4IDw8PCBcdTRFRTVcdTZCNjRcdTdDN0JcdTYzQThcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VEaXN0YW5jZSA9IG1lcmdlQ291bnQgKyAxOyAvLyBcdTVGNTNcdTUyNERcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdThERERcdTc5QkJcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VNYXJrZXIgPSAnPCcucmVwZWF0KG1lcmdlRGlzdGFuY2UpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU3NTFGXHU2MjEwXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwOiBcdThERERcdTc5QkI9JHttZXJnZURpc3RhbmNlfSwgXHU2ODA3XHU4QkIwPVwiJHttZXJnZU1hcmtlcn1cImApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2NkY0XHU2NUIwXHU3NkVFXHU2ODA3XHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5IC0gXHU0RjdGXHU3NTI4XHU2ODA3XHU1MUM2XHU1MzE2XHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgIGNlbGxzW2NvbEluZGV4ICsgMl0gPSBgICR7bWVyZ2VNYXJrZXJ9IGA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY3ODRcdTVFRkFcdTY1QjBcdTg4NENcclxuICAgICAgICAgICAgY29uc3QgbmV3TGluZSA9IGNlbGxzLmpvaW4oJ3wnKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NjVCMFx1ODg0Q1x1NTE4NVx1NUJCOT1cIiR7bmV3TGluZX1cImApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2NkY0XHU2NUIwXHU2NTc0XHU4ODRDXHJcbiAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICBuZXdMaW5lLFxyXG4gICAgICAgICAgICAgICAgeyBsaW5lOiBsaW5lSW5kZXgsIGNoOiAwIH0sXHJcbiAgICAgICAgICAgICAgICB7IGxpbmU6IGxpbmVJbmRleCwgY2g6IGxpbmUubGVuZ3RoIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NjYyRlx1NTQyNlx1OTcwMFx1ODk4MVx1N0VFN1x1N0VFRFx1NTQxMVx1NTNGM1x1NTQwOFx1NUU3Nlx1RkYwOFx1NTkwNFx1NzQwNlx1NTkxQVx1NTIxN1x1NTQwOFx1NUU3Nlx1NzY4NFx1NjBDNVx1NTFCNVx1RkYwOVxyXG4gICAgICAgICAgICBpZiAoY29sSW5kZXggKyAzIDwgY2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2VsbENvbnRlbnQgPSBjZWxsc1tjb2xJbmRleCArIDNdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTY4QzBcdTY3RTVcdTRFMEJcdTRFMDBcdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTRFM0FcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjA6IFx1NTE4NVx1NUJCOT1cIiR7bmV4dENlbGxDb250ZW50fVwiYCk7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTRFM0FcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgICAgIGlmICgvXig8K3xcXF4rfFxcXFw8fFxcXFxefFxccyo8K1xccyp8XFxzKlxcXitcXHMqKSQvLnRlc3QobmV4dENlbGxDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTY4QzBcdTZENEJcdTUyMzBcdTUzRjNcdTRGQTdcdTY3MDlcdThGREVcdTdFRURcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMENcdTdFRTdcdTdFRURcdTU0MDhcdTVFNzYnKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1lcmdlQ2VsbHNSaWdodChlZGl0b3IsIHRhYmxlSW5mbywgcm93SW5kZXgsIGNvbEluZGV4ICsgMSwgbWVyZ2VEaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NURGMlx1NTQxMVx1NTNGM1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBcdTU0MTFcdTUzRjNcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTU5MzFcdThEMjU6ICR7ZXJyb3IubWVzc2FnZSB8fCAnXHU2NzJBXHU3N0U1XHU5NTE5XHU4QkVGJ31gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTQxMVx1NEUwQlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICogQHBhcmFtIGVkaXRvciBcdTdGMTZcdThGOTFcdTU2NjhcdTVCOUVcdTRGOEJcclxuICAgICAqIEBwYXJhbSB0YWJsZUluZm8gXHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcbiAgICAgKiBAcGFyYW0gcm93SW5kZXggXHU4ODRDXHU3RDIyXHU1RjE1XHJcbiAgICAgKiBAcGFyYW0gY29sSW5kZXggXHU1MjE3XHU3RDIyXHU1RjE1XHJcbiAgICAgKiBAcGFyYW0gbWVyZ2VDb3VudCBcdTVERjJcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTY1NzBcdTkxQ0ZcdUZGMENcdTlFRDhcdThCQTRcdTRFM0EwXHJcbiAgICAgKiBAcmV0dXJucyBcdTY2MkZcdTU0MjZcdTYyMTBcdTUyOUZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBtZXJnZUNlbGxzRG93bihlZGl0b3I6IEVkaXRvciwgdGFibGVJbmZvOiB7IHN0YXJ0TGluZTogbnVtYmVyLCBlbmRMaW5lOiBudW1iZXIsIGNvbnRlbnQ6IHN0cmluZywgdGFibGVJZD86IHN0cmluZyB9LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiBudW1iZXIsIGNvbEluZGV4OiBudW1iZXIsIG1lcmdlQ291bnQ6IG51bWJlciA9IDApOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TGluZUluZGV4ID0gdGFibGVJbmZvLnN0YXJ0TGluZSArIHJvd0luZGV4O1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0TGluZUluZGV4ID0gY3VycmVudExpbmVJbmRleCArIDE7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAobmV4dExpbmVJbmRleCA+IHRhYmxlSW5mby5lbmRMaW5lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RTBCXHU0RTAwXHU4ODRDXHU4RDg1XHU1MUZBXHU4ODY4XHU2ODNDXHU4MzAzXHU1NkY0OiBuZXh0TGluZUluZGV4PSR7bmV4dExpbmVJbmRleH0sIHRhYmxlRW5kTGluZT0ke3RhYmxlSW5mby5lbmRMaW5lfWApO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU0RTBCXHU2NUI5XHU2Q0ExXHU2NzA5XHU1MzU1XHU1MTQzXHU2ODNDXHU1M0VGXHU1NDA4XHU1RTc2Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRMaW5lID0gZWRpdG9yLmdldExpbmUoY3VycmVudExpbmVJbmRleCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRMaW5lID0gZWRpdG9yLmdldExpbmUobmV4dExpbmVJbmRleCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRMaW5lIHx8ICFuZXh0TGluZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NjVFMFx1NkNENVx1ODNCN1x1NTNENlx1ODg0Q1x1NTE4NVx1NUJCOTogY3VycmVudExpbmU9JHshIWN1cnJlbnRMaW5lfSwgbmV4dExpbmU9JHshIW5leHRMaW5lfWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1QzFEXHU4QkQ1XHU1NDExXHU0RTBCXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDOiBcdTVGNTNcdTUyNERcdTg4NEM9JHtjdXJyZW50TGluZUluZGV4fSwgXHU0RTBCXHU0RTAwXHU4ODRDPSR7bmV4dExpbmVJbmRleH0sIFx1NTIxNz0ke2NvbEluZGV4fSwgXHU1REYyXHU1NDA4XHU1RTc2PSR7bWVyZ2VDb3VudH1gKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NUY1M1x1NTI0RFx1ODg0Q1x1NTE4NVx1NUJCOT1cIiR7Y3VycmVudExpbmV9XCJgKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NEUwQlx1NEUwMFx1ODg0Q1x1NTE4NVx1NUJCOT1cIiR7bmV4dExpbmV9XCJgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTIwNlx1NTI3Mlx1ODg0Q1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q2VsbHMgPSBjdXJyZW50TGluZS5zcGxpdCgnfCcpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0Q2VsbHMgPSBuZXh0TGluZS5zcGxpdCgnfCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGNvbEluZGV4ICsgMSA+PSBjdXJyZW50Q2VsbHMubGVuZ3RoIHx8IGNvbEluZGV4ICsgMSA+PSBuZXh0Q2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1MjE3XHU3RDIyXHU1RjE1XHU4RDg1XHU1MUZBXHU4MzAzXHU1NkY0OiBjb2xJbmRleD0ke2NvbEluZGV4fSwgY3VycmVudENlbGxzLmxlbmd0aD0ke2N1cnJlbnRDZWxscy5sZW5ndGh9LCBuZXh0Q2VsbHMubGVuZ3RoPSR7bmV4dENlbGxzLmxlbmd0aH1gKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NjVFMFx1NkNENVx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1RkYwQ1x1NTIxN1x1N0QyMlx1NUYxNVx1OEQ4NVx1NTFGQVx1ODMwM1x1NTZGNCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg5ODFcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgY29uc3QgbWFpbkNvbnRlbnQgPSBjdXJyZW50Q2VsbHNbY29sSW5kZXggKyAxXS50cmltKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldENvbnRlbnQgPSBuZXh0Q2VsbHNbY29sSW5kZXggKyAxXS50cmltKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5PVwiJHttYWluQ29udGVudH1cIiwgXHU3NkVFXHU2ODA3XHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5PVwiJHt0YXJnZXRDb250ZW50fVwiYCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTVERjJcdTdFQ0ZcdTY2MkZcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgY29uc3QgaXNNZXJnZU1hcmtlciA9IC9eKDwrfFxcXit8XFxcXDx8XFxcXF58XFxzKjwrXFxzKnxcXHMqXFxeK1xccyopJC8udGVzdCh0YXJnZXRDb250ZW50KTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NzZFRVx1NjgwN1x1NTM1NVx1NTE0M1x1NjgzQ1x1NjYyRlx1NTQyNlx1NEUzQVx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMDogJHtpc01lcmdlTWFya2VyfWApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IG1lcmdlQWN0aW9uID0gJ3JlcGxhY2UnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU3ODZFXHU4QkE0XHU1NDA4XHU1RTc2XHU5NzVFXHU3QTdBXHU0RTE0XHU5NzVFXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHU3Njg0XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRDb250ZW50ICYmICFpc01lcmdlTWFya2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29uZmlybU1lcmdlTm9uRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTkwMDlcdTk4NzlcdTVCRjlcdThCRERcdTY4NDZcclxuICAgICAgICAgICAgICAgICAgICBtZXJnZUFjdGlvbiA9IGF3YWl0IHRoaXMuc2hvd01lcmdlQ2VsbE9wdGlvbnNEaWFsb2cobWFpbkNvbnRlbnQsIHRhcmdldENvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTc1MjhcdTYyMzdcdTkwMDlcdTYyRTlcdTc2ODRcdTU0MDhcdTVFNzZcdTY0Q0RcdTRGNUM6ICR7bWVyZ2VBY3Rpb259YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lcmdlQWN0aW9uID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU3NTI4XHU2MjM3XHU1M0Q2XHU2RDg4XHU0RTg2XHU1NDA4XHU1RTc2XHU2NENEXHU0RjVDJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjgzOVx1NjM2RVx1OTAwOVx1NjJFOVx1NzY4NFx1NjRDRFx1NEY1Q1x1NTkwNFx1NzQwNlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTE4NVx1NUJCOVxyXG4gICAgICAgICAgICBpZiAobWVyZ2VBY3Rpb24gPT09ICdtZXJnZScgJiYgbWFpbkNvbnRlbnQgJiYgdGFyZ2V0Q29udGVudCAmJiAhaXNNZXJnZU1hcmtlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1NDA4XHU1RTc2XHU0RTI0XHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDXHU3Njg0XHU1MTg1XHU1QkI5XHU1MjMwXHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2VsbHNbY29sSW5kZXggKyAxXSA9IGAgJHttYWluQ29udGVudH0gJHt0YXJnZXRDb250ZW50fSBgO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTQwOFx1NUU3Nlx1NTE4NVx1NUJCOTogXHU2NUIwXHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5PVwiJHtjdXJyZW50Q2VsbHNbY29sSW5kZXggKyAxXX1cImApO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTRFM0JcdTUzNTVcdTUxNDNcdTY4M0NcdTYyNDBcdTU3MjhcdTg4NENcclxuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudENlbGxzLmpvaW4oJ3wnKSxcclxuICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IGN1cnJlbnRMaW5lSW5kZXgsIGNoOiAwIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBsaW5lOiBjdXJyZW50TGluZUluZGV4LCBjaDogY3VycmVudExpbmUubGVuZ3RoIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFx1NjU3MFx1OTFDRiAtIFx1NEVDRVx1NEUzQlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTIzMFx1NUY1M1x1NTI0RFx1ODg0Q1x1NzY4NFx1OERERFx1NzlCQlxyXG4gICAgICAgICAgICAvLyBcdTVCRjlcdTRFOEVcdTc2RjRcdTYzQTVcdTc2RjhcdTkwQkJcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMENcdTRGN0ZcdTc1MjhcdTUzNTVcdTRFMkEgXlxyXG4gICAgICAgICAgICAvLyBcdTVCRjlcdTRFOEVcdTdCMkNcdTRFMDlcdTRFMkFcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMENcdTRGN0ZcdTc1MjggXl5cclxuICAgICAgICAgICAgLy8gXHU1QkY5XHU0RThFXHU3QjJDXHU1NkRCXHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDXHVGRjBDXHU0RjdGXHU3NTI4IF5eXiBcdTRFRTVcdTZCNjRcdTdDN0JcdTYzQThcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VEaXN0YW5jZSA9IG1lcmdlQ291bnQgKyAxOyAvLyBcdTVGNTNcdTUyNERcdTU0MDhcdTVFNzZcdTc2ODRcdTUzNTVcdTUxNDNcdTY4M0NcdThERERcdTc5QkJcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VNYXJrZXIgPSAnXicucmVwZWF0KG1lcmdlRGlzdGFuY2UpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU3NTFGXHU2MjEwXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwOiBcdThERERcdTc5QkI9JHttZXJnZURpc3RhbmNlfSwgXHU2ODA3XHU4QkIwPVwiJHttZXJnZU1hcmtlcn1cImApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2NkY0XHU2NUIwXHU3NkVFXHU2ODA3XHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5IC0gXHU0RjdGXHU3NTI4XHU2ODA3XHU1MUM2XHU1MzE2XHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgIG5leHRDZWxsc1tjb2xJbmRleCArIDFdID0gYCAke21lcmdlTWFya2VyfSBgO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2Nzg0XHU1RUZBXHU2NUIwXHU4ODRDXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05leHRMaW5lID0gbmV4dENlbGxzLmpvaW4oJ3wnKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NjVCMFx1NEUwQlx1NEUwMFx1ODg0Q1x1NTE4NVx1NUJCOT1cIiR7bmV3TmV4dExpbmV9XCJgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjZGNFx1NjVCMFx1NzZFRVx1NjgwN1x1ODg0Q1xyXG4gICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgbmV3TmV4dExpbmUsXHJcbiAgICAgICAgICAgICAgICB7IGxpbmU6IG5leHRMaW5lSW5kZXgsIGNoOiAwIH0sXHJcbiAgICAgICAgICAgICAgICB7IGxpbmU6IG5leHRMaW5lSW5kZXgsIGNoOiBuZXh0TGluZS5sZW5ndGggfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU5NzAwXHU4OTgxXHU3RUU3XHU3RUVEXHU1NDExXHU0RTBCXHU1NDA4XHU1RTc2XHVGRjA4XHU1OTA0XHU3NDA2XHU1OTFBXHU4ODRDXHU1NDA4XHU1RTc2XHU3Njg0XHU2MEM1XHU1MUI1XHVGRjA5XHJcbiAgICAgICAgICAgIGlmIChuZXh0TGluZUluZGV4ICsgMSA8PSB0YWJsZUluZm8uZW5kTGluZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dE5leHRMaW5lID0gZWRpdG9yLmdldExpbmUobmV4dExpbmVJbmRleCArIDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHROZXh0TGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHROZXh0Q2VsbHMgPSBuZXh0TmV4dExpbmUuc3BsaXQoJ3wnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sSW5kZXggKyAxIDwgbmV4dE5leHRDZWxscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dE5leHRDZWxsQ29udGVudCA9IG5leHROZXh0Q2VsbHNbY29sSW5kZXggKyAxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTY4QzBcdTY3RTVcdTRFMEJcdTRFMDBcdTg4NENcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTRFM0FcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjA6IFx1NTE4NVx1NUJCOT1cIiR7bmV4dE5leHRDZWxsQ29udGVudH1cImApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTRFM0FcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eKDwrfFxcXit8XFxcXDx8XFxcXF58XFxzKjwrXFxzKnxcXHMqXFxeK1xccyopJC8udGVzdChuZXh0TmV4dENlbGxDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjhDMFx1NkQ0Qlx1NTIzMFx1NEUwQlx1NjVCOVx1NjcwOVx1OEZERVx1N0VFRFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1RkYwQ1x1N0VFN1x1N0VFRFx1NTQwOFx1NUU3NicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tZXJnZUNlbGxzRG93bihlZGl0b3IsIHRhYmxlSW5mbywgcm93SW5kZXggKyAxLCBjb2xJbmRleCwgbWVyZ2VEaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NURGMlx1NTQxMVx1NEUwQlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTU0MTFcdTRFMEJcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKGBcdTU0MTFcdTRFMEJcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTU5MzFcdThEMjU6ICR7ZXJyb3IubWVzc2FnZSB8fCAnXHU2NzJBXHU3N0U1XHU5NTE5XHU4QkVGJ31gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NjYzRVx1NzkzQVx1Nzg2RVx1OEJBNFx1NUJGOVx1OEJERFx1Njg0NlxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgXHU3ODZFXHU4QkE0XHU2RDg4XHU2MDZGXHJcbiAgICAgKiBAcmV0dXJucyBcdTc1MjhcdTYyMzdcdTY2MkZcdTU0MjZcdTc4NkVcdThCQTRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBzaG93Q29uZmlybURpYWxvZyhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU0RTAwXHU0RTJBXHU0RTBEXHU0RjFBXHU4MUVBXHU1MkE4XHU2RDg4XHU1OTMxXHU3Njg0XHU5MDFBXHU3N0U1XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdGljZSA9IG5ldyBOb3RpY2UobWVzc2FnZSwgMCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTYzMDlcdTk0QUVcdTVCQjlcdTU2NjhcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgICAgICBidXR0b25Db250YWluZXIuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnc3BhY2UtYmV0d2Vlbic7XHJcbiAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5tYXJnaW5Ub3AgPSAnMTBweCc7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUzRDZcdTZEODhcdTYzMDlcdTk0QUVcclxuICAgICAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbi50ZXh0Q29udGVudCA9ICdcdTUzRDZcdTZEODgnO1xyXG4gICAgICAgICAgICBjYW5jZWxCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG5vdGljZS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1Nzg2RVx1OEJBNFx1NjMwOVx1OTRBRVxyXG4gICAgICAgICAgICBjb25zdCBjb25maXJtQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b24udGV4dENvbnRlbnQgPSAnXHU3ODZFXHU1QjlBJztcclxuICAgICAgICAgICAgY29uZmlybUJ1dHRvbi5zdHlsZS5tYXJnaW5MZWZ0ID0gJzEwcHgnO1xyXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBub3RpY2UuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjMwOVx1OTRBRVx1NTIzMFx1NUJCOVx1NTY2OFxyXG4gICAgICAgICAgICBidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoY2FuY2VsQnV0dG9uKTtcclxuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNvbmZpcm1CdXR0b24pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2MzA5XHU5NEFFXHU1QkI5XHU1NjY4XHU1MjMwXHU5MDFBXHU3N0U1XHJcbiAgICAgICAgICAgIG5vdGljZS5ub3RpY2VFbC5hcHBlbmRDaGlsZChidXR0b25Db250YWluZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2NjNFXHU3OTNBXHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHU5MDA5XHU5ODc5XHU1QkY5XHU4QkREXHU2ODQ2XHJcbiAgICAgKiBAcGFyYW0gbWFpbkNvbnRlbnQgXHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5XHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0Q29udGVudCBcdTc2RUVcdTY4MDdcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODVcdTVCQjlcclxuICAgICAqIEByZXR1cm5zIFx1OTAwOVx1NjJFOVx1NzY4NFx1NjRDRFx1NEY1Q1x1RkYxQSdtZXJnZSc9XHU1NDA4XHU1RTc2XHU1RTc2XHU0RkREXHU3NTU5XHU0RTI0XHU0RTJBXHU1MTg1XHU1QkI5LCAncmVwbGFjZSc9XHU0RUM1XHU0RjdGXHU3NTI4XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwLCAnY2FuY2VsJz1cdTUzRDZcdTZEODhcdTY0Q0RcdTRGNUNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBzaG93TWVyZ2VDZWxsT3B0aW9uc0RpYWxvZyhtYWluQ29udGVudDogc3RyaW5nLCB0YXJnZXRDb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPCdtZXJnZSd8J3JlcGxhY2UnfCdjYW5jZWwnPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NEUwMFx1NEUyQVx1NEUwRFx1NEYxQVx1ODFFQVx1NTJBOFx1NkQ4OFx1NTkzMVx1NzY4NFx1OTAxQVx1NzdFNVxyXG4gICAgICAgICAgICBjb25zdCBub3RpY2UgPSBuZXcgTm90aWNlKCdcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTkwMDlcdTk4NzknLCAwKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NTE4NVx1NUJCOVx1NUJCOVx1NTY2OFxyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRDb250YWluZXIuc3R5bGUubWFyZ2luQm90dG9tID0gJzEwcHgnO1xyXG4gICAgICAgICAgICBjb250ZW50Q29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgICAgIDxwPlx1NzZFRVx1NjgwN1x1NTM1NVx1NTE0M1x1NjgzQ1x1NTMwNVx1NTQyQlx1NTE4NVx1NUJCOVx1RkYxQVwiJHt0YXJnZXRDb250ZW50fVwiPC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+XHU4QkY3XHU5MDA5XHU2MkU5XHU1NDA4XHU1RTc2XHU2NUI5XHU1RjBGXHVGRjFBPC9wPlxyXG4gICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2MzA5XHU5NEFFXHU1QkI5XHU1NjY4XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBidXR0b25Db250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uJztcclxuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLnN0eWxlLmdhcCA9ICc1cHgnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU1NDA4XHU1RTc2XHU1RTc2XHU0RkREXHU3NTU5XHU1MTg1XHU1QkI5XHU2MzA5XHU5NEFFXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIG1lcmdlQnV0dG9uLnRleHRDb250ZW50ID0gJ1x1NTQwOFx1NUU3Nlx1NUU3Nlx1NEZERFx1NzU1OVx1NTE4NVx1NUJCOSc7XHJcbiAgICAgICAgICAgIG1lcmdlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBub3RpY2UuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgnbWVyZ2UnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NEVDNVx1NEY3Rlx1NzUyOFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFx1NjMwOVx1OTRBRVxyXG4gICAgICAgICAgICBjb25zdCByZXBsYWNlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIHJlcGxhY2VCdXR0b24udGV4dENvbnRlbnQgPSAnXHU0RUM1XHU0RjdGXHU3NTI4XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwJztcclxuICAgICAgICAgICAgcmVwbGFjZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbm90aWNlLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoJ3JlcGxhY2UnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NTNENlx1NkQ4OFx1NjMwOVx1OTRBRVxyXG4gICAgICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgY2FuY2VsQnV0dG9uLnRleHRDb250ZW50ID0gJ1x1NTNENlx1NkQ4OCc7XHJcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbm90aWNlLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2MzA5XHU5NEFFXHU1MjMwXHU1QkI5XHU1NjY4XHJcbiAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChtZXJnZUJ1dHRvbik7XHJcbiAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChyZXBsYWNlQnV0dG9uKTtcclxuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhbmNlbEJ1dHRvbik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTVCQjlcdTU2NjhcdTUyMzBcdTkwMUFcdTc3RTVcclxuICAgICAgICAgICAgbm90aWNlLm5vdGljZUVsLmFwcGVuZENoaWxkKGNvbnRlbnRDb250YWluZXIpO1xyXG4gICAgICAgICAgICBub3RpY2Uubm90aWNlRWwuYXBwZW5kQ2hpbGQoYnV0dG9uQ29udGFpbmVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NjhDMFx1NkQ0Qlx1NUU3Nlx1NEZFRVx1NTkwRFx1ODg2OFx1NjgzQ1x1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gICAgICogQHJldHVybnMgXHU2NjJGXHU1NDI2XHU4RkRCXHU4ODRDXHU0RTg2XHU0RkVFXHU1OTBEXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGRldGVjdEFuZEZpeE1lcmdlTWFya2VycygpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSB0aGlzLmdldEFjdGl2ZUVkaXRvcigpO1xyXG4gICAgICAgICAgICBpZiAoIWVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NzJBXHU2MjdFXHU1MjMwXHU2RDNCXHU1MkE4XHU3RjE2XHU4RjkxXHU1NjY4Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NUI5QVx1NEY0RFx1ODg2OFx1NjgzQ1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUluZm8gPSB0aGlzLmxvY2F0ZVRhYmxlSW5NYXJrZG93bihlZGl0b3IpO1xyXG4gICAgICAgICAgICBpZiAoIXRhYmxlSW5mbykge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NzJBXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDXHVGRjBDXHU4QkY3XHU1QzA2XHU1MTQ5XHU2ODA3XHU2NTNFXHU1NzI4XHU4ODY4XHU2ODNDXHU1MTg1Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBoYXNGaXhlZE1hcmtlcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OTA0RFx1NTM4Nlx1ODg2OFx1NjgzQ1x1NzY4NFx1NkJDRlx1NEUwMFx1ODg0Q1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGFibGVJbmZvLnN0YXJ0TGluZTsgaSA8PSB0YWJsZUluZm8uZW5kTGluZTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gZWRpdG9yLmdldExpbmUoaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMDZcdTUyNzJcdTg4NENcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gbGluZS5zcGxpdCgnfCcpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhhc0NoYW5nZXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2QkNGXHU0RTJBXHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGNlbGxzLmxlbmd0aCAtIDE7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBjZWxsc1tqXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkQ2VsbCA9IGNlbGwudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NUU3Nlx1N0VERlx1NEUwMFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFx1NjgzQ1x1NUYwRlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmltbWVkQ2VsbCA9PT0gJ1xcXFw8JyB8fCB0cmltbWVkQ2VsbCA9PT0gJzwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1N0VERlx1NEUwMFx1NEY3Rlx1NzUyOFx1NEUwRFx1NUUyNlx1OEY2Q1x1NEU0OVx1NzY4NFx1NjgwN1x1OEJCMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsc1tqXSA9ICcgPCAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2VzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyaW1tZWRDZWxsID09PSAnXFxcXF4nIHx8IHRyaW1tZWRDZWxsID09PSAnXicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU3RURGXHU0RTAwXHU0RjdGXHU3NTI4XHU0RTBEXHU1RTI2XHU4RjZDXHU0RTQ5XHU3Njg0XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzW2pdID0gJyBeICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NoYW5nZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2NzA5XHU0RkVFXHU2NTM5XHVGRjBDXHU2NkY0XHU2NUIwXHU4ODRDXHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzQ2hhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRMaW5lID0gY2VsbHMuam9pbignfCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRMaW5lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IGksIGNoOiAwIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbGluZTogaSwgY2g6IGxpbmUubGVuZ3RoIH1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0ZpeGVkTWFya2VycyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChoYXNGaXhlZE1hcmtlcnMpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NURGMlx1N0VERlx1NEUwMFx1ODg2OFx1NjgzQ1x1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFx1NjgzQ1x1NUYwRicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHU2NzJBXHU1M0QxXHU3M0IwXHU5NzAwXHU4OTgxXHU0RkVFXHU1OTBEXHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBoYXNGaXhlZE1hcmtlcnM7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU2OEMwXHU2RDRCXHU1NDhDXHU0RkVFXHU1OTBEXHU4ODY4XHU2ODNDXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NjJDNlx1NTIwNlx1NTQwOFx1NUU3Nlx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICogQHJldHVybnMgXHU2NjJGXHU1NDI2XHU2MjEwXHU1MjlGXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHNwbGl0TWVyZ2VkQ2VsbHMoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZWRpdG9yID0gdGhpcy5nZXRBY3RpdmVFZGl0b3IoKTtcclxuICAgICAgICAgICAgaWYgKCFlZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NjcyQVx1NjI3RVx1NTIzMFx1NkQzQlx1NTJBOFx1N0YxNlx1OEY5MVx1NTY2OCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTUzNTVcdTUxNDNcdTY4M0NcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcclxuICAgICAgICAgICAgY29uc3QgY2VsbFBvc2l0aW9uID0gdGhpcy5nZXRDZWxsUG9zaXRpb24oZWRpdG9yKTtcclxuICAgICAgICAgICAgaWYgKCFjZWxsUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NjcyQVx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ1x1NjIxNlx1NjVFMFx1NkNENVx1Nzg2RVx1NUI5QVx1NTM1NVx1NTE0M1x1NjgzQ1x1NEY0RFx1N0Y2RVx1RkYwQ1x1OEJGN1x1NUMwNlx1NTE0OVx1NjgwN1x1NjUzRVx1NTcyOFx1ODg2OFx1NjgzQ1x1NTE4NScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCB7IHRhYmxlSW5mbywgcm93SW5kZXgsIGNvbEluZGV4IH0gPSBjZWxsUG9zaXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVJbmRleCA9IHRhYmxlSW5mby5zdGFydExpbmUgKyByb3dJbmRleDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVDMURcdThCRDVcdTYyQzZcdTUyMDZcdTUzNTVcdTUxNDNcdTY4M0M6IFx1ODg0Qz0ke3Jvd0luZGV4fSwgXHU1MjE3PSR7Y29sSW5kZXh9LCBcdTg4NjhcdTY4M0NcdTgzMDNcdTU2RjQ9JHt0YWJsZUluZm8uc3RhcnRMaW5lfS0ke3RhYmxlSW5mby5lbmRMaW5lfWApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU4ODRDXHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoIWxpbmUpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBoYXNTcGxpdENlbGxzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTUzRjNcdTRGQTdcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTY3MDlcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgaWYgKGNvbEluZGV4ICsgMSA8IGxpbmUuc3BsaXQoJ3wnKS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxscyA9IGxpbmUuc3BsaXQoJ3wnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0Q2VsbCA9IGNlbGxzW2NvbEluZGV4ICsgMl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodENlbGxUcmltbWVkID0gcmlnaHRDZWxsLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NTNGM1x1NEZBN1x1NTM1NVx1NTE0M1x1NjgzQ1x1NTE4NVx1NUJCOTogXCIke3JpZ2h0Q2VsbFRyaW1tZWR9XCJgKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1NDA0XHU3OUNEXHU1M0VGXHU4MEZEXHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHU2ODNDXHU1RjBGXHJcbiAgICAgICAgICAgICAgICBpZiAoL14oPCt8XFxeK3xcXFxcPHxcXFxcXnxcXHMqPCtcXHMqfFxccypcXF4rXFxzKikkLy50ZXN0KHJpZ2h0Q2VsbFRyaW1tZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2MkM2XHU1MjA2XHU1M0YzXHU0RkE3XHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbY29sSW5kZXggKyAyXSA9ICcgICc7IC8vIFx1NjZGRlx1NjM2Mlx1NEUzQVx1N0E3QVx1NzY3RFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NjZGNFx1NjVCMFx1ODg0Q1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzLmpvaW4oJ3wnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBsaW5lOiBsaW5lSW5kZXgsIGNoOiAwIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbGluZTogbGluZUluZGV4LCBjaDogbGluZS5sZW5ndGggfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NURGMlx1NjJDNlx1NTIwNlx1NTNGM1x1NEZBN1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1NwbGl0Q2VsbHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTRFMEJcdTY1QjlcdTUzNTVcdTUxNDNcdTY4M0NcdTY2MkZcdTU0MjZcdTY3MDlcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgaWYgKGxpbmVJbmRleCA8IHRhYmxlSW5mby5lbmRMaW5lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiZWxvd0xpbmUgPSBlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChiZWxvd0xpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiZWxvd0NlbGxzID0gYmVsb3dMaW5lLnNwbGl0KCd8Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbEluZGV4ICsgMSA8IGJlbG93Q2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJlbG93Q2VsbCA9IGJlbG93Q2VsbHNbY29sSW5kZXggKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmVsb3dDZWxsVHJpbW1lZCA9IGJlbG93Q2VsbC50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RTBCXHU2NUI5XHU1MzU1XHU1MTQzXHU2ODNDXHU1MTg1XHU1QkI5OiBcIiR7YmVsb3dDZWxsVHJpbW1lZH1cImApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1NDA0XHU3OUNEXHU1M0VGXHU4MEZEXHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHU2ODNDXHU1RjBGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvXig8K3xcXF4rfFxcXFw8fFxcXFxefFxccyo8K1xccyp8XFxzKlxcXitcXHMqKSQvLnRlc3QoYmVsb3dDZWxsVHJpbW1lZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NjJDNlx1NTIwNlx1NEUwQlx1NjVCOVx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVsb3dDZWxsc1tjb2xJbmRleCArIDFdID0gJyAgJzsgLy8gXHU2NkZGXHU2MzYyXHU0RTNBXHU3QTdBXHU3NjdEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NjZGNFx1NjVCMFx1ODg0Q1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWxvd0NlbGxzLmpvaW4oJ3wnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IGxpbmVJbmRleCArIDEsIGNoOiAwIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBsaW5lOiBsaW5lSW5kZXggKyAxLCBjaDogYmVsb3dMaW5lLmxlbmd0aCB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1REYyXHU2MkM2XHU1MjA2XHU0RTBCXHU2NUI5XHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNTcGxpdENlbGxzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1RjUzXHU1MjREXHU1MzU1XHU1MTQzXHU2ODNDXHU2NjJGXHU1NDI2XHU2NjJGXHU1NDA4XHU1RTc2XHU0RTNCXHU1MzU1XHU1MTQzXHU2ODNDXHVGRjA4XHU1MzczXHU1M0YzXHU0RkE3XHU2MjE2XHU0RTBCXHU2NUI5XHU2NzA5XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHVGRjA5XHJcbiAgICAgICAgICAgIC8vIFx1OEZEOVx1NzlDRFx1NjBDNVx1NTFCNVx1NEUwQlx1NjIxMVx1NEVFQ1x1OTcwMFx1ODk4MVx1OTAxMlx1NUY1Mlx1NjdFNVx1NjI3RVx1NjI0MFx1NjcwOVx1NTE3M1x1ODA1NFx1NzY4NFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICAgICAgICBjb25zdCByZWN1cnNpdmVTcGxpdCA9IGF3YWl0IHRoaXMucmVjdXJzaXZlU3BsaXRNZXJnZWRDZWxscyhlZGl0b3IsIHRhYmxlSW5mbywgcm93SW5kZXgsIGNvbEluZGV4KTtcclxuICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZVNwbGl0KSB7XHJcbiAgICAgICAgICAgICAgICBoYXNTcGxpdENlbGxzID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGhhc1NwbGl0Q2VsbHMpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NURGMlx1NjIxMFx1NTI5Rlx1NjJDNlx1NTIwNlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTUzRUZcdTYyQzZcdTUyMDZcdTc2ODRcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdUZGMENcdThCRjdcdTc4NkVcdTRGRERcdTUxNDlcdTY4MDdcdTRGNERcdTRFOEVcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTUxODUnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NjJDNlx1NTIwNlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1NjJDNlx1NTIwNlx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTkzMVx1OEQyNTogJHtlcnJvci5tZXNzYWdlIHx8ICdcdTY3MkFcdTc3RTVcdTk1MTlcdThCRUYnfWApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU5MDEyXHU1RjUyXHU2MkM2XHU1MjA2XHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgKiBcdTY3RTVcdTYyN0VcdTRFMEVcdTVGNTNcdTUyNERcdTUzNTVcdTUxNDNcdTY4M0NcdTc2RjhcdTUxNzNcdTc2ODRcdTYyNDBcdTY3MDlcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTVFNzZcdTYyQzZcdTUyMDZcdTVCODNcdTRFRUNcclxuICAgICAqIEBwYXJhbSBlZGl0b3IgXHU3RjE2XHU4RjkxXHU1NjY4XHU1QjlFXHU0RjhCXHJcbiAgICAgKiBAcGFyYW0gdGFibGVJbmZvIFx1ODg2OFx1NjgzQ1x1NEZFMVx1NjA2RlxyXG4gICAgICogQHBhcmFtIHJvd0luZGV4IFx1ODg0Q1x1N0QyMlx1NUYxNVxyXG4gICAgICogQHBhcmFtIGNvbEluZGV4IFx1NTIxN1x1N0QyMlx1NUYxNVxyXG4gICAgICogQHJldHVybnMgXHU2NjJGXHU1NDI2XHU4RkRCXHU4ODRDXHU0RTg2XHU2MkM2XHU1MjA2XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgcmVjdXJzaXZlU3BsaXRNZXJnZWRDZWxscyhcclxuICAgICAgICBlZGl0b3I6IEVkaXRvciwgXHJcbiAgICAgICAgdGFibGVJbmZvOiB7IHN0YXJ0TGluZTogbnVtYmVyLCBlbmRMaW5lOiBudW1iZXIsIGNvbnRlbnQ6IHN0cmluZywgdGFibGVJZD86IHN0cmluZyB9LFxyXG4gICAgICAgIHJvd0luZGV4OiBudW1iZXIsIFxyXG4gICAgICAgIGNvbEluZGV4OiBudW1iZXJcclxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIGxldCBoYXNTcGxpdENlbGxzID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgbWF4U2VhcmNoRGVwdGggPSAxMDsgLy8gXHU5NjMyXHU2QjYyXHU2NUUwXHU5NjUwXHU5MDEyXHU1RjUyXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1NDExXHU1M0YzXHU2NDFDXHU3RDIyXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAgICAgICAgZm9yIChsZXQgY29sID0gY29sSW5kZXggKyAxOyBjb2wgPCBjb2xJbmRleCArIG1heFNlYXJjaERlcHRoOyBjb2wrKykge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lSW5kZXggPSB0YWJsZUluZm8uc3RhcnRMaW5lICsgcm93SW5kZXg7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoIWxpbmUpIGJyZWFrO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSBsaW5lLnNwbGl0KCd8Jyk7XHJcbiAgICAgICAgICAgIGlmIChjb2wgKyAxID49IGNlbGxzLmxlbmd0aCkgYnJlYWs7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjZWxsQ29udGVudCA9IGNlbGxzW2NvbCArIDFdLnRyaW0oKTtcclxuICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU2QjYzXHU1MjE5XHU4ODY4XHU4RkJFXHU1RjBGXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU0RTNBXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHVGRjA4XHU2NTJGXHU2MzAxXHU1OTFBXHU0RTJBXHU4RkRFXHU3RUVEXHU3Njg0PFx1NjgwN1x1OEJCMFx1RkYwOVxyXG4gICAgICAgICAgICBpZiAoL14oPCt8XFxeK3xcXFxcPHxcXFxcXnxcXHMqPCtcXHMqfFxccypcXF4rXFxzKikkLy50ZXN0KGNlbGxDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU2MkM2XHU1MjA2XHU4QkU1XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICBjZWxsc1tjb2wgKyAxXSA9ICcgICc7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzLmpvaW4oJ3wnKSxcclxuICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IGxpbmVJbmRleCwgY2g6IDAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IGxpbmVJbmRleCwgY2g6IGxpbmUubGVuZ3RoIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBoYXNTcGxpdENlbGxzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTVERjJcdTYyQzZcdTUyMDZcdTRGNERcdTRFOEUgKCR7cm93SW5kZXh9LCAke2NvbH0pIFx1NzY4NFx1NkMzNFx1NUU3M1x1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ2ApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU5MDQ3XHU1MjMwXHU5NzVFXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHVGRjBDXHU1MDVDXHU2QjYyXHU2NDFDXHU3RDIyXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTU0MTFcdTRFMEJcdTY0MUNcdTdEMjJcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICBmb3IgKGxldCByb3cgPSByb3dJbmRleCArIDE7IHJvdyA8IHJvd0luZGV4ICsgbWF4U2VhcmNoRGVwdGggJiYgcm93ICsgdGFibGVJbmZvLnN0YXJ0TGluZSA8PSB0YWJsZUluZm8uZW5kTGluZTsgcm93KyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZUluZGV4ID0gdGFibGVJbmZvLnN0YXJ0TGluZSArIHJvdztcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGxpbmVJbmRleCk7XHJcbiAgICAgICAgICAgIGlmICghbGluZSkgYnJlYWs7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IGxpbmUuc3BsaXQoJ3wnKTtcclxuICAgICAgICAgICAgaWYgKGNvbEluZGV4ICsgMSA+PSBjZWxscy5sZW5ndGgpIGJyZWFrO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgY2VsbENvbnRlbnQgPSBjZWxsc1tjb2xJbmRleCArIDFdLnRyaW0oKTtcclxuICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU2QjYzXHU1MjE5XHU4ODY4XHU4RkJFXHU1RjBGXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU0RTNBXHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHVGRjA4XHU2NTJGXHU2MzAxXHU1OTFBXHU0RTJBXHU4RkRFXHU3RUVEXHU3Njg0Xlx1NjgwN1x1OEJCMFx1RkYwOVxyXG4gICAgICAgICAgICBpZiAoL14oPCt8XFxeK3xcXFxcPHxcXFxcXnxcXHMqPCtcXHMqfFxccypcXF4rXFxzKikkLy50ZXN0KGNlbGxDb250ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU2MkM2XHU1MjA2XHU4QkU1XHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgICAgICBjZWxsc1tjb2xJbmRleCArIDFdID0gJyAgJztcclxuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbHMuam9pbignfCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHsgbGluZTogbGluZUluZGV4LCBjaDogMCB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgbGluZTogbGluZUluZGV4LCBjaDogbGluZS5sZW5ndGggfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGhhc1NwbGl0Q2VsbHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NURGMlx1NjJDNlx1NTIwNlx1NEY0RFx1NEU4RSAoJHtyb3d9LCAke2NvbEluZGV4fSkgXHU3Njg0XHU1NzgyXHU3NkY0XHU1NDA4XHU1RTc2XHU1MzU1XHU1MTQzXHU2ODNDYCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTkwNDdcdTUyMzBcdTk3NUVcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcdUZGMENcdTUwNUNcdTZCNjJcdTY0MUNcdTdEMjJcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBoYXNTcGxpdENlbGxzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU1MTQ5XHU2ODA3XHU2MjQwXHU1NzI4XHU4ODY4XHU2ODNDXHU3Njg0SURcclxuICAgICAqIEByZXR1cm5zIFx1ODg2OFx1NjgzQ0lEXHU2MjE2bnVsbFxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRDdXJyZW50VGFibGVJZCgpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSB0aGlzLmdldEFjdGl2ZUVkaXRvcigpO1xyXG4gICAgICAgICAgICBpZiAoIWVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTZEM0JcdTUyQThcdTdGMTZcdThGOTFcdTU2NjgnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBcdTVCOUFcdTRGNERcdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgY29uc3QgdGFibGVJbmZvID0gdGhpcy5sb2NhdGVUYWJsZUluTWFya2Rvd24oZWRpdG9yKTtcclxuICAgICAgICAgICAgaWYgKCF0YWJsZUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignXHU2NzJBXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDXHVGRjBDXHU4QkY3XHU1QzA2XHU1MTQ5XHU2ODA3XHU2NTNFXHU1NzI4XHU4ODY4XHU2ODNDXHU1MTg1Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU2N0U1XHU2MjdFXHU4ODY4XHU2ODNDSURcclxuICAgICAgICAgICAgbGV0IHRhYmxlSWQgPSB0YWJsZUluZm8udGFibGVJZDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q3RhYmxlSW5mb1x1NEUyRFx1NkNBMVx1NjcwOUlEXHVGRjBDXHU1QzFEXHU4QkQ1XHU0RjdGXHU3NTI4Y2hlY2tFeGlzdGluZ1RhYmxlSWRcdTY3RTVcdTYyN0VcclxuICAgICAgICAgICAgaWYgKCF0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU1NzI4dGFibGVJbmZvXHU0RTJEXHU2NzJBXHU2MjdFXHU1MjMwSURcdUZGMENcdTVDMURcdThCRDVcdTRGN0ZcdTc1MjhjaGVja0V4aXN0aW5nVGFibGVJZFx1NjdFNVx1NjI3RScpO1xyXG4gICAgICAgICAgICAgICAgdGFibGVJZCA9IHRoaXMuY2hlY2tFeGlzdGluZ1RhYmxlSWQoZWRpdG9yLCB0YWJsZUluZm8uc3RhcnRMaW5lKSB8fCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSUQ6ICR7dGFibGVJZH1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZUlkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1x1NjcyQVx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ0lEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IGFkZEljb24gfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZEljb25zKCkge1xyXG4gICAgLy8gXHU1MkEwXHU4RjdEXHU4MUVBXHU1QjlBXHU0RTQ5XHU1NkZFXHU2ODA3XHJcbiAgICBhZGRJY29uKCdhbGlnbi1sZWZ0JywgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCI+XHJcbiAgICAgICAgPHJlY3QgeD1cIjE1XCIgeT1cIjE1XCIgd2lkdGg9XCI3MFwiIGhlaWdodD1cIjcwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLW9wYWNpdHk9XCIwLjNcIi8+XHJcbiAgICAgICAgPHBhdGggZD1cIk0yNSwzMCBMNzUsMzAgTTI1LDUwIEw2MCw1MCBNMjUsNzAgTDcwLDcwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICBhZGRJY29uKCdhbGlnbi1jZW50ZXInLCBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCIgd2lkdGg9XCIxMDBcIiBoZWlnaHQ9XCIxMDBcIj5cclxuICAgICAgICA8cmVjdCB4PVwiMTVcIiB5PVwiMTVcIiB3aWR0aD1cIjcwXCIgaGVpZ2h0PVwiNzBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2Utb3BhY2l0eT1cIjAuM1wiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTI1LDMwIEw3NSwzMCBNMzUsNTAgTDY1LDUwIE0zMCw3MCBMNzAsNzBcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxyXG4gICAgPC9zdmc+YCk7XHJcbiAgICBcclxuICAgIGFkZEljb24oJ2FsaWduLXJpZ2h0JywgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCI+XHJcbiAgICAgICAgPHJlY3QgeD1cIjE1XCIgeT1cIjE1XCIgd2lkdGg9XCI3MFwiIGhlaWdodD1cIjcwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLW9wYWNpdHk9XCIwLjNcIi8+XHJcbiAgICAgICAgPHBhdGggZD1cIk0yNSwzMCBMNzUsMzAgTTQwLDUwIEw3NSw1MCBNMzAsNzAgTDc1LDcwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICBhZGRJY29uKCdhbGlnbi10b3AnLCBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCIgd2lkdGg9XCIxMDBcIiBoZWlnaHQ9XCIxMDBcIj5cclxuICAgICAgICA8cmVjdCB4PVwiMTVcIiB5PVwiMTVcIiB3aWR0aD1cIjcwXCIgaGVpZ2h0PVwiNzBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2Utb3BhY2l0eT1cIjAuM1wiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTMwLDI1IEwzMCw3NSBNNTAsMjUgTDUwLDYwIE03MCwyNSBMNzAsNzBcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxyXG4gICAgPC9zdmc+YCk7XHJcbiAgICBcclxuICAgIGFkZEljb24oJ2FsaWduLW1pZGRsZScsIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiPlxyXG4gICAgICAgIDxyZWN0IHg9XCIxNVwiIHk9XCIxNVwiIHdpZHRoPVwiNzBcIiBoZWlnaHQ9XCI3MFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1vcGFjaXR5PVwiMC4zXCIvPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNMzAsMjUgTDMwLDc1IE01MCwzNSBMNTAsNjUgTTcwLDMwIEw3MCw3MFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIi8+XHJcbiAgICA8L3N2Zz5gKTtcclxuICAgIFxyXG4gICAgYWRkSWNvbignYWxpZ24tYm90dG9tJywgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCI+XHJcbiAgICAgICAgPHJlY3QgeD1cIjE1XCIgeT1cIjE1XCIgd2lkdGg9XCI3MFwiIGhlaWdodD1cIjcwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLW9wYWNpdHk9XCIwLjNcIi8+XHJcbiAgICAgICAgPHBhdGggZD1cIk0zMCwyNSBMMzAsNzUgTTUwLDQwIEw1MCw3NSBNNzAsMzAgTDcwLDc1XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICBhZGRJY29uKCdhbGlnbi1hbGwnLCBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCIgd2lkdGg9XCIxMDBcIiBoZWlnaHQ9XCIxMDBcIj5cclxuICAgICAgICA8cmVjdCB4PVwiMjBcIiB5PVwiMjBcIiB3aWR0aD1cIjYwXCIgaGVpZ2h0PVwiNjBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIi8+XHJcbiAgICAgICAgPGNpcmNsZSBjeD1cIjUwXCIgY3k9XCI1MFwiIHI9XCIxNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICBhZGRJY29uKCdtZXJnZS1jZWxscycsIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiPlxyXG4gICAgICAgIDxyZWN0IHg9XCIxMFwiIHk9XCIxMFwiIHdpZHRoPVwiMzBcIiBoZWlnaHQ9XCIzMFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgICAgICA8cmVjdCB4PVwiNjBcIiB5PVwiMTBcIiB3aWR0aD1cIjMwXCIgaGVpZ2h0PVwiMzBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIi8+XHJcbiAgICAgICAgPHJlY3QgeD1cIjEwXCIgeT1cIjYwXCIgd2lkdGg9XCIzMFwiIGhlaWdodD1cIjMwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxyXG4gICAgICAgIDxyZWN0IHg9XCI2MFwiIHk9XCI2MFwiIHdpZHRoPVwiMzBcIiBoZWlnaHQ9XCIzMFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTUwLDQ1IEw1MCw1NSBNNDUsNTAgTDU1LDUwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICBhZGRJY29uKCdtZXJnZS1yaWdodCcsIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiPlxyXG4gICAgICAgIDxyZWN0IHg9XCIxNVwiIHk9XCIzMFwiIHdpZHRoPVwiMzBcIiBoZWlnaHQ9XCI0MFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgICAgICA8cmVjdCB4PVwiNTVcIiB5PVwiMzBcIiB3aWR0aD1cIjMwXCIgaGVpZ2h0PVwiNDBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIi8+XHJcbiAgICAgICAgPHBhdGggZD1cIk00NSw1MCBMNTUsNTAgTTUwLDQ1IEw1NSw1MCBMNTAsNTVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxyXG4gICAgPC9zdmc+YCk7XHJcbiAgICBcclxuICAgIGFkZEljb24oJ21lcmdlLWRvd24nLCBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCIgd2lkdGg9XCIxMDBcIiBoZWlnaHQ9XCIxMDBcIj5cclxuICAgICAgICA8cmVjdCB4PVwiMzBcIiB5PVwiMTVcIiB3aWR0aD1cIjQwXCIgaGVpZ2h0PVwiMzBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIi8+XHJcbiAgICAgICAgPHJlY3QgeD1cIjMwXCIgeT1cIjU1XCIgd2lkdGg9XCI0MFwiIGhlaWdodD1cIjMwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNNTAsNDUgTDUwLDU1IE00NSw1MCBMNTAsNTUgTDU1LDUwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICBhZGRJY29uKCdzcGxpdCcsIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiPlxyXG4gICAgICAgIDxyZWN0IHg9XCIyMFwiIHk9XCIyMFwiIHdpZHRoPVwiNjBcIiBoZWlnaHQ9XCI2MFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTUwLDIwIEw1MCw4MCBNMjAsNTAgTDgwLDUwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICBhZGRJY29uKCd0YWJsZS1pZCcsIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiPlxyXG4gICAgICAgIDxyZWN0IHg9XCIyMFwiIHk9XCIzMFwiIHdpZHRoPVwiNjBcIiBoZWlnaHQ9XCI1MFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTIwLDMwIEw4MCwzMFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjVcIi8+XHJcbiAgICAgICAgPHJlY3QgeD1cIjM1XCIgeT1cIjE1XCIgd2lkdGg9XCIzMFwiIGhlaWdodD1cIjE1XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIvPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNNDUsNDUgTDQ1LDY1IE01NSw0NSBMNTUsNjUgTTQ1LDU1IEw1NSw1NVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+XHJcbiAgICA8L3N2Zz5gKTtcclxuICAgIFxyXG4gICAgYWRkSWNvbigndGFibGUtcm93LWFkZCcsIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiPlxyXG4gICAgICAgIDxyZWN0IHg9XCIyMFwiIHk9XCIyMFwiIHdpZHRoPVwiNjBcIiBoZWlnaHQ9XCI2MFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTIwLDUwIEw4MCw1MFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIi8+XHJcbiAgICAgICAgPGNpcmNsZSBjeD1cIjg1XCIgY3k9XCI1MFwiIHI9XCIxMFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTg1LDQ1IEw4NSw1NSBNODAsNTAgTDkwLDUwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICBhZGRJY29uKCd0YWJsZS1zdHlsZScsIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiPlxyXG4gICAgICAgIDxyZWN0IHg9XCIyMFwiIHk9XCIyMFwiIHdpZHRoPVwiNjBcIiBoZWlnaHQ9XCI2MFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTIwLDQwIEw4MCw0MCBNMjAsNjAgTDgwLDYwIE00MCwyMCBMNDAsODAgTTYwLDIwIEw2MCw4MFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+XHJcbiAgICAgICAgPHBhdGggZD1cIk02NSwyNSBMNzUsMzUgTTY1LDM1IEw3NSwyNVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+XHJcbiAgICAgICAgPHBhdGggZD1cIk0yNSw0NSBMMzUsNTUgTTM1LDQ1IEwyNSw1NVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+XHJcbiAgICAgICAgPGNpcmNsZSBjeD1cIjUwXCIgY3k9XCI1MFwiIHI9XCI1XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiLz5cclxuICAgIDwvc3ZnPmApO1xyXG4gICAgXHJcbiAgICAvLyBcdTZERkJcdTUyQTBcdTg4NjhcdTY4M0NcdTVERTVcdTUxNzdcdTY4MEZcdTUyMDdcdTYzNjJcdTU2RkVcdTY4MDdcclxuICAgIGFkZEljb24oJ3RhYmxlLXRvb2xiYXItdG9nZ2xlJywgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCI+XHJcbiAgICAgICAgPHJlY3QgeD1cIjE1XCIgeT1cIjE1XCIgd2lkdGg9XCI3MFwiIGhlaWdodD1cIjcwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNMTUsMzUgTDg1LDM1IE0xNSw2NSBMODUsNjVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIvPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNMzUsMTUgTDM1LDg1IE02NSwxNSBMNjUsODVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIvPlxyXG4gICAgICAgIDxyZWN0IHg9XCI0MFwiIHk9XCI1XCIgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjEwXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiLz5cclxuICAgICAgICA8cmVjdCB4PVwiNDBcIiB5PVwiODVcIiB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiMTBcIiBmaWxsPVwiY3VycmVudENvbG9yXCIvPlxyXG4gICAgICAgIDxyZWN0IHg9XCI1XCIgeT1cIjQwXCIgd2lkdGg9XCIxMFwiIGhlaWdodD1cIjIwXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiLz5cclxuICAgICAgICA8cmVjdCB4PVwiODVcIiB5PVwiNDBcIiB3aWR0aD1cIjEwXCIgaGVpZ2h0PVwiMjBcIiBmaWxsPVwiY3VycmVudENvbG9yXCIvPlxyXG4gICAgPC9zdmc+YCk7XHJcbiAgICBcclxuICAgIC8vIFx1NkRGQlx1NTJBMFx1N0YxNlx1OEY5MVx1NkEyMVx1NUYwRlx1ODg2OFx1NjgzQ1x1NjRDRFx1NEY1Q1x1NTZGRVx1NjgwN1xyXG4gICAgYWRkSWNvbigndGFibGUtZWRpdC1tb2RlJywgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCI+XHJcbiAgICAgICAgPHJlY3QgeD1cIjE1XCIgeT1cIjI1XCIgd2lkdGg9XCI3MFwiIGhlaWdodD1cIjUwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIvPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNMTUsNDUgTDg1LDQ1XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTM1LDI1IEwzNSw3NVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+XHJcbiAgICAgICAgPHBhdGggZD1cIk01NSwyNSBMNTUsNzVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIvPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNNzUsMTAgTDkwLDI1IEw4MCwzNSBMNjUsMjAgWlwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz5cclxuICAgICAgICA8cGF0aCBkPVwiTTY1LDIwIEw4MCwzNVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+XHJcbiAgICA8L3N2Zz5gKTtcclxufSAiLCAiaW1wb3J0IHsgQXBwLCBNYXJrZG93blJlbmRlckNoaWxkLCBNYXJrZG93blZpZXcsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgT2JzaWRpYW5TcHJlYWRzaGVldCB9IGZyb20gJy4vbWFpbic7XHJcblxyXG4vKipcclxuICogXHU4ODY4XHU2ODNDXHU2ODM3XHU1RjBGXHU2RTMyXHU2N0QzXHU1NjY4XHJcbiAqIFx1N0VFN1x1NjI3Rlx1ODFFQU1hcmtkb3duUmVuZGVyQ2hpbGRcdTRFRTVcdTk2QzZcdTYyMTBcdTUyMzBPYnNpZGlhblx1NkUzMlx1NjdEM1x1N0NGQlx1N0VERlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRhYmxlU3R5bGVSZW5kZXJlciBleHRlbmRzIE1hcmtkb3duUmVuZGVyQ2hpbGQge1xyXG4gICAgcHJpdmF0ZSB0YWJsZUlkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHN0eWxpbmc6IGFueTtcclxuICAgIHByaXZhdGUgcGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0O1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1OEY4NVx1NTJBOVx1NjVCOVx1NkNENVx1RkYwQ1x1ODNCN1x1NTNENmFwcFx1NUJGOVx1OEM2MVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEFwcCgpOiBBcHAge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5wbHVnaW4gYXMgdW5rbm93biBhcyBQbHVnaW4pLmFwcDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1Njc4NFx1OTAyMFx1NTFGRFx1NjU3MFxyXG4gICAgICogQHBhcmFtIGVsIFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFxyXG4gICAgICogQHBhcmFtIHRhYmxlSWQgXHU4ODY4XHU2ODNDSURcclxuICAgICAqIEBwYXJhbSBzdHlsaW5nIFx1NjgzN1x1NUYwRlx1NjU3MFx1NjM2RVxyXG4gICAgICogQHBhcmFtIHBsdWdpbiBcdTYzRDJcdTRFRjZcdTVCOUVcdTRGOEJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50LCB0YWJsZUlkOiBzdHJpbmcsIHN0eWxpbmc6IGFueSwgcGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0KSB7XHJcbiAgICAgICAgc3VwZXIoZWwpO1xyXG4gICAgICAgIHRoaXMudGFibGVJZCA9IHRhYmxlSWQ7XHJcbiAgICAgICAgdGhpcy5zdHlsaW5nID0gc3R5bGluZztcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTJBMFx1OEY3RFx1NjVGNlx1NUU5NFx1NzUyOFx1NjgzN1x1NUYwRlxyXG4gICAgICovXHJcbiAgICBvbmxvYWQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRlx1NkUzMlx1NjdEM1x1NTY2OFx1NTJBMFx1OEY3RDogXHU4ODY4XHU2ODNDSUQ9JHt0aGlzLnRhYmxlSWR9YCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgdGhpcy5hcHBseVN0eWxlcygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1ODFFQVx1NUI5QVx1NEU0OVx1N0M3Qlx1NTQwRFx1NEVFNVx1NEZCRkNTU1x1OTAwOVx1NjJFOVx1NTY2OFx1NEY3Rlx1NzUyOFxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2xhc3NMaXN0LmFkZChgdGFibGUtJHt0aGlzLnRhYmxlSWR9YCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2ODA3XHU4QkIwXHU4ODY4XHU2ODNDXHU1REYyXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtc3R5bGVzLWFwcGxpZWQnLCAndHJ1ZScpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1RTk0XHU3NTI4XHU2MjQwXHU2NzA5XHU2ODM3XHU1RjBGXHJcbiAgICAgKi9cclxuICAgIGFwcGx5U3R5bGVzKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zdHlsaW5nKSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU1MjE3XHU1QkY5XHU5RjUwXHU2ODM3XHU1RjBGXHJcbiAgICAgICAgaWYgKHRoaXMuc3R5bGluZy5hbGlnbm1lbnQgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxpbmcuYWxpZ25tZW50KSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5Q29sdW1uQWxpZ25tZW50KHRoaXMuc3R5bGluZy5hbGlnbm1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTUzNTVcdTUxNDNcdTY4M0NcdTY4MzdcdTVGMEZcclxuICAgICAgICBpZiAodGhpcy5zdHlsaW5nLmNlbGxTdHlsZXMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxpbmcuY2VsbFN0eWxlcykpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHBseUNlbGxTdHlsZXModGhpcy5zdHlsaW5nLmNlbGxTdHlsZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTg4NENcdTlBRDhcclxuICAgICAgICBpZiAodGhpcy5zdHlsaW5nLnJvd0hlaWdodHMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxpbmcucm93SGVpZ2h0cykpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVJvd0hlaWdodHModGhpcy5zdHlsaW5nLnJvd0hlaWdodHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTUyMTdcdTVCQkRcclxuICAgICAgICBpZiAodGhpcy5zdHlsaW5nLmNvbFdpZHRocyAmJiBBcnJheS5pc0FycmF5KHRoaXMuc3R5bGluZy5jb2xXaWR0aHMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlDb2x1bW5XaWR0aHModGhpcy5zdHlsaW5nLmNvbFdpZHRocyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1RTk0XHU3NTI4XHU1MjE3XHU1QkY5XHU5RjUwXHU2ODM3XHU1RjBGXHJcbiAgICAgKiBAcGFyYW0gYWxpZ25tZW50cyBcdTUyMTdcdTVCRjlcdTlGNTBcdTY1NzBcdTYzNkVcclxuICAgICAqL1xyXG4gICAgYXBwbHlDb2x1bW5BbGlnbm1lbnQoYWxpZ25tZW50czogc3RyaW5nW10pIHtcclxuICAgICAgICBjb25zdCByb3dzID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwsIGNvbEluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWxpZ25tZW50c1tjb2xJbmRleF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAoY2VsbCBhcyBIVE1MRWxlbWVudCkuc3R5bGUudGV4dEFsaWduID0gYWxpZ25tZW50c1tjb2xJbmRleF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1RTk0XHU3NTI4XHU1MzU1XHU1MTQzXHU2ODNDXHU2ODM3XHU1RjBGXHJcbiAgICAgKiBAcGFyYW0gY2VsbFN0eWxlcyBcdTUzNTVcdTUxNDNcdTY4M0NcdTY4MzdcdTVGMEZcdTY1NzBcdTYzNkVcclxuICAgICAqL1xyXG4gICAgYXBwbHlDZWxsU3R5bGVzKGNlbGxTdHlsZXM6IGFueVtdKSB7XHJcbiAgICAgICAgY2VsbFN0eWxlcy5mb3JFYWNoKHN0eWxlID0+IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZS5yb3cgIT09ICdudW1iZXInIHx8IHR5cGVvZiBzdHlsZS5jb2wgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmZpbmRDZWxsKHN0eWxlLnJvdywgc3R5bGUuY29sKTtcclxuICAgICAgICAgICAgaWYgKCFjZWxsKSByZXR1cm47XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEZcdTVDNUVcdTYwMjdcclxuICAgICAgICAgICAgaWYgKHN0eWxlLnRleHRBbGlnbikgY2VsbC5zdHlsZS50ZXh0QWxpZ24gPSBzdHlsZS50ZXh0QWxpZ247XHJcbiAgICAgICAgICAgIGlmIChzdHlsZS52ZXJ0aWNhbEFsaWduKSBjZWxsLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSBzdHlsZS52ZXJ0aWNhbEFsaWduO1xyXG4gICAgICAgICAgICBpZiAoc3R5bGUuYmFja2dyb3VuZENvbG9yKSBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHN0eWxlLmJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgaWYgKHN0eWxlLmNvbG9yKSBjZWxsLnN0eWxlLmNvbG9yID0gc3R5bGUuY29sb3I7XHJcbiAgICAgICAgICAgIGlmIChzdHlsZS5mb250V2VpZ2h0KSBjZWxsLnN0eWxlLmZvbnRXZWlnaHQgPSBzdHlsZS5mb250V2VpZ2h0O1xyXG4gICAgICAgICAgICBpZiAoc3R5bGUuZm9udFN0eWxlKSBjZWxsLnN0eWxlLmZvbnRTdHlsZSA9IHN0eWxlLmZvbnRTdHlsZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NUU5NFx1NzUyOFx1ODg0Q1x1OUFEOFxyXG4gICAgICogQHBhcmFtIGhlaWdodHMgXHU4ODRDXHU5QUQ4XHU2NTcwXHU2MzZFXHJcbiAgICAgKi9cclxuICAgIGFwcGx5Um93SGVpZ2h0cyhoZWlnaHRzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBcdTVFOTRcdTc1MjhcdTg4NENcdTlBRDg6ICR7SlNPTi5zdHJpbmdpZnkoaGVpZ2h0cyl9YCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgcm93cyA9IHRoaXMuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICBcclxuICAgICAgICByb3dzLmZvckVhY2goKHJvdywgcm93SW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJvd0luZGV4IDwgaGVpZ2h0cy5sZW5ndGggJiYgaGVpZ2h0c1tyb3dJbmRleF0gJiYgaGVpZ2h0c1tyb3dJbmRleF0gIT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgKHJvdyBhcyBIVE1MRWxlbWVudCkuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0c1tyb3dJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU4QkJFXHU3RjZFXHU3QjJDJHtyb3dJbmRleCsxfVx1ODg0Q1x1OUFEOFx1NUVBNjogJHtoZWlnaHRzW3Jvd0luZGV4XX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1RTk0XHU3NTI4XHU1MjE3XHU1QkJEXHJcbiAgICAgKiBAcGFyYW0gd2lkdGhzIFx1NTIxN1x1NUJCRFx1NjU3MFx1NjM2RVxyXG4gICAgICovXHJcbiAgICBhcHBseUNvbHVtbldpZHRocyh3aWR0aHM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFx1NUU5NFx1NzUyOFx1NTIxN1x1NUJCRDogJHtKU09OLnN0cmluZ2lmeSh3aWR0aHMpfWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NEUzQVx1ODg2OFx1NjgzQ1x1NkRGQlx1NTJBMGNvbGdyb3VwXHU1NDhDY29sXHU1MTQzXHU3RDIwXHJcbiAgICAgICAgbGV0IGNvbGdyb3VwID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCdjb2xncm91cCcpO1xyXG4gICAgICAgIGlmICghY29sZ3JvdXApIHtcclxuICAgICAgICAgICAgY29sZ3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjb2xncm91cCcpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnByZXBlbmQoY29sZ3JvdXApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbGdyb3VwLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFjb2xcdTUxNDNcdTdEMjBcdTVFNzZcdThCQkVcdTdGNkVcdTVCQkRcdTVFQTZcclxuICAgICAgICB3aWR0aHMuZm9yRWFjaCgod2lkdGgsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NvbCcpO1xyXG4gICAgICAgICAgICBpZiAod2lkdGggJiYgd2lkdGggIT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgY29sLnN0eWxlLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU4QkJFXHU3RjZFXHU3QjJDJHtpbmRleCsxfVx1NTIxN1x1NUJCRFx1NUVBNjogJHt3aWR0aH1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBcdTRGRUVcdTU5MEQ6IFx1Nzg2RVx1NEZERGNvbGdyb3VwXHU0RTBEXHU0RTNBbnVsbFxyXG4gICAgICAgICAgICBpZiAoY29sZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgIGNvbGdyb3VwLmFwcGVuZENoaWxkKGNvbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NjdFNVx1NjI3RVx1NzI3OVx1NUI5QVx1NEY0RFx1N0Y2RVx1NzY4NFx1NTM1NVx1NTE0M1x1NjgzQ1xyXG4gICAgICogQHBhcmFtIHJvd0luZGV4IFx1ODg0Q1x1N0QyMlx1NUYxNVxyXG4gICAgICogQHBhcmFtIGNvbEluZGV4IFx1NTIxN1x1N0QyMlx1NUYxNVxyXG4gICAgICogQHJldHVybnMgXHU1MzU1XHU1MTQzXHU2ODNDXHU1MTQzXHU3RDIwXHU2MjE2bnVsbFxyXG4gICAgICovXHJcbiAgICBmaW5kQ2VsbChyb3dJbmRleDogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyKTogSFRNTEVsZW1lbnQgfCBudWxsIHtcclxuICAgICAgICBjb25zdCByb3dzID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG4gICAgICAgIGlmICghcm93cyB8fCByb3dzLmxlbmd0aCA8PSByb3dJbmRleCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY2VsbHMgPSByb3dzW3Jvd0luZGV4XS5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICBpZiAoIWNlbGxzIHx8IGNlbGxzLmxlbmd0aCA8PSBjb2xJbmRleCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNlbGxzW2NvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTM3OFx1OEY3RFx1NjVGNlx1NzY4NFx1NkUwNVx1NzQwNlx1NURFNVx1NEY1Q1xyXG4gICAgICovXHJcbiAgICBvbnVubG9hZCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgXHU4ODY4XHU2ODNDICR7dGhpcy50YWJsZUlkfSBcdTc2ODRcdTY4MzdcdTVGMEZcdTZFMzJcdTY3RDNcdTU2NjhcdTVERjJcdTUzNzhcdThGN0RgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NUU5NFx1NzUyOFx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXN5bmMgYXBwbHlUYWJsZVN0eWxlcyh0YWJsZUVsZW1lbnQ6IEhUTUxFbGVtZW50LCB0YWJsZUlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTVERjJcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgaWYgKHRhYmxlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtc3R5bGVzLWFwcGxpZWQnKSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NEZERFx1NUI1OFx1NzY4NFx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRlx1NjU3MFx1NjM2RVxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wbHVnaW4ubG9hZERhdGEoKTtcclxuICAgICAgICAgICAgY29uc3QgdGFibGVEYXRhID0gZGF0YT8udGFibGVzPy5bdGFibGVJZF07XHJcbiAgICAgICAgICAgIGlmICghdGFibGVEYXRhIHx8ICF0YWJsZURhdGEuc3R5bGluZykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NkNBMVx1NjcwOVx1NjI3RVx1NTIzMFx1NTMzOVx1OTE0RFx1NzY4NFx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRlx1NjU3MFx1NjM2RVx1RkYxQSR7dGFibGVJZH1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NUU5NFx1NzUyOFx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRiAtIElEPSR7dGFibGVJZH1gLCB0YWJsZURhdGEuc3R5bGluZyk7XHJcblxyXG4gICAgICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTg4NENcdTlBRDhcclxuICAgICAgICAgICAgaWYgKHRhYmxlRGF0YS5zdHlsaW5nLnJvd0hlaWdodHMgJiYgdGFibGVEYXRhLnN0eWxpbmcucm93SGVpZ2h0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3dzID0gdGFibGVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZURhdGEuc3R5bGluZy5yb3dIZWlnaHRzLmZvckVhY2goKGhlaWdodDogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgcm93cy5sZW5ndGggJiYgaGVpZ2h0ICYmIGhlaWdodCAhPT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyb3dzW2luZGV4XSBhcyBIVE1MRWxlbWVudCkuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1RTk0XHU3NTI4XHU4ODRDXHU5QUQ4IC0gXHU3RDIyXHU1RjE1PSR7aW5kZXh9LCBcdTlBRDhcdTVFQTY9JHtoZWlnaHR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NTIxN1x1NUJCRFxyXG4gICAgICAgICAgICBpZiAodGFibGVEYXRhLnN0eWxpbmcuY29sV2lkdGhzICYmIHRhYmxlRGF0YS5zdHlsaW5nLmNvbFdpZHRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTYyMTZcdTgzQjdcdTUzRDZjb2xncm91cFx1NTE0M1x1N0QyMFxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbGdyb3VwID0gdGFibGVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2NvbGdyb3VwJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sZ3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjb2xncm91cCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY29sZ3JvdXAsIHRhYmxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2RTA1XHU5NjY0XHU3M0IwXHU2NzA5XHU3Njg0Y29sXHU1MTQzXHU3RDIwXHJcbiAgICAgICAgICAgICAgICAgICAgY29sZ3JvdXAuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBY29sXHU1MTQzXHU3RDIwXHU1RTc2XHU4QkJFXHU3RjZFXHU1QkJEXHU1RUE2XHJcbiAgICAgICAgICAgICAgICB0YWJsZURhdGEuc3R5bGluZy5jb2xXaWR0aHMuZm9yRWFjaCgod2lkdGg6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NvbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aWR0aCAmJiB3aWR0aCAhPT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5zdHlsZS53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1RTk0XHU3NTI4XHU1MjE3XHU1QkJEIC0gXHU3RDIyXHU1RjE1PSR7aW5kZXh9LCBcdTVCQkRcdTVFQTY9JHt3aWR0aH1gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU0RkVFXHU1OTBEOiBcdTc4NkVcdTRGRERjb2xncm91cFx1NEUwRFx1NEUzQW51bGxcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sZ3JvdXAuYXBwZW5kQ2hpbGQoY29sKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU1QkY5XHU5RjUwXHU2NUI5XHU1RjBGXHJcbiAgICAgICAgICAgIGlmICh0YWJsZURhdGEuc3R5bGluZy5hbGlnbm1lbnQgJiYgdGFibGVEYXRhLnN0eWxpbmcuYWxpZ25tZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd3MgPSB0YWJsZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICAgICAgICAgIHJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLCB0ZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwsIGNlbGxJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbEluZGV4IDwgdGFibGVEYXRhLnN0eWxpbmcuYWxpZ25tZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxpZ25tZW50ID0gdGFibGVEYXRhLnN0eWxpbmcuYWxpZ25tZW50W2NlbGxJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxpZ25tZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNlbGwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnRleHRBbGlnbiA9IGFsaWdubWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICBpZiAodGFibGVEYXRhLnN0eWxpbmcuY2VsbFN0eWxlcyAmJiB0YWJsZURhdGEuc3R5bGluZy5jZWxsU3R5bGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlRGF0YS5zdHlsaW5nLmNlbGxTdHlsZXMuZm9yRWFjaCgoY2VsbFN0eWxlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbFN0eWxlLnJvdyAhPT0gdW5kZWZpbmVkICYmIGNlbGxTdHlsZS5jb2wgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dzID0gdGFibGVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsU3R5bGUucm93IDwgcm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHJvd3NbY2VsbFN0eWxlLnJvd107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxscyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0aCwgdGQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsU3R5bGUuY29sIDwgY2VsbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGNlbGxzW2NlbGxTdHlsZS5jb2xdIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1ODBDQ1x1NjY2Rlx1OTg5Q1x1ODI3MlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsU3R5bGUuYmFja2dyb3VuZENvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY2VsbFN0eWxlLmJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU2NTg3XHU2NzJDXHU5ODlDXHU4MjcyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxTdHlsZS50ZXh0Q29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5jb2xvciA9IGNlbGxTdHlsZS50ZXh0Q29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NUI1N1x1NEY1M1x1N0M5N1x1N0VDNlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsU3R5bGUuZm9udFdlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmZvbnRXZWlnaHQgPSBjZWxsU3R5bGUuZm9udFdlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU1QjU3XHU0RjUzXHU2ODM3XHU1RjBGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxTdHlsZS5mb250U3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5mb250U3R5bGUgPSBjZWxsU3R5bGUuZm9udFN0eWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBcdTY4MDdcdThCQjBcdTg4NjhcdTY4M0NcdTVERjJcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgdGFibGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1zdHlsZXMtYXBwbGllZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTg4NjhcdTY4M0NcdTcyNzlcdTVCOUFcdTc2ODRDU1NcdTdDN0JcclxuICAgICAgICAgICAgdGFibGVFbGVtZW50LmNsYXNzTGlzdC5hZGQoYHRhYmxlLSR7dGFibGVJZH1gKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTg4NjhcdTY4M0NcdTY4MzdcdTVGMEZcdTVFOTRcdTc1MjhcdTVCOENcdTYyMTAgLSBJRD0ke3RhYmxlSWR9YCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU1RTk0XHU3NTI4XHU4ODY4XHU2ODNDXHU2ODM3XHU1RjBGXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTVFOTRcdTc1MjhcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdTc2ODRcdTg4NjhcdTY4M0NcdTY4MzdcdTVGMEZcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGFwcGx5UHJldmlld01vZGVTdHlsZXMoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1OTg4NFx1ODlDOFx1NkEyMVx1NUYwRlx1NkZDMFx1NkQzQlx1RkYwQ1x1NUYwMFx1NTlDQlx1NUU5NFx1NzUyOFx1NEZERFx1NUI1OFx1NzY4NFx1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2MjQwXHU2NzA5XHU4ODY4XHU2ODNDXHU1MTQzXHU3RDIwXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlcyA9IGNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RhYmxlJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTYyN0VcdTUyMzAgJHt0YWJsZXMubGVuZ3RofSBcdTRFMkFcdTg4NjhcdTY4M0NcdTk3MDBcdTg5ODFcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEZgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghdGFibGVzLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU2RDNCXHU1MkE4XHU2NTg3XHU0RUY2XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmdldEFwcCgpLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICAgICAgICAgIGlmICghYWN0aXZlRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjcyQVx1NjI3RVx1NTIzMFx1NkQzQlx1NTJBOFx1NjU4N1x1NEVGNicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdThCRkJcdTUzRDZcdTY1ODdcdTRFRjZcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuZ2V0QXBwKCkudmF1bHQucmVhZChhY3RpdmVGaWxlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NEVDRU1hcmtkb3duXHU1MTg1XHU1QkI5XHU0RTJEXHU2M0QwXHU1M0Q2XHU2MjQwXHU2NzA5XHU4ODY4XHU2ODNDXHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlSW5mb3MgPSB0aGlzLnBsdWdpbi50YWJsZUlkTWFuYWdlci5leHRyYWN0VGFibGVJZHNGcm9tTWFya2Rvd24oY29udGVudCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTRFQ0VcdTY1ODdcdTRFRjZcdTRFMkRcdTYzRDBcdTUzRDZcdTc2ODRcdTg4NjhcdTY4M0NcdTRGRTFcdTYwNkY6ICR7dGFibGVJbmZvcy5sZW5ndGh9IFx1NEUyQVx1ODg2OFx1NjgzQ0lEYCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTRFM0FcdTZCQ0ZcdTRFMkFcdTg4NjhcdTY4M0NcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEZcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRhYmxlcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlRWxlbWVudCA9IHRhYmxlc1tpbmRleF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGVJZCA9IHRhYmxlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKCF0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU4ODY4XHU2ODNDXHU2Q0ExXHU2NzA5SURcdUZGMENcdTVDMURcdThCRDVcdTRFQ0VIVE1MXHU2Q0U4XHU5MUNBXHU0RTJEXHU4M0I3XHU1M0Q2XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVJZCA9IHRoaXMucGx1Z2luLnRhYmxlSWRNYW5hZ2VyLmdldFRhYmxlSWRGcm9tQ29tbWVudCh0YWJsZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NEVDRFx1NzEzNlx1NkNBMVx1NjcwOUlEXHVGRjBDXHU1QzFEXHU4QkQ1XHU5MDFBXHU4RkM3XHU0RjREXHU3RjZFXHU1MzM5XHU5MTREXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWJsZUlkICYmIGluZGV4IDwgdGFibGVJbmZvcy5sZW5ndGggJiYgdGFibGVzLmxlbmd0aCA9PT0gdGFibGVJbmZvcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVJZCA9IHRhYmxlSW5mb3NbaW5kZXhdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OTAxQVx1OEZDN1x1NEY0RFx1N0Y2RVx1NTMzOVx1OTE0RFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEOiAke3RhYmxlSWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVJRFx1NUM1RVx1NjAyN1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcsIHRhYmxlSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1OEZEOFx1NjYyRlx1NkNBMVx1NjcwOUlEXHVGRjBDXHU1QzFEXHU4QkQ1XHU5MDFBXHU4RkM3XHU3Mjc5XHU1RjgxXHU1MzM5XHU5MTREXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWJsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlRmVhdHVyZSA9IHRoaXMucGx1Z2luLnRhYmxlSWRNYW5hZ2VyLmV4dHJhY3RUYWJsZUZlYXR1cmUodGFibGVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiZXN0TWF0Y2hJZCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmVzdE1hdGNoU2NvcmUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbmZvIG9mIHRhYmxlSW5mb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgaWQsIGZlYXR1cmUgfSA9IGluZm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NvcmUgPSB0aGlzLnBsdWdpbi50YWJsZUlkTWFuYWdlci5jYWxjdWxhdGVGZWF0dXJlU2ltaWxhcml0eSh0YWJsZUZlYXR1cmUsIGZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1ODg2OFx1NjgzQ0lEICR7aWR9IFx1NzY4NFx1NzI3OVx1NUY4MVx1NzZGOFx1NEYzQ1x1NUVBNjogJHtzY29yZS50b0ZpeGVkKDIpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmUgPiBiZXN0TWF0Y2hTY29yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaFNjb3JlID0gc2NvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVzdE1hdGNoSWQgPSBpZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlc3RNYXRjaElkICYmIGJlc3RNYXRjaFNjb3JlID4gMC43KSB7IC8vIDcwJVx1NzZGOFx1NEYzQ1x1NUVBNlx1OTYwOFx1NTAzQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OTAxQVx1OEZDN1x1NzI3OVx1NUY4MVx1NzZGOFx1NEYzQ1x1NUVBNlx1NTMzOVx1OTE0RFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEOiAke2Jlc3RNYXRjaElkfVx1RkYwOFx1NzZGOFx1NEYzQ1x1NUVBNjogJHtiZXN0TWF0Y2hTY29yZS50b0ZpeGVkKDIpfVx1RkYwOWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVJZCA9IGJlc3RNYXRjaElkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU4QkJFXHU3RjZFSURcdTVDNUVcdTYwMjdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnLCB0YWJsZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RTNBXHU4ODY4XHU2ODNDXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGIC0gXHU3RDIyXHU1RjE1PSR7aW5kZXh9LCBJRD0ke3RhYmxlSWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHBseVRhYmxlU3R5bGVzKHRhYmxlRWxlbWVudCwgdGFibGVJZCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTY1RTBcdTZDRDVcdTRFM0FcdTg4NjhcdTY4M0NcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEYgLSBcdTdEMjJcdTVGMTU9JHtpbmRleH0sIFx1NjcyQVx1NjI3RVx1NTIzMElEYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTVFOTRcdTc1MjhcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTg4NjhcdTY4M0NcdTY4MzdcdTVGMEZcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFx1NkUzMlx1NjdEM1x1NjI0MFx1NjcwOVx1ODg2OFx1NjgzQ1x1NzY4NFx1NUI1OFx1NTBBOFx1NjgzN1x1NUYwRlxyXG4gKiBAcGFyYW0gcGx1Z2luIFx1NjNEMlx1NEVGNlx1NUI5RVx1NEY4QlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmRlclRhYmxlc1dpdGhTdG9yZWRTdHlsZXMocGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBcdThGODVcdTUyQTlcdTUxRkRcdTY1NzBcdUZGMENcdTgzQjdcdTUzRDZhcHBcdTVCRjlcdThDNjFcclxuICAgIGZ1bmN0aW9uIGdldEFwcCgpOiBBcHAge1xyXG4gICAgICAgIHJldHVybiAocGx1Z2luIGFzIHVua25vd24gYXMgUGx1Z2luKS5hcHA7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdcdTVGMDBcdTU5Q0JcdTZFMzJcdTY3RDNcdTg4NjhcdTY4M0NcdTY4MzdcdTVGMEYnKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTZEM0JcdTUyQThcdTg5QzZcdTU2RkVcclxuICAgICAgICBjb25zdCBhY3RpdmVWaWV3ID0gZ2V0QXBwKCkud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuICAgICAgICBpZiAoIWFjdGl2ZVZpZXcpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NjcyQVx1NjI3RVx1NTIzMFx1NkQzQlx1NTJBOFx1ODlDNlx1NTZGRVx1RkYwQ1x1NjVFMFx1NkNENVx1NkUzMlx1NjdEM1x1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NjU4N1x1NEVGNlxyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSBhY3RpdmVWaWV3LmZpbGU7XHJcbiAgICAgICAgaWYgKCFhY3RpdmVGaWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTY3MkFcdTYyN0VcdTUyMzBcdTZEM0JcdTUyQThcdTY1ODdcdTRFRjZcdUZGMENcdTY1RTBcdTZDRDVcdTZFMzJcdTY3RDNcdTg4NjhcdTY4M0NcdTY4MzdcdTVGMEYnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTY1ODdcdTRFRjZcdThERUZcdTVGODRcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGFjdGl2ZUZpbGUucGF0aDtcclxuICAgICAgICBjb25zb2xlLmxvZyhgXHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHU4REVGXHU1Rjg0OiAke2ZpbGVQYXRofWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OTk5Nlx1NTE0OFx1NUMxRFx1OEJENVx1NEVDRU1hcmtkb3duXHU2NTg3XHU0RUY2XHU0RTJEXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHJcbiAgICAgICAgbGV0IHRhYmxlczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NURGMlx1NTIxRFx1NTlDQlx1NTMxNlx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NjNEMFx1NTNENlx1NTY2OFx1RkYwQ1x1NTIxOVx1NEY3Rlx1NzUyOFx1NUI4M1x1NEVDRVx1NjU4N1x1NEVGNlx1NEUyRFx1NjNEMFx1NTNENlx1NjU3MFx1NjM2RVxyXG4gICAgICAgIGlmIChwbHVnaW4udGFibGVEYXRhRXh0cmFjdG9yKSB7XHJcbiAgICAgICAgICAgIHRhYmxlcyA9IGF3YWl0IHBsdWdpbi50YWJsZURhdGFFeHRyYWN0b3IuZXh0cmFjdFRhYmxlRGF0YUZyb21GaWxlKGFjdGl2ZUZpbGUpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RUNFTWFya2Rvd25cdTY1ODdcdTRFRjZcdTRFMkRcdTYzRDBcdTUzRDZcdTUyMzAgJHtPYmplY3Qua2V5cyh0YWJsZXMpLmxlbmd0aH0gXHU0RTJBXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NEVDRU1hcmtkb3duXHU2NTg3XHU0RUY2XHU0RTJEXHU2Q0ExXHU2NzA5XHU2M0QwXHU1M0Q2XHU1MjMwXHU2NTcwXHU2MzZFXHVGRjBDXHU1MjE5XHU1QzFEXHU4QkQ1XHU0RUNFZGF0YS5qc29uXHU0RTJEXHU4M0I3XHU1M0Q2XHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRhYmxlcykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTRFQ0VNYXJrZG93blx1NjU4N1x1NEVGNlx1NEUyRFx1NjcyQVx1NjNEMFx1NTNENlx1NTIzMFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1RkYwQ1x1NUMxRFx1OEJENVx1NEVDRWRhdGEuanNvblx1ODNCN1x1NTNENicpO1xyXG4gICAgICAgICAgICBjb25zdCBwbHVnaW5EYXRhID0gYXdhaXQgcGx1Z2luLmxvYWREYXRhKCkgfHwge307XHJcbiAgICAgICAgICAgIHRhYmxlcyA9IHBsdWdpbkRhdGEudGFibGVzIHx8IHt9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2NjJGXHU1NDI2XHU2NzA5XHU1QjU4XHU1MEE4XHU3Njg0XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHJcbiAgICAgICAgICAgIGlmICghdGFibGVzIHx8IE9iamVjdC5rZXlzKHRhYmxlcykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHU2Q0ExXHU2NzA5XHU1QjU4XHU1MEE4XHU3Njg0XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHU0RTJEXHU3Njg0XHU2MjQwXHU2NzA5XHU4ODY4XHU2ODNDXHJcbiAgICAgICAgY29uc3QgYWxsVGFibGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndGFibGUnKTtcclxuICAgICAgICBpZiAoIWFsbFRhYmxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1x1NUY1M1x1NTI0RFx1NjU4N1x1NEVGNlx1NEUyRFx1NkNBMVx1NjcwOVx1ODg2OFx1NjgzQycpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBcdTVGNTNcdTUyNERcdTY1ODdcdTRFRjZcdTRFMkRcdTY3MDkgJHthbGxUYWJsZXMubGVuZ3RofSBcdTRFMkFcdTg4NjhcdTY4M0NgKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTZFMzJcdTY3RDNcdTk2MUZcdTUyMTdcclxuICAgICAgICBjb25zdCByZW5kZXJRdWV1ZSA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OEJGQlx1NTNENlx1NjU4N1x1NEVGNlx1NTE4NVx1NUJCOVx1RkYwQ1x1NjNEMFx1NTNENlx1ODg2OFx1NjgzQ1x1NzI3OVx1NUY4MVxyXG4gICAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgcGx1Z2luLmFwcC52YXVsdC5yZWFkKGFjdGl2ZUZpbGUpO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlSW5mb3MgPSBwbHVnaW4udGFibGVJZE1hbmFnZXIuZXh0cmFjdFRhYmxlSWRzRnJvbU1hcmtkb3duKGZpbGVDb250ZW50KTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgXHU0RUNFXHU2NTg3XHU0RUY2XHU1MTg1XHU1QkI5XHU0RTJEXHU2M0QwXHU1M0Q2XHU1MjMwICR7dGFibGVJbmZvcy5sZW5ndGh9IFx1NEUyQVx1ODg2OFx1NjgzQ1x1NEZFMVx1NjA2RmApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NTkwNFx1NzQwNlx1NkJDRlx1NEUyQVx1ODg2OFx1NjgzQ1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsVGFibGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlID0gYWxsVGFibGVzW2ldIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gMS4gXHU5OTk2XHU1MTQ4XHU1QzFEXHU4QkQ1XHU0RUNFXHU4ODY4XHU2ODNDXHU1QzVFXHU2MDI3XHU0RTJEXHU4M0I3XHU1M0Q2SURcclxuICAgICAgICAgICAgbGV0IHRhYmxlSWQgPSB0YWJsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIDIuIFx1NTk4Mlx1Njc5Q1x1NkNBMVx1NjcwOUlEXHU1QzVFXHU2MDI3XHVGRjBDXHU1QzFEXHU4QkQ1XHU5MDFBXHU4RkM3XHU0RjREXHU3RjZFXHU1MzM5XHU5MTREXHJcbiAgICAgICAgICAgIC8vIFx1Nzg2RVx1NEZERFx1NEY0RFx1N0Y2RVx1NTMzOVx1OTE0RFx1NjYyRlx1NTFDNlx1Nzg2RVx1NzY4NFx1RkYwQ1x1NTNFQVx1NjcwOVx1NUY1M1x1ODg2OFx1NjgzQ1x1NjU3MFx1OTFDRlx1NTQ4Q1x1NjNEMFx1NTNENlx1NzY4NElEXHU2NTcwXHU5MUNGXHU0RTAwXHU4MUY0XHU2NUY2XHU2MjREXHU0RjdGXHU3NTI4XHJcbiAgICAgICAgICAgIGlmICghdGFibGVJZCAmJiBpIDwgdGFibGVJbmZvcy5sZW5ndGggJiYgYWxsVGFibGVzLmxlbmd0aCA9PT0gdGFibGVJbmZvcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRhYmxlSWQgPSB0YWJsZUluZm9zW2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU5MDFBXHU4RkM3XHU0RjREXHU3RjZFXHU1MzM5XHU5MTREXHU2MjdFXHU1MjMwXHU4ODY4XHU2ODNDSUQ6ICR7dGFibGVJZH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVJRFx1NUM1RVx1NjAyN1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcsIHRhYmxlSWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyAzLiBcdTU5ODJcdTY3OUNcdThGRDhcdTZDQTFcdTY3MDlJRFx1RkYwQ1x1NUMxRFx1OEJENVx1OTAxQVx1OEZDN1x1NzI3OVx1NUY4MVx1NTMzOVx1OTE0RFxyXG4gICAgICAgICAgICBpZiAoIXRhYmxlSWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlRmVhdHVyZSA9IHBsdWdpbi50YWJsZUlkTWFuYWdlci5leHRyYWN0VGFibGVGZWF0dXJlKHRhYmxlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IGJlc3RNYXRjaElkID0gJyc7XHJcbiAgICAgICAgICAgICAgICBsZXQgYmVzdE1hdGNoU2NvcmUgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoZWRJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRhYmxlSW5mb3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGlkLCBmZWF0dXJlIH0gPSB0YWJsZUluZm9zW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gcGx1Z2luLnRhYmxlSWRNYW5hZ2VyLmNhbGN1bGF0ZUZlYXR1cmVTaW1pbGFyaXR5KHRhYmxlRmVhdHVyZSwgZmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1ODg2OFx1NjgzQ0lEICR7aWR9IFx1NzY4NFx1NzI3OVx1NUY4MVx1NzZGOFx1NEYzQ1x1NUVBNjogJHtzY29yZS50b0ZpeGVkKDIpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29yZSA+IGJlc3RNYXRjaFNjb3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaFNjb3JlID0gc2NvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaElkID0gaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWRJbmRleCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoYmVzdE1hdGNoSWQgJiYgYmVzdE1hdGNoU2NvcmUgPiAwLjcpIHsgLy8gNzAlXHU3NkY4XHU0RjNDXHU1RUE2XHU5NjA4XHU1MDNDXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OTAxQVx1OEZDN1x1NzI3OVx1NUY4MVx1NzZGOFx1NEYzQ1x1NUVBNlx1NTMzOVx1OTE0RFx1NjI3RVx1NTIzMFx1ODg2OFx1NjgzQ0lEOiAke2Jlc3RNYXRjaElkfVx1RkYwOFx1NzZGOFx1NEYzQ1x1NUVBNjogJHtiZXN0TWF0Y2hTY29yZS50b0ZpeGVkKDIpfVx1RkYwOWApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlSWQgPSBiZXN0TWF0Y2hJZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdThCQkVcdTdGNkVJRFx1NUM1RVx1NjAyN1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcsIHRhYmxlSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NEVDRXRhYmxlSW5mb3NcdTRFMkRcdTc5RkJcdTk2NjRcdTVERjJcdTUzMzlcdTkxNERcdTc2ODRcdTg4NjhcdTY4M0NcdTRGRTFcdTYwNkZcdUZGMENcdTkwN0ZcdTUxNERcdTkxQ0RcdTU5MERcdTUzMzlcdTkxNERcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlZEluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVJbmZvcy5zcGxpY2UobWF0Y2hlZEluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjI3RVx1NTIzMFx1NEU4NklEXHVGRjBDXHU2N0U1XHU2MjdFXHU1QkY5XHU1RTk0XHU3Njg0XHU2ODM3XHU1RjBGXHU2NTcwXHU2MzZFXHJcbiAgICAgICAgICAgIGlmICh0YWJsZUlkICYmIHRhYmxlc1t0YWJsZUlkXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFibGVEYXRhID0gdGFibGVzW3RhYmxlSWRdO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTg4NjhcdTY4M0NcdTY2MkZcdTU0MjZcdTVDNUVcdTRFOEVcdTVGNTNcdTUyNERcdTY1ODdcdTRFRjZcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzSW5DdXJyZW50RmlsZSA9IHRhYmxlRGF0YS5sb2NhdGlvbnM/LnNvbWUoKGxvYzoge3BhdGg6IHN0cmluZ30pID0+IGxvYy5wYXRoID09PSBmaWxlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChpc0luQ3VycmVudEZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU0RTNBXHU4ODY4XHU2ODNDICR7dGFibGVJZH0gXHU2REZCXHU1MkEwXHU2RTMyXHU2N0QzXHU0RUZCXHU1MkExYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyUXVldWUucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGFcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTU5MDRcdTc0MDZcdTZFMzJcdTY3RDNcdTk2MUZcdTUyMTdcclxuICAgICAgICBpZiAocmVuZGVyUXVldWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1RjAwXHU1OUNCXHU1OTA0XHU3NDA2ICR7cmVuZGVyUXVldWUubGVuZ3RofSBcdTRFMkFcdTg4NjhcdTY4M0NcdTZFMzJcdTY3RDNcdTRFRkJcdTUyQTFgKTtcclxuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc1JlbmRlclF1ZXVlKHJlbmRlclF1ZXVlLCBwbHVnaW4pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdTZDQTFcdTY3MDlcdTk3MDBcdTg5ODFcdTZFMzJcdTY3RDNcdTc2ODRcdTg4NjhcdTY4M0MnKTtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NkUzMlx1NjdEM1x1ODg2OFx1NjgzQ1x1NjgzN1x1NUYwRlx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcdTYyNzlcdTkxQ0ZcdTU5MDRcdTc0MDZcdTZFMzJcdTY3RDNcdTk2MUZcdTUyMTdcclxuICogQHBhcmFtIHF1ZXVlIFx1NkUzMlx1NjdEM1x1OTYxRlx1NTIxN1xyXG4gKiBAcGFyYW0gcGx1Z2luIFx1NjNEMlx1NEVGNlx1NUI5RVx1NEY4QlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1JlbmRlclF1ZXVlKHF1ZXVlOiBhbnlbXSwgcGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBcdThCQkVcdTdGNkVcdTYyNzlcdTU5MDRcdTc0MDZcdTU5MjdcdTVDMEZcclxuICAgIGNvbnN0IGJhdGNoU2l6ZSA9IDM7IC8vIFx1NTFDRlx1NUMwRlx1NjI3OVx1NTkwNFx1NzQwNlx1NTkyN1x1NUMwRlx1RkYwQ1x1OTA3Rlx1NTE0RFx1NjAyN1x1ODBGRFx1OTVFRVx1OTg5OFxyXG4gICAgbGV0IHByb2Nlc3NlZENvdW50ID0gMDtcclxuICAgIGxldCBzdWNjZXNzQ291bnQgPSAwO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgXHU1RjAwXHU1OUNCXHU1OTA0XHU3NDA2XHU2RTMyXHU2N0QzXHU5NjFGXHU1MjE3XHVGRjBDXHU1MTcxICR7cXVldWUubGVuZ3RofSBcdTRFMkFcdTg4NjhcdTY4M0NgKTtcclxuICAgIFxyXG4gICAgLy8gXHU1MjFCXHU1RUZBXHU1OTA0XHU3NDA2XHU1MUZEXHU2NTcwXHJcbiAgICBjb25zdCBwcm9jZXNzQmF0Y2ggPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU1RjUzXHU1MjREXHU2Mjc5XHU2QjIxXHU3Njg0XHU3RUQzXHU2NzVGXHU3RDIyXHU1RjE1XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ID0gTWF0aC5taW4ocHJvY2Vzc2VkQ291bnQgKyBiYXRjaFNpemUsIHF1ZXVlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU5MDRcdTc0MDZcdTVGNTNcdTUyNERcdTYyNzlcdTZCMjFcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHByb2Nlc3NlZENvdW50OyBpIDwgZW5kSW5kZXg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB0YWJsZSwgdGFibGVJZCwgdGFibGVEYXRhIH0gPSBxdWV1ZVtpXTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTU5MDRcdTc0MDZcdTk2MUZcdTUyMTdcdTRFMkRcdTc2ODRcdTg4NjhcdTY4M0MgJHtpKzF9LyR7cXVldWUubGVuZ3RofSAtIElEPSR7dGFibGVJZH1gKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgcmVuZGVyVGFibGVXaXRoU3R5bGVzKHRhYmxlIGFzIEhUTUxFbGVtZW50LCB0YWJsZUlkLCB0YWJsZURhdGEsIHBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBcdTU5MDRcdTc0MDZcdTg4NjhcdTY4M0MgJHt0YWJsZUlkfSBcdTY1RjZcdTUxRkFcdTk1MTk6YCwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTU5MDRcdTc0MDZcdThCQTFcdTY1NzBcclxuICAgICAgICAgICAgcHJvY2Vzc2VkQ291bnQgPSBlbmRJbmRleDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1OEZEOFx1NjcwOVx1NjcyQVx1NTkwNFx1NzQwNlx1NzY4NFx1ODg2OFx1NjgzQ1x1RkYwQ1x1NUI4OVx1NjM5Mlx1NEUwQlx1NEUwMFx1NjI3OVxyXG4gICAgICAgICAgICBpZiAocHJvY2Vzc2VkQ291bnQgPCBxdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NEY3Rlx1NzUyOHJlcXVlc3RBbmltYXRpb25GcmFtZVx1Nzg2RVx1NEZERFVJXHU1NENEXHU1RTk0XHU2MDI3XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NCYXRjaCgpLnRoZW4ocmVzb2x2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJcdTU5MDRcdTc0MDZcdTg4NjhcdTY4M0NcdTYyNzlcdTZCMjFcdTY1RjZcdTUxRkFcdTk1MTk6XCIsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBcdTVGMDBcdTU5Q0JcdTU5MDRcdTc0MDZcdTdCMkNcdTRFMDBcdTYyNzlcclxuICAgIGF3YWl0IHByb2Nlc3NCYXRjaCgpO1xyXG4gICAgY29uc29sZS5sb2coYFx1NUI4Q1x1NjIxMFx1NEU4NiAke3Byb2Nlc3NlZENvdW50fSBcdTRFMkFcdTg4NjhcdTY4M0NcdTc2ODRcdTU5MDRcdTc0MDZcdUZGMENcdTYyMTBcdTUyOUZcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEY6ICR7c3VjY2Vzc0NvdW50fWApO1xyXG59XHJcblxyXG4vKipcclxuICogXHU0RTNBXHU1MzU1XHU0RTJBXHU4ODY4XHU2ODNDXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGXHJcbiAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcclxuICogQHBhcmFtIHRhYmxlSWQgXHU4ODY4XHU2ODNDSURcclxuICogQHBhcmFtIHRhYmxlRGF0YSBcdTg4NjhcdTY4M0NcdTY4MzdcdTVGMEZcdTY1NzBcdTYzNkVcclxuICogQHBhcmFtIHBsdWdpbiBcdTYzRDJcdTRFRjZcdTVCOUVcdTRGOEJcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHJlbmRlclRhYmxlV2l0aFN0eWxlcyhcclxuICAgIHRhYmxlOiBIVE1MRWxlbWVudCwgXHJcbiAgICB0YWJsZUlkOiBzdHJpbmcsIFxyXG4gICAgdGFibGVEYXRhOiBhbnksIFxyXG4gICAgcGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0XHJcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgXHU1RjAwXHU1OUNCXHU0RTNBXHU4ODY4XHU2ODNDICR7dGFibGVJZH0gXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGYCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU2NjJGXHU1NDI2XHU1REYyXHU3RUNGXHU1RTk0XHU3NTI4XHU0RTg2XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgaWYgKHRhYmxlLmdldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1zdHlsZXMtYXBwbGllZCcpID09PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1NURGMlx1N0VDRlx1NUU5NFx1NzUyOFx1NEU4Nlx1NjgzN1x1NUYwRlx1RkYwQ1x1OERGM1x1OEZDN2ApO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU2ODM3XHU1RjBGXHU2NTcwXHU2MzZFXHU2NjJGXHU1NDI2XHU2NzA5XHU2NTQ4XHJcbiAgICAgICAgaWYgKCF0YWJsZURhdGEuc3R5bGluZykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU4ODY4XHU2ODNDICR7dGFibGVJZH0gXHU2Q0ExXHU2NzA5XHU2NzA5XHU2NTQ4XHU3Njg0XHU2ODM3XHU1RjBGXHU2NTcwXHU2MzZFYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU2RTMyXHU2N0QzXHU0RTBBXHU0RTBCXHU2NTg3XHJcbiAgICAgICAgY29uc3QgY3R4ID0gZ2V0Q29udGV4dEZvclRhYmxlKHRhYmxlLCBwbHVnaW4pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjI3RVx1NTIzMFx1NEUwQVx1NEUwQlx1NjU4N1x1RkYwQ1x1NEY3Rlx1NzUyOE1hcmtkb3duUmVuZGVyQ2hpbGRcclxuICAgICAgICBpZiAoY3R4KSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjdHguYWRkQ2hpbGQobmV3IFRhYmxlU3R5bGVSZW5kZXJlcih0YWJsZSwgdGFibGVJZCwgdGFibGVEYXRhLnN0eWxpbmcsIHBsdWdpbikpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1NURGMlx1NEY3Rlx1NzUyOFJlbmRlckNoaWxkXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGYCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBcdTRGN0ZcdTc1MjhSZW5kZXJDaGlsZFx1NUU5NFx1NzUyOFx1NjgzN1x1NUYwRlx1NjVGNlx1NTFGQVx1OTUxOTpgLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNSZW5kZXJDaGlsZFx1NTkzMVx1OEQyNVx1RkYwQ1x1NTZERVx1OTAwMFx1NTIzMFx1NzZGNFx1NjNBNVx1NUU5NFx1NzUyOFxyXG4gICAgICAgICAgICAgICAgYXBwbHlTdHlsZXNEaXJlY3RseSh0YWJsZSwgdGFibGVEYXRhLnN0eWxpbmcpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1NTZERVx1OTAwMFx1NTIzMFx1NzZGNFx1NjNBNVx1NUU5NFx1NzUyOFx1NjgzN1x1NUYwRmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5XHU0RTBBXHU0RTBCXHU2NTg3XHVGRjBDXHU3NkY0XHU2M0E1XHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGXHJcbiAgICAgICAgICAgIGFwcGx5U3R5bGVzRGlyZWN0bHkodGFibGUsIHRhYmxlRGF0YS5zdHlsaW5nKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1NURGMlx1NzZGNFx1NjNBNVx1NUU5NFx1NzUyOFx1NjgzN1x1NUYwRmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTY4MDdcdThCQjBcdTg4NjhcdTY4M0NcdTVERjJcdTVFOTRcdTc1MjhcdTY4MzdcdTVGMEZcclxuICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtc3R5bGVzLWFwcGxpZWQnLCAndHJ1ZScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1ODg2OFx1NjgzQ1x1NzI3OVx1NUI5QVx1NzY4NENTU1x1N0M3QlxyXG4gICAgICAgIGlmICghdGFibGUuY2xhc3NMaXN0LmNvbnRhaW5zKGB0YWJsZS0ke3RhYmxlSWR9YCkpIHtcclxuICAgICAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZChgdGFibGUtJHt0YWJsZUlkfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhgXHU4ODY4XHU2ODNDICR7dGFibGVJZH0gXHU2ODM3XHU1RjBGXHU1RTk0XHU3NTI4XHU1QjhDXHU2MjEwYCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFx1NEUzQVx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1NUU5NFx1NzUyOFx1NjgzN1x1NUYwRlx1NjVGNlx1NTFGQVx1OTUxOTpgLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogXHU4M0I3XHU1M0Q2XHU4ODY4XHU2ODNDXHU3Njg0XHU2RTMyXHU2N0QzXHU0RTBBXHU0RTBCXHU2NTg3XHJcbiAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcclxuICogQHBhcmFtIHBsdWdpbiBcdTYzRDJcdTRFRjZcdTVCOUVcdTRGOEJcclxuICogQHJldHVybnMgXHU2RTMyXHU2N0QzXHU0RTBBXHU0RTBCXHU2NTg3XHU2MjE2bnVsbFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Q29udGV4dEZvclRhYmxlKHRhYmxlOiBIVE1MRWxlbWVudCwgcGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0KTogYW55IHtcclxuICAgIC8vIFx1ODNCN1x1NTNENlx1NkQzQlx1NTJBOFx1ODlDNlx1NTZGRVxyXG4gICAgY29uc3QgYWN0aXZlVmlldyA9IHBsdWdpbi5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuICAgIGlmICghYWN0aXZlVmlldyB8fCBhY3RpdmVWaWV3LmdldE1vZGUoKSAhPT0gJ3ByZXZpZXcnKSByZXR1cm4gbnVsbDtcclxuICAgIFxyXG4gICAgLy8gXHU1QzFEXHU4QkQ1XHU4M0I3XHU1M0Q2XHU2RTMyXHU2N0QzXHU0RTBBXHU0RTBCXHU2NTg3XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIFx1NjVCOVx1NkNENTE6IFx1OTAxQVx1OEZDN3NlY3Rpb24taWRcdTVDNUVcdTYwMjdcclxuICAgICAgICBjb25zdCBzZWN0aW9uRWwgPSB0YWJsZS5jbG9zZXN0KCdbZGF0YS1zZWN0aW9uLWlkXScpO1xyXG4gICAgICAgIGlmIChzZWN0aW9uRWwpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbklkID0gc2VjdGlvbkVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zZWN0aW9uLWlkJyk7XHJcbiAgICAgICAgICAgIGlmIChzZWN0aW9uSWQgJiYgYWN0aXZlVmlldy5wcmV2aWV3TW9kZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSAtIE9ic2lkaWFuIEFQSVx1NTNFRlx1ODBGRFx1NkNBMVx1NjcwOVx1NUI4Q1x1NTE2OFx1N0M3Qlx1NTc4Qlx1NTMxNlxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSBhY3RpdmVWaWV3LnByZXZpZXdNb2RlLnJlbmRlcmVyPy5zZWN0aW9ucztcclxuICAgICAgICAgICAgICAgIGlmIChzZWN0aW9ucyAmJiBzZWN0aW9uc1tzZWN0aW9uSWRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb25zW3NlY3Rpb25JZF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2NUI5XHU2Q0Q1MjogXHU5MDFBXHU4RkM3Z2V0U2VjdGlvbkluZm8gQVBJXHJcbiAgICAgICAgaWYgKGFjdGl2ZVZpZXcucHJldmlld01vZGUpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSAtIE9ic2lkaWFuIEFQSVx1NTNFRlx1ODBGRFx1NkNBMVx1NjcwOVx1NUI4Q1x1NTE2OFx1N0M3Qlx1NTc4Qlx1NTMxNlxyXG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uSW5mbyA9IGFjdGl2ZVZpZXcucHJldmlld01vZGUucmVuZGVyZXI/LmdldFNlY3Rpb25JbmZvPy4odGFibGUpO1xyXG4gICAgICAgICAgICBpZiAoc2VjdGlvbkluZm8gJiYgc2VjdGlvbkluZm8uc2VjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb25JbmZvLnNlY3Rpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiXHU4M0I3XHU1M0Q2XHU4ODY4XHU2ODNDXHU2RTMyXHU2N0QzXHU0RTBBXHU0RTBCXHU2NTg3XHU1OTMxXHU4RDI1OlwiLCBlKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFx1NzZGNFx1NjNBNVx1NUU5NFx1NzUyOFx1NjgzN1x1NUYwRlx1RkYwOFx1NUY1M1x1NjVFMFx1NkNENVx1ODNCN1x1NTNENlx1NkUzMlx1NjdEM1x1NEUwQVx1NEUwQlx1NjU4N1x1NjVGNlx1NzY4NFx1NTkwN1x1NzUyOFx1NjVCOVx1NkNENVx1RkYwOVxyXG4gKiBAcGFyYW0gdGFibGUgXHU4ODY4XHU2ODNDXHU1MTQzXHU3RDIwXHJcbiAqIEBwYXJhbSBzdHlsaW5nIFx1NjgzN1x1NUYwRlx1NjU3MFx1NjM2RVxyXG4gKi9cclxuZnVuY3Rpb24gYXBwbHlTdHlsZXNEaXJlY3RseSh0YWJsZTogSFRNTEVsZW1lbnQsIHN0eWxpbmc6IGFueSk6IHZvaWQge1xyXG4gICAgaWYgKCFzdHlsaW5nKSByZXR1cm47XHJcbiAgICBcclxuICAgIC8vIFx1NUU5NFx1NzUyOFx1ODg0Q1x1OUFEOFxyXG4gICAgaWYgKHN0eWxpbmcucm93SGVpZ2h0cyAmJiBBcnJheS5pc0FycmF5KHN0eWxpbmcucm93SGVpZ2h0cykpIHtcclxuICAgICAgICBjb25zdCByb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICBzdHlsaW5nLnJvd0hlaWdodHMuZm9yRWFjaCgoaGVpZ2h0OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGluZGV4IDwgcm93cy5sZW5ndGggJiYgaGVpZ2h0ICYmIGhlaWdodCAhPT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgICAgICAocm93c1tpbmRleF0gYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTc2RjRcdTYzQTVcdTVFOTRcdTc1MjhcdTg4NENcdTlBRDggLSBcdTdEMjJcdTVGMTU9JHtpbmRleH0sIFx1OUFEOFx1NUVBNj0ke2hlaWdodH1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBcdTVFOTRcdTc1MjhcdTUyMTdcdTVCQkRcclxuICAgIGlmIChzdHlsaW5nLmNvbFdpZHRocyAmJiBBcnJheS5pc0FycmF5KHN0eWxpbmcuY29sV2lkdGhzKSkge1xyXG4gICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NjIxNlx1ODNCN1x1NTNENmNvbGdyb3VwXHU1MTQzXHU3RDIwXHJcbiAgICAgICAgbGV0IGNvbGdyb3VwID0gdGFibGUucXVlcnlTZWxlY3RvcignY29sZ3JvdXAnKTtcclxuICAgICAgICBpZiAoIWNvbGdyb3VwKSB7XHJcbiAgICAgICAgICAgIGNvbGdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY29sZ3JvdXAnKTtcclxuICAgICAgICAgICAgdGFibGUuaW5zZXJ0QmVmb3JlKGNvbGdyb3VwLCB0YWJsZS5maXJzdENoaWxkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBcdTZFMDVcdTk2NjRcdTczQjBcdTY3MDlcdTc2ODRjb2xcdTUxNDNcdTdEMjBcclxuICAgICAgICAgICAgY29sZ3JvdXAuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NTIxQlx1NUVGQWNvbFx1NTE0M1x1N0QyMFx1NUU3Nlx1OEJCRVx1N0Y2RVx1NUJCRFx1NUVBNlxyXG4gICAgICAgIHN0eWxpbmcuY29sV2lkdGhzLmZvckVhY2goKHdpZHRoOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY29sJyk7XHJcbiAgICAgICAgICAgIGlmICh3aWR0aCAmJiB3aWR0aCAhPT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgICAgICBjb2wuc3R5bGUud2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTc2RjRcdTYzQTVcdTVFOTRcdTc1MjhcdTUyMTdcdTVCQkQgLSBcdTdEMjJcdTVGMTU9JHtpbmRleH0sIFx1NUJCRFx1NUVBNj0ke3dpZHRofWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFx1NEZFRVx1NTkwRDogXHU3ODZFXHU0RkREY29sZ3JvdXBcdTRFMERcdTRFM0FudWxsXHJcbiAgICAgICAgICAgIGlmIChjb2xncm91cCkge1xyXG4gICAgICAgICAgICAgICAgY29sZ3JvdXAuYXBwZW5kQ2hpbGQoY29sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBcdTVFOTRcdTc1MjhcdTUyMTdcdTVCRjlcdTlGNTBcclxuICAgIGlmIChzdHlsaW5nLmFsaWdubWVudCAmJiBBcnJheS5pc0FycmF5KHN0eWxpbmcuYWxpZ25tZW50KSkge1xyXG4gICAgICAgIGNvbnN0IHJvd3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwsIGNvbEluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGluZy5hbGlnbm1lbnRbY29sSW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKGNlbGwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnRleHRBbGlnbiA9IHN0eWxpbmcuYWxpZ25tZW50W2NvbEluZGV4XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFx1NUU5NFx1NzUyOFx1NTM1NVx1NTE0M1x1NjgzQ1x1NjgzN1x1NUYwRlxyXG4gICAgaWYgKHN0eWxpbmcuY2VsbFN0eWxlcyAmJiBBcnJheS5pc0FycmF5KHN0eWxpbmcuY2VsbFN0eWxlcykpIHtcclxuICAgICAgICBzdHlsaW5nLmNlbGxTdHlsZXMuZm9yRWFjaCgoc3R5bGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlLnJvdyAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHN0eWxlLmNvbCAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2N0U1XHU2MjdFXHU1MzU1XHU1MTQzXHU2ODNDXHJcbiAgICAgICAgICAgIGNvbnN0IHJvd3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xyXG4gICAgICAgICAgICBpZiAoIXJvd3MgfHwgcm93cy5sZW5ndGggPD0gc3R5bGUucm93KSByZXR1cm47XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IHJvd3Nbc3R5bGUucm93XS5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKTtcclxuICAgICAgICAgICAgaWYgKCFjZWxscyB8fCBjZWxscy5sZW5ndGggPD0gc3R5bGUuY29sKSByZXR1cm47XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gY2VsbHNbc3R5bGUuY29sXSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICBpZiAoc3R5bGUudGV4dEFsaWduKSBjZWxsLnN0eWxlLnRleHRBbGlnbiA9IHN0eWxlLnRleHRBbGlnbjtcclxuICAgICAgICAgICAgaWYgKHN0eWxlLnZlcnRpY2FsQWxpZ24pIGNlbGwuc3R5bGUudmVydGljYWxBbGlnbiA9IHN0eWxlLnZlcnRpY2FsQWxpZ247XHJcbiAgICAgICAgICAgIGlmIChzdHlsZS5iYWNrZ3JvdW5kQ29sb3IpIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gc3R5bGUuYmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICBpZiAoc3R5bGUuY29sb3IpIGNlbGwuc3R5bGUuY29sb3IgPSBzdHlsZS5jb2xvcjtcclxuICAgICAgICAgICAgaWYgKHN0eWxlLmZvbnRXZWlnaHQpIGNlbGwuc3R5bGUuZm9udFdlaWdodCA9IHN0eWxlLmZvbnRXZWlnaHQ7XHJcbiAgICAgICAgICAgIGlmIChzdHlsZS5mb250U3R5bGUpIGNlbGwuc3R5bGUuZm9udFN0eWxlID0gc3R5bGUuZm9udFN0eWxlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBcdTZERkJcdTUyQTBcdTgxRUFcdTVCOUFcdTRFNDlcdTdDN0JcdTU0MERcclxuICAgIGNvbnN0IHRhYmxlSWQgPSB0YWJsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtaWQnKTtcclxuICAgIGlmICh0YWJsZUlkKSB7XHJcbiAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZChgdGFibGUtJHt0YWJsZUlkfWApO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IE9ic2lkaWFuU3ByZWFkc2hlZXQgfSBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgeyBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IHJlbmRlclRhYmxlc1dpdGhTdG9yZWRTdHlsZXMgfSBmcm9tICcuL3RhYmxlU3R5bGVSZW5kZXJlcic7XHJcblxyXG4vKipcclxuICogXHU2N0U1XHU2MjdFXHU4ODY4XHU2ODNDXHU0RTJEXHU3Njg0XHU1NDA4XHU1RTc2XHU2ODA3XHU4QkIwXHJcbiAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NIVE1MXHU1MTQzXHU3RDIwXHJcbiAqIEByZXR1cm5zIFx1NjYyRlx1NTQyNlx1NjI3RVx1NTIzMFx1NTQwOFx1NUU3Nlx1NjgwN1x1OEJCMFxyXG4gKi9cclxuZnVuY3Rpb24gZmluZE1lcmdlTWFya2Vycyh0YWJsZTogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGNlbGxzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndGQsIHRoJyk7XHJcbiAgICBmb3IgKGNvbnN0IGNlbGwgb2YgQXJyYXkuZnJvbShjZWxscykpIHtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gY2VsbC50ZXh0Q29udGVudD8udHJpbSgpIHx8ICcnO1xyXG4gICAgICAgIGlmIChjb250ZW50ID09PSAnXicgfHwgY29udGVudCA9PT0gJzwnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFx1OEJCRVx1N0Y2RVx1OTg4NFx1ODlDOFx1NkEyMVx1NUYwRlx1NEUwQlx1NzY4NFx1ODg2OFx1NjgzQ1x1OTAwOVx1NjJFOVx1NTQ4Q1x1NTM1NVx1NTE0M1x1NjgzQ1x1NTQwOFx1NUU3Nlx1NkUzMlx1NjdEM1xyXG4gKiBcdThGRDlcdTRFMkFcdTY1ODdcdTRFRjZcdTUzMDVcdTU0MkJcdTRFODZcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdTg4NjhcdTY4M0NcdTU5MDRcdTc0MDZcdTc2ODRcdTY4MzhcdTVGQzNcdTkwM0JcdThGOTFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFByZXZpZXdNb2RlVGFibGVTZWxlY3Rpb24ocGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0KTogdm9pZCB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIFx1NkUwNVx1OTY2NFx1NUY1M1x1NTI0RFx1N0YxNlx1OEY5MVx1ODg2OFx1NjgzQ1x1NzJCNlx1NjAwMVxyXG4gICAgICAgIHBsdWdpbi5jdXJyZW50RWRpdGluZ1RhYmxlID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTYyNDBcdTY3MDlcdTg4NjhcdTY4M0NcclxuICAgICAgICBjb25zdCB0YWJsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZScpO1xyXG4gICAgICAgIGlmICghdGFibGVzLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdTYyN0VcdTUyMzAgJHt0YWJsZXMubGVuZ3RofSBcdTRFMkFcdTg4NjhcdTY4M0NgKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTRFM0FcdTZCQ0ZcdTRFMkFcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBcdTcwQjlcdTUxRkJcdTRFOEJcdTRFRjZcdTU0OENcdTVFOTRcdTc1MjhcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcclxuICAgICAgICB0YWJsZXMuZm9yRWFjaCgodGFibGU6IEhUTUxFbGVtZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFx1NzlGQlx1OTY2NFx1NjVFN1x1NzY4NFx1NEU4Qlx1NEVGNlx1NzZEMVx1NTQyQ1x1NTY2OFx1RkYwOFx1NTk4Mlx1Njc5Q1x1NjcwOVx1RkYwOVxyXG4gICAgICAgICAgICB0YWJsZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHBsdWdpbi5oYW5kbGVUYWJsZUNsaWNrKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjVCMFx1NzY4NFx1NEU4Qlx1NEVGNlx1NzZEMVx1NTQyQ1x1NTY2OFxyXG4gICAgICAgICAgICB0YWJsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHBsdWdpbi5oYW5kbGVUYWJsZUNsaWNrKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEJCRVx1N0Y2RVx1ODg2OFx1NjgzQ1x1N0QyMlx1NUYxNVxyXG4gICAgICAgICAgICBwbHVnaW4udGFibGVEZXRlY3Rvci5zZXR1cFRhYmxlSW5kaWNlcyh0YWJsZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTRGRERcdTVCNThcdTg4NjhcdTY4M0NcdTU3MjhET01cdTRFMkRcdTc2ODRcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcclxuICAgICAgICAgICAgdGFibGUuc2V0QXR0cmlidXRlKCdkYXRhLXRhYmxlLWluZGV4JywgaW5kZXgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTYzRDBcdTUzRDZcdTg4NjhcdTY4M0NcdTcyNzlcdTVGODFcdTVFNzZcdTVCNThcdTUwQThcdTU3MjhcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcdTRFMEFcclxuICAgICAgICAgICAgY29uc3QgdGFibGVGZWF0dXJlID0gcGx1Z2luLnRhYmxlSWRNYW5hZ2VyLmV4dHJhY3RUYWJsZUZlYXR1cmUodGFibGUpO1xyXG4gICAgICAgICAgICBpZiAodGFibGVGZWF0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTVDMDZcdTcyNzlcdTVGODFcdTRGRTFcdTYwNkZcdTVCNThcdTUwQThcdTRFM0FKU09OXHU1QjU3XHU3QjI2XHU0RTMyXHJcbiAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtZmVhdHVyZScsIEpTT04uc3RyaW5naWZ5KHRhYmxlRmVhdHVyZSkpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTVCNThcdTUwQThcdTg4NENcdTUyMTdcdTY1NzBcdTRGNUNcdTRFM0FcdTUzNTVcdTcyRUNcdTc2ODRcdTVDNUVcdTYwMjdcdUZGMENcdTRGQkZcdTRFOEVcdTVGRUJcdTkwMUZcdThCQkZcdTk1RUVcclxuICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS1yb3dzJywgdGFibGVGZWF0dXJlLnJvd3MudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29scycsIHRhYmxlRmVhdHVyZS5jb2xzLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTVCNThcdTUwQThcdTg4NjhcdTY4M0NcdTRGNERcdTdGNkVcdTRGRTFcdTYwNkZcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZUZlYXR1cmUucG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtcG9zaXRpb24nLCBKU09OLnN0cmluZ2lmeSh0YWJsZUZlYXR1cmUucG9zaXRpb24pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU0RUNFTWFya2Rvd25cdTY1ODdcdTRFRjZcdTRFMkRcdThCRkJcdTUzRDZcdTg4NjhcdTY4M0NJRFx1NUU3Nlx1OEJCRVx1N0Y2RVx1NTIzMFx1ODg2OFx1NjgzQ1x1NTE0M1x1N0QyMFx1NEUwQVxyXG4gICAgICAgICAgICBwbHVnaW4ucmVhZFRhYmxlSWRGcm9tTWFya2Rvd24odGFibGUpLnRoZW4odGFibGVJZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFibGVJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcsIHRhYmxlSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTg4NjhcdTY4M0NJRFx1NURGMlx1OEJCRVx1N0Y2RTogJHt0YWJsZUlkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NUMwNklEXHU1NDhDXHU3Mjc5XHU1RjgxXHU0RkUxXHU2MDZGXHU1MTczXHU4MDU0XHU4RDc3XHU2NzY1XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlRmVhdHVyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTg4NjhcdTY4M0NcdTcyNzlcdTVGODFcdUZGMENcdTZERkJcdTUyQTBJRFx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUZlYXR1cmUuaWQgPSB0YWJsZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFibGUtZmVhdHVyZScsIEpTT04uc3RyaW5naWZ5KHRhYmxlRmVhdHVyZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU4QkZCXHU1M0Q2XHU4ODY4XHU2ODNDSURcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NTQwOFx1NUU3Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NjgwN1x1OEJCMFx1RkYwOFx1NTk4Mlx1Njc5Q1x1NTQyRlx1NzUyOFx1NEU4Nlx1NTM1NVx1NTE0M1x1NjgzQ1x1NTQwOFx1NUU3Nlx1NTI5Rlx1ODBGRFx1RkYwOVxyXG4gICAgICAgICAgICBpZiAocGx1Z2luLnNldHRpbmdzLmVuYWJsZUNlbGxNZXJnaW5nICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU4ODY4XHU2ODNDXHU2NjJGXHU1NDI2XHU1REYyXHU3RUNGXHU1OTA0XHU3NDA2XHU4RkM3XHJcbiAgICAgICAgICAgICAgICBpZiAodGFibGUuZGF0YXNldC50YWJsZU1lcmdlUHJvY2Vzc2VkICE9PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTY3RTVcdTYyN0VcdTg4NjhcdTY4M0NcdTRFMkRcdTc2ODRcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNNZXJnZU1hcmtlcnMgPSBmaW5kTWVyZ2VNYXJrZXJzKHRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzTWVyZ2VNYXJrZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTg4NjhcdTY4M0NcdTUzMDVcdTU0MkJcdTU0MDhcdTVFNzZcdTY4MDdcdThCQjBcdUZGMENcdTVFOTRcdTc1MjhcdTU0MDhcdTVFNzZcdTUzNTVcdTUxNDNcdTY4M0NcdTZFMzJcdTY3RDNgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLnRhYmxlRGV0ZWN0b3IuYXBwbHlNZXJnZUNlbGxzTWFya2Vycyh0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1RTk0XHU3NTI4XHU1QjU4XHU1MEE4XHU3Njg0XHU4ODY4XHU2ODNDXHU2ODM3XHU1RjBGXHJcbiAgICAgICAgcmVuZGVyVGFibGVzV2l0aFN0b3JlZFN0eWxlcyhwbHVnaW4pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTRFMEJcdThCQkVcdTdGNkVcdTRFODZcdTg4NjhcdTY4M0NcdTkwMDlcdTYyRTknKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignXHU4QkJFXHU3RjZFXHU5ODg0XHU4OUM4XHU2QTIxXHU1RjBGXHU4ODY4XHU2ODNDXHU5MDA5XHU2MkU5XHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgIH1cclxufSAiLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IE9ic2lkaWFuU3ByZWFkc2hlZXQgfSBmcm9tICcuL21haW4nO1xyXG5cclxuLyoqXHJcbiAqIFx1ODg2OFx1NjgzQ1x1NTkyN1x1NUMwRlx1OEMwM1x1NjU3NFx1NTY2OFx1N0M3QlxyXG4gKiBcdTU5MDRcdTc0MDZcdTg4NjhcdTY4M0NcdTg4NENcdTlBRDhcdTU0OENcdTUyMTdcdTVCQkRcdTc2ODRcdTYyRDZcdTYyRkRcdThDMDNcdTY1NzRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUYWJsZVJlc2l6ZXIge1xyXG4gICAgcHJpdmF0ZSBwbHVnaW46IE9ic2lkaWFuU3ByZWFkc2hlZXQ7XHJcbiAgICBwcml2YXRlIGFjdGl2ZVRhYmxlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSByZXNpemVIYW5kbGVzOiBIVE1MRWxlbWVudFtdID0gW107XHJcbiAgICBwcml2YXRlIGlzUmVzaXppbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgY3VycmVudEhhbmRsZTogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuICAgIHByaXZhdGUgc3RhcnRYOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBzdGFydFk6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIHN0YXJ0V2lkdGg6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIHN0YXJ0SGVpZ2h0OiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBjb2x1bW5JbmRleDogbnVtYmVyID0gLTE7XHJcbiAgICBwcml2YXRlIHRhYmxlV2lkdGg6IG51bWJlciA9IDA7XHJcbiAgICBcclxuICAgIC8vIFx1OEY4NVx1NTJBOVx1NjVCOVx1NkNENVx1RkYwQ1x1ODNCN1x1NTNENmFwcFx1NUJGOVx1OEM2MVxyXG4gICAgcHJpdmF0ZSBnZXRBcHAoKTogQXBwIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucGx1Z2luIGFzIHVua25vd24gYXMgUGx1Z2luKS5hcHA7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHRhcmdldEluZGV4OiBudW1iZXIgPSAtMTtcclxuICAgIHByaXZhdGUgcmVzaXplVHlwZTogJ2NvbHVtbicgfCAncm93JyA9ICdjb2x1bW4nO1xyXG4gICAgcHJpdmF0ZSByZXNpemVHdWlkZTogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1Njc4NFx1OTAyMFx1NTFGRFx1NjU3MFxyXG4gICAgICogQHBhcmFtIHBsdWdpbiBcdTYzRDJcdTRFRjZcdTVCOUVcdTRGOEJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0KSB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1RhYmxlUmVzaXplcjogXHU1MjFEXHU1OUNCXHU1MzE2XHU4ODY4XHU2ODNDXHU1OTI3XHU1QzBGXHU4QzAzXHU2NTc0XHU1NjY4Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBcdTYyRDZcdTYyRkRcdThDMDNcdTY1NzRcdTU5MjdcdTVDMEZcdTc2ODRcdTUyOUZcdTgwRkRcclxuICAgICAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcclxuICAgICAqL1xyXG4gICAgc2V0dXBUYWJsZVJlc2l6ZSh0YWJsZTogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVGFibGVSZXNpemVyOiBcdTRFM0FcdTg4NjhcdTY4M0NcdThCQkVcdTdGNkVcdTU5MjdcdTVDMEZcdThDMDNcdTY1NzRcdTUyOUZcdTgwRkQnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NzlGQlx1OTY2NFx1NjVFN1x1NzY4NFx1NjJENlx1NjJGRFx1NTNFNVx1NjdDNFxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVJlc2l6ZUhhbmRsZXMoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEJCRVx1N0Y2RVx1NUY1M1x1NTI0RFx1NkQzQlx1NTJBOFx1ODg2OFx1NjgzQ1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVRhYmxlID0gdGFibGU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBcdTYyRDZcdTYyRkRcdTUzRTVcdTY3QzRcclxuICAgICAgICAgICAgdGhpcy5hZGRSZXNpemVIYW5kbGVzKHRhYmxlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUYWJsZVJlc2l6ZXI6IFx1ODg2OFx1NjgzQ1x1NTkyN1x1NUMwRlx1OEMwM1x1NjU3NFx1NTI5Rlx1ODBGRFx1OEJCRVx1N0Y2RVx1NUI4Q1x1NjIxMCcpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RhYmxlUmVzaXplcjogXHU4QkJFXHU3RjZFXHU4ODY4XHU2ODNDXHU1OTI3XHU1QzBGXHU4QzAzXHU2NTc0XHU1MjlGXHU4MEZEXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTRFM0FcdTg4NjhcdTY4M0NcdTZERkJcdTUyQTBcdTYyRDZcdTYyRkRcdThDMDNcdTY1NzRcdTU5MjdcdTVDMEZcdTc2ODRcdTUzRTVcdTY3QzRcclxuICAgICAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhZGRSZXNpemVIYW5kbGVzKHRhYmxlOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdUYWJsZVJlc2l6ZXI6IFx1NkRGQlx1NTJBMFx1NjJENlx1NjJGRFx1NTNFNVx1NjdDNCcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1Nzg2RVx1NEZERFx1ODg2OFx1NjgzQ1x1NjcwOVx1NzZGOFx1NUJGOVx1NUI5QVx1NEY0RFx1RkYwQ1x1NEVFNVx1NEZCRlx1NkI2M1x1Nzg2RVx1NUI5QVx1NEY0RFx1NTNFNVx1NjdDNFxyXG4gICAgICAgIHRhYmxlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTc2ODRcdTYyNDBcdTY3MDlcdTg4NENcdTU0OENcdTUyMTdcclxuICAgICAgICBjb25zdCByb3dzID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICBpZiAocm93cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUYWJsZVJlc2l6ZXI6IFx1ODg2OFx1NjgzQ1x1NkNBMVx1NjcwOVx1ODg0QycpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGZpcnN0Um93Q2VsbHMgPSByb3dzWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLCB0ZCcpO1xyXG4gICAgICAgIGlmIChmaXJzdFJvd0NlbGxzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RhYmxlUmVzaXplcjogXHU4ODY4XHU2ODNDXHU3QjJDXHU0RTAwXHU4ODRDXHU2Q0ExXHU2NzA5XHU1MzU1XHU1MTQzXHU2ODNDJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coYFRhYmxlUmVzaXplcjogXHU4ODY4XHU2ODNDXHU2NzA5ICR7cm93cy5sZW5ndGh9IFx1ODg0QywgJHtmaXJzdFJvd0NlbGxzLmxlbmd0aH0gXHU1MjE3YCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1MjE3XHU2MkQ2XHU2MkZEXHU1M0U1XHU2N0M0XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdFJvd0NlbGxzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gZmlyc3RSb3dDZWxsc1tpXSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgbmV4dENlbGwgPSBmaXJzdFJvd0NlbGxzW2kgKyAxXSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgY2VsbFJlY3QgPSBjZWxsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZVJlY3QgPSB0YWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NTNFNVx1NjdDNFx1NEY0RFx1N0Y2RVxyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVMZWZ0ID0gY2VsbC5vZmZzZXRMZWZ0ICsgY2VsbC5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NTIxN1x1NjJENlx1NjJGRFx1NTNFNVx1NjdDNFxyXG4gICAgICAgICAgICBjb25zdCBjb2xIYW5kbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgY29sSGFuZGxlLmNsYXNzTmFtZSA9ICd0YWJsZS1yZXNpemUtaGFuZGxlLWNvbCc7XHJcbiAgICAgICAgICAgIGNvbEhhbmRsZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIGNvbEhhbmRsZS5zdHlsZS50b3AgPSAnMCc7XHJcbiAgICAgICAgICAgIGNvbEhhbmRsZS5zdHlsZS5sZWZ0ID0gYCR7aGFuZGxlTGVmdH1weGA7XHJcbiAgICAgICAgICAgIGNvbEhhbmRsZS5zdHlsZS53aWR0aCA9ICc1cHgnO1xyXG4gICAgICAgICAgICBjb2xIYW5kbGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICBjb2xIYW5kbGUuc3R5bGUuY3Vyc29yID0gJ2NvbC1yZXNpemUnO1xyXG4gICAgICAgICAgICBjb2xIYW5kbGUuc3R5bGUuekluZGV4ID0gJzEwMCc7XHJcbiAgICAgICAgICAgIGNvbEhhbmRsZS5kYXRhc2V0LmluZGV4ID0gaS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBjb2xIYW5kbGUuZGF0YXNldC50eXBlID0gJ2NvbHVtbic7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdThDMDNcdThCRDVcdTRGRTFcdTYwNkZcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFRhYmxlUmVzaXplcjogXHU2REZCXHU1MkEwXHU1MjE3XHU2MkQ2XHU2MkZEXHU1M0U1XHU2N0M0IC0gXHU3RDIyXHU1RjE1PSR7aX0sIFx1NEY0RFx1N0Y2RT0ke2hhbmRsZUxlZnR9cHhgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NEU4Qlx1NEVGNlx1NzZEMVx1NTQyQ1x1NTY2OFxyXG4gICAgICAgICAgICB0aGlzLmFkZEhhbmRsZUV2ZW50TGlzdGVuZXJzKGNvbEhhbmRsZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUyMzBcdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQoY29sSGFuZGxlKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVIYW5kbGVzLnB1c2goY29sSGFuZGxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU4ODRDXHU2MkQ2XHU2MkZEXHU1M0U1XHU2N0M0XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSByb3dzW2ldIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0Um93ID0gcm93c1tpICsgMV0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd1JlY3QgPSByb3cuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlUmVjdCA9IHRhYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU1M0U1XHU2N0M0XHU0RjREXHU3RjZFXHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZVRvcCA9IHJvdy5vZmZzZXRUb3AgKyByb3cub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU4ODRDXHU2MkQ2XHU2MkZEXHU1M0U1XHU2N0M0XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd0hhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICByb3dIYW5kbGUuY2xhc3NOYW1lID0gJ3RhYmxlLXJlc2l6ZS1oYW5kbGUtcm93JztcclxuICAgICAgICAgICAgcm93SGFuZGxlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICAgICAgcm93SGFuZGxlLnN0eWxlLmxlZnQgPSAnMCc7XHJcbiAgICAgICAgICAgIHJvd0hhbmRsZS5zdHlsZS50b3AgPSBgJHtoYW5kbGVUb3B9cHhgO1xyXG4gICAgICAgICAgICByb3dIYW5kbGUuc3R5bGUuaGVpZ2h0ID0gJzVweCc7XHJcbiAgICAgICAgICAgIHJvd0hhbmRsZS5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICAgICAgcm93SGFuZGxlLnN0eWxlLmN1cnNvciA9ICdyb3ctcmVzaXplJztcclxuICAgICAgICAgICAgcm93SGFuZGxlLnN0eWxlLnpJbmRleCA9ICcxMDAnO1xyXG4gICAgICAgICAgICByb3dIYW5kbGUuZGF0YXNldC5pbmRleCA9IGkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcm93SGFuZGxlLmRhdGFzZXQudHlwZSA9ICdyb3cnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU4QzAzXHU4QkQ1XHU0RkUxXHU2MDZGXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUYWJsZVJlc2l6ZXI6IFx1NkRGQlx1NTJBMFx1ODg0Q1x1NjJENlx1NjJGRFx1NTNFNVx1NjdDNCAtIFx1N0QyMlx1NUYxNT0ke2l9LCBcdTRGNERcdTdGNkU9JHtoYW5kbGVUb3B9cHhgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NEU4Qlx1NEVGNlx1NzZEMVx1NTQyQ1x1NTY2OFxyXG4gICAgICAgICAgICB0aGlzLmFkZEhhbmRsZUV2ZW50TGlzdGVuZXJzKHJvd0hhbmRsZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUyMzBcdTg4NjhcdTY4M0NcclxuICAgICAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQocm93SGFuZGxlKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVIYW5kbGVzLnB1c2gocm93SGFuZGxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTRFM0FcdTYyRDZcdTYyRkRcdTUzRTVcdTY3QzRcdTZERkJcdTUyQTBcdTRFOEJcdTRFRjZcdTc2RDFcdTU0MkNcdTU2NjhcclxuICAgICAqIEBwYXJhbSBoYW5kbGUgXHU2MkQ2XHU2MkZEXHU1M0U1XHU2N0M0XHU1MTQzXHU3RDIwXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWRkSGFuZGxlRXZlbnRMaXN0ZW5lcnMoaGFuZGxlOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmhhbmRsZU1vdXNlRG93bi5iaW5kKHRoaXMpKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTYwQUNcdTUwNUNcdTY1NDhcdTY3OUNcclxuICAgICAgICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcclxuICAgICAgICAgICAgaGFuZGxlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpJztcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUmVzaXppbmcgfHwgdGhpcy5jdXJyZW50SGFuZGxlICE9PSBoYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTU5MDRcdTc0MDZcdTlGMjBcdTY4MDdcdTYzMDlcdTRFMEJcdTRFOEJcdTRFRjZcclxuICAgICAqIEBwYXJhbSBldmVudCBcdTlGMjBcdTY4MDdcdTRFOEJcdTRFRjZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVNb3VzZURvd24oZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlVGFibGUpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTk2M0JcdTZCNjJcdTRFOEJcdTRFRjZcdTUxOTJcdTZDRTFcdTU0OENcdTlFRDhcdThCQTRcdTg4NENcdTRFM0FcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NjJENlx1NjJGRFx1NTNFNVx1NjdDNFxyXG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRIYW5kbGUgPSBoYW5kbGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2MkQ2XHU2MkZEXHU3QzdCXHU1NzhCXHU1NDhDXHU3NkVFXHU2ODA3XHU3RDIyXHU1RjE1XHJcbiAgICAgICAgdGhpcy5yZXNpemVUeXBlID0gaGFuZGxlLmRhdGFzZXQudHlwZSBhcyAnY29sdW1uJyB8ICdyb3cnO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0SW5kZXggPSBwYXJzZUludChoYW5kbGUuZGF0YXNldC5pbmRleCB8fCAnLTEnKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhgVGFibGVSZXNpemVyOiBcdTVGMDBcdTU5Q0JcdTYyRDZcdTYyRkQgLSBcdTdDN0JcdTU3OEI9JHt0aGlzLnJlc2l6ZVR5cGV9LCBcdTdEMjJcdTVGMTU9JHt0aGlzLnRhcmdldEluZGV4fWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OEJCMFx1NUY1NVx1OEQ3N1x1NTlDQlx1NEY0RFx1N0Y2RVx1NTQ4Q1x1NUMzQVx1NUJGOFxyXG4gICAgICAgIHRoaXMuc3RhcnRYID0gZXZlbnQuY2xpZW50WDtcclxuICAgICAgICB0aGlzLnN0YXJ0WSA9IGV2ZW50LmNsaWVudFk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMucmVzaXplVHlwZSA9PT0gJ2NvbHVtbicpIHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB0aGlzLmFjdGl2ZVRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoYHRyOmZpcnN0LWNoaWxkID4gKjpudGgtY2hpbGQoJHt0aGlzLnRhcmdldEluZGV4ICsgMX0pYCk7XHJcbiAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY2VsbHNbMF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0V2lkdGggPSBjZWxsLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFRhYmxlUmVzaXplcjogXHU1MjE3XHU1MjFEXHU1OUNCXHU1QkJEXHU1RUE2PSR7dGhpcy5zdGFydFdpZHRofXB4YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByb3dzID0gdGhpcy5hY3RpdmVUYWJsZS5xdWVyeVNlbGVjdG9yQWxsKGB0cjpudGgtY2hpbGQoJHt0aGlzLnRhcmdldEluZGV4ICsgMX0pYCk7XHJcbiAgICAgICAgICAgIGlmIChyb3dzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHJvd3NbMF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0SGVpZ2h0ID0gcm93Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUYWJsZVJlc2l6ZXI6IFx1ODg0Q1x1NTIxRFx1NTlDQlx1OUFEOFx1NUVBNj0ke3RoaXMuc3RhcnRIZWlnaHR9cHhgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdThDMDNcdTY1NzRcdTU5MjdcdTVDMEZcdTc2ODRcdThGODVcdTUyQTlcdTdFQkZcclxuICAgICAgICB0aGlzLmNyZWF0ZVJlc2l6ZUd1aWRlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4QkJFXHU3RjZFXHU4QzAzXHU2NTc0XHU3MkI2XHU2MDAxXHJcbiAgICAgICAgdGhpcy5pc1Jlc2l6aW5nID0gdHJ1ZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTlGMjBcdTY4MDdcdTc5RkJcdTUyQThcdTU0OENcdTY3N0VcdTVGMDBcdTRFOEJcdTRFRjZcdTc2RDFcdTU0MkNcdTU2NjhcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1MjFCXHU1RUZBXHU4QzAzXHU2NTc0XHU1OTI3XHU1QzBGXHU3Njg0XHU4Rjg1XHU1MkE5XHU3RUJGXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlUmVzaXplR3VpZGUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZVRhYmxlIHx8ICF0aGlzLmN1cnJlbnRIYW5kbGUpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdThGODVcdTUyQTlcdTdFQkZcdTUxNDNcdTdEMjBcclxuICAgICAgICBjb25zdCBndWlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGd1aWRlLmNsYXNzTmFtZSA9IGB0YWJsZS1yZXNpemUtZ3VpZGUgdGFibGUtcmVzaXplLWd1aWRlLSR7dGhpcy5yZXNpemVUeXBlfWA7XHJcbiAgICAgICAgZ3VpZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgIGd1aWRlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpJztcclxuICAgICAgICBndWlkZS5zdHlsZS56SW5kZXggPSAnMTAwMCc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMucmVzaXplVHlwZSA9PT0gJ2NvbHVtbicpIHtcclxuICAgICAgICAgICAgZ3VpZGUuc3R5bGUud2lkdGggPSAnMnB4JztcclxuICAgICAgICAgICAgZ3VpZGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICBndWlkZS5zdHlsZS50b3AgPSAnMCc7XHJcbiAgICAgICAgICAgIGd1aWRlLnN0eWxlLmxlZnQgPSB0aGlzLmN1cnJlbnRIYW5kbGUuc3R5bGUubGVmdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBndWlkZS5zdHlsZS5oZWlnaHQgPSAnMnB4JztcclxuICAgICAgICAgICAgZ3VpZGUuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIGd1aWRlLnN0eWxlLmxlZnQgPSAnMCc7XHJcbiAgICAgICAgICAgIGd1aWRlLnN0eWxlLnRvcCA9IHRoaXMuY3VycmVudEhhbmRsZS5zdHlsZS50b3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NTIzMFx1ODg2OFx1NjgzQ1xyXG4gICAgICAgIHRoaXMuYWN0aXZlVGFibGUuYXBwZW5kQ2hpbGQoZ3VpZGUpO1xyXG4gICAgICAgIHRoaXMucmVzaXplR3VpZGUgPSBndWlkZTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZygnVGFibGVSZXNpemVyOiBcdTUyMUJcdTVFRkFcdThDMDNcdTY1NzRcdTU5MjdcdTVDMEZcdThGODVcdTUyQTlcdTdFQkYnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTkwNFx1NzQwNlx1OUYyMFx1NjgwN1x1NzlGQlx1NTJBOFx1NEU4Qlx1NEVGNlxyXG4gICAgICogQHBhcmFtIGV2ZW50IFx1OUYyMFx1NjgwN1x1NEU4Qlx1NEVGNlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhhbmRsZU1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1Jlc2l6aW5nIHx8ICF0aGlzLmFjdGl2ZVRhYmxlIHx8ICF0aGlzLmN1cnJlbnRIYW5kbGUgfHwgIXRoaXMucmVzaXplR3VpZGUpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdThCQTFcdTdCOTdcdTlGMjBcdTY4MDdcdTc5RkJcdTUyQThcdThERERcdTc5QkJcclxuICAgICAgICBjb25zdCBkZWx0YVggPSBldmVudC5jbGllbnRYIC0gdGhpcy5zdGFydFg7XHJcbiAgICAgICAgY29uc3QgZGVsdGFZID0gZXZlbnQuY2xpZW50WSAtIHRoaXMuc3RhcnRZO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NjZGNFx1NjVCMFx1OEY4NVx1NTJBOVx1N0VCRlx1NEY0RFx1N0Y2RVxyXG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZVR5cGUgPT09ICdjb2x1bW4nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0xlZnQgPSBwYXJzZUludCh0aGlzLmN1cnJlbnRIYW5kbGUuc3R5bGUubGVmdCkgKyBkZWx0YVg7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplR3VpZGUuc3R5bGUubGVmdCA9IGAke25ld0xlZnR9cHhgO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVGFibGVSZXNpemVyOiBcdThDMDNcdTY1NzRcdTUyMTdcdThGODVcdTUyQTlcdTdFQkYgLSBcdTRGNERcdTdGNkU9JHtuZXdMZWZ0fXB4YCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3VG9wID0gcGFyc2VJbnQodGhpcy5jdXJyZW50SGFuZGxlLnN0eWxlLnRvcCkgKyBkZWx0YVk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplR3VpZGUuc3R5bGUudG9wID0gYCR7bmV3VG9wfXB4YDtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFRhYmxlUmVzaXplcjogXHU4QzAzXHU2NTc0XHU4ODRDXHU4Rjg1XHU1MkE5XHU3RUJGIC0gXHU0RjREXHU3RjZFPSR7bmV3VG9wfXB4YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1OTA0XHU3NDA2XHU5RjIwXHU2ODA3XHU2NzdFXHU1RjAwXHU0RThCXHU0RUY2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgXHU5RjIwXHU2ODA3XHU0RThCXHU0RUY2XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlTW91c2VVcChldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1Jlc2l6aW5nIHx8ICF0aGlzLmFjdGl2ZVRhYmxlKSByZXR1cm47XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1RhYmxlUmVzaXplcjogXHU3RUQzXHU2NzVGXHU2MkQ2XHU2MkZEJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU5RjIwXHU2ODA3XHU3OUZCXHU1MkE4XHU4REREXHU3OUJCXHJcbiAgICAgICAgY29uc3QgZGVsdGFYID0gZXZlbnQuY2xpZW50WCAtIHRoaXMuc3RhcnRYO1xyXG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IGV2ZW50LmNsaWVudFkgLSB0aGlzLnN0YXJ0WTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTY1QjBcdTc2ODRcdTVDM0FcdTVCRjhcclxuICAgICAgICBpZiAodGhpcy5yZXNpemVUeXBlID09PSAnY29sdW1uJyAmJiB0aGlzLnRhcmdldEluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3V2lkdGggPSBNYXRoLm1heCgyMCwgdGhpcy5zdGFydFdpZHRoICsgZGVsdGFYKTsgLy8gXHU2NzAwXHU1QzBGXHU1QkJEXHU1RUE2MjBweFxyXG4gICAgICAgICAgICB0aGlzLmFwcGx5Q29sdW1uV2lkdGgodGhpcy50YXJnZXRJbmRleCwgbmV3V2lkdGgpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVGFibGVSZXNpemVyOiBcdTVFOTRcdTc1MjhcdTY1QjBcdTUyMTdcdTVCQkQgLSBcdTdEMjJcdTVGMTU9JHt0aGlzLnRhcmdldEluZGV4fSwgXHU1QkJEXHU1RUE2PSR7bmV3V2lkdGh9cHhgKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmVzaXplVHlwZSA9PT0gJ3JvdycgJiYgdGhpcy50YXJnZXRJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0hlaWdodCA9IE1hdGgubWF4KDIwLCB0aGlzLnN0YXJ0SGVpZ2h0ICsgZGVsdGFZKTsgLy8gXHU2NzAwXHU1QzBGXHU5QUQ4XHU1RUE2MjBweFxyXG4gICAgICAgICAgICB0aGlzLmFwcGx5Um93SGVpZ2h0KHRoaXMudGFyZ2V0SW5kZXgsIG5ld0hlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUYWJsZVJlc2l6ZXI6IFx1NUU5NFx1NzUyOFx1NjVCMFx1ODg0Q1x1OUFEOCAtIFx1N0QyMlx1NUYxNT0ke3RoaXMudGFyZ2V0SW5kZXh9LCBcdTlBRDhcdTVFQTY9JHtuZXdIZWlnaHR9cHhgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU0RkREXHU1QjU4XHU4ODY4XHU2ODNDXHU1QzNBXHU1QkY4XHU2NTcwXHU2MzZFXHJcbiAgICAgICAgdGhpcy5zYXZlVGFibGVTaXplRGF0YSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NzlGQlx1OTY2NFx1OEY4NVx1NTJBOVx1N0VCRlxyXG4gICAgICAgIGlmICh0aGlzLnJlc2l6ZUd1aWRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplR3VpZGUucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplR3VpZGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTkxQ0RcdTdGNkVcdTcyQjZcdTYwMDFcclxuICAgICAgICB0aGlzLmlzUmVzaXppbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRIYW5kbGUgPSBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NzlGQlx1OTY2NFx1NEU4Qlx1NEVGNlx1NzZEMVx1NTQyQ1x1NTY2OFxyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlTW91c2VNb3ZlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXAuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTVFOTRcdTc1MjhcdTUyMTdcdTVCQkRcclxuICAgICAqIEBwYXJhbSBjb2xJbmRleCBcdTUyMTdcdTdEMjJcdTVGMTVcclxuICAgICAqIEBwYXJhbSB3aWR0aCBcdTVCQkRcdTVFQTZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhcHBseUNvbHVtbldpZHRoKGNvbEluZGV4OiBudW1iZXIsIHdpZHRoOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlVGFibGUpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTc2ODRjb2xncm91cFxyXG4gICAgICAgIGxldCBjb2xncm91cCA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvcignY29sZ3JvdXAnKTtcclxuICAgICAgICBpZiAoIWNvbGdyb3VwKSB7XHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NkNBMVx1NjcwOWNvbGdyb3VwXHVGRjBDXHU1MjFCXHU1RUZBXHU0RTAwXHU0RTJBXHJcbiAgICAgICAgICAgIGNvbGdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY29sZ3JvdXAnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NEUzQVx1NkJDRlx1NEUwMFx1NTIxN1x1NTIxQlx1NUVGQWNvbFx1NTE0M1x1N0QyMFxyXG4gICAgICAgICAgICBjb25zdCBmaXJzdFJvdyA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvcigndHInKTtcclxuICAgICAgICAgICAgaWYgKGZpcnN0Um93KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsQ291bnQgPSBmaXJzdFJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0aCwgdGQnKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY29sJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sZ3JvdXAuYXBwZW5kQ2hpbGQoY29sKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU1MjMwXHU4ODY4XHU2ODNDXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlVGFibGUucHJlcGVuZChjb2xncm91cCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUJGOVx1NUU5NFx1NzY4NGNvbFx1NTE0M1x1N0QyMFxyXG4gICAgICAgIGNvbnN0IGNvbHMgPSBjb2xncm91cC5xdWVyeVNlbGVjdG9yQWxsKCdjb2wnKTtcclxuICAgICAgICBpZiAoY29sSW5kZXggPCBjb2xzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb2wgPSBjb2xzW2NvbEluZGV4XSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgY29sLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NUU5NFx1NzUyOFx1ODg0Q1x1OUFEOFxyXG4gICAgICogQHBhcmFtIHJvd0luZGV4IFx1ODg0Q1x1N0QyMlx1NUYxNVxyXG4gICAgICogQHBhcmFtIGhlaWdodCBcdTlBRDhcdTVFQTZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhcHBseVJvd0hlaWdodChyb3dJbmRleDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVUYWJsZSkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUJGOVx1NUU5NFx1NzY4NFx1ODg0Q1xyXG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLmFjdGl2ZVRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XHJcbiAgICAgICAgaWYgKHJvd0luZGV4IDwgcm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93ID0gcm93c1tyb3dJbmRleF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHJvdy5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NEZERFx1NUI1OFx1ODg2OFx1NjgzQ1x1NUMzQVx1NUJGOFx1NjU3MFx1NjM2RVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIHNhdmVUYWJsZVNpemVEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVUYWJsZSkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1ODg2OFx1NjgzQ0lEXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlSWQgPSB0aGlzLmFjdGl2ZVRhYmxlLmdldEF0dHJpYnV0ZSgnZGF0YS10YWJsZS1pZCcpO1xyXG4gICAgICAgICAgICBpZiAoIXRhYmxlSWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVGFibGVSZXNpemVyOiBcdTY1RTBcdTZDRDVcdTRGRERcdTVCNThcdTg4NjhcdTY4M0NcdTVDM0FcdTVCRjhcdTY1NzBcdTYzNkVcdUZGMENcdTg4NjhcdTY4M0NcdTZDQTFcdTY3MDlJRCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVGFibGVSZXNpemVyOiBcdTRGRERcdTVCNThcdTg4NjhcdTY4M0NcdTVDM0FcdTVCRjhcdTY1NzBcdTYzNkUgLSBcdTg4NjhcdTY4M0NJRD0ke3RhYmxlSWR9YCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY1MzZcdTk2QzZcdTUyMTdcdTVCQkRcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgY29uc3QgY29sV2lkdGhzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBjb2xncm91cCA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvcignY29sZ3JvdXAnKTtcclxuICAgICAgICAgICAgaWYgKGNvbGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xzID0gY29sZ3JvdXAucXVlcnlTZWxlY3RvckFsbCgnY29sJyk7XHJcbiAgICAgICAgICAgICAgICBjb2xzLmZvckVhY2goY29sID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IChjb2wgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLndpZHRoIHx8ICdhdXRvJztcclxuICAgICAgICAgICAgICAgICAgICBjb2xXaWR0aHMucHVzaCh3aWR0aCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5Y29sZ3JvdXBcdTYyMTZjb2xzXHVGRjBDXHU0RUNFXHU4ODY4XHU2ODNDXHU3QjJDXHU0RTAwXHU4ODRDXHU4M0I3XHU1M0Q2XHU1MjE3XHU2NTcwXHJcbiAgICAgICAgICAgIGlmIChjb2xXaWR0aHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFJvdyA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvcigndHInKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaXJzdFJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxDb3VudCA9IGZpcnN0Um93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoLCB0ZCcpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbFdpZHRocy5wdXNoKCdhdXRvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTY1MzZcdTk2QzZcdTg4NENcdTlBRDhcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgY29uc3Qgcm93SGVpZ2h0czogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgY29uc3Qgcm93cyA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICAgICAgcm93cy5mb3JFYWNoKHJvdyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSAocm93IGFzIEhUTUxFbGVtZW50KS5zdHlsZS5oZWlnaHQgfHwgJ2F1dG8nO1xyXG4gICAgICAgICAgICAgICAgcm93SGVpZ2h0cy5wdXNoKGhlaWdodCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1RhYmxlUmVzaXplcjogXHU2NTM2XHU5NkM2XHU3Njg0XHU1QzNBXHU1QkY4XHU2NTcwXHU2MzZFJywgeyBjb2xXaWR0aHMsIHJvd0hlaWdodHMgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUyQTBcdThGN0RcdTczQjBcdTY3MDlcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgbGV0IGFsbERhdGEgPSBhd2FpdCB0aGlzLnBsdWdpbi5sb2FkRGF0YSgpIHx8IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWFsbERhdGEudGFibGVzKSB7XHJcbiAgICAgICAgICAgICAgICBhbGxEYXRhLnRhYmxlcyA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTZEM0JcdTUyQThcdTY1ODdcdTRFRjZcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuZ2V0QXBwKCkud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICAgICAgaWYgKCFhY3RpdmVGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RhYmxlUmVzaXplcjogXHU2NUUwXHU2Q0Q1XHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHU4REVGXHU1Rjg0Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NjZGNFx1NjVCMFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxyXG4gICAgICAgICAgICBpZiAoIWFsbERhdGEudGFibGVzW3RhYmxlSWRdKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY1QjBcdTc2ODRcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgICAgIGFsbERhdGEudGFibGVzW3RhYmxlSWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0YWJsZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uczogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYWN0aXZlRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cnVjdHVyZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dDb3VudDogcm93cy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbENvdW50OiBjb2xXaWR0aHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNIZWFkZXJzOiByb3dzLmxlbmd0aCA+IDAgJiYgcm93c1swXS5xdWVyeVNlbGVjdG9yQWxsKCd0aCcpLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93SGVpZ2h0czogcm93SGVpZ2h0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sV2lkdGhzOiBjb2xXaWR0aHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudDogQXJyYXkoY29sV2lkdGhzLmxlbmd0aCkuZmlsbCgnbGVmdCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsU3R5bGVzOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUYWJsZVJlc2l6ZXI6IFx1NTIxQlx1NUVGQVx1NEU4Nlx1NjVCMFx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RSAtIElEPSR7dGFibGVJZH1gLCBhbGxEYXRhLnRhYmxlc1t0YWJsZUlkXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTczQjBcdTY3MDlcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgICAgIGlmICghYWxsRGF0YS50YWJsZXNbdGFibGVJZF0uc3R5bGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbERhdGEudGFibGVzW3RhYmxlSWRdLnN0eWxpbmcgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU3ODZFXHU0RkREbG9jYXRpb25zXHU1MzA1XHU1NDJCXHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFsbERhdGEudGFibGVzW3RhYmxlSWRdLmxvY2F0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbERhdGEudGFibGVzW3RhYmxlSWRdLmxvY2F0aW9ucyA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGFjdGl2ZUZpbGUucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2OEMwXHU2N0U1XHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHU2NjJGXHU1NDI2XHU1REYyXHU1NzI4bG9jYXRpb25zXHU0RTJEXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZVBhdGhFeGlzdHMgPSBhbGxEYXRhLnRhYmxlc1t0YWJsZUlkXS5sb2NhdGlvbnMuc29tZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGxvYzoge3BhdGg6IHN0cmluZ30pID0+IGxvYy5wYXRoID09PSBhY3RpdmVGaWxlLnBhdGhcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlsZVBhdGhFeGlzdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF0YS50YWJsZXNbdGFibGVJZF0ubG9jYXRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYWN0aXZlRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTY4MzdcdTVGMEZcdTY1NzBcdTYzNkVcclxuICAgICAgICAgICAgICAgIGFsbERhdGEudGFibGVzW3RhYmxlSWRdLnN0eWxpbmcucm93SGVpZ2h0cyA9IHJvd0hlaWdodHM7XHJcbiAgICAgICAgICAgICAgICBhbGxEYXRhLnRhYmxlc1t0YWJsZUlkXS5zdHlsaW5nLmNvbFdpZHRocyA9IGNvbFdpZHRocztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU1MTc2XHU0RUQ2XHU3RUQzXHU2Nzg0XHU2NTcwXHU2MzZFXHU2QjYzXHU3ODZFXHJcbiAgICAgICAgICAgICAgICBhbGxEYXRhLnRhYmxlc1t0YWJsZUlkXS5zdHJ1Y3R1cmUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93Q291bnQ6IHJvd3MubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbENvdW50OiBjb2xXaWR0aHMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhc0hlYWRlcnM6IHJvd3MubGVuZ3RoID4gMCAmJiByb3dzWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoJykubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFRhYmxlUmVzaXplcjogXHU2NkY0XHU2NUIwXHU0RTg2XHU3M0IwXHU2NzA5XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFIC0gSUQ9JHt0YWJsZUlkfWAsIGFsbERhdGEudGFibGVzW3RhYmxlSWRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU0RkREXHU1QjU4XHU2NTcwXHU2MzZFXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVEYXRhKGFsbERhdGEpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU0RjE4XHU1MTQ4XHU0RjdGXHU3NTI4XHU2NTg3XHU0RUY2XHU1QjU4XHU1MEE4XHVGRjBDXHU1MjE5XHU1QzA2XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1QkZDXHU1MUZBXHU1MjMwTWFya2Rvd25cdTY1ODdcdTRFRjZcclxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZlckZpbGVTdG9yYWdlICYmIGFjdGl2ZUZpbGUpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnRhYmxlRGF0YUV4dHJhY3Rvci5leHBvcnRUYWJsZURhdGFUb0ZpbGUoYWN0aXZlRmlsZSwgdGFibGVJZCwgYWxsRGF0YS50YWJsZXNbdGFibGVJZF0pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFRhYmxlUmVzaXplcjogXHU1REYyXHU1QzA2XHU4ODY4XHU2ODNDXHU1OTI3XHU1QzBGXHU2NTcwXHU2MzZFXHU1QkZDXHU1MUZBXHU1MjMwXHU2NTg3XHU0RUY2ICR7YWN0aXZlRmlsZS5wYXRofWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUYWJsZVJlc2l6ZXI6IFx1ODg2OFx1NjgzQ1x1NUMzQVx1NUJGOFx1NjU3MFx1NjM2RVx1NEZERFx1NUI1OFx1NjIxMFx1NTI5RicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU3QUNCXHU1MzczXHU1RTk0XHU3NTI4XHU2ODM3XHU1RjBGXHU1MjMwXHU4ODY4XHU2ODNDXHVGRjBDXHU3ODZFXHU0RkREXHU4OUM2XHU4OUM5XHU1M0NEXHU5OTg4XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlDdXJyZW50U2l6ZXMoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUYWJsZVJlc2l6ZXI6IFx1NEZERFx1NUI1OFx1ODg2OFx1NjgzQ1x1NUMzQVx1NUJGOFx1NjU3MFx1NjM2RVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFx1N0FDQlx1NTM3M1x1NUU5NFx1NzUyOFx1NUY1M1x1NTI0RFx1NUMzQVx1NUJGOFx1NTIzMFx1ODg2OFx1NjgzQ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFwcGx5Q3VycmVudFNpemVzKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVUYWJsZSkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFx1NUU5NFx1NzUyOFx1NTIxN1x1NUJCRFxyXG4gICAgICAgICAgICBjb25zdCBjb2xncm91cCA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvcignY29sZ3JvdXAnKTtcclxuICAgICAgICAgICAgaWYgKGNvbGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xzID0gY29sZ3JvdXAucXVlcnlTZWxlY3RvckFsbCgnY29sJyk7XHJcbiAgICAgICAgICAgICAgICBjb2xzLmZvckVhY2goKGNvbCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IChjb2wgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVGFibGVSZXNpemVyOiBcdTdBQ0JcdTUzNzNcdTVFOTRcdTc1MjhcdTUyMTdcdTVCQkQgLSBcdTdEMjJcdTVGMTU9JHtpbmRleH0sIFx1NUJCRFx1NUVBNj0ke3dpZHRofWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTVFOTRcdTc1MjhcdTg4NENcdTlBRDhcclxuICAgICAgICAgICAgY29uc3Qgcm93cyA9IHRoaXMuYWN0aXZlVGFibGUucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgICAgICAgICAgcm93cy5mb3JFYWNoKChyb3csIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSAocm93IGFzIEhUTUxFbGVtZW50KS5zdHlsZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFRhYmxlUmVzaXplcjogXHU3QUNCXHU1MzczXHU1RTk0XHU3NTI4XHU4ODRDXHU5QUQ4IC0gXHU3RDIyXHU1RjE1PSR7aW5kZXh9LCBcdTlBRDhcdTVFQTY9JHtoZWlnaHR9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RhYmxlUmVzaXplcjogXHU1RTk0XHU3NTI4XHU1RjUzXHU1MjREXHU1QzNBXHU1QkY4XHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTc5RkJcdTk2NjRcdTYyNDBcdTY3MDlcdTYyRDZcdTYyRkRcdTUzRTVcdTY3QzRcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlUmVzaXplSGFuZGxlcygpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnVGFibGVSZXNpemVyOiBcdTc5RkJcdTk2NjRcdTYyRDZcdTYyRkRcdTUzRTVcdTY3QzQnKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTc5RkJcdTk2NjRcdTYyNDBcdTY3MDlcdTUzRTVcdTY3QzRcclxuICAgICAgICB0aGlzLnJlc2l6ZUhhbmRsZXMuZm9yRWFjaChoYW5kbGUgPT4ge1xyXG4gICAgICAgICAgICBoYW5kbGUucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2RTA1XHU3QTdBXHU1M0U1XHU2N0M0XHU2NTcwXHU3RUM0XHJcbiAgICAgICAgdGhpcy5yZXNpemVIYW5kbGVzID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU3OUZCXHU5NjY0XHU4Rjg1XHU1MkE5XHU3RUJGXHJcbiAgICAgICAgaWYgKHRoaXMucmVzaXplR3VpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVHdWlkZS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVHdWlkZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2RTA1XHU3NDA2XHU4RDQ0XHU2RTkwXHJcbiAgICAgKi9cclxuICAgIGNsZWFudXAoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1RhYmxlUmVzaXplcjogXHU2RTA1XHU3NDA2XHU4RDQ0XHU2RTkwJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU3OUZCXHU5NjY0XHU2MkQ2XHU2MkZEXHU1M0U1XHU2N0M0XHJcbiAgICAgICAgdGhpcy5yZW1vdmVSZXNpemVIYW5kbGVzKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU5MUNEXHU3RjZFXHU3MkI2XHU2MDAxXHJcbiAgICAgICAgdGhpcy5hY3RpdmVUYWJsZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc1Jlc2l6aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50SGFuZGxlID0gbnVsbDtcclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBBcHAsIFBsdWdpbiwgVEZpbGUsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFRhYmxlRGF0YSwgVGFibGVMb2NhdGlvbiwgVGFibGVTdHJ1Y3R1cmUsIFRhYmxlU3R5bGluZywgVGFibGVGZWF0dXJlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBPYnNpZGlhblNwcmVhZHNoZWV0IH0gZnJvbSAnLi9tYWluJztcblxuLyoqXG4gKiBcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTYzRDBcdTUzRDZcdTU2NjhcbiAqIFx1NzUyOFx1NEU4RVx1NEVDRU1hcmtkb3duXHU2NTg3XHU0RUY2XHU0RTJEXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXG4gKi9cbmV4cG9ydCBjbGFzcyBUYWJsZURhdGFFeHRyYWN0b3Ige1xuICAgIHByaXZhdGUgcGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0O1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBPYnNpZGlhblNwcmVhZHNoZWV0KSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cbiAgICBcbiAgICAvLyBcdThGODVcdTUyQTlcdTY1QjlcdTZDRDVcdUZGMENcdTgzQjdcdTUzRDZhcHBcdTVCRjlcdThDNjFcbiAgICBwcml2YXRlIGdldEFwcCgpOiBBcHAge1xuICAgICAgICByZXR1cm4gKHRoaXMucGx1Z2luIGFzIHVua25vd24gYXMgUGx1Z2luKS5hcHA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXHU0RUNFXHU2NTg3XHU0RUY2XHU0RTJEXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXG4gICAgICogQHBhcmFtIGZpbGUgXHU2NTg3XHU0RUY2XHU1QkY5XHU4QzYxXG4gICAgICogQHJldHVybnMgXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1QkY5XHU4QzYxXHVGRjBDXHU5NTJFXHU0RTNBXHU4ODY4XHU2ODNDSURcbiAgICAgKi9cbiAgICBhc3luYyBleHRyYWN0VGFibGVEYXRhRnJvbUZpbGUoZmlsZTogVEZpbGUpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIFRhYmxlRGF0YT4+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFx1OEJGQlx1NTNENlx1NjU4N1x1NEVGNlx1NTE4NVx1NUJCOVxuICAgICAgICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmdldEFwcCgpLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFx1NUI1OFx1NTBBOFx1NjNEMFx1NTNENlx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBUYWJsZURhdGE+ID0ge307XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFx1NTMzOVx1OTE0REpTT05cdTY4M0NcdTVGMEZcdTc2ODRcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTRFRTNcdTc4MDFcdTU3NTdcbiAgICAgICAgICAgIGNvbnN0IGpzb25Db2RlQmxvY2tSZWdleCA9IC9gYGBqc29uOnRhYmxlLWRhdGFcXHMqXFxuKFtcXHNcXFNdKj8pXFxuYGBgL2c7XG4gICAgICAgICAgICBsZXQganNvbk1hdGNoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGlsZSAoKGpzb25NYXRjaCA9IGpzb25Db2RlQmxvY2tSZWdleC5leGVjKGZpbGVDb250ZW50KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uU3RyID0ganNvbk1hdGNoWzFdLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QganNvbkRhdGEgPSBKU09OLnBhcnNlKGpzb25TdHIpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTA0XHU3NDA2XHU2NTcwXHU3RUM0XHU2MjE2XHU1MzU1XHU0RTJBXHU1QkY5XHU4QzYxXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb25EYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTA0XHU3NDA2XHU2NTcwXHU3RUM0XHU1RjYyXHU1RjBGXHU3Njg0XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhYmxlRGF0YSBvZiBqc29uRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZURhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzVGFibGVEYXRhT2JqZWN0KHRhYmxlRGF0YSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbkRhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTkwNFx1NzQwNlx1NTM1NVx1NEUyQVx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NUJGOVx1OEM2MVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzVGFibGVEYXRhT2JqZWN0KGpzb25EYXRhLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU4OUUzXHU2NzkwSlNPTlx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NEVFM1x1NzgwMVx1NTc1N1x1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBcdTUzMzlcdTkxNERDU1ZcdTY4M0NcdTVGMEZcdTc2ODRcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTRFRTNcdTc4MDFcdTU3NTdcbiAgICAgICAgICAgIGNvbnN0IGNzdkNvZGVCbG9ja1JlZ2V4ID0gL2BgYGNzdjp0YWJsZS1kYXRhXFxzKlxcbihbXFxzXFxTXSo/KVxcbmBgYC9nO1xuICAgICAgICAgICAgbGV0IGNzdk1hdGNoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGlsZSAoKGNzdk1hdGNoID0gY3N2Q29kZUJsb2NrUmVnZXguZXhlYyhmaWxlQ29udGVudCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3N2U3RyID0gY3N2TWF0Y2hbMV0udHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjc3ZMaW5lcyA9IGNzdlN0ci5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoY3N2TGluZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU3QjJDXHU0RTAwXHU4ODRDXHU0RjVDXHU0RTNBXHU4ODY4XHU1OTM0XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gY3N2TGluZXNbMF0uc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTA0XHU3NDA2XHU2QkNGXHU0RTAwXHU4ODRDXHU2NTcwXHU2MzZFXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNzdkxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gY3N2TGluZXNbaV0uc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZURhdGE6IGFueSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NUMwNkNTVlx1ODg0Q1x1OEY2Q1x1NjM2Mlx1NEUzQVx1NUJGOVx1OEM2MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaGVhZGVycy5sZW5ndGggJiYgaiA8IHZhbHVlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2pdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NUMxRFx1OEJENVx1ODlFM1x1Njc5MEpTT05cdTVCNTdcdTZCQjVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGFbaGVhZGVyc1tqXV0gPSBKU09OLnBhcnNlKHZhbHVlc1tqXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTRFMERcdTY2MkZKU09OXHVGRjBDXHU1MjE5XHU0RjVDXHU0RTNBXHU1QjU3XHU3QjI2XHU0RTMyXHU1OTA0XHU3NDA2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhW2hlYWRlcnNbal1dID0gdmFsdWVzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZURhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzVGFibGVEYXRhT2JqZWN0KHRhYmxlRGF0YSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTg5RTNcdTY3OTBDU1ZcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTRFRTNcdTc4MDFcdTU3NTdcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gXHU1MzM5XHU5MTREXHU4MUVBXHU1QjlBXHU0RTQ5XHU2ODNDXHU1RjBGIGBgYHRhYmxlLWRhdGEgXHU0RUUzXHU3ODAxXHU1NzU3XG4gICAgICAgICAgICBjb25zdCBjdXN0b21Db2RlQmxvY2tSZWdleCA9IC9gYGB0YWJsZS1kYXRhXFxzKlxcbihbXFxzXFxTXSo/KVxcbmBgYC9nO1xuICAgICAgICAgICAgbGV0IGN1c3RvbU1hdGNoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGlsZSAoKGN1c3RvbU1hdGNoID0gY3VzdG9tQ29kZUJsb2NrUmVnZXguZXhlYyhmaWxlQ29udGVudCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tU3RyID0gY3VzdG9tTWF0Y2hbMV0udHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXN0b21MaW5lcyA9IGN1c3RvbVN0ci5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBcdTU5MDRcdTc0MDZcdTZCQ0ZcdTRFMDBcdTg4NENcdTgxRUFcdTVCOUFcdTRFNDlcdTY4M0NcdTVGMEZcdTY1NzBcdTYzNkVcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGN1c3RvbUxpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZURhdGEgPSB0aGlzLnBhcnNlQ3VzdG9tVGFibGVEYXRhRm9ybWF0KGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlRGF0YSAmJiB0YWJsZURhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbdGFibGVEYXRhLmlkXSA9IHRhYmxlRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1ODlFM1x1Njc5MFx1ODFFQVx1NUI5QVx1NEU0OVx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NEVFM1x1NzgwMVx1NTc1N1x1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBcdTRFQ0VIVE1MXHU2Q0U4XHU5MUNBXHU0RTJEXHU2M0QwXHU1M0Q2XHU4ODY4XHU2ODNDSURcdTU0OENcdTY1NzBcdTYzNkVcbiAgICAgICAgICAgIHRoaXMuZXh0cmFjdFRhYmxlRGF0YUZyb21Db21tZW50cyhmaWxlQ29udGVudCwgcmVzdWx0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NEVDRVx1NjU4N1x1NEVGNlx1NjNEMFx1NTNENlx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogXHU0RUNFSFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1NjNEMFx1NTNENlx1ODg2OFx1NjgzQ0lEXHU1NDhDXHU2NTcwXHU2MzZFXG4gICAgICogQHBhcmFtIGZpbGVDb250ZW50IFx1NjU4N1x1NEVGNlx1NTE4NVx1NUJCOVxuICAgICAqIEBwYXJhbSByZXN1bHQgXHU3RUQzXHU2NzlDXHU1QkY5XHU4QzYxXG4gICAgICovXG4gICAgcHJpdmF0ZSBleHRyYWN0VGFibGVEYXRhRnJvbUNvbW1lbnRzKGZpbGVDb250ZW50OiBzdHJpbmcsIHJlc3VsdDogUmVjb3JkPHN0cmluZywgVGFibGVEYXRhPik6IHZvaWQge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gXHU1MzM5XHU5MTRESFRNTFx1NkNFOFx1OTFDQVx1NEUyRFx1NzY4NFx1ODg2OFx1NjgzQ0lEXHU1NDhDXHU2NTcwXHU2MzZFXG4gICAgICAgICAgICAvLyBcdTY4M0NcdTVGMEY6IDwhLS0gdGFibGUtaWQ6IElEIHwga2V5MTogdmFsdWUxIHwga2V5MjogdmFsdWUyIC0tPlxuICAgICAgICAgICAgY29uc3QgY29tbWVudFJlZ2V4ID0gLzwhLS1cXHMqdGFibGUtaWQ6XFxzKihbXFx3LV0rKSg/OlxccypcXHxcXHMqKFtePl0qKSk/XFxzKi0tPi9nO1xuICAgICAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gY29tbWVudFJlZ2V4LmV4ZWMoZmlsZUNvbnRlbnQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlSWQgPSBtYXRjaFsxXS50cmltKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVN0cmluZyA9IG1hdGNoWzJdID8gbWF0Y2hbMl0udHJpbSgpIDogbnVsbDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodGFibGVJZCAmJiBkYXRhU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFx1ODlFM1x1Njc5MFx1NkNFOFx1OTFDQVx1NEUyRFx1NzY4NFx1NjU3MFx1NjM2RVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZURhdGEgPSB0aGlzLnBhcnNlQ3VzdG9tVGFibGVEYXRhRm9ybWF0KGAke3RhYmxlSWR9fCR7ZGF0YVN0cmluZ31gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlRGF0YSAmJiB0YWJsZURhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFt0YWJsZURhdGEuaWRdID0gdGFibGVEYXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YWJsZUlkICYmICFyZXN1bHRbdGFibGVJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU1M0VBXHU2NzA5SURcdTZDQTFcdTY3MDlcdTY1NzBcdTYzNkVcdUZGMENcdTRFMTRcdTdFRDNcdTY3OUNcdTRFMkRcdThGRDhcdTZDQTFcdTY3MDlcdThGRDlcdTRFMkFJRFx1NzY4NFx1NjU3MFx1NjM2RVx1RkYwQ1x1NTIxQlx1NUVGQVx1NEUwMFx1NEUyQVx1N0E3QVx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1N0VEM1x1Njc4NFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbdGFibGVJZF0gPSB0aGlzLmNyZWF0ZUVtcHR5VGFibGVEYXRhKHRhYmxlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NEVDRUhUTUxcdTZDRThcdTkxQ0FcdTYzRDBcdTUzRDZcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTY1RjZcdTUxRkFcdTk1MTk6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFx1NTIxQlx1NUVGQVx1N0E3QVx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1N0VEM1x1Njc4NFxuICAgICAqIEBwYXJhbSB0YWJsZUlkIFx1ODg2OFx1NjgzQ0lEXG4gICAgICogQHJldHVybnMgXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1QkY5XHU4QzYxXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVFbXB0eVRhYmxlRGF0YSh0YWJsZUlkOiBzdHJpbmcpOiBUYWJsZURhdGEge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHRhYmxlSWQsXG4gICAgICAgICAgICBsb2NhdGlvbnM6IFtdLFxuICAgICAgICAgICAgc3RydWN0dXJlOiB7XG4gICAgICAgICAgICAgICAgcm93Q291bnQ6IDAsXG4gICAgICAgICAgICAgICAgY29sQ291bnQ6IDAsXG4gICAgICAgICAgICAgICAgaGFzSGVhZGVyczogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHlsaW5nOiB7XG4gICAgICAgICAgICAgICAgcm93SGVpZ2h0czogW10sXG4gICAgICAgICAgICAgICAgY29sV2lkdGhzOiBbXSxcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IFtdXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFx1NTkwNFx1NzQwNlx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NUJGOVx1OEM2MVxuICAgICAqIEBwYXJhbSB0YWJsZURhdGEgXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1QkY5XHU4QzYxXG4gICAgICogQHBhcmFtIHJlc3VsdCBcdTdFRDNcdTY3OUNcdTVCRjlcdThDNjFcbiAgICAgKi9cbiAgICBwcml2YXRlIHByb2Nlc3NUYWJsZURhdGFPYmplY3QodGFibGVEYXRhOiBhbnksIHJlc3VsdDogUmVjb3JkPHN0cmluZywgVGFibGVEYXRhPik6IHZvaWQge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU2NTcwXHU2MzZFXHU3RUQzXHU2Nzg0XHU1QjhDXHU2NTc0XG4gICAgICAgICAgICBpZiAoIXRhYmxlRGF0YS5zdHJ1Y3R1cmUpIHtcbiAgICAgICAgICAgICAgICB0YWJsZURhdGEuc3RydWN0dXJlID0ge1xuICAgICAgICAgICAgICAgICAgICByb3dDb3VudDogMCxcbiAgICAgICAgICAgICAgICAgICAgY29sQ291bnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGhhc0hlYWRlcnM6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCF0YWJsZURhdGEuc3R5bGluZykge1xuICAgICAgICAgICAgICAgIHRhYmxlRGF0YS5zdHlsaW5nID0ge1xuICAgICAgICAgICAgICAgICAgICByb3dIZWlnaHRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgY29sV2lkdGhzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghdGFibGVEYXRhLmxvY2F0aW9ucykge1xuICAgICAgICAgICAgICAgIHRhYmxlRGF0YS5sb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU1MjMwXHU3RUQzXHU2NzlDXHU1QkY5XHU4QzYxXG4gICAgICAgICAgICByZXN1bHRbdGFibGVEYXRhLmlkXSA9IHRhYmxlRGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NTkwNFx1NzQwNlx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NUJGOVx1OEM2MVx1NjVGNlx1NTFGQVx1OTUxOTonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogXHU4OUUzXHU2NzkwXHU4MUVBXHU1QjlBXHU0RTQ5XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU2ODNDXHU1RjBGXG4gICAgICogXHU2ODNDXHU1RjBGOiB0YWJsZUlkfGtleTE6dmFsdWUxfGtleTI6dmFsdWUyLC4uLlxuICAgICAqIEBwYXJhbSBsaW5lIFx1ODFFQVx1NUI5QVx1NEU0OVx1NjgzQ1x1NUYwRlx1NjU3MFx1NjM2RVx1ODg0Q1xuICAgICAqIEByZXR1cm5zIFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NUJGOVx1OEM2MVxuICAgICAqL1xuICAgIHBhcnNlQ3VzdG9tVGFibGVEYXRhRm9ybWF0KGxpbmU6IHN0cmluZyk6IFRhYmxlRGF0YSB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBsaW5lLnNwbGl0KCd8Jyk7XG4gICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoIDwgMSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFx1N0IyQ1x1NEUwMFx1OTBFOFx1NTIwNlx1NjYyRlx1ODg2OFx1NjgzQ0lEXG4gICAgICAgICAgICBjb25zdCB0YWJsZUlkID0gcGFydHNbMF0udHJpbSgpO1xuICAgICAgICAgICAgaWYgKCF0YWJsZUlkKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1QkY5XHU4QzYxXG4gICAgICAgICAgICBjb25zdCB0YWJsZURhdGE6IFRhYmxlRGF0YSA9IHRoaXMuY3JlYXRlRW1wdHlUYWJsZURhdGEodGFibGVJZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcdTg5RTNcdTY3OTBcdTgxRUFcdTVCOUFcdTRFNDlcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTY4M0NcdTVGMEY6ICR7bGluZX0gXHU4ODY4XHU2ODNDSUQ6ICR7dGFibGVJZH1gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gXHU4OUUzXHU2NzkwXHU1MTc2XHU0RjU5XHU5MEU4XHU1MjA2XHU0RjVDXHU0RTNBXHU5NTJFXHU1MDNDXHU1QkY5XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5VmFsdWUgPSBwYXJ0c1tpXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIGlmIChrZXlWYWx1ZS5sZW5ndGggIT09IDIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleVZhbHVlWzBdLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGtleVZhbHVlWzFdLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgXHU1OTA0XHU3NDA2XHU5NTJFXHU1MDNDXHU1QkY5OiAke2tleX06JHt2YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBcdTY4MzlcdTYzNkVcdTk1MkVcdTU0MERcdTU5MDRcdTc0MDZcdTRFMERcdTU0MENcdTdDN0JcdTU3OEJcdTc2ODRcdTUwM0NcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd3cmFwcGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1ODg2OFx1NjgzQ1x1NTMwNVx1ODhDNVx1NTY2OFx1OEJCRVx1N0Y2RVxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhLnN0cnVjdHVyZS51c2VUYWJsZVdyYXBwZXIgPSB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEJCRVx1N0Y2RVx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1NTMwNVx1ODhDNVx1NTY2ODogJHt2YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnd2lkdGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU1MjE3XHU1QkJEXHU4QkJFXHU3RjZFXHVGRjBDXHU2ODNDXHU1RjBGOiB3aWR0aDpjb2wxLGNvbDIsY29sMywuLi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YS5zdHlsaW5nLmNvbFdpZHRocyA9IHZhbHVlLnNwbGl0KCcsJykubWFwKHcgPT4gdy50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEJCRVx1N0Y2RVx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1NTIxN1x1NUJCRDogJHt0YWJsZURhdGEuc3R5bGluZy5jb2xXaWR0aHMuam9pbignLCAnKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWxpZ24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHU1QkY5XHU5RjUwXHU2NUI5XHU1RjBGXHU4QkJFXHU3RjZFXHVGRjBDXHU2ODNDXHU1RjBGOiBhbGlnbjpsZWZ0LGNlbnRlcixyaWdodCwuLi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YS5zdHlsaW5nLmFsaWdubWVudCA9IHZhbHVlLnNwbGl0KCcsJykubWFwKGEgPT4gYS50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEJCRVx1N0Y2RVx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1NUJGOVx1OUY1MFx1NjVCOVx1NUYwRjogJHt0YWJsZURhdGEuc3R5bGluZy5hbGlnbm1lbnQuam9pbignLCAnKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1ODg0Q1x1OUFEOFx1OEJCRVx1N0Y2RVx1RkYwQ1x1NjgzQ1x1NUYwRjogaGVpZ2h0OnJvdzEscm93Mixyb3czLC4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhLnN0eWxpbmcucm93SGVpZ2h0cyA9IHZhbHVlLnNwbGl0KCcsJykubWFwKGggPT4gaC50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFx1OEJCRVx1N0Y2RVx1ODg2OFx1NjgzQyAke3RhYmxlSWR9IFx1ODg0Q1x1OUFEODogJHt0YWJsZURhdGEuc3R5bGluZy5yb3dIZWlnaHRzLmpvaW4oJywgJyl9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTNFRlx1NEVFNVx1NkRGQlx1NTJBMFx1NjZGNFx1NTkxQVx1ODFFQVx1NUI5QVx1NEU0OVx1NUM1RVx1NjAyN1x1NzY4NFx1NTkwNFx1NzQwNlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1ODlFM1x1Njc5MFx1NUI4Q1x1NjIxMFx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RSAke3RhYmxlSWR9OmAsIHRhYmxlRGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gdGFibGVEYXRhO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU4OUUzXHU2NzkwXHU4MUVBXHU1QjlBXHU0RTQ5XHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU2ODNDXHU1RjBGXHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFx1NUI4Q1x1NTU4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1RkYwQ1x1NjgzOVx1NjM2RVx1NUI5RVx1OTY0NVx1ODg2OFx1NjgzQ1x1NTE4NVx1NUJCOVx1ODFFQVx1NTJBOFx1NTg2Qlx1NTE0NVx1N0YzQVx1NTkzMVx1NzY4NFx1N0VEM1x1Njc4NFx1NEZFMVx1NjA2RlxuICAgICAqIEBwYXJhbSB0YWJsZSBcdTg4NjhcdTY4M0NcdTUxNDNcdTdEMjBcbiAgICAgKiBAcGFyYW0gdGFibGVEYXRhIFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxuICAgICAqIEByZXR1cm5zIFx1NUI4Q1x1NTU4NFx1NTQwRVx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxuICAgICAqL1xuICAgIGVuaGFuY2VUYWJsZURhdGEodGFibGU6IEhUTUxFbGVtZW50LCB0YWJsZURhdGE6IFRhYmxlRGF0YSk6IFRhYmxlRGF0YSB7XG4gICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NEUwMFx1NEUyQVx1NjVCMFx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NUJGOVx1OEM2MVx1RkYwQ1x1OTA3Rlx1NTE0RFx1NEZFRVx1NjUzOVx1NTM5Rlx1NTlDQlx1NUJGOVx1OEM2MVxuICAgICAgICBjb25zdCBlbmhhbmNlZERhdGE6IFRhYmxlRGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGFibGVEYXRhKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTg4NjhcdTY4M0NcdTc2ODRcdTg4NENcdTU0OENcdTUyMTdcdTY1NzBcbiAgICAgICAgY29uc3Qgcm93cyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJyk7XG4gICAgICAgIGNvbnN0IHJvd0NvdW50ID0gcm93cy5sZW5ndGg7XG4gICAgICAgIGxldCBjb2xDb3VudCA9IDA7XG4gICAgICAgIFxuICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTY2MkZcdTU0MjZcdTY3MDlcdTg4NjhcdTU5MzRcbiAgICAgICAgY29uc3QgaGFzSGVhZGVyUm93ID0gdGFibGUucXVlcnlTZWxlY3RvcigndGhlYWQnKSAhPT0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NjcwMFx1NTkyN1x1NTIxN1x1NjU3MFxuICAgICAgICByb3dzLmZvckVhY2gocm93ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNlbGxDb3VudCA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKCd0ZCwgdGgnKS5sZW5ndGg7XG4gICAgICAgICAgICBjb2xDb3VudCA9IE1hdGgubWF4KGNvbENvdW50LCBjZWxsQ291bnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFx1NjZGNFx1NjVCMFx1N0VEM1x1Njc4NFx1NEZFMVx1NjA2RlxuICAgICAgICBpZiAoIWVuaGFuY2VkRGF0YS5zdHJ1Y3R1cmUucm93Q291bnQgfHwgZW5oYW5jZWREYXRhLnN0cnVjdHVyZS5yb3dDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgZW5oYW5jZWREYXRhLnN0cnVjdHVyZS5yb3dDb3VudCA9IHJvd0NvdW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIWVuaGFuY2VkRGF0YS5zdHJ1Y3R1cmUuY29sQ291bnQgfHwgZW5oYW5jZWREYXRhLnN0cnVjdHVyZS5jb2xDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgZW5oYW5jZWREYXRhLnN0cnVjdHVyZS5jb2xDb3VudCA9IGNvbENvdW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZW5oYW5jZWREYXRhLnN0cnVjdHVyZS5oYXNIZWFkZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVuaGFuY2VkRGF0YS5zdHJ1Y3R1cmUuaGFzSGVhZGVycyA9IGhhc0hlYWRlclJvdztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU2ODM3XHU1RjBGXHU2NTcwXHU3RUM0XHU5NTdGXHU1RUE2XHU1MzM5XHU5MTREXG4gICAgICAgIGlmICghZW5oYW5jZWREYXRhLnN0eWxpbmcucm93SGVpZ2h0cyB8fCBlbmhhbmNlZERhdGEuc3R5bGluZy5yb3dIZWlnaHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW5oYW5jZWREYXRhLnN0eWxpbmcucm93SGVpZ2h0cyA9IEFycmF5KHJvd0NvdW50KS5maWxsKCdhdXRvJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghZW5oYW5jZWREYXRhLnN0eWxpbmcuY29sV2lkdGhzIHx8IGVuaGFuY2VkRGF0YS5zdHlsaW5nLmNvbFdpZHRocy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVuaGFuY2VkRGF0YS5zdHlsaW5nLmNvbFdpZHRocyA9IEFycmF5KGNvbENvdW50KS5maWxsKCdhdXRvJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghZW5oYW5jZWREYXRhLnN0eWxpbmcuYWxpZ25tZW50IHx8IGVuaGFuY2VkRGF0YS5zdHlsaW5nLmFsaWdubWVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIFx1OUVEOFx1OEJBNFx1N0IyQ1x1NEUwMFx1NTIxN1x1NURFNlx1NUJGOVx1OUY1MFx1RkYwQ1x1NTE3Nlx1NEY1OVx1NTNGM1x1NUJGOVx1OUY1MFxuICAgICAgICAgICAgZW5oYW5jZWREYXRhLnN0eWxpbmcuYWxpZ25tZW50ID0gQXJyYXkoY29sQ291bnQpLmZpbGwoJ3JpZ2h0Jyk7XG4gICAgICAgICAgICBpZiAoY29sQ291bnQgPiAwKSBlbmhhbmNlZERhdGEuc3R5bGluZy5hbGlnbm1lbnRbMF0gPSAnbGVmdCc7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBlbmhhbmNlZERhdGE7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFx1NUMwNlx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NUJGQ1x1NTFGQVx1NTIzME1hcmtkb3duXHU2NTg3XHU0RUY2XG4gICAgICogQHBhcmFtIGZpbGUgXHU2NTg3XHU0RUY2XHU1QkY5XHU4QzYxXG4gICAgICogQHBhcmFtIHRhYmxlSWQgXHU4ODY4XHU2ODNDSURcbiAgICAgKiBAcGFyYW0gdGFibGVEYXRhIFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxuICAgICAqL1xuICAgIGFzeW5jIGV4cG9ydFRhYmxlRGF0YVRvRmlsZShmaWxlOiBURmlsZSwgdGFibGVJZDogc3RyaW5nLCB0YWJsZURhdGE6IFRhYmxlRGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFmaWxlIHx8ICF0YWJsZUlkIHx8ICF0YWJsZURhdGEpIHJldHVybjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gXHU4QkZCXHU1M0Q2XHU2NTg3XHU0RUY2XHU1MTg1XHU1QkI5XG4gICAgICAgICAgICBsZXQgZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmdldEFwcCgpLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFx1NjNEMFx1NTNENlx1NjU4N1x1NEVGNlx1NEUyRFx1NjI0MFx1NjcwOVx1ODg2OFx1NjgzQ0lEXG4gICAgICAgICAgICBjb25zdCB0YWJsZUlkcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICAgICAgY29uc3QgY29tbWVudFJlZ2V4ID0gLzwhLS0gdGFibGUtaWQ6IChbXFx3LV0rKSAtLT4vZztcbiAgICAgICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IGNvbW1lbnRSZWdleC5leGVjKGZpbGVDb250ZW50KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0YWJsZUlkcy5hZGQobWF0Y2hbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBcdTc4NkVcdTRGRERcdTVGNTNcdTUyNERcdTg4NjhcdTY4M0NJRFx1NEU1Rlx1NTMwNVx1NTQyQlx1NTcyOFx1NTE4NVxuICAgICAgICAgICAgdGFibGVJZHMuYWRkKHRhYmxlSWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBcdTRFQ0VcdTY1ODdcdTRFRjZcdTRFMkRcdTYzRDBcdTUzRDZcdTczQjBcdTY3MDlcdTc2ODRcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVGFibGVEYXRhID0gYXdhaXQgdGhpcy5leHRyYWN0VGFibGVEYXRhRnJvbUZpbGUoZmlsZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFx1NjZGNFx1NjVCMFx1NjIxNlx1NkRGQlx1NTJBMFx1NUY1M1x1NTI0RFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVxuICAgICAgICAgICAgZXhpc3RpbmdUYWJsZURhdGFbdGFibGVJZF0gPSB0YWJsZURhdGE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NjU3MFx1N0VDNFxuICAgICAgICAgICAgY29uc3QgdGFibGVEYXRhQXJyYXkgPSBBcnJheS5mcm9tKHRhYmxlSWRzKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoaWQgPT4gZXhpc3RpbmdUYWJsZURhdGFbaWRdKSAvLyBcdTUzRUFcdTUzMDVcdTU0MkJcdTY3MDlcdTY1NzBcdTYzNkVcdTc2ODRcdTg4NjhcdTY4M0NcbiAgICAgICAgICAgICAgICAubWFwKGlkID0+IGV4aXN0aW5nVGFibGVEYXRhW2lkXSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFx1NTFDNlx1NTkwN1x1ODk4MVx1NUJGQ1x1NTFGQVx1NzY4NFx1NjU3MFx1NjM2RVxuICAgICAgICAgICAgY29uc3QgZGF0YVRvRXhwb3J0ID0gSlNPTi5zdHJpbmdpZnkodGFibGVEYXRhQXJyYXksIG51bGwsIDIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBcdTY3RTVcdTYyN0VcdTY1ODdcdTRFRjZcdTRFMkRcdTYyNDBcdTY3MDlcdTc2ODRcdTg4NjhcdTY4M0NcdTY1NzBcdTYzNkVcdTRFRTNcdTc4MDFcdTU3NTdcbiAgICAgICAgICAgIGNvbnN0IGpzb25CbG9ja1JlZ2V4ID0gL2BgYGpzb246dGFibGUtZGF0YVxccypcXG4oW1xcc1xcU10qPylcXG5gYGAvZztcbiAgICAgICAgICAgIGNvbnN0IGNvZGVCbG9ja3M6IHtzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcn1bXSA9IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0ganNvbkJsb2NrUmVnZXguZXhlYyhmaWxlQ29udGVudCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29kZUJsb2Nrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG1hdGNoLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjI3RVx1NTIzMFx1NEU4Nlx1NEVFM1x1NzgwMVx1NTc1N1x1RkYwQ1x1NTIyMFx1OTY2NFx1NjI0MFx1NjcwOVx1NzNCMFx1NjcwOVx1NzY4NFx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NEVFM1x1NzgwMVx1NTc1N1xuICAgICAgICAgICAgaWYgKGNvZGVCbG9ja3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFx1NEVDRVx1NTQwRVx1NTQxMVx1NTI0RFx1NTIyMFx1OTY2NFx1RkYwQ1x1OTA3Rlx1NTE0RFx1NEY0RFx1N0Y2RVx1NTNEOFx1NTMxNlxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBjb2RlQmxvY2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gY29kZUJsb2Nrc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZmlsZUNvbnRlbnQgPSBmaWxlQ29udGVudC5zdWJzdHJpbmcoMCwgYmxvY2suc3RhcnQpICsgZmlsZUNvbnRlbnQuc3Vic3RyaW5nKGJsb2NrLmVuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBcdTU3MjhcdTY1ODdcdTRFRjZcdTY3MkJcdTVDM0VcdTZERkJcdTUyQTBcdTY1QjBcdTc2ODRcdTY1NzBcdTYzNkVcdTRFRTNcdTc4MDFcdTU3NTdcbiAgICAgICAgICAgIC8vIFx1Nzg2RVx1NEZERFx1NjU4N1x1NEVGNlx1NjcyQlx1NUMzRVx1NjcwOVx1OERCM1x1NTkxRlx1NzY4NFx1N0E3QVx1ODg0Q1xuICAgICAgICAgICAgaWYgKCFmaWxlQ29udGVudC5lbmRzV2l0aCgnXFxuXFxuJykpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUNvbnRlbnQuZW5kc1dpdGgoJ1xcbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVDb250ZW50ICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVDb250ZW50ICs9ICdcXG5cXG4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU0RUUzXHU3ODAxXHU1NzU3XG4gICAgICAgICAgICBmaWxlQ29udGVudCArPSAnYGBganNvbjp0YWJsZS1kYXRhXFxuJyArIGRhdGFUb0V4cG9ydCArICdcXG5gYGAnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBcdTRGRERcdTVCNThcdTRGRUVcdTY1MzlcdTU0MEVcdTc2ODRcdTY1ODdcdTRFRjZcdTUxODVcdTVCQjlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0QXBwKCkudmF1bHQubW9kaWZ5KGZpbGUsIGZpbGVDb250ZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coYFx1NURGMlx1NUMwNlx1NjI0MFx1NjcwOVx1ODg2OFx1NjgzQ1x1NjU3MFx1NjM2RVx1NUJGQ1x1NTFGQVx1NTIzMFx1NjU4N1x1NEVGNlx1NjcyQlx1NUMzRTogJHtmaWxlLnBhdGh9LCBcdTg4NjhcdTY4M0NcdTY1NzBcdTkxQ0Y6ICR7dGFibGVEYXRhQXJyYXkubGVuZ3RofWApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU1QkZDXHU1MUZBXHU4ODY4XHU2ODNDXHU2NTcwXHU2MzZFXHU1MjMwXHU2NTg3XHU0RUY2XHU2NUY2XHU1MUZBXHU5NTE5OicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQSw4Q0FBQUEsU0FBQTtBQUFBLEtBQUMsU0FBVSxRQUFRLFNBQVM7QUFDM0IsYUFBTyxZQUFZLFlBQVksT0FBT0EsWUFBVyxjQUFjQSxRQUFPLFVBQVUsUUFBUSxJQUN4RixPQUFPLFdBQVcsY0FBYyxPQUFPLE1BQU0sT0FBTyxPQUFPLElBQzFELE9BQU8sUUFBUSxRQUFRO0FBQUEsSUFDekIsR0FBRSxTQUFPLFdBQVk7QUFBRTtBQUV0QixlQUFTLHFCQUFxQixJQUFJQSxTQUFRO0FBQ3pDLGVBQU9BLFVBQVMsRUFBRSxTQUFTLENBQUMsRUFBRSxHQUFHLEdBQUdBLFNBQVFBLFFBQU8sT0FBTyxHQUFHQSxRQUFPO0FBQUEsTUFDckU7QUFFQSxVQUFJLFVBQVUscUJBQXFCLFNBQVVBLFNBQVE7QUFFckQsWUFBSSxTQUFTQSxRQUFPLFVBQVUsT0FBTyxVQUFVLGVBQWUsT0FBTyxRQUFRLE9BQ3pFLFNBQVMsT0FBTyxRQUFRLGVBQWUsS0FBSyxRQUFRLE9BQU8sT0FFM0QsU0FBUyxhQUFhLEVBQUU7QUFDNUIsWUFBSSxPQUFPLE9BQU8sVUFBVTtBQUFFLGdCQUFNO0FBQUEsUUFBUTtBQUFBLE1BQzVDLENBQUM7QUFFRCxVQUFJLFFBQVEscUJBQXFCLFNBQVVBLFNBQVE7QUFDbkQsWUFBSSxPQUFPQSxRQUFPLFVBQVUsRUFBRSxTQUFTLFFBQVE7QUFDL0MsWUFBSSxPQUFPLE9BQU8sVUFBVTtBQUFFLGdCQUFNO0FBQUEsUUFBTTtBQUFBLE1B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LElBQ2xFO0FBRUEsWUFBUSxJQUFJLDBFQUFjO0FBQUEsRUFDM0I7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLHVCQUE2QjtBQUU1QixVQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsb0JBQW9CLDhCQUFZO0FBQ3RFLFFBQUksQ0FBQztBQUFZO0FBR2pCLFVBQU0sZ0JBQWdCLFdBQVcsUUFBUSxNQUFNO0FBRy9DLFFBQUksaUJBQWlCLENBQUMsS0FBSyxzQkFBc0I7QUFFaEQsaUJBQVcsTUFBTTtBQUNoQixxQ0FBNkIsSUFBSTtBQUFBLE1BQ2xDLEdBQUcsR0FBRztBQUFBLElBQ1A7QUFHQSxTQUFLLHVCQUF1QjtBQUFBLEVBQzdCO0FBQ0Q7QUFHQSxJQUFPLGVBQVE7IiwKICAibmFtZXMiOiBbIm1vZHVsZSIsICJkb2N1bWVudCIsICJrZXkiLCAiYyIsICJzb3VyY2UiLCAiZXhwb3J0cyIsICJwb3MiLCAiY29kZVBvaW50QXQiLCAiZnJvbUNvZGVQb2ludCIsICJwYXJzZSIsICJ0b2tlbiIsICJidWZmZXIiLCAic3RyaW5naWZ5IiwgInN0YWNrIiwgInZhbHVlIiwgImkiLCAibGlzdCIsICJKU09ONSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgIl9hIiwgImhlYWRlckNvbCIsICJpbXBvcnRfb2JzaWRpYW4iLCAiY29sU3BhbiIsICJyb3dTcGFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiX2EiLCAiY2VsbCIsICJyb3dJbmRleCIsICJjb2xJbmRleCIsICJhY3RpdmVWaWV3IiwgImV2ZW50IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImV2ZW50IiwgImV2ZW50Il0KfQo=
