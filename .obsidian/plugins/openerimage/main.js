/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_electron = require("electron");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", async (event) => {
      var _a, _b, _c;
      if (event.detail !== 2)
        return;
      let target = event.target;
      console.log("\u53CC\u51FB\u4E8B\u4EF6 target:", target);
      if (target && target.classList && target.classList.contains("internal-embed") && target.classList.contains("image-embed")) {
        let src = target.getAttribute("src");
        if (!src) {
          const img = target.querySelector("img");
          if (img)
            src = img.getAttribute("alt") || img.getAttribute("src");
        }
        if (!src)
          return;
        if (!src.startsWith("http") && !src.startsWith("data:")) {
          const file = this.app.metadataCache.getFirstLinkpathDest(src, ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "");
          if (file && file.path) {
            const vaultBase = this.app.vault.adapter.getBasePath ? this.app.vault.adapter.getBasePath() : this.app.vault.adapter.basePath;
            const absPath = window.require("path").join(vaultBase, file.path);
            console.log("\u51C6\u5907\u6253\u5F00\u56FE\u7247:", absPath);
            import_electron.shell.openPath(absPath);
            event.preventDefault();
            event.stopPropagation();
          }
        }
      } else if (target && target.tagName === "IMG") {
        let src = target.getAttribute("alt") || target.getAttribute("src");
        if (!src)
          return;
        if (!src.startsWith("http") && !src.startsWith("data:")) {
          const file = this.app.metadataCache.getFirstLinkpathDest(src, ((_b = this.app.workspace.getActiveFile()) == null ? void 0 : _b.path) || "");
          if (file && file.path) {
            const vaultBase = this.app.vault.adapter.getBasePath ? this.app.vault.adapter.getBasePath() : this.app.vault.adapter.basePath;
            const absPath = window.require("path").join(vaultBase, file.path);
            console.log("\u51C6\u5907\u6253\u5F00\u56FE\u7247:", absPath);
            import_electron.shell.openPath(absPath);
            event.preventDefault();
            event.stopPropagation();
          }
        }
      } else if (target && target.classList && target.classList.contains("cm-hmd-embed") && target.classList.contains("cm-hmd-internal-link")) {
        let src = target.innerText;
        if (!src)
          return;
        if (!src.startsWith("http") && !src.startsWith("data:")) {
          const file = this.app.metadataCache.getFirstLinkpathDest(src, ((_c = this.app.workspace.getActiveFile()) == null ? void 0 : _c.path) || "");
          if (file && file.path) {
            const vaultBase = this.app.vault.adapter.getBasePath ? this.app.vault.adapter.getBasePath() : this.app.vault.adapter.basePath;
            const absPath = window.require("path").join(vaultBase, file.path);
            console.log("\u51C6\u5907\u6253\u5F00\u56FE\u7247:", absPath);
            import_electron.shell.openPath(absPath);
            event.preventDefault();
            event.stopPropagation();
          }
        }
      }
    }, true);
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    const updateCodeBlockWrapState = (pre, wrap) => {
      pre.style.whiteSpace = wrap ? "pre-wrap" : "pre";
      pre.setAttribute("data-wrap", wrap ? "1" : "0");
    };
    const getCodeBlockKey = (pre) => {
      const content = pre.textContent || "";
      let hash = 0;
      for (let i = 0; i < content.length; i++) {
        hash = (hash << 5) - hash + content.charCodeAt(i);
        hash |= 0;
      }
      return "codeblock-wrap-" + hash;
    };
    const restoreCodeBlockWrapState = (pre) => {
      const key = getCodeBlockKey(pre);
      const wrap = localStorage.getItem(key) === "1";
      updateCodeBlockWrapState(pre, wrap);
    };
    const saveCodeBlockWrapState = (pre, wrap) => {
      const key = getCodeBlockKey(pre);
      localStorage.setItem(key, wrap ? "1" : "0");
    };
    const addWrapSwitch = (pre) => {
      if (pre.querySelector(".wrap-switch-container"))
        return;
      const container = document.createElement("div");
      container.className = "wrap-switch-container";
      container.style.display = "none";
      const label = document.createElement("label");
      label.className = "wrap-switch-label";
      const input = document.createElement("input");
      input.type = "checkbox";
      input.className = "wrap-switch-input";
      const slider = document.createElement("span");
      slider.className = "wrap-switch-slider";
      const wrap = pre.getAttribute("data-wrap") === "1";
      input.checked = wrap;
      pre.style.whiteSpace = wrap ? "pre-wrap" : "pre";
      input.onchange = (e) => {
        const checked = input.checked;
        pre.style.whiteSpace = checked ? "pre-wrap" : "pre";
        pre.setAttribute("data-wrap", checked ? "1" : "0");
        saveCodeBlockWrapState(pre, checked);
      };
      label.appendChild(input);
      label.appendChild(slider);
      container.appendChild(label);
      pre.style.position = "relative";
      pre.appendChild(container);
      pre.addEventListener("mouseenter", () => {
        container.style.display = "block";
      });
      pre.addEventListener("mouseleave", () => {
        container.style.display = "none";
      });
    };
    const processAllCodeBlocks = () => {
      const pres = document.querySelectorAll("pre");
      pres.forEach((pre) => {
        if (pre.classList.contains("wrap-toggle-processed"))
          return;
        pre.classList.add("wrap-toggle-processed");
        restoreCodeBlockWrapState(pre);
        addWrapSwitch(pre);
      });
    };
    setTimeout(processAllCodeBlocks, 1e3);
    const observer = new MutationObserver(() => {
      processAllCodeBlocks();
    });
    observer.observe(document.body, { childList: true, subtree: true });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IHNoZWxsIH0gZnJvbSAnZWxlY3Ryb24nO1xuXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcblxuaW50ZXJmYWNlIE15UGx1Z2luU2V0dGluZ3Mge1xuXHRteVNldHRpbmc6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTXlQbHVnaW5TZXR0aW5ncyA9IHtcblx0bXlTZXR0aW5nOiAnZGVmYXVsdCdcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogTXlQbHVnaW5TZXR0aW5ncztcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdC8vIFRoaXMgY3JlYXRlcyBhbiBpY29uIGluIHRoZSBsZWZ0IHJpYmJvbi5cblx0XHRjb25zdCByaWJib25JY29uRWwgPSB0aGlzLmFkZFJpYmJvbkljb24oJ2RpY2UnLCAnU2FtcGxlIFBsdWdpbicsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdC8vIENhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgaWNvbi5cblx0XHRcdG5ldyBOb3RpY2UoJ1RoaXMgaXMgYSBub3RpY2UhJyk7XG5cdFx0fSk7XG5cdFx0Ly8gUGVyZm9ybSBhZGRpdGlvbmFsIHRoaW5ncyB3aXRoIHRoZSByaWJib25cblx0XHRyaWJib25JY29uRWwuYWRkQ2xhc3MoJ215LXBsdWdpbi1yaWJib24tY2xhc3MnKTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHN0YXR1cyBiYXIgaXRlbSB0byB0aGUgYm90dG9tIG9mIHRoZSBhcHAuIERvZXMgbm90IHdvcmsgb24gbW9iaWxlIGFwcHMuXG5cdFx0Y29uc3Qgc3RhdHVzQmFySXRlbUVsID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XG5cdFx0c3RhdHVzQmFySXRlbUVsLnNldFRleHQoJ1N0YXR1cyBCYXIgVGV4dCcpO1xuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2ltcGxlIGNvbW1hbmQgdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFueXdoZXJlXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnb3Blbi1zYW1wbGUtbW9kYWwtc2ltcGxlJyxcblx0XHRcdG5hbWU6ICdPcGVuIHNhbXBsZSBtb2RhbCAoc2ltcGxlKScsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRuZXcgU2FtcGxlTW9kYWwodGhpcy5hcHApLm9wZW4oKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBUaGlzIGFkZHMgYW4gZWRpdG9yIGNvbW1hbmQgdGhhdCBjYW4gcGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvbiB0aGUgY3VycmVudCBlZGl0b3IgaW5zdGFuY2Vcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdzYW1wbGUtZWRpdG9yLWNvbW1hbmQnLFxuXHRcdFx0bmFtZTogJ1NhbXBsZSBlZGl0b3IgY29tbWFuZCcsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0Y29uc29sZS5sb2coZWRpdG9yLmdldFNlbGVjdGlvbigpKTtcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oJ1NhbXBsZSBFZGl0b3IgQ29tbWFuZCcpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8vIFRoaXMgYWRkcyBhIGNvbXBsZXggY29tbWFuZCB0aGF0IGNhbiBjaGVjayB3aGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBhcHAgYWxsb3dzIGV4ZWN1dGlvbiBvZiB0aGUgY29tbWFuZFxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ29wZW4tc2FtcGxlLW1vZGFsLWNvbXBsZXgnLFxuXHRcdFx0bmFtZTogJ09wZW4gc2FtcGxlIG1vZGFsIChjb21wbGV4KScsXG5cdFx0XHRjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcblx0XHRcdFx0Ly8gQ29uZGl0aW9ucyB0byBjaGVja1xuXHRcdFx0XHRjb25zdCBtYXJrZG93blZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdFx0XHRpZiAobWFya2Rvd25WaWV3KSB7XG5cdFx0XHRcdFx0Ly8gSWYgY2hlY2tpbmcgaXMgdHJ1ZSwgd2UncmUgc2ltcGx5IFwiY2hlY2tpbmdcIiBpZiB0aGUgY29tbWFuZCBjYW4gYmUgcnVuLlxuXHRcdFx0XHRcdC8vIElmIGNoZWNraW5nIGlzIGZhbHNlLCB0aGVuIHdlIHdhbnQgdG8gYWN0dWFsbHkgcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuXHRcdFx0XHRcdGlmICghY2hlY2tpbmcpIHtcblx0XHRcdFx0XHRcdG5ldyBTYW1wbGVNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFRoaXMgY29tbWFuZCB3aWxsIG9ubHkgc2hvdyB1cCBpbiBDb21tYW5kIFBhbGV0dGUgd2hlbiB0aGUgY2hlY2sgZnVuY3Rpb24gcmV0dXJucyB0cnVlXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTYW1wbGVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHQvLyBJZiB0aGUgcGx1Z2luIGhvb2tzIHVwIGFueSBnbG9iYWwgRE9NIGV2ZW50cyAob24gcGFydHMgb2YgdGhlIGFwcCB0aGF0IGRvZXNuJ3QgYmVsb25nIHRvIHRoaXMgcGx1Z2luKVxuXHRcdC8vIFVzaW5nIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgd2hlbiB0aGlzIHBsdWdpbiBpcyBkaXNhYmxlZC5cblx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIGFzeW5jIChldmVudDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0aWYgKGV2ZW50LmRldGFpbCAhPT0gMikgcmV0dXJuOyAvLyBcdTUzRUFcdTU5MDRcdTc0MDZcdTUzQ0NcdTUxRkJcblx0XHRcdGxldCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0XHRjb25zb2xlLmxvZygnXHU1M0NDXHU1MUZCXHU0RThCXHU0RUY2IHRhcmdldDonLCB0YXJnZXQpO1xuXG5cdFx0XHQvLyAxLiBcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTU2RkVcdTcyNDdcblx0XHRcdGlmIChcblx0XHRcdFx0dGFyZ2V0ICYmXG5cdFx0XHRcdHRhcmdldC5jbGFzc0xpc3QgJiZcblx0XHRcdFx0dGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaW50ZXJuYWwtZW1iZWQnKSAmJlxuXHRcdFx0XHR0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpbWFnZS1lbWJlZCcpXG5cdFx0XHQpIHtcblx0XHRcdFx0bGV0IHNyYyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuXHRcdFx0XHRpZiAoIXNyYykge1xuXHRcdFx0XHRcdGNvbnN0IGltZyA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcblx0XHRcdFx0XHRpZiAoaW1nKSBzcmMgPSBpbWcuZ2V0QXR0cmlidXRlKCdhbHQnKSB8fCBpbWcuZ2V0QXR0cmlidXRlKCdzcmMnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXNyYykgcmV0dXJuO1xuXHRcdFx0XHRpZiAoIXNyYy5zdGFydHNXaXRoKCdodHRwJykgJiYgIXNyYy5zdGFydHNXaXRoKCdkYXRhOicpKSB7XG5cdFx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3Qoc3JjLCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpPy5wYXRoIHx8ICcnKTtcblx0XHRcdFx0XHRpZiAoZmlsZSAmJiBmaWxlLnBhdGgpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHZhdWx0QmFzZSA9ICh0aGlzLmFwcC52YXVsdC5hZGFwdGVyIGFzIGFueSkuZ2V0QmFzZVBhdGggPyAodGhpcy5hcHAudmF1bHQuYWRhcHRlciBhcyBhbnkpLmdldEJhc2VQYXRoKCkgOiAodGhpcy5hcHAudmF1bHQuYWRhcHRlciBhcyBhbnkpLmJhc2VQYXRoO1xuXHRcdFx0XHRcdFx0Y29uc3QgYWJzUGF0aCA9ICh3aW5kb3cgYXMgYW55KS5yZXF1aXJlKCdwYXRoJykuam9pbih2YXVsdEJhc2UsIGZpbGUucGF0aCk7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnXHU1MUM2XHU1OTA3XHU2MjUzXHU1RjAwXHU1NkZFXHU3MjQ3OicsIGFic1BhdGgpO1xuXHRcdFx0XHRcdFx0c2hlbGwub3BlblBhdGgoYWJzUGF0aCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyAyLiBcdTk4ODRcdTg5QzhcdTZBMjFcdTVGMEZcdTc2RjRcdTYzQTVcdTcwQjlcdTUyMzAgPGltZz5cblx0XHRcdGVsc2UgaWYgKHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZSA9PT0gJ0lNRycpIHtcblx0XHRcdFx0bGV0IHNyYyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2FsdCcpIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuXHRcdFx0XHRpZiAoIXNyYykgcmV0dXJuO1xuXHRcdFx0XHRpZiAoIXNyYy5zdGFydHNXaXRoKCdodHRwJykgJiYgIXNyYy5zdGFydHNXaXRoKCdkYXRhOicpKSB7XG5cdFx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3Qoc3JjLCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpPy5wYXRoIHx8ICcnKTtcblx0XHRcdFx0XHRpZiAoZmlsZSAmJiBmaWxlLnBhdGgpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHZhdWx0QmFzZSA9ICh0aGlzLmFwcC52YXVsdC5hZGFwdGVyIGFzIGFueSkuZ2V0QmFzZVBhdGggPyAodGhpcy5hcHAudmF1bHQuYWRhcHRlciBhcyBhbnkpLmdldEJhc2VQYXRoKCkgOiAodGhpcy5hcHAudmF1bHQuYWRhcHRlciBhcyBhbnkpLmJhc2VQYXRoO1xuXHRcdFx0XHRcdFx0Y29uc3QgYWJzUGF0aCA9ICh3aW5kb3cgYXMgYW55KS5yZXF1aXJlKCdwYXRoJykuam9pbih2YXVsdEJhc2UsIGZpbGUucGF0aCk7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnXHU1MUM2XHU1OTA3XHU2MjUzXHU1RjAwXHU1NkZFXHU3MjQ3OicsIGFic1BhdGgpO1xuXHRcdFx0XHRcdFx0c2hlbGwub3BlblBhdGgoYWJzUGF0aCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyAzLiBcdTdGMTZcdThGOTFcdTZBMjFcdTVGMEYgIVtbeHh4XV0gc3BhblxuXHRcdFx0ZWxzZSBpZiAoXG5cdFx0XHRcdHRhcmdldCAmJlxuXHRcdFx0XHR0YXJnZXQuY2xhc3NMaXN0ICYmXG5cdFx0XHRcdHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NtLWhtZC1lbWJlZCcpICYmXG5cdFx0XHRcdHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NtLWhtZC1pbnRlcm5hbC1saW5rJylcblx0XHRcdCkge1xuXHRcdFx0XHRsZXQgc3JjID0gdGFyZ2V0LmlubmVyVGV4dDtcblx0XHRcdFx0aWYgKCFzcmMpIHJldHVybjtcblx0XHRcdFx0aWYgKCFzcmMuc3RhcnRzV2l0aCgnaHR0cCcpICYmICFzcmMuc3RhcnRzV2l0aCgnZGF0YTonKSkge1xuXHRcdFx0XHRcdGNvbnN0IGZpbGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KHNyYywgdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKT8ucGF0aCB8fCAnJyk7XG5cdFx0XHRcdFx0aWYgKGZpbGUgJiYgZmlsZS5wYXRoKSB7XG5cdFx0XHRcdFx0XHRjb25zdCB2YXVsdEJhc2UgPSAodGhpcy5hcHAudmF1bHQuYWRhcHRlciBhcyBhbnkpLmdldEJhc2VQYXRoID8gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5nZXRCYXNlUGF0aCgpIDogKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5iYXNlUGF0aDtcblx0XHRcdFx0XHRcdGNvbnN0IGFic1BhdGggPSAod2luZG93IGFzIGFueSkucmVxdWlyZSgncGF0aCcpLmpvaW4odmF1bHRCYXNlLCBmaWxlLnBhdGgpO1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ1x1NTFDNlx1NTkwN1x1NjI1M1x1NUYwMFx1NTZGRVx1NzI0NzonLCBhYnNQYXRoKTtcblx0XHRcdFx0XHRcdHNoZWxsLm9wZW5QYXRoKGFic1BhdGgpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sIHRydWUpO1xuXG5cdFx0Ly8gXHU3RjE2XHU4RjkxXHU2QTIxXHU1RjBGXHU0RTBCXHU3MEI5XHU1MUZCICFbW3h4eF1dIFx1OEJFRFx1NkNENVx1NzUyOFx1N0NGQlx1N0VERlx1NjdFNVx1NzcwQlx1NTY2OFx1NjI1M1x1NUYwMFx1RkYwOFx1NURGMlx1NUYwM1x1NzUyOCBlZGl0b3IuY20ub25cdUZGMENcdTUxN0NcdTVCQjlcdTY1QjBcdTcyNDggT2JzaWRpYW5cdUZGMDlcblx0XHQvLyBcdTUzRUFcdTRGRERcdTc1NTlcdTUxNjhcdTVDNDAgRE9NIFx1NEU4Qlx1NEVGNlx1NTQ4Q1x1NTZGRVx1NzI0N1x1NjI1M1x1NUYwMFx1OTAzQlx1OEY5MVxuXHRcdC8vIHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsIGxlYWYgPT4ge1xuXHRcdC8vIFx0Y29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdFx0Ly8gXHRpZiAodmlldyAmJiB2aWV3LmdldE1vZGUgJiYgdmlldy5nZXRNb2RlKCkgPT09ICdzb3VyY2UnKSB7XG5cdFx0Ly8gXHRcdGNvbnN0IGVkaXRvciA9IHZpZXcuZWRpdG9yO1xuXHRcdC8vIFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Ly8gXHRcdGlmIChlZGl0b3IuY20gJiYgIWVkaXRvci5jbS5faW1hZ2VDbGlja0hhbmRsZXIpIHtcblx0XHQvLyBcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Ly8gXHRcdFx0ZWRpdG9yLmNtLl9pbWFnZUNsaWNrSGFuZGxlciA9IGFzeW5jIChjbTogYW55LCBldmVudDogTW91c2VFdmVudCkgPT4ge1xuXHRcdC8vIFx0XHRcdFx0Y29uc3QgcG9zID0gY20uY29vcmRzQ2hhcih7bGVmdDogZXZlbnQuY2xpZW50WCwgdG9wOiBldmVudC5jbGllbnRZfSk7XG5cdFx0Ly8gXHRcdFx0XHRjb25zdCBsaW5lID0gY20uZ2V0TGluZShwb3MubGluZSk7XG5cdFx0Ly8gXHRcdFx0XHRjb25zdCBtYXRjaCA9IC8hXFxbXFxbKFteXFxdXSspXFxdXFxdL2c7XG5cdFx0Ly8gXHRcdFx0XHRsZXQgbTtcblx0XHQvLyBcdFx0XHRcdHdoaWxlICgobSA9IG1hdGNoLmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG5cdFx0Ly8gXHRcdFx0XHRcdGNvbnN0IHN0YXJ0ID0gbS5pbmRleDtcblx0XHQvLyBcdFx0XHRcdFx0Y29uc3QgZW5kID0gbS5pbmRleCArIG1bMF0ubGVuZ3RoO1xuXHRcdC8vIFx0XHRcdFx0XHRpZiAocG9zLmNoID49IHN0YXJ0ICYmIHBvcy5jaCA8PSBlbmQpIHtcblx0XHQvLyBcdFx0XHRcdFx0XHRjb25zdCBmaWxlbmFtZSA9IG1bMV07XG5cdFx0Ly8gXHRcdFx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoZmlsZW5hbWUsIHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk/LnBhdGggfHwgJycpO1xuXHRcdC8vIFx0XHRcdFx0XHRcdGlmIChmaWxlICYmIGZpbGUucGF0aCkge1xuXHRcdC8vIFx0XHRcdFx0XHRcdFx0Y29uc3QgdmF1bHRCYXNlID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5nZXRCYXNlUGF0aCA/ICh0aGlzLmFwcC52YXVsdC5hZGFwdGVyIGFzIGFueSkuZ2V0QmFzZVBhdGgoKSA6ICh0aGlzLmFwcC52YXVsdC5hZGFwdGVyIGFzIGFueSkuYmFzZVBhdGg7XG5cdFx0Ly8gXHRcdFx0XHRcdFx0XHRjb25zdCBhYnNQYXRoID0gKHdpbmRvdyBhcyBhbnkpLnJlcXVpcmUoJ3BhdGgnKS5qb2luKHZhdWx0QmFzZSwgZmlsZS5wYXRoKTtcblx0XHQvLyBcdFx0XHRcdFx0XHRcdHNoZWxsLm9wZW5QYXRoKGFic1BhdGgpO1xuXHRcdC8vIFx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHQvLyBcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdC8vIFx0XHRcdFx0XHRcdH1cblx0XHQvLyBcdFx0XHRcdFx0fVxuXHRcdC8vIFx0XHRcdFx0fVxuXHRcdC8vIFx0XHRcdH07XG5cdFx0Ly8gXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdC8vIFx0XHRcdGVkaXRvci5jbS5vbignbW91c2Vkb3duJywgZWRpdG9yLmNtLl9pbWFnZUNsaWNrSGFuZGxlcik7XG5cdFx0Ly8gXHRcdH1cblx0XHQvLyBcdH1cblx0XHQvLyB9KSk7XG5cblx0XHQvLyBXaGVuIHJlZ2lzdGVyaW5nIGludGVydmFscywgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIHBsdWdpbiBpcyBkaXNhYmxlZC5cblx0XHR0aGlzLnJlZ2lzdGVySW50ZXJ2YWwod2luZG93LnNldEludGVydmFsKCgpID0+IGNvbnNvbGUubG9nKCdzZXRJbnRlcnZhbCcpLCA1ICogNjAgKiAxMDAwKSk7XG5cblx0XHQvLyBcdTRFRTNcdTc4MDFcdTU3NTdcdTYzNjJcdTg4NENcdTYzQTdcdTUyMzZcdTVGMDBcdTUxNzNcdUZGMDhcdTdGOEVcdTg5QzJzd2l0Y2hcdTcyNDhcdUZGMDlcblx0XHRjb25zdCB1cGRhdGVDb2RlQmxvY2tXcmFwU3RhdGUgPSAocHJlOiBIVE1MRWxlbWVudCwgd3JhcDogYm9vbGVhbikgPT4ge1xuXHRcdFx0cHJlLnN0eWxlLndoaXRlU3BhY2UgPSB3cmFwID8gJ3ByZS13cmFwJyA6ICdwcmUnO1xuXHRcdFx0cHJlLnNldEF0dHJpYnV0ZSgnZGF0YS13cmFwJywgd3JhcCA/ICcxJyA6ICcwJyk7XG5cdFx0fTtcblxuXHRcdGNvbnN0IGdldENvZGVCbG9ja0tleSA9IChwcmU6IEhUTUxFbGVtZW50KSA9PiB7XG5cdFx0XHRjb25zdCBjb250ZW50ID0gcHJlLnRleHRDb250ZW50IHx8ICcnO1xuXHRcdFx0bGV0IGhhc2ggPSAwO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNvbnRlbnQuY2hhckNvZGVBdChpKTtcblx0XHRcdFx0aGFzaCB8PSAwO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICdjb2RlYmxvY2std3JhcC0nICsgaGFzaDtcblx0XHR9O1xuXG5cdFx0Y29uc3QgcmVzdG9yZUNvZGVCbG9ja1dyYXBTdGF0ZSA9IChwcmU6IEhUTUxFbGVtZW50KSA9PiB7XG5cdFx0XHRjb25zdCBrZXkgPSBnZXRDb2RlQmxvY2tLZXkocHJlKTtcblx0XHRcdGNvbnN0IHdyYXAgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpID09PSAnMSc7XG5cdFx0XHR1cGRhdGVDb2RlQmxvY2tXcmFwU3RhdGUocHJlLCB3cmFwKTtcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2F2ZUNvZGVCbG9ja1dyYXBTdGF0ZSA9IChwcmU6IEhUTUxFbGVtZW50LCB3cmFwOiBib29sZWFuKSA9PiB7XG5cdFx0XHRjb25zdCBrZXkgPSBnZXRDb2RlQmxvY2tLZXkocHJlKTtcblx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgd3JhcCA/ICcxJyA6ICcwJyk7XG5cdFx0fTtcblxuXHRcdGNvbnN0IGFkZFdyYXBTd2l0Y2ggPSAocHJlOiBIVE1MRWxlbWVudCkgPT4ge1xuXHRcdFx0aWYgKHByZS5xdWVyeVNlbGVjdG9yKCcud3JhcC1zd2l0Y2gtY29udGFpbmVyJykpIHJldHVybjtcblxuXHRcdFx0Y29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0XHRjb250YWluZXIuY2xhc3NOYW1lID0gJ3dyYXAtc3dpdGNoLWNvbnRhaW5lcic7XG5cdFx0XHRjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy8gXHU5RUQ4XHU4QkE0XHU5NjkwXHU4NUNGXG5cblx0XHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcblx0XHRcdGxhYmVsLmNsYXNzTmFtZSA9ICd3cmFwLXN3aXRjaC1sYWJlbCc7XG5cblx0XHRcdGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblx0XHRcdGlucHV0LnR5cGUgPSAnY2hlY2tib3gnO1xuXHRcdFx0aW5wdXQuY2xhc3NOYW1lID0gJ3dyYXAtc3dpdGNoLWlucHV0JztcblxuXHRcdFx0Y29uc3Qgc2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXHRcdFx0c2xpZGVyLmNsYXNzTmFtZSA9ICd3cmFwLXN3aXRjaC1zbGlkZXInO1xuXG5cdFx0XHRjb25zdCB3cmFwID0gcHJlLmdldEF0dHJpYnV0ZSgnZGF0YS13cmFwJykgPT09ICcxJztcblx0XHRcdGlucHV0LmNoZWNrZWQgPSB3cmFwO1xuXHRcdFx0cHJlLnN0eWxlLndoaXRlU3BhY2UgPSB3cmFwID8gJ3ByZS13cmFwJyA6ICdwcmUnO1xuXG5cdFx0XHRpbnB1dC5vbmNoYW5nZSA9IChlKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGNoZWNrZWQgPSBpbnB1dC5jaGVja2VkO1xuXHRcdFx0XHRwcmUuc3R5bGUud2hpdGVTcGFjZSA9IGNoZWNrZWQgPyAncHJlLXdyYXAnIDogJ3ByZSc7XG5cdFx0XHRcdHByZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd3JhcCcsIGNoZWNrZWQgPyAnMScgOiAnMCcpO1xuXHRcdFx0XHRzYXZlQ29kZUJsb2NrV3JhcFN0YXRlKHByZSwgY2hlY2tlZCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRsYWJlbC5hcHBlbmRDaGlsZChpbnB1dCk7XG5cdFx0XHRsYWJlbC5hcHBlbmRDaGlsZChzbGlkZXIpO1xuXHRcdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuXHRcdFx0cHJlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcblx0XHRcdHByZS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG5cdFx0XHQvLyBcdTYwQUNcdTUwNUNcdTY1RjZcdTY2M0VcdTc5M0FcdUZGMENcdTc5RkJcdTVGMDBcdTY1RjZcdTk2OTBcdTg1Q0Zcblx0XHRcdHByZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuXHRcdFx0XHRjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdFx0XHR9KTtcblx0XHRcdHByZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuXHRcdFx0XHRjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHRjb25zdCBwcm9jZXNzQWxsQ29kZUJsb2NrcyA9ICgpID0+IHtcblx0XHRcdGNvbnN0IHByZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUnKTtcblx0XHRcdHByZXMuZm9yRWFjaChwcmUgPT4ge1xuXHRcdFx0XHRpZiAocHJlLmNsYXNzTGlzdC5jb250YWlucygnd3JhcC10b2dnbGUtcHJvY2Vzc2VkJykpIHJldHVybjtcblx0XHRcdFx0cHJlLmNsYXNzTGlzdC5hZGQoJ3dyYXAtdG9nZ2xlLXByb2Nlc3NlZCcpO1xuXHRcdFx0XHRyZXN0b3JlQ29kZUJsb2NrV3JhcFN0YXRlKHByZSBhcyBIVE1MRWxlbWVudCk7XG5cdFx0XHRcdGFkZFdyYXBTd2l0Y2gocHJlIGFzIEhUTUxFbGVtZW50KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHQvLyBcdTUyMURcdTU5Q0JcdTU5MDRcdTc0MDZcblx0XHRzZXRUaW1lb3V0KHByb2Nlc3NBbGxDb2RlQmxvY2tzLCAxMDAwKTtcblx0XHQvLyBcdTk4NzVcdTk3NjJcdTUzRDhcdTUzMTZcdTY1RjZcdTU5MDRcdTc0MDZcdUZGMDhcdTU5ODJcdTUyMDdcdTYzNjJcdTY1ODdcdTY4NjNcdTMwMDFcdTZFREFcdTUyQThcdTUyQTBcdThGN0RcdTdCNDlcdUZGMDlcblx0XHRjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcblx0XHRcdHByb2Nlc3NBbGxDb2RlQmxvY2tzKCk7XG5cdFx0fSk7XG5cdFx0b2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVxufVxuXG5jbGFzcyBTYW1wbGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcblx0Y29uc3RydWN0b3IoYXBwOiBBcHApIHtcblx0XHRzdXBlcihhcHApO1xuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHtjb250ZW50RWx9ID0gdGhpcztcblx0XHRjb250ZW50RWwuc2V0VGV4dCgnV29haCEnKTtcblx0fVxuXG5cdG9uQ2xvc2UoKSB7XG5cdFx0Y29uc3Qge2NvbnRlbnRFbH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG5cbmNsYXNzIFNhbXBsZVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBNeVBsdWdpbjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNeVBsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnU2V0dGluZyAjMScpXG5cdFx0XHQuc2V0RGVzYygnSXRcXCdzIGEgc2VjcmV0Jylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHlvdXIgc2VjcmV0Jylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZylcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZyA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBbUc7QUFFbkcsc0JBQXNCO0FBUXRCLElBQU0sbUJBQXFDO0FBQUEsRUFDMUMsV0FBVztBQUNaO0FBRUEsSUFBcUIsV0FBckIsY0FBc0MsdUJBQU87QUFBQSxFQUc1QyxNQUFNLFNBQVM7QUFDZCxVQUFNLEtBQUssYUFBYTtBQUd4QixVQUFNLGVBQWUsS0FBSyxjQUFjLFFBQVEsaUJBQWlCLENBQUMsUUFBb0I7QUFFckYsVUFBSSx1QkFBTyxtQkFBbUI7QUFBQSxJQUMvQixDQUFDO0FBRUQsaUJBQWEsU0FBUyx3QkFBd0I7QUFHOUMsVUFBTSxrQkFBa0IsS0FBSyxpQkFBaUI7QUFDOUMsb0JBQWdCLFFBQVEsaUJBQWlCO0FBR3pDLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ2YsWUFBSSxZQUFZLEtBQUssR0FBRyxFQUFFLEtBQUs7QUFBQSxNQUNoQztBQUFBLElBQ0QsQ0FBQztBQUVELFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04s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
