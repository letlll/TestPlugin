#!/bin/sh
#
# 表格UUID验证 Git pre-commit 钩子
# 将此文件放入 .git/hooks/ 目录并确保其可执行 (chmod +x pre-commit)

# 获取暂存区中的Markdown文件
staged_md_files=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.md$')

if [ -z "$staged_md_files" ]; then
    # 没有暂存的Markdown文件，跳过检查
    exit 0
fi

echo "检查表格UUID唯一性..."

# 临时文件用于存储找到的UUID
temp_uuid_file=$(mktemp)

# 用于存储重复的UUID
duplicate_uuids=""

# 检查每个暂存的Markdown文件
for file in $staged_md_files; do
    # 提取文件中的表格UUID
    uuids=$(grep -o -E '<!--\s*tbl-id:\s*([0-9a-f-]+)\s*-->' "$file" | sed -E 's/.*tbl-id:\s*([0-9a-f-]+).*/\1/')
    
    if [ -z "$uuids" ]; then
        continue
    fi
    
    # 检查每个UUID
    for uuid in $uuids; do
        # 检查UUID是否已经在其他文件中出现过
        if grep -q "^$uuid:" "$temp_uuid_file"; then
            # UUID已存在，添加到重复列表
            existing_file=$(grep "^$uuid:" "$temp_uuid_file" | cut -d':' -f2)
            duplicate_uuids="$duplicate_uuids\n  - UUID: $uuid\n    在文件: $existing_file 和 $file"
        else
            # 记录UUID和文件路径
            echo "$uuid:$file" >> "$temp_uuid_file"
        fi
    done
done

# 清理临时文件
rm "$temp_uuid_file"

# 如果有重复的UUID，阻止提交
if [ -n "$duplicate_uuids" ]; then
    echo "错误: 发现重复的表格UUID:"
    echo -e "$duplicate_uuids"
    echo "\n请使用表格插件的'验证表格UUID唯一性'命令修复重复的UUID，然后再提交。"
    echo "或者运行: obsidian-cli verify-table-ids --fix"
    exit 1
fi

echo "表格UUID检查通过，没有发现重复。"
exit 0 