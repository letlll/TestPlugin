/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  ObsidianSpreadsheet: () => ObsidianSpreadsheet,
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian10 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");

// src/tableResizeHandler.ts
var TableResizeHandler = class {
  constructor(plugin) {
    this.activeTable = null;
    this.resizeHandles = [];
    this.isDragging = false;
    this.currentResizeTarget = null;
    this.startPosition = 0;
    this.startSize = 0;
    /**
     * 处理鼠标移动事件
     */
    this.handleMouseMove = (e) => {
      if (!this.isDragging || !this.currentResizeTarget || !this.activeTable)
        return;
      e.preventDefault();
      const { type, index } = this.currentResizeTarget;
      const currentPosition = type === "col" ? e.clientX : e.clientY;
      const delta = currentPosition - this.startPosition;
      const newSize = Math.max(20, this.startSize + delta);
      if (type === "col") {
        const cells = this.activeTable.querySelectorAll(`td:nth-child(${index + 1}), th:nth-child(${index + 1})`);
        cells.forEach((cell) => {
          cell.style.width = `${newSize}px`;
        });
      } else {
        const row = this.activeTable.querySelector(`tr:nth-child(${index + 1})`);
        if (row) {
          row.style.height = `${newSize}px`;
        }
      }
    };
    /**
     * 处理鼠标抬起事件
     */
    this.handleMouseUp = async (e) => {
      if (!this.isDragging || !this.currentResizeTarget || !this.activeTable)
        return;
      e.preventDefault();
      const { type, index, element } = this.currentResizeTarget;
      element.classList.remove("dragging");
      await this.saveSizeData();
      this.isDragging = false;
      this.currentResizeTarget = null;
      document.removeEventListener("mousemove", this.handleMouseMove);
      document.removeEventListener("mouseup", this.handleMouseUp);
    };
    this.plugin = plugin;
    console.log("TableResizeHandler initialized");
  }
  /**
   * 设置活动表格
   * @param table 表格元素
   */
  setActiveTable(table) {
    this.clearResizeHandles();
    this.activeTable = table;
    if (table) {
      this.createResizeHandles();
    }
  }
  /**
   * 清除所有调整手柄
   */
  clearResizeHandles() {
    this.resizeHandles.forEach((handle) => {
      handle.remove();
    });
    this.resizeHandles = [];
  }
  /**
   * 创建调整手柄
   */
  createResizeHandles() {
    if (!this.activeTable)
      return;
    const tableId = this.plugin.tableIdManager.getTableIdentifier(this.activeTable);
    if (!tableId) {
      console.warn("\u65E0\u6CD5\u83B7\u53D6\u8868\u683CID\uFF0C\u4E0D\u521B\u5EFA\u8C03\u6574\u624B\u67C4");
      return;
    }
    this.createColumnResizeHandles();
    this.createRowResizeHandles();
  }
  /**
   * 创建列调整手柄
   */
  createColumnResizeHandles() {
    if (!this.activeTable)
      return;
    const headerRow = this.activeTable.querySelector("tr");
    if (!headerRow)
      return;
    const cells = headerRow.querySelectorAll("th, td");
    const activeTable = this.activeTable;
    const tableRect = activeTable.getBoundingClientRect();
    cells.forEach((cell, index) => {
      if (index < cells.length - 1) {
        const handle = document.createElement("div");
        handle.className = "table-column-resize-handle";
        handle.style.position = "absolute";
        handle.style.top = "0";
        handle.style.width = "5px";
        handle.style.height = `${activeTable.offsetHeight}px`;
        handle.style.cursor = "col-resize";
        handle.style.zIndex = "100";
        const cellRect = cell.getBoundingClientRect();
        const right = cellRect.right - tableRect.left;
        handle.style.left = `${right - 2}px`;
        this.setupResizeEvents(handle, "col", index);
        const parentElement = activeTable.parentElement;
        if (parentElement) {
          parentElement.appendChild(handle);
          this.resizeHandles.push(handle);
        }
      }
    });
  }
  /**
   * 创建行调整手柄
   */
  createRowResizeHandles() {
    if (!this.activeTable)
      return;
    const rows = this.activeTable.querySelectorAll("tr");
    const activeTable = this.activeTable;
    const tableRect = activeTable.getBoundingClientRect();
    rows.forEach((row, index) => {
      if (index < rows.length - 1) {
        const handle = document.createElement("div");
        handle.className = "table-row-resize-handle";
        handle.style.position = "absolute";
        handle.style.left = "0";
        handle.style.height = "5px";
        handle.style.width = `${activeTable.offsetWidth}px`;
        handle.style.cursor = "row-resize";
        handle.style.zIndex = "100";
        const rowRect = row.getBoundingClientRect();
        const bottom = rowRect.bottom - tableRect.top;
        handle.style.top = `${bottom - 2}px`;
        this.setupResizeEvents(handle, "row", index);
        const parentElement = activeTable.parentElement;
        if (parentElement) {
          parentElement.appendChild(handle);
          this.resizeHandles.push(handle);
        }
      }
    });
  }
  /**
   * 设置调整事件
   * @param handle 调整手柄元素
   * @param type 调整类型 ('col' | 'row')
   * @param index 索引
   */
  setupResizeEvents(handle, type, index) {
    handle.addEventListener("mousedown", (e) => {
      e.preventDefault();
      e.stopPropagation();
      this.isDragging = true;
      this.currentResizeTarget = { element: handle, type, index };
      this.startPosition = type === "col" ? e.clientX : e.clientY;
      if (this.activeTable) {
        if (type === "col") {
          const cell = this.activeTable.querySelector(`tr:first-child td:nth-child(${index + 1}), tr:first-child th:nth-child(${index + 1})`);
          this.startSize = cell ? cell.getBoundingClientRect().width : 0;
        } else {
          const row = this.activeTable.querySelector(`tr:nth-child(${index + 1})`);
          this.startSize = row ? row.getBoundingClientRect().height : 0;
        }
      }
      document.addEventListener("mousemove", this.handleMouseMove);
      document.addEventListener("mouseup", this.handleMouseUp);
      handle.classList.add("dragging");
    });
  }
  /**
   * 保存尺寸数据
   */
  async saveSizeData() {
    if (!this.activeTable)
      return;
    try {
      const tableId = this.plugin.tableIdManager.getTableIdentifier(this.activeTable);
      if (!tableId) {
        console.warn("\u65E0\u6CD5\u83B7\u53D6\u8868\u683CID\uFF0C\u4E0D\u4FDD\u5B58\u5C3A\u5BF8\u6570\u636E");
        return;
      }
      const activeFile = this.plugin.app.workspace.getActiveFile();
      if (!activeFile) {
        console.warn("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6");
        return;
      }
      const allDocTables = document.querySelectorAll("table");
      const tableIndex = Array.from(allDocTables).indexOf(this.activeTable);
      if (tableIndex === -1) {
        console.warn("\u65E0\u6CD5\u786E\u5B9A\u8868\u683C\u7D22\u5F15");
        return;
      }
      const existingStyle = this.plugin.tableStateManager.getTableStyle(tableId);
      const rowHeights = [];
      const rows = this.activeTable.querySelectorAll("tr");
      rows.forEach((row) => {
        rowHeights.push(row.style.height || "auto");
      });
      const colWidths = [];
      const firstRow = this.activeTable.querySelector("tr");
      if (firstRow) {
        const cells = firstRow.querySelectorAll("th, td");
        cells.forEach((cell) => {
          colWidths.push(cell.style.width || "auto");
        });
      }
      const styling = {
        rowHeights,
        colWidths,
        alignment: (existingStyle == null ? void 0 : existingStyle.alignment) || Array(colWidths.length).fill("left"),
        cellStyles: (existingStyle == null ? void 0 : existingStyle.cellStyles) || []
      };
      await this.plugin.tableStateManager.saveTableStyle(tableId, styling, {
        path: activeFile.path,
        index: tableIndex
      });
      console.log(`\u8868\u683C\u5C3A\u5BF8\u6570\u636E\u5DF2\u4FDD\u5B58: ${tableId}`);
    } catch (error) {
      console.error("\u4FDD\u5B58\u8868\u683C\u5C3A\u5BF8\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 应用保存的尺寸数据
   * @param table 表格元素
   */
  applySavedSizes(table) {
    if (!table)
      return;
    try {
      const tableId = this.plugin.tableIdManager.getTableIdentifier(table);
      if (!tableId) {
        console.warn("\u65E0\u6CD5\u83B7\u53D6\u8868\u683CID\uFF0C\u4E0D\u5E94\u7528\u5C3A\u5BF8\u6570\u636E");
        return;
      }
      const style = this.plugin.tableStateManager.getTableStyle(tableId);
      if (!style) {
        console.warn(`\u672A\u627E\u5230\u8868\u683C ${tableId} \u7684\u6837\u5F0F\u6570\u636E`);
        return;
      }
      const rows = table.querySelectorAll("tr");
      rows.forEach((row, index) => {
        if (style.rowHeights && style.rowHeights[index] && style.rowHeights[index] !== "auto") {
          row.style.height = style.rowHeights[index];
        }
      });
      const firstRow = table.querySelector("tr");
      if (firstRow) {
        const cells = firstRow.querySelectorAll("th, td");
        cells.forEach((cell, index) => {
          if (style.colWidths && style.colWidths[index] && style.colWidths[index] !== "auto") {
            const colCells = table.querySelectorAll(`td:nth-child(${index + 1}), th:nth-child(${index + 1})`);
            colCells.forEach((colCell) => {
              colCell.style.width = style.colWidths[index];
            });
          }
        });
      }
      console.log(`\u5DF2\u5E94\u7528\u8868\u683C ${tableId} \u7684\u5C3A\u5BF8\u6570\u636E`);
    } catch (error) {
      console.error("\u5E94\u7528\u8868\u683C\u5C3A\u5BF8\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
};
function addTableResizeStyles() {
  if (document.getElementById("table-resize-styles"))
    return;
  const styleEl = document.createElement("style");
  styleEl.id = "table-resize-styles";
  styleEl.textContent = `
        .table-column-resize-handle {
            background-color: var(--interactive-accent);
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        
        .table-row-resize-handle {
            background-color: var(--interactive-accent);
            opacity: 0;
            transition: opacity 0.2s ease;
        }
        
        .table-column-resize-handle:hover,
        .table-row-resize-handle:hover,
        .table-column-resize-handle.dragging,
        .table-row-resize-handle.dragging {
            opacity: 0.6;
        }
    `;
  document.head.appendChild(styleEl);
}

// src/settings.ts
var SheetSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Advanced Table XT \u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u539F\u751F\u8868\u683C\u540E\u5904\u7406").setDesc("\u542F\u7528\u6B64\u8BBE\u7F6E\u4EE5\u4F7F\u7528Obsidian Sheets\u7684\u6E32\u67D3\u5668").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.nativeProcessing).onChange(async (value) => {
        var _a, _b;
        this.plugin.settings.nativeProcessing = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.activeLeaf) == null ? void 0 : _a.rebuildView();
        (_b = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _b.previewMode.rerender(true);
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u5728\u5355\u5143\u683C\u4E2D\u4F7F\u7528\u6BB5\u843D").setDesc("\u542F\u7528\u6B64\u8BBE\u7F6E\u4EE5\u5728\u8868\u683C\u5355\u5143\u683C\u4E2D\u4F7F\u7528\u6BB5\u843D").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.paragraphs).onChange(async (value) => {
        var _a, _b;
        this.plugin.settings.paragraphs = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.activeLeaf) == null ? void 0 : _a.rebuildView();
        (_b = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _b.previewMode.rerender(true);
      })
    );
    containerEl.createEl("h3", { text: "\u5DE5\u5177\u680F\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u8868\u683C\u5DE5\u5177\u680F").setDesc("\u542F\u7528\u6216\u7981\u7528\u8868\u683C\u5DE5\u5177\u680F\u529F\u80FD").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.toolbarEnabled).onChange(async (value) => {
        this.plugin.settings.toolbarEnabled = value;
        await this.plugin.saveSettings();
        if (value) {
          this.plugin.createToolbar();
        } else {
          document.querySelectorAll(".advanced-table-toolbar-container").forEach((container) => {
            container.remove();
          });
        }
      })
    );
    containerEl.createEl("h3", { text: "\u7F16\u8F91\u6A21\u5F0F\u64CD\u4F5C" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u7F16\u8F91\u6A21\u5F0F\u4E0B\u7684\u8868\u683C\u64CD\u4F5C").setDesc("\u5141\u8BB8\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u76F4\u63A5\u4FEE\u6539 Markdown \u6E90\u7801\u4E2D\u7684\u8868\u683C").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableEditModeOperations).onChange(async (value) => {
        this.plugin.settings.enableEditModeOperations = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "\u8868\u683C\u5927\u5C0F\u8C03\u6574" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u8868\u683C\u5927\u5C0F\u8C03\u6574").setDesc("\u5141\u8BB8\u901A\u8FC7\u62D6\u62FD\u8C03\u6574\u8868\u683C\u7684\u5217\u5BBD\u548C\u884C\u9AD8").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableTableResize).onChange(async (value) => {
        this.plugin.settings.enableTableResize = value;
        await this.plugin.saveSettings();
        if (!value) {
          this.plugin.tableResizeHandler.setActiveTable(null);
          document.querySelectorAll(".table-column-resize-handle, .table-row-resize-handle").forEach((handle) => {
            handle.remove();
          });
        } else {
          const styleEl = document.getElementById("table-resize-styles");
          if (!styleEl) {
            addTableResizeStyles();
          }
        }
      })
    );
    containerEl.createEl("h3", { text: "\u5355\u5143\u683C\u5408\u5E76" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u5355\u5143\u683C\u5408\u5E76").setDesc("\u542F\u7528\u4F7F\u7528 < \u548C ^ \u6807\u8BB0\u8FDB\u884C\u5355\u5143\u683C\u5408\u5E76\u7684\u529F\u80FD").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableCellMerging).onChange(async (value) => {
        var _a;
        this.plugin.settings.enableCellMerging = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.previewMode.rerender(true);
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u591A\u7EA7\u5355\u5143\u683C\u5408\u5E76").setDesc("\u652F\u6301\u4F7F\u7528\u591A\u4E2A\u8FDE\u7EED\u7684 < \u6216 ^ \u6807\u8BB0\u8FDB\u884C\u591A\u7EA7\u5355\u5143\u683C\u5408\u5E76\uFF0C\u5982 << \u6216 ^^").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableMultiLevelMerge).onChange(async (value) => {
        var _a;
        this.plugin.settings.enableMultiLevelMerge = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.previewMode.rerender(true);
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u5408\u5E76\u975E\u7A7A\u5355\u5143\u683C\u65F6\u786E\u8BA4").setDesc("\u5F53\u5408\u5E76\u5305\u542B\u5185\u5BB9\u7684\u5355\u5143\u683C\u65F6\u663E\u793A\u786E\u8BA4\u5BF9\u8BDD\u6846").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.confirmMergeNonEmpty).onChange(async (value) => {
        this.plugin.settings.confirmMergeNonEmpty = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u81EA\u52A8\u5C45\u4E2D\u5408\u5E76\u5355\u5143\u683C").setDesc("\u81EA\u52A8\u5C06\u5408\u5E76\u540E\u7684\u5355\u5143\u683C\u5185\u5BB9\u5C45\u4E2D\u663E\u793A").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoCenterMergedCells).onChange(async (value) => {
        var _a;
        this.plugin.settings.autoCenterMergedCells = value;
        await this.plugin.saveSettings();
        (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.previewMode.rerender(true);
      })
    );
    containerEl.createEl("h3", { text: "\u8868\u683CID\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u542F\u7528\u8868\u683CID").setDesc("\u81EA\u52A8\u4E3A\u8868\u683C\u6DFB\u52A0ID\u4F5C\u4E3AHTML\u6CE8\u91CA").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableTableIds).onChange(async (value) => {
        this.plugin.settings.enableTableIds = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u8868\u683CID\u524D\u7F00").setDesc("\u751F\u6210\u7684\u8868\u683CID\u524D\u7F00").addText(
      (text) => text.setValue(this.plugin.settings.idPrefix).onChange(async (value) => {
        this.plugin.settings.idPrefix = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/markdownTableDetector.ts
var import_obsidian2 = require("obsidian");
var ConfirmModal = class extends import_obsidian2.Modal {
  constructor(app, message, onClose) {
    super(app);
    this.result = false;
    this.message = message;
    this.onClose = onClose;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "\u786E\u8BA4\u64CD\u4F5C" });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    buttonContainer.createEl("button", { text: "\u53D6\u6D88" }).addEventListener("click", () => {
      this.result = false;
      this.close();
    });
    buttonContainer.createEl("button", { text: "\u786E\u8BA4", cls: "mod-cta" }).addEventListener("click", () => {
      this.result = true;
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.onClose(this.result);
  }
};
var MarkdownTableDetector = class {
  constructor(plugin) {
    this.plugin = plugin;
    console.log("MarkdownTableDetector initialized");
  }
  /**
   * 显示确认对话框
   * @param message 确认消息
   * @returns 用户是否确认
   */
  async showConfirmDialog(message) {
    return new Promise((resolve) => {
      const modal = new ConfirmModal(this.plugin.app, message, (result) => {
        resolve(result);
      });
      modal.open();
    });
  }
  /**
   * 检查是否为HTML格式的表格（而非Markdown生成的表格）
   * @param table 表格HTML元素
   * @returns 是否为HTML格式的表格
   */
  isHtmlFormattedTable(table) {
    try {
      if (table.hasAttribute("border") || table.hasAttribute("cellpadding") || table.hasAttribute("cellspacing") || table.hasAttribute("width") || table.hasAttribute("height") || table.hasAttribute("bgcolor")) {
        return true;
      }
      const style = table.getAttribute("style");
      if (style && (style.includes("border-collapse") || style.includes("text-align") || style.includes("font-family") || style.includes("background-color"))) {
        return true;
      }
      const cells = table.querySelectorAll("td, th");
      for (const cell of Array.from(cells).slice(0, 10)) {
        const html = cell.innerHTML || "";
        if (html.includes("<") && html.includes(">") && !html.match(/^<(em|strong|s|code|a|span)[^>]*>.*<\/(em|strong|s|code|a|span)>$/)) {
          return true;
        }
      }
      const rows = table.querySelectorAll("tr");
      if (rows.length > 1) {
        const secondRow = rows[1];
        const separatorCells = secondRow.querySelectorAll("td, th");
        let isSeparatorRow = true;
        for (const cell of Array.from(separatorCells)) {
          const text = cell.textContent || "";
          if (!text.match(/^:?-+:?$/)) {
            isSeparatorRow = false;
            break;
          }
        }
        if (!isSeparatorRow) {
          return true;
        }
      }
      return false;
    } catch (error) {
      console.error("\u68C0\u6D4BHTML\u8868\u683C\u65F6\u51FA\u9519:", error);
      return false;
    }
  }
  /**
   * 设置表格行列索引
   * @param table 表格HTML元素
   */
  setupTableIndices(table) {
    try {
      const rows = table.querySelectorAll("tr");
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        const cells = row.querySelectorAll("td, th");
        for (let colIndex = 0; colIndex < cells.length; colIndex++) {
          const cell = cells[colIndex];
          cell.dataset.rowIndex = rowIndex.toString();
          cell.dataset.colIndex = colIndex.toString();
          cell.setAttribute("row-index", rowIndex.toString());
          cell.setAttribute("col-index", colIndex.toString());
          cell.classList.add("advanced-table-cell");
          if (cell.tagName.toLowerCase() === "th") {
            cell.classList.add("advanced-table-header");
          }
          if (!cell.innerHTML.trim()) {
            cell.innerHTML = "&nbsp;";
          }
        }
      }
    } catch (error) {
      console.error("\u8BBE\u7F6E\u8868\u683C\u7D22\u5F15\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 解析合并标记，支持多级合并
   * @param content 单元格内容
   * @returns 合并类型和级别
   */
  parseMergeMarker(content) {
    const cleanContent = content.trim().replace(/\\/g, "");
    const leftMatch = cleanContent.match(/^(<+)$/);
    if (leftMatch) {
      return {
        type: "left",
        level: leftMatch[1].length
        // 计算<的数量
      };
    }
    const upMatch = cleanContent.match(/^(\^+)$/);
    if (upMatch) {
      return {
        type: "up",
        level: upMatch[1].length
        // 计算^的数量
      };
    }
    return { type: null, level: 0 };
  }
  /**
   * 检查单元格内容是否为合并标记
   * @param cell 单元格元素
   * @param marker 标记符号类型 ('^' 或 '<')
   * @returns 是否为指定类型的合并标记
   */
  isMergeMarker(cell, marker) {
    var _a;
    const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
    const result = this.parseMergeMarker(content);
    return result.type === (marker === "^" ? "up" : "left") && result.level > 0;
  }
  /**
   * 检查单元格是否非空且有有效内容
   * @param cell 单元格元素
   * @returns 是否有有效内容
   */
  hasMeaningfulContent(cell) {
    var _a;
    const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
    const result = this.parseMergeMarker(content);
    return content !== "" && content !== "&nbsp;" && result.type === null;
  }
  /**
   * 解析表格的合并标记
   * @param table 表格HTML元素
   */
  async parseMergeCellMarkers(table) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!this.plugin.settings.enableCellMerging)
      return;
    try {
      const rows = table.querySelectorAll("tr");
      const mergeUp = [];
      const mergeLeft = [];
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        const cells = row.querySelectorAll("td, th");
        for (let colIndex = 0; colIndex < cells.length; colIndex++) {
          const cell = cells[colIndex];
          const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
          const upMatch = content.match(/^(\^+)$/);
          if (upMatch) {
            const count = upMatch[1].length;
            console.log(`\u53D1\u73B0\u5411\u4E0A\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u6807\u8BB0\u6570\u91CF=${count}, \u5185\u5BB9="${content}"`);
            mergeUp.push({ cell, count });
            continue;
          }
          const leftMatch = content.match(/^(<+)$/);
          if (leftMatch) {
            const count = leftMatch[1].length;
            console.log(`\u53D1\u73B0\u5411\u5DE6\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u6807\u8BB0\u6570\u91CF=${count}, \u5185\u5BB9="${content}"`);
            mergeLeft.push({ cell, count });
            continue;
          }
          if (content === "\\^" || content === " ^ " || content === " \\^ ") {
            console.log(`\u53D1\u73B0\u8F6C\u4E49\u5411\u4E0A\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u5185\u5BB9="${content}"`);
            mergeUp.push({ cell, count: 1 });
          } else if (content === "\\<" || content === " < " || content === " \\< ") {
            console.log(`\u53D1\u73B0\u8F6C\u4E49\u5411\u5DE6\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u5185\u5BB9="${content}"`);
            mergeLeft.push({ cell, count: 1 });
          }
        }
      }
      for (const { cell, count } of mergeUp) {
        const rowIndex = parseInt(cell.getAttribute("row-index") || cell.dataset.rowIndex || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || cell.dataset.colIndex || "0");
        console.log(`\u5904\u7406\u5411\u4E0A\u5408\u5E76: \u884C=${rowIndex}, \u5217=${colIndex}, \u5408\u5E76\u6570\u91CF=${count}`);
        if (rowIndex >= count) {
          const targetRowIndex = rowIndex - count;
          const targetRow = rows[targetRowIndex];
          if (targetRow) {
            const targetCells = targetRow.querySelectorAll("td, th");
            if (colIndex < targetCells.length) {
              const targetCell = targetCells[colIndex];
              if (this.hasMeaningfulContent(targetCell)) {
                const cellsToMerge = [];
                if (this.hasMeaningfulContent(cell)) {
                  cellsToMerge.push({
                    rowIndex,
                    colIndex,
                    content: ((_b = cell.textContent) == null ? void 0 : _b.trim()) || ""
                  });
                }
                for (let i = 1; i < count; i++) {
                  const midRowIndex = rowIndex - i;
                  if (midRowIndex > targetRowIndex) {
                    const midRow = rows[midRowIndex];
                    const midCells = midRow.querySelectorAll("td, th");
                    if (colIndex < midCells.length) {
                      const midCell = midCells[colIndex];
                      if (this.hasMeaningfulContent(midCell)) {
                        cellsToMerge.push({
                          rowIndex: midRowIndex,
                          colIndex,
                          content: ((_c = midCell.textContent) == null ? void 0 : _c.trim()) || ""
                        });
                      }
                    }
                  }
                }
                if (this.plugin.settings.confirmMergeNonEmpty && cellsToMerge.length > 0) {
                  const cellContents = cellsToMerge.map(
                    (c) => `[${c.rowIndex + 1},${c.colIndex + 1}]: "${c.content}"`
                  ).join("\n");
                  const confirmMerge = await this.showConfirmDialog(
                    `\u4EE5\u4E0B\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9\u5C06\u88AB\u8986\u76D6:
${cellContents}

\u786E\u5B9A\u8981\u5408\u5E76\u8FD9\u4E9B\u5355\u5143\u683C\u5417\uFF1F`
                  );
                  if (!confirmMerge) {
                    console.log("\u7528\u6237\u53D6\u6D88\u4E86\u5355\u5143\u683C\u5408\u5E76");
                    continue;
                  }
                }
                let rowSpan = parseInt(targetCell.getAttribute("rowspan") || "1");
                rowSpan = rowSpan + count;
                console.log(`\u8BBE\u7F6Erowspan: \u76EE\u6807\u5355\u5143\u683C(${targetRowIndex},${colIndex}), rowspan=${rowSpan}`);
                targetCell.setAttribute("rowspan", rowSpan.toString());
                targetCell.rowSpan = rowSpan;
                targetCell.classList.add("obs-merged-cell");
                cell.style.display = "none";
              } else {
                console.warn("\u5411\u4E0A\u5408\u5E76\u5931\u8D25: \u76EE\u6807\u5355\u5143\u683C\u6CA1\u6709\u6709\u6548\u5185\u5BB9", targetCell);
              }
            }
          }
        }
      }
      for (const { cell, count } of mergeLeft) {
        const rowIndex = parseInt(cell.getAttribute("row-index") || cell.dataset.rowIndex || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || cell.dataset.colIndex || "0");
        console.log(`\u5904\u7406\u5411\u5DE6\u5408\u5E76: \u884C=${rowIndex}, \u5217=${colIndex}, \u5408\u5E76\u6570\u91CF=${count}`);
        if (colIndex >= count) {
          const targetColIndex = colIndex - count;
          const targetCell = (_d = rows[rowIndex]) == null ? void 0 : _d.querySelectorAll("td, th")[targetColIndex];
          if (targetCell) {
            if (this.hasMeaningfulContent(targetCell)) {
              const cellsToMerge = [];
              if (this.hasMeaningfulContent(cell)) {
                cellsToMerge.push({
                  rowIndex,
                  colIndex,
                  content: ((_e = cell.textContent) == null ? void 0 : _e.trim()) || ""
                });
              }
              for (let i = 1; i < count; i++) {
                const midColIndex = colIndex - i;
                if (midColIndex > targetColIndex) {
                  const midCell = (_f = rows[rowIndex]) == null ? void 0 : _f.querySelectorAll("td, th")[midColIndex];
                  if (midCell && this.hasMeaningfulContent(midCell)) {
                    cellsToMerge.push({
                      rowIndex,
                      colIndex: midColIndex,
                      content: ((_g = midCell.textContent) == null ? void 0 : _g.trim()) || ""
                    });
                  }
                }
              }
              if (this.plugin.settings.confirmMergeNonEmpty && cellsToMerge.length > 0) {
                const cellContents = cellsToMerge.map(
                  (c) => `[${c.rowIndex + 1},${c.colIndex + 1}]: "${c.content}"`
                ).join("\n");
                const confirmMerge = await this.showConfirmDialog(
                  `\u4EE5\u4E0B\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9\u5C06\u88AB\u8986\u76D6:
${cellContents}

\u786E\u5B9A\u8981\u5408\u5E76\u8FD9\u4E9B\u5355\u5143\u683C\u5417\uFF1F`
                );
                if (!confirmMerge) {
                  console.log("\u7528\u6237\u53D6\u6D88\u4E86\u5355\u5143\u683C\u5408\u5E76");
                  continue;
                }
              }
              let colSpan = parseInt(targetCell.getAttribute("colspan") || "1");
              colSpan = colSpan + count;
              console.log(`\u8BBE\u7F6Ecolspan: \u76EE\u6807\u5355\u5143\u683C(${rowIndex},${targetColIndex}), colspan=${colSpan}`);
              targetCell.setAttribute("colspan", colSpan.toString());
              targetCell.colSpan = colSpan;
              targetCell.classList.add("obs-merged-cell");
              cell.style.display = "none";
            } else {
              console.warn("\u5411\u5DE6\u5408\u5E76\u5931\u8D25: \u76EE\u6807\u5355\u5143\u683C\u6CA1\u6709\u6709\u6548\u5185\u5BB9", targetCell);
            }
          }
        }
      }
      if (this.plugin.settings.autoCenterMergedCells) {
        const mergedCells = table.querySelectorAll("[rowspan], [colspan]");
        mergedCells.forEach((cell) => {
          const htmlCell = cell;
          if (parseInt(htmlCell.getAttribute("rowspan") || "1") > 1 || parseInt(htmlCell.getAttribute("colspan") || "1") > 1) {
            htmlCell.style.textAlign = "center";
            htmlCell.style.verticalAlign = "middle";
            htmlCell.classList.add("obs-merged-cell");
          }
        });
      }
    } catch (error) {
      console.error("\u89E3\u6790\u5355\u5143\u683C\u5408\u5E76\u6807\u8BB0\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 应用表格合并标记到Markdown
   * @param table 表格HTML元素
   */
  applyMergeCellsMarkers(table) {
    var _a;
    try {
      if (table.dataset.tableMergeProcessed === "true") {
        return;
      }
      const rows = table.querySelectorAll("tr");
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const row = rows[rowIndex];
        const cells = row.querySelectorAll("td, th");
        for (let colIndex = 0; colIndex < cells.length; colIndex++) {
          const cell = cells[colIndex];
          const cellContent = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
          const mergeInfo = this.parseMergeMarker(cellContent);
          if (mergeInfo.type === "left" && colIndex > 0) {
            const mergeCount = mergeInfo.level;
            console.log(`\u5E94\u7528\u5411\u5DE6\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u6807\u8BB0\u6570\u91CF=${mergeCount}, \u5185\u5BB9="${cellContent}"`);
            const targetColIndex = colIndex - mergeCount;
            if (targetColIndex >= 0) {
              const leftCell = cells[targetColIndex];
              const colSpan2 = mergeCount + 1;
              console.log(`\u8BBE\u7F6Ecolspan: \u76EE\u6807\u5355\u5143\u683C(${rowIndex},${targetColIndex}), colspan=${colSpan2}`);
              leftCell.colSpan = colSpan2;
              leftCell.setAttribute("colspan", colSpan2.toString());
              cell.style.display = "none";
              if (this.plugin.settings.autoCenterMergedCells) {
                leftCell.style.textAlign = "center";
                leftCell.style.verticalAlign = "middle";
              }
              leftCell.classList.add("obs-merged-cell");
            }
            continue;
          }
          if (mergeInfo.type === "up" && rowIndex > 0) {
            const mergeCount = mergeInfo.level;
            console.log(`\u5E94\u7528\u5411\u4E0A\u5408\u5E76\u6807\u8BB0: \u884C=${rowIndex}, \u5217=${colIndex}, \u6807\u8BB0\u6570\u91CF=${mergeCount}, \u5185\u5BB9="${cellContent}"`);
            const targetRowIndex = rowIndex - mergeCount;
            if (targetRowIndex >= 0) {
              const aboveRow = rows[targetRowIndex];
              const aboveCells = aboveRow.querySelectorAll("td, th");
              if (colIndex < aboveCells.length) {
                const aboveCell = aboveCells[colIndex];
                const rowSpan2 = mergeCount + 1;
                console.log(`\u8BBE\u7F6Erowspan: \u76EE\u6807\u5355\u5143\u683C(${targetRowIndex},${colIndex}), rowspan=${rowSpan2}`);
                aboveCell.rowSpan = rowSpan2;
                aboveCell.setAttribute("rowspan", rowSpan2.toString());
                cell.style.display = "none";
                if (this.plugin.settings.autoCenterMergedCells) {
                  aboveCell.style.textAlign = "center";
                  aboveCell.style.verticalAlign = "middle";
                }
                aboveCell.classList.add("obs-merged-cell");
              }
            }
            continue;
          }
          const rowSpan = parseInt(cell.getAttribute("rowspan") || "1");
          const colSpan = parseInt(cell.getAttribute("colspan") || "1");
          if (rowSpan > 1) {
            for (let i = 1; i < rowSpan; i++) {
              if (rowIndex + i < rows.length) {
                const targetRow = rows[rowIndex + i];
                const targetCells = targetRow.querySelectorAll("td, th");
                if (colIndex < targetCells.length) {
                  const targetCell = targetCells[colIndex];
                  const markerText = "^".repeat(i);
                  console.log(`\u6DFB\u52A0\u5411\u4E0A\u5408\u5E76\u6807\u8BB0: \u4F4D\u7F6E(${rowIndex + i},${colIndex}), \u6807\u8BB0="${markerText}"`);
                  targetCell.textContent = markerText;
                  targetCell.classList.add("merge-marker");
                }
              }
            }
          }
          if (colSpan > 1) {
            for (let i = 1; i < colSpan; i++) {
              if (colIndex + i < cells.length) {
                const targetCell = cells[colIndex + i];
                const markerText = "<".repeat(i);
                console.log(`\u6DFB\u52A0\u5411\u5DE6\u5408\u5E76\u6807\u8BB0: \u4F4D\u7F6E(${rowIndex},${colIndex + i}), \u6807\u8BB0="${markerText}"`);
                targetCell.textContent = markerText;
                targetCell.classList.add("merge-marker");
              }
            }
          }
        }
      }
      table.dataset.tableMergeProcessed = "true";
      console.log(`\u8868\u683C\u5904\u7406\u5B8C\u6210\uFF0C\u5DF2\u6DFB\u52A0\u5408\u5E76\u6807\u8BB0`);
    } catch (error) {
      console.error("\u5E94\u7528\u5408\u5E76\u5355\u5143\u683C\u6807\u8BB0\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 处理多选单元格合并
   * @param table 表格元素
   * @param selectedCells 选中的单元格数组
   * @returns 是否成功合并
   */
  async mergeSelectedCells(table, selectedCells) {
    var _a;
    if (!selectedCells || selectedCells.length < 2) {
      new import_obsidian2.Notice("\u8BF7\u9009\u62E9\u81F3\u5C112\u4E2A\u5355\u5143\u683C\u8FDB\u884C\u5408\u5E76");
      return false;
    }
    try {
      let minRow = Number.MAX_SAFE_INTEGER;
      let maxRow = 0;
      let minCol = Number.MAX_SAFE_INTEGER;
      let maxCol = 0;
      for (const cell of selectedCells) {
        const rowIndex = parseInt(cell.getAttribute("row-index") || cell.dataset.rowIndex || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || cell.dataset.colIndex || "0");
        minRow = Math.min(minRow, rowIndex);
        maxRow = Math.max(maxRow, rowIndex);
        minCol = Math.min(minCol, colIndex);
        maxCol = Math.max(maxCol, colIndex);
      }
      const expectedCellCount = (maxRow - minRow + 1) * (maxCol - minCol + 1);
      if (expectedCellCount !== selectedCells.length) {
        new import_obsidian2.Notice("\u53EA\u80FD\u5408\u5E76\u5F62\u6210\u5B8C\u6574\u77E9\u5F62\u7684\u5355\u5143\u683C");
        return false;
      }
      const mainCell = table.querySelector(`[row-index="${minRow}"][col-index="${minCol}"]`);
      if (!mainCell) {
        new import_obsidian2.Notice("\u65E0\u6CD5\u627E\u5230\u4E3B\u5355\u5143\u683C");
        return false;
      }
      if (this.plugin.settings.confirmMergeNonEmpty) {
        const nonEmptyCells = [];
        for (const cell of selectedCells) {
          if (cell === mainCell)
            continue;
          if (this.hasMeaningfulContent(cell)) {
            const rowIndex = parseInt(cell.getAttribute("row-index") || cell.dataset.rowIndex || "0");
            const colIndex = parseInt(cell.getAttribute("col-index") || cell.dataset.colIndex || "0");
            nonEmptyCells.push({
              rowIndex,
              colIndex,
              content: ((_a = cell.textContent) == null ? void 0 : _a.trim()) || ""
            });
          }
        }
        if (nonEmptyCells.length > 0) {
          const cellContents = nonEmptyCells.map(
            (c) => `[${c.rowIndex + 1},${c.colIndex + 1}]: "${c.content}"`
          ).join("\n");
          const confirmMerge = await this.showConfirmDialog(
            `\u4EE5\u4E0B\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9\u5C06\u88AB\u8986\u76D6:
${cellContents}

\u786E\u5B9A\u8981\u5408\u5E76\u8FD9\u4E9B\u5355\u5143\u683C\u5417\uFF1F`
          );
          if (!confirmMerge) {
            new import_obsidian2.Notice("\u5DF2\u53D6\u6D88\u5408\u5E76\u64CD\u4F5C");
            return false;
          }
        }
      }
      const rowSpanValue = maxRow - minRow + 1;
      const colSpanValue = maxCol - minCol + 1;
      mainCell.setAttribute("rowspan", rowSpanValue.toString());
      mainCell.setAttribute("colspan", colSpanValue.toString());
      mainCell.rowSpan = rowSpanValue;
      mainCell.colSpan = colSpanValue;
      mainCell.classList.add("obs-merged-cell");
      if (this.plugin.settings.autoCenterMergedCells) {
        mainCell.style.textAlign = "center";
        mainCell.style.verticalAlign = "middle";
      }
      for (const cell of selectedCells) {
        if (cell !== mainCell) {
          cell.style.display = "none";
        }
      }
      this.applyMergeCellsMarkersForArea(table, minRow, minCol, maxRow, maxCol);
      return true;
    } catch (error) {
      console.error("\u5408\u5E76\u9009\u4E2D\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      return false;
    }
  }
  /**
   * 为特定区域应用合并标记
   * @param table 表格元素
   * @param startRow 起始行
   * @param startCol 起始列
   * @param endRow 结束行
   * @param endCol 结束列
   */
  applyMergeCellsMarkersForArea(table, startRow, startCol, endRow, endCol) {
    try {
      const rows = table.querySelectorAll("tr");
      for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
        if (rowIndex < rows.length) {
          const row = rows[rowIndex];
          const cells = row.querySelectorAll("td, th");
          for (let colIndex = startCol; colIndex <= endCol; colIndex++) {
            if (colIndex < cells.length && !(rowIndex === startRow && colIndex === startCol)) {
              const cell = cells[colIndex];
              if (colIndex === startCol) {
                cell.textContent = "^";
                cell.classList.add("merge-marker");
              } else if (rowIndex === startRow) {
                cell.textContent = "<";
                cell.classList.add("merge-marker");
              } else {
                cell.textContent = Math.random() > 0.5 ? "^" : "<";
                cell.classList.add("merge-marker", "hidden-marker");
              }
            }
          }
        }
      }
    } catch (error) {
      console.error("\u5E94\u7528\u533A\u57DF\u5408\u5E76\u6807\u8BB0\u65F6\u51FA\u9519:", error);
    }
  }
};

// src/tableIdManager.ts
var import_obsidian3 = require("obsidian");
var _TableIdManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    console.log("TableIdManager initialized");
  }
  /**
   * 获取表格标识符
   * @param table 表格HTML元素
   * @returns 表格ID或null
   */
  getTableIdentifier(table) {
    try {
      if (_TableIdManager.isProcessingTableId)
        return null;
      _TableIdManager.isProcessingTableId = true;
      console.log("\u5F00\u59CB\u83B7\u53D6\u8868\u683CID");
      let tableId = this.getTableIdFromComment(table);
      if (tableId) {
        console.log(`\u4ECEHTML\u6CE8\u91CA\u83B7\u53D6\u5230\u8868\u683CID: ${tableId}`);
        const currentDomId = table.getAttribute("data-table-id");
        if (currentDomId !== tableId) {
          console.log(`DOM\u4E2D\u7684ID(${currentDomId})\u4E0EHTML\u6CE8\u91CA\u4E2D\u7684ID(${tableId})\u4E0D\u5339\u914D\uFF0C\u6B63\u5728\u66F4\u65B0DOM\u5C5E\u6027`);
          table.setAttribute("data-table-id", tableId);
        }
        _TableIdManager.isProcessingTableId = false;
        return tableId;
      }
      console.log("\u672A\u5728HTML\u6CE8\u91CA\u4E2D\u627E\u5230\u8868\u683CID\uFF0C\u4E0D\u4F7F\u7528\u5176\u4ED6ID\u6765\u6E90");
      _TableIdManager.isProcessingTableId = false;
      return null;
    } catch (error) {
      console.error("\u83B7\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      _TableIdManager.isProcessingTableId = false;
      return null;
    }
  }
  /**
   * 获取或创建表格ID
   * @param table 表格HTML元素
   * @returns 表格ID
   */
  getOrCreateTableId(table) {
    try {
      if (_TableIdManager.isCreatingTableId)
        return "";
      _TableIdManager.isCreatingTableId = true;
      let tableId = this.getTableIdentifier(table);
      if (!tableId) {
        console.log("\u672A\u627E\u5230HTML\u6CE8\u91CA\u4E2D\u7684\u8868\u683CID\uFF0C\u4E0D\u81EA\u52A8\u751F\u6210\u65B0ID");
      }
      _TableIdManager.isCreatingTableId = false;
      return tableId || "";
    } catch (error) {
      console.error("\u83B7\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      _TableIdManager.isCreatingTableId = false;
      return "";
    }
  }
  /**
   * 从HTML注释中获取表格ID
   * @param table 表格HTML元素
   * @returns 表格ID或null
   */
  getTableIdFromComment(table) {
    var _a, _b;
    try {
      console.log("\u5F00\u59CB\u4ECEHTML\u6CE8\u91CA\u4E2D\u67E5\u627E\u8868\u683CID");
      console.log("\u8868\u683CDOM:", table.outerHTML.substring(0, 100) + "...");
      const dataId = table.getAttribute("data-id") || table.getAttribute("data-table-id");
      if (dataId) {
        console.log(`\u4ECE\u8868\u683C\u5C5E\u6027\u4E2D\u627E\u5230ID: ${dataId}`);
        return dataId;
      }
      try {
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (activeFile) {
          console.log(`\u5C1D\u8BD5\u4ECE\u6587\u4EF6\u5185\u5BB9\u4E2D\u67E5\u627E\u8868\u683CID: ${activeFile.path}`);
          const tablePosition = this.getTablePositionInDOM(table);
          if (tablePosition) {
            console.log(`\u8868\u683C\u4F4D\u7F6E: \u7B2C${tablePosition.index}\u4E2A\u8868\u683C`);
            this.plugin.app.vault.read(activeFile).then((content) => {
              const tableIds = this.extractTableIdsFromMarkdown(content);
              console.log(`\u4ECEMarkdown\u5185\u5BB9\u4E2D\u63D0\u53D6\u7684\u8868\u683CID:`, tableIds);
              if (tableIds.length > tablePosition.index) {
                const id = tableIds[tablePosition.index];
                if (id) {
                  console.log(`\u4ECEMarkdown\u5185\u5BB9\u4E2D\u627E\u5230\u8868\u683CID: ${id}`);
                  table.setAttribute("data-table-id", id);
                  return id;
                }
              }
            }).catch((err) => {
              console.error("\u8BFB\u53D6\u6587\u4EF6\u5185\u5BB9\u65F6\u51FA\u9519:", err);
            });
          }
        }
      } catch (error) {
        console.error("\u4ECE\u6587\u4EF6\u5185\u5BB9\u67E5\u627E\u8868\u683CID\u65F6\u51FA\u9519:", error);
      }
      let node = table.previousSibling;
      let nodeCount = 0;
      console.log("\u5F00\u59CB\u904D\u5386\u524D\u7F6E\u8282\u70B9...");
      while (node && nodeCount < 30) {
        nodeCount++;
        const nodeType = node.nodeType;
        const nodeTypeStr = nodeType === Node.COMMENT_NODE ? "COMMENT" : nodeType === Node.TEXT_NODE ? "TEXT" : nodeType === Node.ELEMENT_NODE ? "ELEMENT" : "OTHER";
        console.log(`\u68C0\u67E5\u8282\u70B9 #${nodeCount}: \u7C7B\u578B=${nodeTypeStr}`);
        if (nodeType === Node.COMMENT_NODE) {
          const commentText = ((_a = node.textContent) == null ? void 0 : _a.trim()) || "";
          console.log(`\u53D1\u73B0\u6CE8\u91CA\u8282\u70B9: "${commentText}"`);
          const idMatch = commentText.match(/table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)/i);
          if (idMatch && idMatch[1]) {
            const commentId = idMatch[1];
            console.log(`\u4ECEHTML\u6CE8\u91CA\u4E2D\u6210\u529F\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const altIdMatch = commentText.match(/id:?\s*([a-zA-Z0-9_\-:.]+)/i);
          if (altIdMatch && altIdMatch[1]) {
            const commentId = altIdMatch[1];
            console.log(`\u4ECE\u66FF\u4EE3\u683C\u5F0FHTML\u6CE8\u91CA\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const tblMatch = commentText.match(/(tbl|table):?\s*([a-zA-Z0-9_\-:.]+)/i);
          if (tblMatch && tblMatch[2]) {
            const commentId = tblMatch[2];
            console.log(`\u4ECEtbl/table\u683C\u5F0FHTML\u6CE8\u91CA\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
        } else if (nodeType === Node.TEXT_NODE) {
          const textContent = node.textContent || "";
          console.log(`\u6587\u672C\u8282\u70B9\u5185\u5BB9: "${textContent.substring(0, 30)}${textContent.length > 30 ? "..." : ""}"`);
          const htmlCommentMatch = textContent.match(/<!--\s*table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
          if (htmlCommentMatch && htmlCommentMatch[1]) {
            const commentId = htmlCommentMatch[1];
            console.log(`\u4ECE\u6587\u672C\u8282\u70B9\u4E2D\u7684HTML\u6CE8\u91CA\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const altHtmlCommentMatch = textContent.match(/<!--\s*id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
          if (altHtmlCommentMatch && altHtmlCommentMatch[1]) {
            const commentId = altHtmlCommentMatch[1];
            console.log(`\u4ECE\u6587\u672C\u8282\u70B9\u4E2D\u7684\u66FF\u4EE3HTML\u6CE8\u91CA\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          const tblHtmlCommentMatch = textContent.match(/<!--\s*(tbl|table):?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
          if (tblHtmlCommentMatch && tblHtmlCommentMatch[2]) {
            const commentId = tblHtmlCommentMatch[2];
            console.log(`\u4ECE\u6587\u672C\u8282\u70B9\u4E2D\u7684tbl/table HTML\u6CE8\u91CA\u8BC6\u522B\u8868\u683CID: ${commentId}`);
            return commentId;
          }
          if (textContent.trim() === "") {
            node = node.previousSibling;
            continue;
          }
        } else if (nodeType === Node.ELEMENT_NODE) {
          const tagName = node.tagName;
          console.log(`\u5143\u7D20\u8282\u70B9: <${tagName.toLowerCase()}>`);
          const elemDataId = node.getAttribute("data-id") || node.getAttribute("data-table-id");
          if (elemDataId) {
            console.log(`\u4ECE\u5143\u7D20\u5C5E\u6027\u4E2D\u627E\u5230ID: ${elemDataId}`);
            return elemDataId;
          }
          const elemContent = node.innerHTML || "";
          if (elemContent.includes("<!--") && elemContent.includes("-->")) {
            console.log(`\u5143\u7D20\u5185\u5BB9\u5305\u542BHTML\u6CE8\u91CA: "${elemContent.substring(0, 50)}${elemContent.length > 50 ? "..." : ""}"`);
            const htmlCommentMatch = elemContent.match(/<!--\s*table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
            if (htmlCommentMatch && htmlCommentMatch[1]) {
              const commentId = htmlCommentMatch[1];
              console.log(`\u4ECE\u5143\u7D20\u5185\u5BB9\u4E2D\u7684HTML\u6CE8\u91CA\u8BC6\u522B\u8868\u683CID: ${commentId}`);
              return commentId;
            }
          }
          if (["BR", "HR", "P", "DIV", "SPAN"].includes(tagName)) {
            node = node.previousSibling;
            continue;
          }
          console.log(`\u9047\u5230\u5143\u7D20\u8282\u70B9 ${tagName}\uFF0C\u505C\u6B62\u67E5\u627E`);
          break;
        }
        node = node.previousSibling;
      }
      if (table.parentElement) {
        console.log("\u5C1D\u8BD5\u68C0\u67E5\u7236\u5143\u7D20\u53CA\u5176\u524D\u7F6E\u8282\u70B9...");
        const parentDataId = table.parentElement.getAttribute("data-id") || table.parentElement.getAttribute("data-table-id");
        if (parentDataId) {
          console.log(`\u4ECE\u7236\u5143\u7D20\u5C5E\u6027\u4E2D\u627E\u5230ID: ${parentDataId}`);
          return parentDataId;
        }
        if (table.parentElement.previousSibling) {
          let parentPrevNode = table.parentElement.previousSibling;
          if (parentPrevNode) {
            if (parentPrevNode.nodeType === Node.COMMENT_NODE) {
              const commentText = ((_b = parentPrevNode.textContent) == null ? void 0 : _b.trim()) || "";
              console.log(`\u53D1\u73B0\u7236\u5143\u7D20\u524D\u7684\u6CE8\u91CA\u8282\u70B9: "${commentText}"`);
              const idMatch = commentText.match(/table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)/i);
              if (idMatch && idMatch[1]) {
                const commentId = idMatch[1];
                console.log(`\u4ECE\u7236\u5143\u7D20\u524D\u7684HTML\u6CE8\u91CA\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
                return commentId;
              }
            } else if (parentPrevNode.nodeType === Node.TEXT_NODE) {
              const textContent = parentPrevNode.textContent || "";
              const htmlCommentMatch = textContent.match(/<!--\s*table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
              if (htmlCommentMatch && htmlCommentMatch[1]) {
                const commentId = htmlCommentMatch[1];
                console.log(`\u4ECE\u7236\u5143\u7D20\u524D\u7684\u6587\u672C\u8282\u70B9\u4E2D\u8BC6\u522B\u8868\u683CID: ${commentId}`);
                return commentId;
              }
            }
          }
        }
        if (table.parentElement.parentElement) {
          const grandParentDataId = table.parentElement.parentElement.getAttribute("data-id") || table.parentElement.parentElement.getAttribute("data-table-id");
          if (grandParentDataId) {
            console.log(`\u4ECE\u7956\u7236\u5143\u7D20\u5C5E\u6027\u4E2D\u627E\u5230ID: ${grandParentDataId}`);
            return grandParentDataId;
          }
        }
      }
      console.log("\u672A\u5728HTML\u6CE8\u91CA\u4E2D\u627E\u5230\u8868\u683CID");
      return null;
    } catch (error) {
      console.error("\u4ECE\u6CE8\u91CA\u83B7\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 为表格添加ID注释
   * @param table 表格HTML元素
   * @param id 表格ID
   */
  addTableIdComment(table, id) {
    var _a, _b;
    try {
      const previousNode = table.previousSibling;
      if (previousNode && previousNode.nodeType === Node.COMMENT_NODE) {
        const comment2 = previousNode.nodeValue || "";
        if (comment2.includes("table-id:")) {
          (_a = previousNode.parentNode) == null ? void 0 : _a.removeChild(previousNode);
        }
      }
      const commentContent = `table-id: ${id}`;
      const comment = document.createComment(` ${commentContent} `);
      (_b = table.parentNode) == null ? void 0 : _b.insertBefore(comment, table);
      table.setAttribute("data-table-id", id);
      console.log(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID\u6CE8\u91CA: ${id}`);
      new import_obsidian3.Notice(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID: ${id}`);
    } catch (error) {
      console.error("\u6DFB\u52A0\u8868\u683CID\u6CE8\u91CA\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 生成新的表格ID
   * @returns 生成的表格ID
   */
  generateTableId() {
    try {
      const prefix = this.plugin.settings.idPrefix || "tbl";
      const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, "");
      const randomId = Math.random().toString(36).substring(2, 8);
      return `${prefix}-${timestamp}-${randomId}`;
    } catch (error) {
      console.error("\u751F\u6210\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return `tbl-${Date.now()}`;
    }
  }
  /**
   * 计算字符串的简单哈希值
   * @param str 输入字符串
   * @returns 哈希值字符串
   */
  simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return Math.abs(hash).toString(16).substring(0, 8);
  }
  /**
   * 确保表格有ID，如果没有则创建一个
   * @param table 表格元素
   * @returns 表格ID
   */
  ensureTableHasId(table) {
    if (!table)
      return "";
    const tableId = this.getTableIdentifier(table);
    if (!tableId) {
      console.log("\u672A\u627E\u5230HTML\u6CE8\u91CA\u4E2D\u7684\u8868\u683CID\uFF0C\u4E0D\u81EA\u52A8\u521B\u5EFAID");
      return "";
    }
    if (!table.getAttribute("data-table-id")) {
      table.setAttribute("data-table-id", tableId);
    }
    return tableId;
  }
  /**
   * 获取表格在DOM中的位置信息
   * @param table 表格元素
   * @returns 位置信息或null
   */
  getTablePositionInDOM(table) {
    try {
      const allTables = Array.from(document.querySelectorAll("table"));
      const index = allTables.indexOf(table);
      if (index !== -1) {
        return { index };
      }
      return null;
    } catch (error) {
      console.error("\u83B7\u53D6\u8868\u683C\u4F4D\u7F6E\u4FE1\u606F\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 从Markdown内容中提取表格ID
   * @param content Markdown内容
   * @returns 表格ID数组
   */
  extractTableIdsFromMarkdown(content) {
    try {
      const tableIds = [];
      const lines = content.split("\n");
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].trim().startsWith("|") && lines[i].trim().endsWith("|")) {
          if (i + 1 < lines.length && lines[i + 1].trim().match(/^\|[-:\s|]*\|$/)) {
            let idFound = false;
            for (let j = i - 1; j >= Math.max(0, i - 10); j--) {
              const line = lines[j].trim();
              const idMatch = line.match(/<!--\s*table[-_]?id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || line.match(/<!--\s*id:?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || line.match(/<!--\s*(tbl|table):?\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
              if (idMatch) {
                const id = idMatch[1] || idMatch[2];
                tableIds.push(id);
                idFound = true;
                break;
              }
              if (line !== "" && !line.startsWith("<!--") && !line.startsWith("//")) {
                break;
              }
            }
            if (!idFound) {
              tableIds.push(null);
            }
          }
        }
      }
      return tableIds;
    } catch (error) {
      console.error("\u4ECEMarkdown\u5185\u5BB9\u63D0\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return [];
    }
  }
};
var TableIdManager = _TableIdManager;
TableIdManager.isProcessingTableId = false;
TableIdManager.isCreatingTableId = false;

// src/tableToolbar.ts
var import_obsidian4 = require("obsidian");
var import_obsidian5 = require("obsidian");
var TableToolbar = class {
  constructor(plugin) {
    this.activeTable = null;
    this.selectedCells = [];
    this.isDragging = false;
    this.dragStartX = 0;
    this.dragStartY = 0;
    this.isCollapsed = false;
    this.initialPosition = { left: "50%", top: "10px" };
    this.editModeTableInfo = null;
    this.applyToEntireTable = false;
    this.plugin = plugin;
    console.log("TableToolbar initialized");
  }
  /**
   * 创建表格工具栏
   * @param containerEl 容器元素
   */
  createToolbar(containerEl) {
    var _a, _b, _c;
    this.containerEl = containerEl;
    containerEl.style.position = "fixed";
    containerEl.style.zIndex = "1000";
    containerEl.style.left = "50%";
    containerEl.style.top = "10px";
    containerEl.style.transform = "translateX(-50%)";
    containerEl.style.display = "block";
    this.toolbar = containerEl.createEl("div", {
      cls: "advanced-table-toolbar"
    });
    this.toolbar.style.display = "flex";
    this.toolbar.style.flexDirection = "row";
    this.toolbar.style.gap = "5px";
    this.toolbar.style.padding = "5px";
    this.toolbar.style.margin = "5px 0";
    this.toolbar.style.borderRadius = "5px";
    this.toolbar.style.backgroundColor = "var(--background-secondary)";
    this.toolbar.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.15)";
    this.toolbar.style.userSelect = "none";
    this.toolbar.style.position = "relative";
    this.dragHandle = this.toolbar.createEl("div", {
      cls: "advanced-table-toolbar-drag-handle"
    });
    this.dragHandle.style.cursor = "grab";
    this.dragHandle.style.padding = "0 5px";
    this.dragHandle.style.display = "flex";
    this.dragHandle.style.alignItems = "center";
    this.dragHandle.style.marginRight = "5px";
    this.dragHandle.style.height = "28px";
    this.dragHandle.style.borderRadius = "3px";
    this.dragHandle.addEventListener("mouseover", () => {
      this.dragHandle.style.backgroundColor = "var(--background-modifier-hover)";
    });
    this.dragHandle.addEventListener("mouseout", () => {
      this.dragHandle.style.backgroundColor = "transparent";
    });
    (0, import_obsidian4.setIcon)(this.dragHandle, "grip-vertical");
    this.toolbarContent = this.toolbar.createEl("div", {
      cls: "advanced-table-toolbar-content"
    });
    this.toolbarContent.style.display = "flex";
    this.toolbarContent.style.flexDirection = "row";
    this.toolbarContent.style.gap = "5px";
    this.toolbarContent.style.flexGrow = "1";
    this.createButtonGroup("\u5BF9\u9F50", [
      { id: "align-left", tooltip: "\u5DE6\u5BF9\u9F50", icon: "align-left" },
      { id: "align-center", tooltip: "\u5C45\u4E2D\u5BF9\u9F50", icon: "align-center" },
      { id: "align-right", tooltip: "\u53F3\u5BF9\u9F50", icon: "align-right" },
      { id: "align-top", tooltip: "\u9876\u90E8\u5BF9\u9F50", icon: "align-top" },
      { id: "align-middle", tooltip: "\u5782\u76F4\u5C45\u4E2D", icon: "align-middle" },
      { id: "align-bottom", tooltip: "\u5E95\u90E8\u5BF9\u9F50", icon: "align-bottom" },
      { id: "align-all", tooltip: "\u5168\u90E8\u5C45\u4E2D", icon: "align-all" }
    ]);
    this.createSeparator();
    this.createButtonGroup("\u5408\u5E76", [
      { id: "merge-cells", tooltip: "\u5408\u5E76\u9009\u4E2D\u5355\u5143\u683C", icon: "merge-cells" },
      { id: "merge-right", tooltip: "\u5411\u53F3\u5408\u5E76", icon: "merge-right" },
      { id: "merge-down", tooltip: "\u5411\u4E0B\u5408\u5E76", icon: "merge-down" },
      { id: "split", tooltip: "\u62C6\u5206\u5355\u5143\u683C", icon: "split" }
    ]);
    this.createSeparator();
    this.createButtonGroup("\u8868\u683C", [
      { id: "table-id", tooltip: "\u751F\u6210\u8868\u683CID", icon: "table-id" },
      { id: "table-row-add", tooltip: "\u6DFB\u52A0\u884C", icon: "table-row-add" },
      { id: "table-style", tooltip: "\u8868\u683C\u6837\u5F0F", icon: "table-style" }
    ]);
    this.collapseButton = this.toolbar.createEl("button", {
      cls: "advanced-table-toolbar-collapse-button",
      attr: { "aria-label": "\u6536\u8D77/\u5C55\u5F00\u5DE5\u5177\u680F", "title": "\u6536\u8D77\u5DE5\u5177\u680F" }
    });
    this.collapseButton.style.display = "flex";
    this.collapseButton.style.justifyContent = "center";
    this.collapseButton.style.alignItems = "center";
    this.collapseButton.style.width = "28px";
    this.collapseButton.style.height = "28px";
    this.collapseButton.style.padding = "3px";
    this.collapseButton.style.border = "none";
    this.collapseButton.style.borderRadius = "3px";
    this.collapseButton.style.backgroundColor = "transparent";
    this.collapseButton.style.cursor = "pointer";
    this.collapseButton.style.marginLeft = "5px";
    (0, import_obsidian4.setIcon)(this.collapseButton, "chevron-left");
    this.collapseButton.addEventListener("mouseover", () => {
      this.collapseButton.style.backgroundColor = "var(--background-modifier-hover)";
    });
    this.collapseButton.addEventListener("mouseout", () => {
      this.collapseButton.style.backgroundColor = "transparent";
    });
    this.collapseButton.addEventListener("click", () => {
      this.toggleCollapse();
    });
    this.setupDraggable();
    console.log("\u5DE5\u5177\u680F\u5DF2\u521B\u5EFA\uFF0C\u62D6\u62FD\u624B\u67C4\u72B6\u6001:", {
      dragHandleExists: !!this.dragHandle,
      dragHandleParent: (_a = this.dragHandle) == null ? void 0 : _a.parentElement,
      dragHandleDisplay: (_b = this.dragHandle) == null ? void 0 : _b.style.display,
      dragHandleIcon: (_c = this.dragHandle) == null ? void 0 : _c.innerHTML,
      toolbarChildren: Array.from(this.toolbar.children).map((child) => child.className)
    });
  }
  /**
   * 设置工具栏可拖拽
   */
  setupDraggable() {
    const container = this.containerEl;
    this.dragHandle.addEventListener("mousedown", (e) => {
      if (e.button !== 0)
        return;
      this.isDragging = true;
      this.dragStartX = e.clientX;
      this.dragStartY = e.clientY;
      const rect = container.getBoundingClientRect();
      this.initialPosition = {
        left: container.style.left || "50%",
        top: container.style.top || "10px"
      };
      this.dragHandle.style.cursor = "grabbing";
      document.body.style.cursor = "grabbing";
      e.preventDefault();
      e.stopPropagation();
    });
    const mouseMoveHandler = (e) => {
      if (!this.isDragging)
        return;
      const deltaX = e.clientX - this.dragStartX;
      const deltaY = e.clientY - this.dragStartY;
      const rect = container.getBoundingClientRect();
      let newLeft;
      if (this.initialPosition.left.endsWith("%")) {
        const viewportWidth = document.documentElement.clientWidth;
        const initialLeftPx = parseFloat(this.initialPosition.left) / 100 * viewportWidth;
        newLeft = `${initialLeftPx + deltaX}px`;
      } else {
        const initialLeftPx = parseFloat(this.initialPosition.left);
        newLeft = `${initialLeftPx + deltaX}px`;
      }
      const newTop = `${parseFloat(this.initialPosition.top) + deltaY}px`;
      container.style.left = newLeft;
      container.style.top = newTop;
      container.style.transform = "none";
      e.preventDefault();
      e.stopPropagation();
    };
    const mouseUpHandler = (e) => {
      if (!this.isDragging)
        return;
      this.isDragging = false;
      this.dragHandle.style.cursor = "grab";
      document.body.style.cursor = "";
      e.stopPropagation();
    };
    document.addEventListener("mousemove", mouseMoveHandler);
    document.addEventListener("mouseup", mouseUpHandler);
    this.plugin.registerDomEvent(document, "mousemove", mouseMoveHandler);
    this.plugin.registerDomEvent(document, "mouseup", mouseUpHandler);
  }
  /**
   * 切换工具栏的收起/展开状态
   */
  toggleCollapse() {
    this.isCollapsed = !this.isCollapsed;
    if (this.isCollapsed) {
      this.toolbarContent.style.display = "none";
      (0, import_obsidian4.setIcon)(this.collapseButton, "chevron-right");
      this.toolbar.style.width = "auto";
      this.toolbar.classList.add("collapsed");
      this.containerEl.style.width = "auto";
      this.containerEl.style.height = "auto";
      this.collapseButton.setAttribute("title", "\u5C55\u5F00\u5DE5\u5177\u680F");
    } else {
      this.toolbarContent.style.display = "flex";
      (0, import_obsidian4.setIcon)(this.collapseButton, "chevron-left");
      this.toolbar.style.width = "";
      this.toolbar.classList.remove("collapsed");
      this.containerEl.style.width = "";
      this.containerEl.style.height = "";
      this.collapseButton.setAttribute("title", "\u6536\u8D77\u5DE5\u5177\u680F");
    }
  }
  /**
   * 创建按钮组
   * @param groupName 组名
   * @param buttons 按钮配置
   */
  createButtonGroup(groupName, buttons) {
    const group = this.toolbarContent.createEl("div", {
      cls: "advanced-table-toolbar-group"
    });
    group.style.display = "flex";
    group.style.flexDirection = "row";
    group.style.alignItems = "center";
    const label = group.createEl("span", {
      text: groupName,
      cls: "advanced-table-toolbar-group-label"
    });
    label.style.fontSize = "12px";
    label.style.marginRight = "5px";
    label.style.opacity = "0.7";
    buttons.forEach((btn) => {
      const button = group.createEl("button", {
        cls: `advanced-table-toolbar-button ${btn.id}`,
        attr: { "aria-label": btn.tooltip }
      });
      button.style.display = "flex";
      button.style.justifyContent = "center";
      button.style.alignItems = "center";
      button.style.width = "28px";
      button.style.height = "28px";
      button.style.padding = "3px";
      button.style.border = "none";
      button.style.borderRadius = "3px";
      button.style.backgroundColor = "transparent";
      button.style.cursor = "pointer";
      (0, import_obsidian4.setIcon)(button, btn.icon);
      button.addEventListener("mouseover", () => {
        button.style.backgroundColor = "var(--background-modifier-hover)";
      });
      button.addEventListener("mouseout", () => {
        button.style.backgroundColor = "transparent";
      });
      button.addEventListener("click", () => {
        this.handleButtonClick(btn.id);
      });
      button.setAttribute("title", btn.tooltip);
    });
  }
  /**
   * 创建分隔线
   */
  createSeparator() {
    const separator = this.toolbarContent.createEl("div", {
      cls: "advanced-table-toolbar-separator"
    });
    separator.style.width = "1px";
    separator.style.height = "24px";
    separator.style.margin = "0 5px";
    separator.style.backgroundColor = "var(--background-modifier-border)";
  }
  /**
   * 处理按钮点击事件
   * @param buttonId 按钮ID
   */
  handleButtonClick(buttonId) {
    try {
      console.log(`\u70B9\u51FB\u4E86\u6309\u94AE: ${buttonId}`);
      const isEditMode = this.isInEditMode();
      switch (buttonId) {
        case "align-left":
          this.applyAlignmentToSelectedCells("left");
          break;
        case "align-center":
          this.applyAlignmentToSelectedCells("center");
          break;
        case "align-right":
          this.applyAlignmentToSelectedCells("right");
          break;
        case "align-top":
          this.applyAlignmentToSelectedCells(void 0, "top");
          break;
        case "align-middle":
          this.applyAlignmentToSelectedCells(void 0, "middle");
          break;
        case "align-bottom":
          this.applyAlignmentToSelectedCells(void 0, "bottom");
          break;
        case "align-all":
          this.applyAlignmentToSelectedCells("center", "middle");
          break;
        case "merge-cells":
          if (isEditMode && this.plugin.settings.enableEditModeOperations) {
            new import_obsidian4.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u6682\u4E0D\u652F\u6301\u591A\u9009\u5408\u5E76\uFF0C\u8BF7\u4F7F\u7528\u5411\u53F3\u6216\u5411\u4E0B\u5408\u5E76");
          } else {
            this.mergeCells();
          }
          break;
        case "merge-right":
          this.mergeRight();
          break;
        case "merge-down":
          this.mergeDown();
          break;
        case "split":
          if (isEditMode && this.plugin.settings.enableEditModeOperations) {
            this.plugin.markdownSourceEditor.splitMergedCells().then((success) => {
              if (success) {
                this.clearCellSelection();
              }
            }).catch((error) => {
              console.error("\u62C6\u5206\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
              new import_obsidian4.Notice(`\u62C6\u5206\u5355\u5143\u683C\u65F6\u51FA\u9519: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
            });
          } else {
            this.splitCell();
          }
          break;
        case "table-id":
          this.generateTableId();
          break;
        case "table-row-add":
          if (isEditMode && this.plugin.settings.enableEditModeOperations) {
            new import_obsidian4.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u6682\u4E0D\u652F\u6301\u901A\u8FC7\u5DE5\u5177\u680F\u6DFB\u52A0\u884C\uFF0C\u8BF7\u76F4\u63A5\u7F16\u8F91Markdown\u6E90\u7801");
          } else {
            this.showRowAddMenu();
          }
          break;
        case "table-style":
          if (isEditMode && this.plugin.settings.enableEditModeOperations) {
            new import_obsidian4.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u6682\u4E0D\u652F\u6301\u6837\u5F0F\u8BBE\u7F6E");
          } else {
            this.showStyleMenu();
          }
          break;
        default:
          console.log(`\u672A\u5904\u7406\u7684\u6309\u94AEID: ${buttonId}`);
      }
    } catch (error) {
      console.error(`\u5904\u7406\u6309\u94AE\u70B9\u51FB\u65F6\u51FA\u9519: ${buttonId}`, error);
    }
  }
  /**
   * 记录调试信息
   */
  logDebugInfo() {
    const allTables = document.querySelectorAll("table").length;
    const selectedTableElements = document.querySelectorAll('table[data-table-selected="true"]').length;
    console.log("\u5F53\u524D\u72B6\u6001:", {
      activeTable: this.activeTable,
      allTables,
      selectedCells: this.selectedCells,
      selectedTableElements,
      toolbarContainer: this.containerEl
    });
  }
  /**
   * 应用对齐样式到选中的单元格
   * @param horizontalAlign 水平对齐方式
   * @param verticalAlign 垂直对齐方式
   */
  applyAlignmentToSelectedCells(horizontalAlign, verticalAlign) {
    try {
      console.log("\u5E94\u7528\u5BF9\u9F50:", { horizontalAlign, verticalAlign });
      this.applyAlignmentStylesOnly(horizontalAlign, verticalAlign);
      if (!this.activeTable) {
        console.warn("\u6CA1\u6709\u6D3B\u52A8\u8868\u683C");
        return;
      }
      console.log("\u9009\u62E9\u72B6\u6001:", {
        activeTable: !!this.activeTable,
        selectedCellsCount: this.selectedCells.length,
        applyToEntireTable: this.applyToEntireTable
      });
      this.plugin.readTableIdFromMarkdown(this.activeTable).then((tableIdOrNull) => {
        const tableId = tableIdOrNull || this.generateUniqueTableId();
        console.log(`\u4ECEMarkdown\u6587\u4EF6\u4E2D\u83B7\u53D6\u8868\u683CID: ${tableId}`);
        if (!tableIdOrNull) {
          console.log(`\u672A\u627E\u5230\u8868\u683CID\uFF0C\u751F\u6210\u65B0ID: ${tableId}`);
          new import_obsidian4.Notice(`\u672A\u627E\u5230\u8868\u683CID\uFF0C\u5DF2\u751F\u6210\u65B0ID: ${tableId}\uFF0C\u8BF7\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u6DFB\u52A0\u5230\u8868\u683C\u524D`, 5e3);
        }
        if (this.activeTable) {
          const activeTable = this.activeTable;
          const activeFile = this.plugin.app.workspace.getActiveFile();
          if (!activeFile) {
            console.warn("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6\u8DEF\u5F84");
            return;
          }
          const selectedCellPositions = this.getSelectedCellPositions();
          console.log("\u9009\u4E2D\u5355\u5143\u683C\u4F4D\u7F6E:", selectedCellPositions);
          const filePath = activeFile.path;
          const fileContent = this.plugin.app.vault.read(activeFile).then((content) => {
            var _a, _b;
            const allDocTables = document.querySelectorAll("table");
            const tableIndex = Array.from(allDocTables).indexOf(activeTable);
            if (tableIndex === -1) {
              console.warn("\u65E0\u6CD5\u786E\u5B9A\u8868\u683C\u7D22\u5F15");
              return;
            }
            const existingStyle = this.plugin.tableStateManager.getTableStyle(tableId);
            const styling = existingStyle || {
              rowHeights: Array(activeTable.querySelectorAll("tr").length).fill("auto"),
              colWidths: Array(((_a = activeTable.querySelectorAll("tr")[0]) == null ? void 0 : _a.querySelectorAll("td, th").length) || 0).fill("auto"),
              alignment: Array(((_b = activeTable.querySelectorAll("tr")[0]) == null ? void 0 : _b.querySelectorAll("td, th").length) || 0).fill("left"),
              cellStyles: []
            };
            if (this.selectedCells.length === 0 || this.applyToEntireTable) {
              if (horizontalAlign) {
                const colCount = styling.alignment.length;
                for (let i = 0; i < colCount; i++) {
                  styling.alignment[i] = horizontalAlign;
                }
                console.log(`\u66F4\u65B0\u8868\u683C\u5BF9\u9F50\u6570\u636E: ${tableId}`, styling.alignment);
              }
            } else {
              selectedCellPositions.forEach((pos) => {
                const existingStyleIndex = styling.cellStyles.findIndex(
                  (style) => style.row === pos.row && style.col === pos.col
                );
                if (existingStyleIndex !== -1) {
                  if (horizontalAlign) {
                    styling.cellStyles[existingStyleIndex].textAlign = horizontalAlign;
                  }
                  if (verticalAlign) {
                    styling.cellStyles[existingStyleIndex].verticalAlign = verticalAlign;
                  }
                } else {
                  const newStyle = {
                    row: pos.row,
                    col: pos.col,
                    textAlign: horizontalAlign,
                    verticalAlign
                  };
                  styling.cellStyles.push(newStyle);
                }
              });
              console.log(`\u66F4\u65B0\u5355\u5143\u683C\u6837\u5F0F\u6570\u636E: ${tableId}`, styling.cellStyles);
            }
            this.plugin.tableStateManager.saveTableStyle(tableId, styling, {
              path: filePath,
              index: tableIndex
            }).then(() => {
              console.log(`\u5DF2\u4FDD\u5B58\u8868\u683C\u6570\u636E: ${tableId}`);
              new import_obsidian4.Notice(`\u5DF2\u5C06${horizontalAlign || ""}${horizontalAlign && verticalAlign ? "\u548C" : ""}${verticalAlign || ""}\u5BF9\u9F50\u5E94\u7528\u5230${this.selectedCells.length > 0 ? "\u9009\u4E2D\u5355\u5143\u683C" : "\u6574\u4E2A\u8868\u683C"}\u5E76\u4FDD\u5B58\u5230\u6570\u636E\u6587\u4EF6`);
            }).catch((err) => {
              console.error("\u4FDD\u5B58\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", err);
              new import_obsidian4.Notice(`\u4FDD\u5B58\u8868\u683C\u6570\u636E\u5931\u8D25: ${err.message || "\u672A\u77E5\u9519\u8BEF"}`);
            });
          }).catch((err) => {
            console.error("\u8BFB\u53D6\u6587\u4EF6\u5185\u5BB9\u65F6\u51FA\u9519:", err);
            new import_obsidian4.Notice(`\u8BFB\u53D6\u6587\u4EF6\u5185\u5BB9\u5931\u8D25: ${err.message || "\u672A\u77E5\u9519\u8BEF"}`);
          });
        } else {
          console.warn("\u4FDD\u5B58\u6570\u636E\u65F6\u8868\u683C\u4E0D\u518D\u5B58\u5728");
        }
      }).catch((error) => {
        console.error("\u83B7\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
        new import_obsidian4.Notice(`\u83B7\u53D6\u8868\u683CID\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      });
      console.log("\u5BF9\u9F50\u5E94\u7528\u5B8C\u6210");
    } catch (error) {
      console.error("\u5E94\u7528\u5BF9\u9F50\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u5E94\u7528\u5BF9\u9F50\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 获取选中单元格的位置信息（行列索引）
   * @returns 选中单元格的位置数组
   */
  getSelectedCellPositions() {
    const positions = [];
    if (!this.activeTable || this.selectedCells.length === 0) {
      return positions;
    }
    this.selectedCells.forEach((cell) => {
      const row = cell.closest("tr");
      if (!row)
        return;
      const rowIndex = Array.from(this.activeTable.querySelectorAll("tr")).indexOf(row);
      if (rowIndex === -1)
        return;
      const colIndex = Array.from(row.querySelectorAll("td, th")).indexOf(cell);
      if (colIndex === -1)
        return;
      positions.push({ row: rowIndex, col: colIndex });
    });
    return positions;
  }
  /**
   * 仅应用对齐样式，不保存数据
   * @param horizontalAlign 水平对齐方式
   * @param verticalAlign 垂直对齐方式
   */
  applyAlignmentStylesOnly(horizontalAlign, verticalAlign) {
    if (this.selectedCells.length === 0 && this.activeTable) {
      const cells = this.activeTable.querySelectorAll("td, th");
      cells.forEach((cell) => {
        const cellEl = cell;
        if (horizontalAlign) {
          cellEl.style.textAlign = horizontalAlign;
        }
        if (verticalAlign) {
          cellEl.style.verticalAlign = verticalAlign;
        }
      });
      new import_obsidian4.Notice(`\u5DF2\u5C06${horizontalAlign || ""}${horizontalAlign && verticalAlign ? "\u548C" : ""}${verticalAlign || ""}\u5BF9\u9F50\u5E94\u7528\u5230\u6574\u4E2A\u8868\u683C`);
    } else {
      this.selectedCells.forEach((cell) => {
        if (horizontalAlign) {
          cell.style.textAlign = horizontalAlign;
        }
        if (verticalAlign) {
          cell.style.verticalAlign = verticalAlign;
        }
      });
      new import_obsidian4.Notice(`\u5DF2\u5C06${horizontalAlign || ""}${horizontalAlign && verticalAlign ? "\u548C" : ""}${verticalAlign || ""}\u5BF9\u9F50\u5E94\u7528\u5230\u9009\u4E2D\u5355\u5143\u683C`);
    }
  }
  /**
   * 合并选中的单元格
   */
  async mergeCells() {
    var _a;
    try {
      console.log("\u5C1D\u8BD5\u5408\u5E76\u9009\u4E2D\u7684\u5355\u5143\u683C");
      const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (!activeView) {
        new import_obsidian4.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      console.log(`\u5F53\u524D\u6A21\u5F0F: ${isEditMode ? "\u7F16\u8F91\u6A21\u5F0F" : "\u9884\u89C8\u6A21\u5F0F"}`);
      if (isEditMode && this.plugin.settings.enableEditModeOperations) {
        console.log("\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u4F7F\u7528 MarkdownSourceEditor \u5408\u5E76\u5355\u5143\u683C");
        const success = await this.plugin.markdownSourceEditor.mergeCells("right");
        if (success) {
          this.clearCellSelection();
          console.log("\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
        } else {
          console.log("\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25");
        }
      } else {
        if (this.selectedCells.length < 2) {
          new import_obsidian4.Notice("\u8BF7\u9009\u62E9\u81F3\u5C112\u4E2A\u5355\u5143\u683C\u8FDB\u884C\u5408\u5E76");
          return;
        }
        const boundary = this.getSelectedCellsBoundary();
        if (!boundary) {
          new import_obsidian4.Notice("\u65E0\u6CD5\u786E\u5B9A\u9009\u4E2D\u5355\u5143\u683C\u7684\u8FB9\u754C");
          return;
        }
        const { minRow, maxRow, minCol, maxCol } = boundary;
        const expectedCellCount = (maxRow - minRow + 1) * (maxCol - minCol + 1);
        if (expectedCellCount !== this.selectedCells.length) {
          new import_obsidian4.Notice("\u53EA\u80FD\u5408\u5E76\u5F62\u6210\u5B8C\u6574\u77E9\u5F62\u7684\u5355\u5143\u683C");
          return;
        }
        const mainCell = (_a = this.activeTable) == null ? void 0 : _a.querySelector(`[row-index="${minRow}"][col-index="${minCol}"]`);
        if (!mainCell) {
          new import_obsidian4.Notice("\u65E0\u6CD5\u627E\u5230\u4E3B\u5355\u5143\u683C");
          return;
        }
        if (this.plugin.settings.confirmMergeNonEmpty) {
          const nonEmptyCells = this.selectedCells.filter((cell) => {
            var _a2;
            if (cell === mainCell)
              return false;
            const content = ((_a2 = cell.textContent) == null ? void 0 : _a2.trim()) || "";
            return content !== "" && content !== "<" && content !== "^";
          });
          if (nonEmptyCells.length > 0) {
            const cellContents = nonEmptyCells.map((cell) => {
              var _a2;
              return `"${((_a2 = cell.textContent) == null ? void 0 : _a2.trim()) || "(\u7A7A)"}"`;
            }).join(", ");
            const confirmMerge = await this.showConfirmDialog(
              `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9${cellContents}\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
            );
            if (!confirmMerge)
              return;
          }
        }
        const rowSpanValue = maxRow - minRow + 1;
        const colSpanValue = maxCol - minCol + 1;
        if (rowSpanValue > 1) {
          mainCell.setAttribute("rowspan", rowSpanValue.toString());
        }
        if (colSpanValue > 1) {
          mainCell.setAttribute("colspan", colSpanValue.toString());
        }
        for (const cell of this.selectedCells) {
          if (cell === mainCell)
            continue;
          const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
          const colIndex = parseInt(cell.getAttribute("col-index") || "0");
          if (rowIndex === minRow) {
            const markerCount = colIndex - minCol;
            cell.textContent = "<".repeat(markerCount);
            cell.setAttribute("data-merged", "true");
            cell.setAttribute("data-merge-direction", "left");
            cell.setAttribute("data-merge-count", markerCount.toString());
          } else if (colIndex === minCol) {
            const markerCount = rowIndex - minRow;
            cell.textContent = "^".repeat(markerCount);
            cell.setAttribute("data-merged", "true");
            cell.setAttribute("data-merge-direction", "up");
            cell.setAttribute("data-merge-count", markerCount.toString());
          } else {
            if (rowIndex > minRow && colIndex > minCol) {
              const markerCount = colIndex - minCol;
              cell.textContent = "<".repeat(markerCount);
              cell.setAttribute("data-merged", "true");
              cell.setAttribute("data-merge-direction", "left");
              cell.setAttribute("data-merge-count", markerCount.toString());
            }
          }
          cell.style.display = "none";
        }
        this.applyMergedCellStyles(mainCell, this.selectedCells.filter((cell) => cell !== mainCell));
        new import_obsidian4.Notice(`\u5DF2\u6210\u529F\u5408\u5E76${this.selectedCells.length}\u4E2A\u5355\u5143\u683C`);
        console.log("\u9884\u89C8\u6A21\u5F0F\u4E0B\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
        this.clearCellSelection();
      }
    } catch (error) {
      console.error("\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian4.Notice(`\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 向右合并单元格
   */
  async mergeRight() {
    var _a, _b;
    try {
      console.log("\u5C1D\u8BD5\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C");
      const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (!activeView) {
        new import_obsidian4.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      console.log(`\u5F53\u524D\u6A21\u5F0F: ${isEditMode ? "\u7F16\u8F91\u6A21\u5F0F" : "\u9884\u89C8\u6A21\u5F0F"}`);
      if (isEditMode && this.plugin.settings.enableEditModeOperations) {
        console.log("\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u4F7F\u7528 MarkdownSourceEditor \u5408\u5E76\u5355\u5143\u683C");
        const success = await this.plugin.markdownSourceEditor.mergeCells("right");
        if (success) {
          this.clearCellSelection();
          console.log("\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
        } else {
          console.log("\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25");
        }
      } else {
        if (this.selectedCells.length === 0) {
          new import_obsidian4.Notice("\u8BF7\u5148\u9009\u62E9\u8981\u5408\u5E76\u7684\u5355\u5143\u683C");
          return;
        }
        if (this.selectedCells.length > 1) {
          const rowIndices = /* @__PURE__ */ new Set();
          for (const cell2 of this.selectedCells) {
            const rowIndex2 = parseInt(cell2.getAttribute("row-index") || "0");
            rowIndices.add(rowIndex2);
          }
          if (rowIndices.size !== 1) {
            new import_obsidian4.Notice("\u5411\u53F3\u5408\u5E76\u9700\u8981\u9009\u62E9\u540C\u4E00\u884C\u7684\u5355\u5143\u683C");
            return;
          }
          const cellsWithIndices = this.selectedCells.map((cell2) => {
            return {
              cell: cell2,
              colIndex: parseInt(cell2.getAttribute("col-index") || "0")
            };
          }).sort((a, b) => a.colIndex - b.colIndex);
          for (let i = 1; i < cellsWithIndices.length; i++) {
            if (cellsWithIndices[i].colIndex !== cellsWithIndices[i - 1].colIndex + 1) {
              new import_obsidian4.Notice("\u9700\u8981\u9009\u62E9\u8FDE\u7EED\u7684\u5355\u5143\u683C\u8FDB\u884C\u5408\u5E76");
              return;
            }
          }
          const mainCell = cellsWithIndices[0].cell;
          const mergeCount = cellsWithIndices.length - 1;
          if (this.plugin.settings.confirmMergeNonEmpty) {
            const nonEmptyCells = cellsWithIndices.slice(1).filter((item) => {
              var _a2;
              const content = ((_a2 = item.cell.textContent) == null ? void 0 : _a2.trim()) || "";
              return content !== "" && content !== "<" && content !== "^";
            });
            if (nonEmptyCells.length > 0) {
              const cellContents = nonEmptyCells.map((item) => {
                var _a2;
                return `"${((_a2 = item.cell.textContent) == null ? void 0 : _a2.trim()) || "(\u7A7A)"}"`;
              }).join(", ");
              const confirmMerge = await this.showConfirmDialog(
                `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9${cellContents}\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
              );
              if (!confirmMerge)
                return;
            }
          }
          for (let i = 1; i < cellsWithIndices.length; i++) {
            const cell2 = cellsWithIndices[i].cell;
            cell2.textContent = "<".repeat(i);
            cell2.setAttribute("data-merged", "true");
            cell2.setAttribute("data-merge-direction", "left");
            cell2.setAttribute("data-merge-count", i.toString());
          }
          this.applyMergedCellStyles(mainCell, cellsWithIndices.slice(1).map((item) => item.cell));
          new import_obsidian4.Notice(`\u5DF2\u5411\u53F3\u5408\u5E76${mergeCount}\u4E2A\u5355\u5143\u683C`);
          console.log(`\u9884\u89C8\u6A21\u5F0F\u4E0B\u5411\u53F3\u5408\u5E76${mergeCount}\u4E2A\u5355\u5143\u683C\u6210\u529F`);
          this.clearCellSelection();
          return;
        }
        const cell = this.selectedCells[0];
        if (!cell) {
          console.log("\u672A\u627E\u5230\u9009\u4E2D\u7684\u5355\u5143\u683C");
          return;
        }
        const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || "0");
        console.log(`\u9009\u4E2D\u5355\u5143\u683C\u4F4D\u7F6E: \u884C=${rowIndex}, \u5217=${colIndex}`);
        const rightCell = (_a = this.activeTable) == null ? void 0 : _a.querySelector(`[row-index="${rowIndex}"][col-index="${colIndex + 1}"]`);
        if (!rightCell) {
          new import_obsidian4.Notice("\u53F3\u4FA7\u6CA1\u6709\u5355\u5143\u683C\u53EF\u5408\u5E76");
          return;
        }
        const rightContent = (_b = rightCell.textContent) == null ? void 0 : _b.trim();
        if (this.plugin.settings.confirmMergeNonEmpty && rightContent && rightContent !== "<" && rightContent !== "^") {
          const confirmed = await this.showConfirmDialog(
            `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9"${rightContent}"\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
          );
          if (!confirmed)
            return;
        }
        rightCell.textContent = "<";
        rightCell.setAttribute("data-merged", "true");
        rightCell.setAttribute("data-merge-direction", "left");
        this.applyMergedCellStyles(cell, [rightCell]);
        new import_obsidian4.Notice("\u5DF2\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C");
        console.log("\u9884\u89C8\u6A21\u5F0F\u4E0B\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
      }
    } catch (error) {
      console.error("\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian4.Notice(`\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 向下合并单元格
   */
  async mergeDown() {
    var _a, _b;
    try {
      console.log("\u5C1D\u8BD5\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C");
      const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (!activeView) {
        new import_obsidian4.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      console.log(`\u5F53\u524D\u6A21\u5F0F: ${isEditMode ? "\u7F16\u8F91\u6A21\u5F0F" : "\u9884\u89C8\u6A21\u5F0F"}`);
      if (isEditMode && this.plugin.settings.enableEditModeOperations) {
        console.log("\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\u4F7F\u7528 MarkdownSourceEditor \u5408\u5E76\u5355\u5143\u683C");
        const success = await this.plugin.markdownSourceEditor.mergeCells("down");
        if (success) {
          this.clearCellSelection();
          console.log("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
        } else {
          console.log("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25");
        }
      } else {
        if (this.selectedCells.length === 0) {
          new import_obsidian4.Notice("\u8BF7\u5148\u9009\u62E9\u8981\u5408\u5E76\u7684\u5355\u5143\u683C");
          return;
        }
        if (this.selectedCells.length > 1) {
          const colIndices = /* @__PURE__ */ new Set();
          for (const cell2 of this.selectedCells) {
            const colIndex2 = parseInt(cell2.getAttribute("col-index") || "0");
            colIndices.add(colIndex2);
          }
          if (colIndices.size !== 1) {
            new import_obsidian4.Notice("\u5411\u4E0B\u5408\u5E76\u9700\u8981\u9009\u62E9\u540C\u4E00\u5217\u7684\u5355\u5143\u683C");
            return;
          }
          const cellsWithIndices = this.selectedCells.map((cell2) => {
            return {
              cell: cell2,
              rowIndex: parseInt(cell2.getAttribute("row-index") || "0")
            };
          }).sort((a, b) => a.rowIndex - b.rowIndex);
          for (let i = 1; i < cellsWithIndices.length; i++) {
            if (cellsWithIndices[i].rowIndex !== cellsWithIndices[i - 1].rowIndex + 1) {
              new import_obsidian4.Notice("\u9700\u8981\u9009\u62E9\u8FDE\u7EED\u7684\u5355\u5143\u683C\u8FDB\u884C\u5408\u5E76");
              return;
            }
          }
          const mainCell = cellsWithIndices[0].cell;
          const mergeCount = cellsWithIndices.length - 1;
          if (this.plugin.settings.confirmMergeNonEmpty) {
            const nonEmptyCells = cellsWithIndices.slice(1).filter((item) => {
              var _a2;
              const content = ((_a2 = item.cell.textContent) == null ? void 0 : _a2.trim()) || "";
              return content !== "" && content !== "<" && content !== "^";
            });
            if (nonEmptyCells.length > 0) {
              const cellContents = nonEmptyCells.map((item) => {
                var _a2;
                return `"${((_a2 = item.cell.textContent) == null ? void 0 : _a2.trim()) || "(\u7A7A)"}"`;
              }).join(", ");
              const confirmMerge = await this.showConfirmDialog(
                `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9${cellContents}\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
              );
              if (!confirmMerge)
                return;
            }
          }
          for (let i = 1; i < cellsWithIndices.length; i++) {
            const cell2 = cellsWithIndices[i].cell;
            cell2.textContent = "^".repeat(i);
            cell2.setAttribute("data-merged", "true");
            cell2.setAttribute("data-merge-direction", "up");
            cell2.setAttribute("data-merge-count", i.toString());
          }
          this.applyMergedCellStyles(mainCell, cellsWithIndices.slice(1).map((item) => item.cell));
          new import_obsidian4.Notice(`\u5DF2\u5411\u4E0B\u5408\u5E76${mergeCount}\u4E2A\u5355\u5143\u683C`);
          console.log(`\u9884\u89C8\u6A21\u5F0F\u4E0B\u5411\u4E0B\u5408\u5E76${mergeCount}\u4E2A\u5355\u5143\u683C\u6210\u529F`);
          this.clearCellSelection();
          return;
        }
        const cell = this.selectedCells[0];
        if (!cell) {
          console.log("\u672A\u627E\u5230\u9009\u4E2D\u7684\u5355\u5143\u683C");
          return;
        }
        const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
        const colIndex = parseInt(cell.getAttribute("col-index") || "0");
        console.log(`\u9009\u4E2D\u5355\u5143\u683C\u4F4D\u7F6E: \u884C=${rowIndex}, \u5217=${colIndex}`);
        const belowCell = (_a = this.activeTable) == null ? void 0 : _a.querySelector(`[row-index="${rowIndex + 1}"][col-index="${colIndex}"]`);
        if (!belowCell) {
          new import_obsidian4.Notice("\u4E0B\u65B9\u6CA1\u6709\u5355\u5143\u683C\u53EF\u5408\u5E76");
          return;
        }
        const belowContent = (_b = belowCell.textContent) == null ? void 0 : _b.trim();
        if (this.plugin.settings.confirmMergeNonEmpty && belowContent && belowContent !== "<" && belowContent !== "^") {
          const confirmed = await this.showConfirmDialog(
            `\u8981\u5408\u5E76\u7684\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9"${belowContent}"\uFF0C\u786E\u5B9A\u8981\u5408\u5E76\u5417\uFF1F`
          );
          if (!confirmed)
            return;
        }
        belowCell.textContent = "^";
        belowCell.setAttribute("data-merged", "true");
        belowCell.setAttribute("data-merge-direction", "up");
        this.applyMergedCellStyles(cell, [belowCell]);
        new import_obsidian4.Notice("\u5DF2\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C");
        console.log("\u9884\u89C8\u6A21\u5F0F\u4E0B\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u6210\u529F");
      }
    } catch (error) {
      console.error("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian4.Notice(`\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 拆分单元格
   */
  splitCell() {
    try {
      if (this.selectedCells.length !== 1) {
        console.log("\u9700\u8981\u9009\u62E9\u4E00\u4E2A\u5355\u5143\u683C\u8FDB\u884C\u62C6\u5206");
        new import_obsidian4.Notice("\u8BF7\u9009\u62E9\u4E00\u4E2A\u5355\u5143\u683C\u8FDB\u884C\u62C6\u5206");
        return;
      }
      console.log("\u5F00\u59CB\u62C6\u5206\u5355\u5143\u683C");
      const cell = this.selectedCells[0];
      const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
      const colIndex = parseInt(cell.getAttribute("col-index") || "0");
      const colSpan = cell.getAttribute("colspan");
      const rowSpan = cell.getAttribute("rowspan");
      const table = cell.closest("table");
      let hasMergeMarkers = false;
      if (table) {
        const rightCell = table.querySelector(`[row-index="${rowIndex}"][col-index="${colIndex + 1}"]`);
        if (rightCell && rightCell.textContent) {
          const rightContent = rightCell.textContent.trim();
          if (rightContent === "<" || rightContent === "^") {
            hasMergeMarkers = true;
            rightCell.textContent = "";
            console.log("\u5DF2\u6E05\u9664\u53F3\u4FA7\u5355\u5143\u683C\u7684\u5408\u5E76\u6807\u8BB0");
          }
        }
        const belowCell = table.querySelector(`[row-index="${rowIndex + 1}"][col-index="${colIndex}"]`);
        if (belowCell && belowCell.textContent) {
          const belowContent = belowCell.textContent.trim();
          if (belowContent === "<" || belowContent === "^") {
            hasMergeMarkers = true;
            belowCell.textContent = "";
            console.log("\u5DF2\u6E05\u9664\u4E0B\u65B9\u5355\u5143\u683C\u7684\u5408\u5E76\u6807\u8BB0");
          }
        }
        for (let i = colIndex + 1; i < colIndex + 10; i++) {
          const nextCell = table.querySelector(`[row-index="${rowIndex}"][col-index="${i}"]`);
          if (nextCell && nextCell.textContent && nextCell.textContent.trim() === "<") {
            nextCell.textContent = "";
            hasMergeMarkers = true;
            console.log(`\u5DF2\u6E05\u9664\u4F4D\u7F6E (${rowIndex}, ${i}) \u7684\u6C34\u5E73\u5408\u5E76\u6807\u8BB0`);
          } else {
            break;
          }
        }
        for (let i = rowIndex + 1; i < rowIndex + 10; i++) {
          const nextCell = table.querySelector(`[row-index="${i}"][col-index="${colIndex}"]`);
          if (nextCell && nextCell.textContent && nextCell.textContent.trim() === "^") {
            nextCell.textContent = "";
            hasMergeMarkers = true;
            console.log(`\u5DF2\u6E05\u9664\u4F4D\u7F6E (${i}, ${colIndex}) \u7684\u5782\u76F4\u5408\u5E76\u6807\u8BB0`);
          } else {
            break;
          }
        }
      }
      if (!colSpan && !rowSpan && !hasMergeMarkers) {
        console.log("\u9009\u4E2D\u7684\u5355\u5143\u683C\u6CA1\u6709\u5408\u5E76\u5C5E\u6027\uFF0C\u65E0\u9700\u62C6\u5206");
        new import_obsidian4.Notice("\u9009\u4E2D\u7684\u5355\u5143\u683C\u6CA1\u6709\u5408\u5E76\u5C5E\u6027\uFF0C\u65E0\u9700\u62C6\u5206");
        return;
      }
      if (colSpan) {
        cell.removeAttribute("colspan");
      }
      if (rowSpan) {
        cell.removeAttribute("rowspan");
      }
      if (table) {
        const hiddenCells = table.querySelectorAll('td[style*="display: none"], th[style*="display: none"]');
        hiddenCells.forEach((hiddenCell) => {
          hiddenCell.style.display = "";
        });
      }
      new import_obsidian4.Notice("\u5DF2\u62C6\u5206\u5355\u5143\u683C");
      console.log("\u5355\u5143\u683C\u62C6\u5206\u5B8C\u6210");
      this.clearCellSelection();
    } catch (error) {
      console.error("\u62C6\u5206\u5355\u5143\u683C\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u62C6\u5206\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 生成表格ID
   */
  generateTableId() {
    var _a;
    try {
      const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (!activeView) {
        new import_obsidian4.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      const filePath = ((_a = activeView.file) == null ? void 0 : _a.path) || "unknown";
      const suggestedId = this.generateUniqueTableId();
      if (isEditMode && this.plugin.settings.enableEditModeOperations) {
        new import_obsidian4.Notice("\u8BF7\u624B\u52A8\u5728\u8868\u683C\u524D\u6DFB\u52A0HTML\u6CE8\u91CA: <!-- table-id: \u4F60\u7684\u8868\u683CID -->", 1e4);
        const editor = activeView.editor;
        const tableInfo = this.plugin.markdownSourceEditor.locateTableInMarkdown(editor);
        if (tableInfo) {
          if (tableInfo.tableId) {
            new import_obsidian4.Notice(`\u8868\u683C\u5DF2\u6709ID: ${tableInfo.tableId}`);
            return;
          }
          const tableStartLine = tableInfo.startLine;
          const currentPos = editor.getCursor();
          editor.replaceRange(`<!-- table-id: ${suggestedId} -->
`, { line: tableStartLine, ch: 0 });
          editor.setCursor(currentPos);
          console.log("\u5DF2\u63D0\u793A\u7528\u6237\u6DFB\u52A0\u8868\u683CID:", suggestedId);
          this.initializeTableData(suggestedId, {
            path: filePath,
            startLine: tableInfo.startLine,
            endLine: tableInfo.endLine
          });
        } else {
          new import_obsidian4.Notice("\u672A\u627E\u5230\u8868\u683C\uFF0C\u8BF7\u786E\u4FDD\u5149\u6807\u5728\u8868\u683C\u5185");
        }
      } else {
        if (!this.activeTable) {
          new import_obsidian4.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
          return;
        }
        this.plugin.readTableIdFromMarkdown(this.activeTable).then((existingId) => {
          if (existingId) {
            new import_obsidian4.Notice(`\u8868\u683C\u5DF2\u6709ID: ${existingId}`);
            return;
          }
          new import_obsidian4.Notice("\u8BF7\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\uFF0C\u624B\u52A8\u5728\u8868\u683C\u524D\u6DFB\u52A0HTML\u6CE8\u91CA: <!-- table-id: \u4F60\u7684\u8868\u683CID -->", 1e4);
          new import_obsidian4.Notice(`\u5EFA\u8BAE\u7684\u8868\u683CID: ${suggestedId}`, 1e4);
          console.log("\u5DF2\u63D0\u793A\u7528\u6237\u6DFB\u52A0\u8868\u683CID:", suggestedId);
          const allDocTables = document.querySelectorAll("table");
          const tableIndex = Array.from(allDocTables).indexOf(this.activeTable);
          this.initializeTableData(suggestedId, {
            path: filePath,
            index: tableIndex
          });
        }).catch((error) => {
          console.error("\u68C0\u67E5\u8868\u683CID\u65F6\u51FA\u9519:", error);
          new import_obsidian4.Notice("\u8BF7\u5728\u7F16\u8F91\u6A21\u5F0F\u4E0B\uFF0C\u624B\u52A8\u5728\u8868\u683C\u524D\u6DFB\u52A0HTML\u6CE8\u91CA: <!-- table-id: \u4F60\u7684\u8868\u683CID -->", 1e4);
          new import_obsidian4.Notice(`\u5EFA\u8BAE\u7684\u8868\u683CID: ${suggestedId}`, 1e4);
        });
      }
    } catch (error) {
      console.error("\u751F\u6210\u8868\u683CID\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 初始化表格数据结构
   * @param tableId 表格ID
   * @param fileInfo 文件信息
   */
  initializeTableData(tableId, fileInfo) {
    try {
      const rowCount = this.activeTable ? this.activeTable.querySelectorAll("tr").length : 5;
      const colCount = this.activeTable && this.activeTable.querySelector("tr") ? this.activeTable.querySelector("tr").querySelectorAll("td, th").length : 3;
      const hasHeaders = this.activeTable ? this.activeTable.querySelectorAll("th").length > 0 : true;
      const styling = {
        rowHeights: Array(rowCount).fill("auto"),
        colWidths: Array(colCount).fill("auto"),
        alignment: Array(colCount).fill("left"),
        cellStyles: []
      };
      this.plugin.tableStateManager.saveTableStyle(tableId, styling, fileInfo).then(() => {
        console.log(`\u5DF2\u521D\u59CB\u5316\u8868\u683C\u6570\u636E: ${tableId}`);
      }).catch((err) => {
        console.error("\u521D\u59CB\u5316\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", err);
      });
    } catch (error) {
      console.error("\u521D\u59CB\u5316\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 生成唯一的表格ID
   * @returns 格式为 tbl-YYYYMMDD-xxxxxxxx 的唯一ID
   */
  generateUniqueTableId() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const dateStr = `${year}${month}${day}`;
    const randomChars = "abcdefghijklmnopqrstuvwxyz0123456789";
    let randomStr = "";
    for (let i = 0; i < 8; i++) {
      randomStr += randomChars.charAt(Math.floor(Math.random() * randomChars.length));
    }
    return `tbl-${dateStr}-${randomStr}`;
  }
  /**
   * 检查表格是否已有ID
   * @param editor 编辑器实例
   * @returns 已有ID或null
   */
  checkExistingTableId(editor) {
    const content = editor.getValue();
    const lines = content.split("\n");
    let tableStartLine = -1;
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].trim().startsWith("|") && lines[i].includes("|")) {
        if (i + 1 < lines.length && lines[i + 1].trim().match(/^\|[-:\s|]*\|$/)) {
          tableStartLine = i;
          break;
        }
      }
    }
    if (tableStartLine === -1) {
      return null;
    }
    let idCommentLine = tableStartLine - 1;
    while (idCommentLine >= 0 && (lines[idCommentLine].trim() === "" || lines[idCommentLine].trim().startsWith("<!--"))) {
      const line = lines[idCommentLine].trim();
      if (line.includes("table-id:")) {
        const match = line.match(/table-id:\s*([^\s>]+)/);
        return match ? match[1] : null;
      }
      idCommentLine--;
    }
    return null;
  }
  /**
   * 提取并存储表格信息
   * @param tableId 表格ID
   * @param tableElement 表格元素
   * @param filePath 文件路径
   */
  extractAndStoreTableInfo(tableId, tableElement, filePath) {
    try {
      const rows = tableElement.querySelectorAll("tr");
      const rowCount = rows.length;
      let colCount = 0;
      let hasHeaders = false;
      if (rowCount > 0) {
        const firstRow = rows[0];
        const headerCells = firstRow.querySelectorAll("th");
        hasHeaders = headerCells.length > 0;
        for (const row of Array.from(rows)) {
          const cellCount = row.querySelectorAll("td, th").length;
          colCount = Math.max(colCount, cellCount);
        }
      }
      const mergeInfo = this.extractMergeInfo(tableElement);
      console.log(`\u63D0\u53D6\u8868\u683C\u5408\u5E76\u4FE1\u606F:`, mergeInfo);
      const tableInfo = {
        id: tableId,
        locations: [
          {
            path: filePath,
            isActive: true
          }
        ],
        structure: {
          rowCount,
          colCount,
          hasHeaders
        },
        styling: {
          rowHeights: Array(rowCount).fill("auto"),
          colWidths: Array(colCount).fill("auto"),
          alignment: Array(colCount).fill("left")
        }
      };
      console.log(`\u4FDD\u5B58\u8868\u683C\u4FE1\u606F: ID=${tableId}, \u884C\u6570=${rowCount}, \u5217\u6570=${colCount}, \u8868\u5934=${hasHeaders}`);
      this.plugin.saveTableData(tableInfo);
    } catch (error) {
      console.error("\u63D0\u53D6\u8868\u683C\u4FE1\u606F\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 提取表格的合并信息
   * @param tableElement 表格元素
   * @returns 合并信息对象
   */
  extractMergeInfo(tableElement) {
    var _a;
    const mergeInfo = {
      horizontal: [],
      vertical: []
    };
    const rows = tableElement.querySelectorAll("tr");
    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
      const row = rows[rowIndex];
      const cells = row.querySelectorAll("td, th");
      for (let colIndex = 0; colIndex < cells.length; colIndex++) {
        const cell = cells[colIndex];
        const content = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
        const leftMatch = content.match(/^(<+)$/);
        if (leftMatch) {
          const count = leftMatch[1].length;
          mergeInfo.horizontal.push({
            row: rowIndex,
            col: colIndex,
            count,
            content
          });
        }
        const upMatch = content.match(/^(\^+)$/);
        if (upMatch) {
          const count = upMatch[1].length;
          mergeInfo.vertical.push({
            row: rowIndex,
            col: colIndex,
            count,
            content
          });
        }
        const colspan = parseInt(cell.getAttribute("colspan") || "1");
        const rowspan = parseInt(cell.getAttribute("rowspan") || "1");
        if (colspan > 1 || rowspan > 1) {
          console.log(`\u53D1\u73B0\u5408\u5E76\u5355\u5143\u683C: \u4F4D\u7F6E(${rowIndex},${colIndex}), colspan=${colspan}, rowspan=${rowspan}`);
        }
      }
    }
    return mergeInfo;
  }
  /**
   * 显示添加行菜单
   */
  showRowAddMenu() {
    try {
      if (!this.activeTable) {
        console.log("\u65E0\u6D3B\u52A8\u8868\u683C\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u884C");
        new import_obsidian4.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
        return;
      }
      console.log("\u663E\u793A\u6DFB\u52A0\u884C\u83DC\u5355");
      const menu = new import_obsidian4.Menu();
      menu.addItem(
        (item) => item.setTitle("\u5728\u4E0A\u65B9\u6DFB\u52A0\u884C").setIcon("arrow-up").onClick(() => this.addRow("above"))
      );
      menu.addItem(
        (item) => item.setTitle("\u5728\u4E0B\u65B9\u6DFB\u52A0\u884C").setIcon("arrow-down").onClick(() => this.addRow("below"))
      );
      const toolbarEl = this.toolbar;
      if (toolbarEl) {
        const rect = toolbarEl.getBoundingClientRect();
        menu.showAtPosition({ x: rect.left, y: rect.bottom });
      } else {
        menu.showAtMouseEvent(event);
      }
    } catch (error) {
      console.error("\u663E\u793A\u6DFB\u52A0\u884C\u83DC\u5355\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u663E\u793A\u6DFB\u52A0\u884C\u83DC\u5355\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 添加行
   * @param position 位置，above 或 below
   */
  addRow(position) {
    var _a, _b;
    try {
      if (!this.activeTable) {
        console.log("\u65E0\u6D3B\u52A8\u8868\u683C\uFF0C\u65E0\u6CD5\u6DFB\u52A0\u884C");
        new import_obsidian4.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
        return;
      }
      console.log("\u5F00\u59CB\u6DFB\u52A0\u884C:", position);
      let targetRow = null;
      if (this.selectedCells.length > 0) {
        targetRow = this.selectedCells[0].closest("tr");
      } else {
        targetRow = this.activeTable.querySelector("tr");
      }
      if (!targetRow) {
        console.error("\u65E0\u6CD5\u627E\u5230\u76EE\u6807\u884C");
        new import_obsidian4.Notice("\u65E0\u6CD5\u627E\u5230\u76EE\u6807\u884C");
        return;
      }
      const cellCount = targetRow.querySelectorAll("td, th").length;
      const newRow = document.createElement("tr");
      for (let i = 0; i < cellCount; i++) {
        const cell = document.createElement("td");
        cell.textContent = "";
        newRow.appendChild(cell);
      }
      if (position === "above") {
        (_a = targetRow.parentNode) == null ? void 0 : _a.insertBefore(newRow, targetRow);
      } else {
        (_b = targetRow.parentNode) == null ? void 0 : _b.insertBefore(newRow, targetRow.nextSibling);
      }
      new import_obsidian4.Notice(`\u5DF2\u5728${position === "above" ? "\u4E0A\u65B9" : "\u4E0B\u65B9"}\u6DFB\u52A0\u884C`);
      console.log("\u6DFB\u52A0\u884C\u5B8C\u6210:", position);
    } catch (error) {
      console.error("\u6DFB\u52A0\u884C\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u6DFB\u52A0\u884C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
    }
  }
  /**
   * 更新行索引
   */
  updateRowIndices() {
    if (!this.activeTable)
      return;
    const rows = this.activeTable.querySelectorAll("tr");
    rows.forEach((row, rowIndex) => {
      const cells = row.querySelectorAll("td, th");
      cells.forEach((cell, colIndex) => {
        cell.setAttribute("row-index", rowIndex.toString());
        cell.setAttribute("col-index", colIndex.toString());
      });
    });
  }
  /**
   * 显示样式菜单
   */
  showStyleMenu() {
    const menu = new import_obsidian4.Menu();
    menu.addItem(
      (item) => item.setTitle("\u8BBE\u7F6E\u8868\u683C\u6837\u5F0F").setIcon("brush").onClick(() => {
        new import_obsidian4.Notice("\u6837\u5F0F\u8BBE\u7F6E\u529F\u80FD\u6B63\u5728\u5F00\u53D1\u4E2D");
      })
    );
    menu.addItem(
      (item) => item.setTitle("\u8BBE\u7F6E\u6761\u7EB9\u6837\u5F0F").setIcon("lines").onClick(() => this.applyStripedStyle())
    );
    menu.addItem(
      (item) => item.setTitle("\u8BBE\u7F6E\u8FB9\u6846\u6837\u5F0F").setIcon("box").onClick(() => this.applyBorderedStyle())
    );
    const button = this.toolbar.querySelector(".table-style");
    const rect = button.getBoundingClientRect();
    menu.showAtPosition({ x: rect.left, y: rect.bottom });
  }
  /**
   * 应用条纹样式
   */
  applyStripedStyle() {
    if (!this.activeTable) {
      new import_obsidian4.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
      return;
    }
    const rows = this.activeTable.querySelectorAll("tr");
    rows.forEach((row, index) => {
      if (index > 0 && index % 2 === 1) {
        const cells = row.querySelectorAll("td");
        cells.forEach((cell) => {
          cell.style.backgroundColor = "var(--background-secondary)";
        });
      }
    });
    new import_obsidian4.Notice("\u5DF2\u5E94\u7528\u6761\u7EB9\u6837\u5F0F");
  }
  /**
   * 应用边框样式
   */
  applyBorderedStyle() {
    if (!this.activeTable) {
      new import_obsidian4.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u8868\u683C");
      return;
    }
    this.activeTable.style.borderCollapse = "collapse";
    const cells = this.activeTable.querySelectorAll("td, th");
    cells.forEach((cell) => {
      cell.style.border = "1px solid var(--background-modifier-border)";
      cell.style.padding = "4px 8px";
    });
    new import_obsidian4.Notice("\u5DF2\u5E94\u7528\u8FB9\u6846\u6837\u5F0F");
  }
  /**
   * 设置活动表格
   * @param table 表格元素
   */
  setActiveTable(table) {
    try {
      this.plugin.removeAllTableHighlights();
      this.clearSelection();
      this.activeTable = table;
      if (this.plugin.settings.enableTableResize) {
        this.plugin.tableResizeHandler.setActiveTable(table);
      }
      this.plugin.highlightSelectedTable(table);
      this.toolbar.style.display = "flex";
      this.setupCellSelection();
      const tableId = this.plugin.tableIdManager.getTableIdentifier(table);
      console.log(`\u8BBE\u7F6E\u6D3B\u52A8\u8868\u683C: ${tableId || "\u672A\u77E5ID"}`);
    } catch (error) {
      console.error("\u8BBE\u7F6E\u6D3B\u52A8\u8868\u683C\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置编辑模式下的活动表格
   * @param tableInfo 表格信息
   */
  setActiveEditModeTable(tableInfo) {
    try {
      if (this.activeTable) {
        this.clearCellSelection();
        this.activeTable.dataset.tableSelected = "false";
        this.activeTable.style.outline = "";
        this.activeTable.style.outlineOffset = "";
        this.activeTable = null;
      }
      this.editModeTableInfo = tableInfo;
      new import_obsidian4.Notice("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u5DF2\u9009\u4E2D\u8868\u683C\uFF0C\u53EF\u4EE5\u4F7F\u7528\u5DE5\u5177\u680F\u8FDB\u884C\u64CD\u4F5C", 2e3);
      console.log("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u9009\u62E9\u4E86\u8868\u683C:", tableInfo);
    } catch (error) {
      console.error("\u8BBE\u7F6E\u7F16\u8F91\u6A21\u5F0F\u6D3B\u52A8\u8868\u683C\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 检查当前是否在编辑模式下
   * @returns 是否在编辑模式下
   */
  isInEditMode() {
    const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
    return activeView ? activeView.getMode() === "source" : false;
  }
  /**
   * 设置单元格选择功能
   */
  setupCellSelection() {
    if (!this.activeTable)
      return;
    const cells = this.activeTable.querySelectorAll("td, th");
    cells.forEach((cell) => {
      const cellEl = cell;
      cellEl.onclick = (event2) => this.handleCellClick(cellEl, event2);
    });
  }
  /**
   * 处理单元格点击事件
   * @param cell 单元格元素
   * @param event 事件对象
   */
  handleCellClick(cell, event2) {
    event2.stopPropagation();
    if (!event2.ctrlKey && !event2.metaKey) {
      this.clearCellSelection();
    }
    const index = this.selectedCells.indexOf(cell);
    if (index === -1) {
      this.selectedCells.push(cell);
      cell.classList.add("selected-cell");
      cell.style.backgroundColor = "var(--text-selection)";
      const position = this.selectedCells.length > 1 ? "\u591A\u9009\u6A21\u5F0F" : "\u5DF2\u9009\u62E9\u5355\u5143\u683C";
      new import_obsidian4.Notice(`${position} (${this.selectedCells.length})`, 1e3);
    } else {
      this.selectedCells.splice(index, 1);
      cell.classList.remove("selected-cell");
      cell.style.backgroundColor = "";
      if (this.selectedCells.length > 0) {
        new import_obsidian4.Notice(`\u5DF2\u9009\u62E9 ${this.selectedCells.length} \u4E2A\u5355\u5143\u683C`, 1e3);
      }
    }
    console.log("\u5DF2\u9009\u62E9\u5355\u5143\u683C:", this.selectedCells.length);
  }
  /**
   * 清除单元格选择
   */
  clearCellSelection() {
    this.selectedCells.forEach((cell) => {
      cell.classList.remove("selected-cell");
      cell.style.backgroundColor = "";
    });
    this.selectedCells = [];
  }
  /**
   * 显示确认对话框
   * @param message 确认消息
   * @returns 用户是否确认
   */
  async showConfirmDialog(message) {
    return new Promise((resolve) => {
      const notice = new import_obsidian4.Notice(message, 0);
      const buttonContainer = document.createElement("div");
      buttonContainer.style.display = "flex";
      buttonContainer.style.justifyContent = "space-between";
      buttonContainer.style.marginTop = "10px";
      const cancelButton = document.createElement("button");
      cancelButton.textContent = "\u53D6\u6D88";
      cancelButton.onclick = () => {
        notice.hide();
        resolve(false);
      };
      const confirmButton = document.createElement("button");
      confirmButton.textContent = "\u786E\u5B9A";
      confirmButton.style.marginLeft = "10px";
      confirmButton.onclick = () => {
        notice.hide();
        resolve(true);
      };
      buttonContainer.appendChild(cancelButton);
      buttonContainer.appendChild(confirmButton);
      notice.noticeEl.appendChild(buttonContainer);
    });
  }
  /**
   * 应用合并单元格的样式
   * @param mainCell 主单元格（保留的单元格）
   * @param mergedCells 被合并的单元格（将被隐藏）
   */
  applyMergedCellStyles(mainCell, mergedCells) {
    mainCell.classList.add("obs-merged-cell-main");
    if (this.plugin.settings.autoCenterMergedCells) {
      mainCell.style.textAlign = "center";
      mainCell.style.verticalAlign = "middle";
    }
    for (const cell of mergedCells) {
      cell.style.display = "none";
    }
    mainCell.setAttribute("data-merged-main", "true");
  }
  /**
   * 清除表格选择
   */
  clearSelection() {
    try {
      this.selectedCells.forEach((cell) => {
        cell.classList.remove("selected");
      });
      this.selectedCells = [];
      this.activeTable = null;
      if (this.plugin.settings.enableTableResize) {
        this.plugin.tableResizeHandler.setActiveTable(null);
      }
      this.toolbar.style.display = "none";
    } catch (error) {
      console.error("\u6E05\u9664\u9009\u62E9\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 获取选中单元格的边界
   * @returns 边界信息 {minRow, maxRow, minCol, maxCol}
   */
  getSelectedCellsBoundary() {
    if (!this.selectedCells || this.selectedCells.length === 0) {
      return null;
    }
    let minRow = Number.MAX_SAFE_INTEGER;
    let maxRow = 0;
    let minCol = Number.MAX_SAFE_INTEGER;
    let maxCol = 0;
    for (const cell of this.selectedCells) {
      const rowIndex = parseInt(cell.getAttribute("row-index") || "0");
      const colIndex = parseInt(cell.getAttribute("col-index") || "0");
      minRow = Math.min(minRow, rowIndex);
      maxRow = Math.max(maxRow, rowIndex);
      minCol = Math.min(minCol, colIndex);
      maxCol = Math.max(maxCol, colIndex);
    }
    return { minRow, maxRow, minCol, maxCol };
  }
  /**
   * 显示工具栏
   */
  showToolbar() {
    if (this.toolbar) {
      this.toolbar.style.display = "flex";
    }
  }
  /**
   * 隐藏工具栏
   */
  hideToolbar() {
    if (this.toolbar) {
      this.toolbar.style.display = "none";
    }
  }
};

// src/markdownSourceEditor.ts
var import_obsidian6 = require("obsidian");
var MarkdownSourceEditor = class {
  constructor(plugin) {
    this.plugin = plugin;
    console.log("MarkdownSourceEditor initialized");
  }
  /**
   * 获取当前活动的编辑器
   * @returns 编辑器实例或null
   */
  getActiveEditor() {
    const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
    if (activeView && activeView.editor) {
      return activeView.editor;
    }
    return null;
  }
  /**
   * 在Markdown源码中定位表格
   * @param editor 编辑器实例
   * @returns 表格信息或null
   */
  locateTableInMarkdown(editor) {
    try {
      const content = editor.getValue();
      const cursor = editor.getCursor();
      const lines = content.split("\n");
      const cursorLine = lines[cursor.line];
      const isInTableRow = cursorLine && cursorLine.trim().startsWith("|") && cursorLine.trim().endsWith("|");
      if (!isInTableRow)
        return null;
      let startLine = cursor.line;
      while (startLine > 0 && lines[startLine - 1].trim().startsWith("|")) {
        startLine--;
      }
      let endLine = cursor.line;
      while (endLine < lines.length - 1 && lines[endLine + 1].trim().startsWith("|")) {
        endLine++;
      }
      if (!this.isValidTable(lines.slice(startLine, endLine + 1))) {
        return null;
      }
      const tableId = this.findTableIdAbove(editor, startLine);
      return {
        startLine,
        endLine,
        content: lines.slice(startLine, endLine + 1).join("\n"),
        tableId
      };
    } catch (error) {
      console.error("\u5B9A\u4F4DMarkdown\u8868\u683C\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 在表格上方查找表格ID
   * @param editor 编辑器实例
   * @param tableLine 表格起始行
   * @returns 表格ID或undefined
   */
  findTableIdAbove(editor, tableLine) {
    console.log(`\u67E5\u627E\u8868\u683CID: \u8868\u683C\u8D77\u59CB\u884C=${tableLine}`);
    const maxLinesToCheck = 10;
    let currentLine = tableLine - 1;
    const minLine = Math.max(0, tableLine - maxLinesToCheck);
    while (currentLine >= minLine) {
      const line = editor.getLine(currentLine);
      if (!line)
        break;
      console.log(`\u68C0\u67E5\u884C ${currentLine}: "${line}"`);
      const standardIdMatch = line.match(/<!--\s*table-id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (standardIdMatch && standardIdMatch[1]) {
        const id = standardIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u6807\u51C6\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const noHyphenIdMatch = line.match(/<!--\s*tableid:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (noHyphenIdMatch && noHyphenIdMatch[1]) {
        const id = noHyphenIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u65E0\u8FDE\u5B57\u7B26\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const simpleIdMatch = line.match(/<!--\s*id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (simpleIdMatch && simpleIdMatch[1]) {
        const id = simpleIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u7B80\u5316\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const tableNameIdMatch = line.match(/<!--\s*(table|tbl):\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (tableNameIdMatch && tableNameIdMatch[2]) {
        const id = tableNameIdMatch[2];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u8868\u683C\u540D\u79F0\u683C\u5F0FID: ${id}`);
        return id;
      }
      const noSpaceIdMatch = line.match(/<!--table-id:([a-zA-Z0-9_\-:.]+)-->/i);
      if (noSpaceIdMatch && noSpaceIdMatch[1]) {
        const id = noSpaceIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u65E0\u7A7A\u683C\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      if (line.trim() !== "" && !line.trim().startsWith("<!--") && !line.trim().startsWith("//")) {
        console.log(`\u5728\u884C ${currentLine} \u9047\u5230\u975E\u7A7A\u975E\u6CE8\u91CA\u884C\uFF0C\u505C\u6B62\u641C\u7D22`);
        break;
      }
      currentLine--;
    }
    console.log("\u672A\u627E\u5230\u8868\u683CID");
    return void 0;
  }
  /**
   * 验证Markdown表格结构是否有效
   * @param lines 表格行数组
   * @returns 是否为有效表格
   */
  isValidTable(lines) {
    if (lines.length < 2)
      return false;
    const firstLine = lines[0].trim();
    if (!firstLine.startsWith("|") || !firstLine.endsWith("|"))
      return false;
    const secondLine = lines[1].trim();
    if (!secondLine.startsWith("|") || !secondLine.endsWith("|"))
      return false;
    const separatorCells = secondLine.split("|").slice(1, -1);
    for (const cell of separatorCells) {
      const trimmedCell = cell.trim();
      if (!trimmedCell.match(/^:?-+:?$/)) {
        return false;
      }
    }
    for (let i = 2; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line.startsWith("|") || !line.endsWith("|")) {
        return false;
      }
    }
    return true;
  }
  /**
   * 为Markdown表格添加ID
   * @returns 添加的表格ID或null
   */
  async addTableIdToMarkdown() {
    try {
      const editor = this.getActiveEditor();
      if (!editor) {
        new import_obsidian6.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return null;
      }
      const tableInfo = this.locateTableInMarkdown(editor);
      if (!tableInfo) {
        new import_obsidian6.Notice("\u672A\u627E\u5230\u8868\u683C\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return null;
      }
      const tableId = this.checkExistingTableId(editor, tableInfo.startLine);
      if (tableId) {
        new import_obsidian6.Notice(`\u8868\u683C\u5DF2\u6709ID: ${tableId}`);
        return tableId;
      }
      const newTableId = this.generateUniqueTableId();
      console.log(`\u4E3A\u8868\u683C\u6DFB\u52A0\u65B0ID: ${newTableId}, \u8868\u683C\u8D77\u59CB\u884C: ${tableInfo.startLine}`);
      let insertPosition = { line: tableInfo.startLine, ch: 0 };
      let insertContent = `<!-- table-id: ${newTableId} -->
`;
      if (tableInfo.startLine > 0) {
        const prevLine = editor.getLine(tableInfo.startLine - 1);
        if (prevLine && prevLine.trim() !== "") {
          insertContent = `
<!-- table-id: ${newTableId} -->
`;
        }
      }
      editor.replaceRange(insertContent, insertPosition);
      this.saveTableInfo(newTableId, tableInfo);
      console.log(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID: ${newTableId}`);
      new import_obsidian6.Notice(`\u5DF2\u4E3A\u8868\u683C\u6DFB\u52A0ID: ${newTableId}`);
      return newTableId;
    } catch (error) {
      console.error("\u6DFB\u52A0\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 保存表格信息到插件数据
   * @param tableId 表格ID
   * @param tableInfo 表格信息
   */
  saveTableInfo(tableId, tableInfo) {
    try {
      const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (!activeView || !activeView.file)
        return;
      const filePath = activeView.file.path;
      const { rows, hasHeader } = this.parseTableStructure(tableInfo.content);
      const tableData = {
        id: tableId,
        locations: [
          {
            path: filePath,
            isActive: true
          }
        ],
        structure: {
          rowCount: rows.length,
          colCount: rows.length > 0 ? rows[0].length : 0,
          hasHeaders: hasHeader
        },
        styling: {
          rowHeights: Array(rows.length).fill("auto"),
          colWidths: rows.length > 0 ? Array(rows[0].length).fill("auto") : [],
          alignment: rows.length > 0 ? Array(rows[0].length).fill("left") : []
        }
      };
      this.plugin.saveTableData(tableData);
    } catch (error) {
      console.error("\u4FDD\u5B58\u8868\u683C\u4FE1\u606F\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 检查表格是否已有ID
   * @param editor 编辑器实例
   * @param tableLine 表格起始行
   * @returns 表格ID或null
   */
  checkExistingTableId(editor, tableLine) {
    if (tableLine <= 0)
      return null;
    console.log(`\u68C0\u67E5\u8868\u683C\u662F\u5426\u5DF2\u6709ID: \u8868\u683C\u8D77\u59CB\u884C=${tableLine}`);
    const maxLinesToCheck = 10;
    let currentLine = tableLine - 1;
    const minLine = Math.max(0, tableLine - maxLinesToCheck);
    while (currentLine >= minLine) {
      const line = editor.getLine(currentLine);
      if (!line)
        break;
      console.log(`\u68C0\u67E5\u884C ${currentLine}: "${line}"`);
      const standardIdMatch = line.match(/<!--\s*table-id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (standardIdMatch && standardIdMatch[1]) {
        const id = standardIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u6807\u51C6\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const noHyphenIdMatch = line.match(/<!--\s*tableid:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (noHyphenIdMatch && noHyphenIdMatch[1]) {
        const id = noHyphenIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u65E0\u8FDE\u5B57\u7B26\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const simpleIdMatch = line.match(/<!--\s*id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (simpleIdMatch && simpleIdMatch[1]) {
        const id = simpleIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u7B80\u5316\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      const tableNameIdMatch = line.match(/<!--\s*(table|tbl):\s*([a-zA-Z0-9_\-:.]+)\s*-->/i);
      if (tableNameIdMatch && tableNameIdMatch[2]) {
        const id = tableNameIdMatch[2];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u8868\u683C\u540D\u79F0\u683C\u5F0FID: ${id}`);
        return id;
      }
      const noSpaceIdMatch = line.match(/<!--table-id:([a-zA-Z0-9_\-:.]+)-->/i);
      if (noSpaceIdMatch && noSpaceIdMatch[1]) {
        const id = noSpaceIdMatch[1];
        console.log(`\u5728\u884C ${currentLine} \u627E\u5230\u65E0\u7A7A\u683C\u683C\u5F0F\u8868\u683CID: ${id}`);
        return id;
      }
      if (line.trim() !== "" && !line.trim().startsWith("<!--") && !line.trim().startsWith("//")) {
        console.log(`\u5728\u884C ${currentLine} \u9047\u5230\u975E\u7A7A\u975E\u6CE8\u91CA\u884C\uFF0C\u505C\u6B62\u641C\u7D22`);
        break;
      }
      currentLine--;
    }
    console.log("\u672A\u627E\u5230\u8868\u683CID");
    return null;
  }
  /**
   * 生成唯一的表格ID
   * @returns 表格ID字符串
   */
  generateUniqueTableId() {
    const prefix = this.plugin.settings.idPrefix || "tbl";
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, "");
    const randomId = Math.random().toString(36).substring(2, 8);
    return `${prefix}-${timestamp}-${randomId}`;
  }
  /**
   * 解析表格结构
   * @param tableContent 表格内容字符串
   * @returns 解析后的表格数据
   */
  parseTableStructure(tableContent) {
    const lines = tableContent.split("\n");
    const rows = [];
    let hasHeader = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line.startsWith("|"))
        continue;
      if (line.includes("-") && i === 1) {
        hasHeader = true;
        continue;
      }
      const cells = line.split("|").filter((cell, index, array) => index > 0 && index < array.length - 1).map((cell) => cell.trim());
      rows.push(cells);
    }
    return { rows, hasHeader };
  }
  /**
   * 获取单元格内容
   * @param tableRows 表格行数组
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @returns 单元格内容
   */
  getCellContent(tableRows, rowIndex, colIndex) {
    if (rowIndex >= 0 && rowIndex < tableRows.length && colIndex >= 0 && colIndex < tableRows[rowIndex].length) {
      return tableRows[rowIndex][colIndex];
    }
    return "";
  }
  /**
   * 设置单元格内容
   * @param editor 编辑器实例
   * @param tableInfo 表格信息
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @param content 新内容
   */
  setCellContent(editor, tableInfo, rowIndex, colIndex, content) {
    try {
      const lineIndex = tableInfo.startLine + rowIndex;
      if (lineIndex > tableInfo.endLine)
        return;
      const line = editor.getLine(lineIndex);
      if (!line)
        return;
      const cells = line.split("|");
      if (colIndex + 1 >= cells.length - 1)
        return;
      cells[colIndex + 1] = ` ${content} `;
      editor.replaceRange(
        cells.join("|"),
        { line: lineIndex, ch: 0 },
        { line: lineIndex, ch: line.length }
      );
    } catch (error) {
      console.error("\u8BBE\u7F6E\u5355\u5143\u683C\u5185\u5BB9\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 合并单元格
   * @param direction 合并方向 ('right' 或 'down')
   */
  async mergeCells(direction) {
    try {
      console.log(`\u5C1D\u8BD5${direction === "right" ? "\u5411\u53F3" : "\u5411\u4E0B"}\u5408\u5E76\u5355\u5143\u683C`);
      const editor = this.getActiveEditor();
      if (!editor) {
        console.log("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        new import_obsidian6.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return false;
      }
      const cellPosition = this.getCellPosition(editor);
      if (!cellPosition) {
        console.log("\u672A\u627E\u5230\u8868\u683C\u6216\u65E0\u6CD5\u786E\u5B9A\u5355\u5143\u683C\u4F4D\u7F6E");
        new import_obsidian6.Notice("\u672A\u627E\u5230\u8868\u683C\u6216\u65E0\u6CD5\u786E\u5B9A\u5355\u5143\u683C\u4F4D\u7F6E\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return false;
      }
      const { tableInfo, rowIndex, colIndex } = cellPosition;
      console.log(`\u51C6\u5907${direction === "right" ? "\u5411\u53F3" : "\u5411\u4E0B"}\u5408\u5E76\u5355\u5143\u683C: \u884C=${rowIndex}, \u5217=${colIndex}`);
      let result = false;
      if (direction === "right") {
        result = await this.mergeCellsRight(editor, tableInfo, rowIndex, colIndex);
      } else if (direction === "down") {
        result = await this.mergeCellsDown(editor, tableInfo, rowIndex, colIndex);
      }
      if (result) {
        console.log(`${direction === "right" ? "\u5411\u53F3" : "\u5411\u4E0B"}\u5408\u5E76\u5355\u5143\u683C\u6210\u529F`);
      } else {
        console.log(`${direction === "right" ? "\u5411\u53F3" : "\u5411\u4E0B"}\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25`);
      }
      return result;
    } catch (error) {
      console.error(`\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519(${direction}):`, error);
      new import_obsidian6.Notice(`\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  }
  /**
   * 获取光标所在的列索引
   * @param line 行文本
   * @param cursorCh 光标字符位置
   * @returns 列索引或-1
   */
  getCursorColumnIndex(line, cursorCh) {
    try {
      if (!line.trim().startsWith("|") || !line.trim().endsWith("|")) {
        console.log("\u884C\u4E0D\u662F\u6709\u6548\u7684\u8868\u683C\u884C:", line);
        return -1;
      }
      const cells = line.split("|");
      if (cells[0].trim() === "")
        cells.shift();
      if (cells[cells.length - 1].trim() === "")
        cells.pop();
      let currentPos = line.indexOf("|");
      for (let i = 0; i < cells.length; i++) {
        const cellWidth = cells[i].length + 1;
        const nextPos = currentPos + cellWidth;
        console.log(`\u68C0\u67E5\u5355\u5143\u683C ${i}: \u8303\u56F4=${currentPos}-${nextPos}, \u5185\u5BB9="${cells[i]}"`);
        if (cursorCh > currentPos && cursorCh <= nextPos) {
          console.log(`\u5149\u6807\u5728\u5355\u5143\u683C ${i} \u5185: \u4F4D\u7F6E=${cursorCh}`);
          return i;
        }
        currentPos = nextPos;
      }
      console.log(`\u672A\u627E\u5230\u5149\u6807\u6240\u5728\u5355\u5143\u683C: cursorCh=${cursorCh}, line="${line}"`);
      return -1;
    } catch (error) {
      console.error("\u83B7\u53D6\u5149\u6807\u6240\u5728\u5217\u7D22\u5F15\u65F6\u51FA\u9519:", error);
      return -1;
    }
  }
  /**
   * 获取单元格位置信息
   * @param editor 编辑器实例
   * @returns 单元格位置信息或null
   */
  getCellPosition(editor) {
    try {
      const tableInfo = this.locateTableInMarkdown(editor);
      if (!tableInfo) {
        console.log("\u672A\u627E\u5230\u8868\u683C");
        return null;
      }
      const cursor = editor.getCursor();
      const rowIndex = cursor.line - tableInfo.startLine;
      if (rowIndex < 0 || rowIndex > tableInfo.endLine - tableInfo.startLine) {
        console.log(`\u884C\u7D22\u5F15\u8D85\u51FA\u8303\u56F4: rowIndex=${rowIndex}, tableRange=${tableInfo.startLine}-${tableInfo.endLine}`);
        return null;
      }
      const line = editor.getLine(cursor.line);
      if (!line) {
        console.log("\u65E0\u6CD5\u83B7\u53D6\u884C\u5185\u5BB9");
        return null;
      }
      if (!line.trim().startsWith("|") || !line.trim().endsWith("|")) {
        console.log("\u5F53\u524D\u884C\u4E0D\u662F\u6709\u6548\u7684\u8868\u683C\u884C");
        return null;
      }
      const colIndex = this.getCursorColumnIndex(line, cursor.ch);
      if (colIndex === -1) {
        console.log("\u65E0\u6CD5\u786E\u5B9A\u5149\u6807\u6240\u5728\u5217");
        return null;
      }
      console.log(`\u6210\u529F\u83B7\u53D6\u5355\u5143\u683C\u4F4D\u7F6E: \u884C=${rowIndex}, \u5217=${colIndex}, \u8868\u683C\u8303\u56F4=${tableInfo.startLine}-${tableInfo.endLine}`);
      return {
        tableInfo,
        rowIndex,
        colIndex
      };
    } catch (error) {
      console.error("\u83B7\u53D6\u5355\u5143\u683C\u4F4D\u7F6E\u4FE1\u606F\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 向右合并单元格
   * @param editor 编辑器实例
   * @param tableInfo 表格信息
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @param mergeCount 已合并的单元格数量，默认为0
   * @returns 是否成功
   */
  async mergeCellsRight(editor, tableInfo, rowIndex, colIndex, mergeCount = 0) {
    try {
      const lineIndex = tableInfo.startLine + rowIndex;
      const line = editor.getLine(lineIndex);
      if (!line) {
        console.log(`\u65E0\u6CD5\u83B7\u53D6\u884C\u5185\u5BB9: lineIndex=${lineIndex}`);
        return false;
      }
      console.log(`\u5C1D\u8BD5\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C: \u884C=${lineIndex}, \u5217=${colIndex}, \u5DF2\u5408\u5E76=${mergeCount}, \u884C\u5185\u5BB9="${line}"`);
      const cells = line.split("|");
      if (colIndex + 2 >= cells.length) {
        console.log(`\u5217\u7D22\u5F15\u8D85\u51FA\u8303\u56F4: colIndex=${colIndex}, cells.length=${cells.length}`);
        new import_obsidian6.Notice("\u53F3\u4FA7\u6CA1\u6709\u5355\u5143\u683C\u53EF\u5408\u5E76");
        return false;
      }
      const mainContent = cells[colIndex + 1].trim();
      const targetContent = cells[colIndex + 2].trim();
      console.log(`\u4E3B\u5355\u5143\u683C\u5185\u5BB9="${mainContent}", \u76EE\u6807\u5355\u5143\u683C\u5185\u5BB9="${targetContent}"`);
      const isMergeMarker = /^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(targetContent);
      console.log(`\u76EE\u6807\u5355\u5143\u683C\u662F\u5426\u4E3A\u5408\u5E76\u6807\u8BB0: ${isMergeMarker}`);
      let mergeAction = "replace";
      if (targetContent && !isMergeMarker) {
        if (this.plugin.settings.confirmMergeNonEmpty) {
          mergeAction = await this.showMergeCellOptionsDialog(mainContent, targetContent);
          console.log(`\u7528\u6237\u9009\u62E9\u7684\u5408\u5E76\u64CD\u4F5C: ${mergeAction}`);
          if (mergeAction === "cancel") {
            console.log("\u7528\u6237\u53D6\u6D88\u4E86\u5408\u5E76\u64CD\u4F5C");
            return false;
          }
        }
      }
      if (mergeAction === "merge" && mainContent && targetContent && !isMergeMarker) {
        cells[colIndex + 1] = ` ${mainContent} ${targetContent} `;
        console.log(`\u5408\u5E76\u5185\u5BB9: \u65B0\u4E3B\u5355\u5143\u683C\u5185\u5BB9="${cells[colIndex + 1]}"`);
      }
      const mergeDistance = mergeCount + 1;
      const mergeMarker = "<".repeat(mergeDistance);
      console.log(`\u751F\u6210\u5408\u5E76\u6807\u8BB0: \u8DDD\u79BB=${mergeDistance}, \u6807\u8BB0="${mergeMarker}"`);
      cells[colIndex + 2] = ` ${mergeMarker} `;
      const newLine = cells.join("|");
      console.log(`\u65B0\u884C\u5185\u5BB9="${newLine}"`);
      editor.replaceRange(
        newLine,
        { line: lineIndex, ch: 0 },
        { line: lineIndex, ch: line.length }
      );
      if (colIndex + 3 < cells.length) {
        const nextCellContent = cells[colIndex + 3].trim();
        console.log(`\u68C0\u67E5\u4E0B\u4E00\u4E2A\u5355\u5143\u683C\u662F\u5426\u4E3A\u5408\u5E76\u6807\u8BB0: \u5185\u5BB9="${nextCellContent}"`);
        if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(nextCellContent)) {
          console.log("\u68C0\u6D4B\u5230\u53F3\u4FA7\u6709\u8FDE\u7EED\u5408\u5E76\u5355\u5143\u683C\uFF0C\u7EE7\u7EED\u5408\u5E76");
          await this.mergeCellsRight(editor, tableInfo, rowIndex, colIndex + 1, mergeDistance);
        }
      }
      new import_obsidian6.Notice("\u5DF2\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C");
      return true;
    } catch (error) {
      console.error("\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian6.Notice(`\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  }
  /**
   * 向下合并单元格
   * @param editor 编辑器实例
   * @param tableInfo 表格信息
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @param mergeCount 已合并的单元格数量，默认为0
   * @returns 是否成功
   */
  async mergeCellsDown(editor, tableInfo, rowIndex, colIndex, mergeCount = 0) {
    try {
      const currentLineIndex = tableInfo.startLine + rowIndex;
      const nextLineIndex = currentLineIndex + 1;
      if (nextLineIndex > tableInfo.endLine) {
        console.log(`\u4E0B\u4E00\u884C\u8D85\u51FA\u8868\u683C\u8303\u56F4: nextLineIndex=${nextLineIndex}, tableEndLine=${tableInfo.endLine}`);
        new import_obsidian6.Notice("\u4E0B\u65B9\u6CA1\u6709\u5355\u5143\u683C\u53EF\u5408\u5E76");
        return false;
      }
      const currentLine = editor.getLine(currentLineIndex);
      const nextLine = editor.getLine(nextLineIndex);
      if (!currentLine || !nextLine) {
        console.log(`\u65E0\u6CD5\u83B7\u53D6\u884C\u5185\u5BB9: currentLine=${!!currentLine}, nextLine=${!!nextLine}`);
        return false;
      }
      console.log(`\u5C1D\u8BD5\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C: \u5F53\u524D\u884C=${currentLineIndex}, \u4E0B\u4E00\u884C=${nextLineIndex}, \u5217=${colIndex}, \u5DF2\u5408\u5E76=${mergeCount}`);
      console.log(`\u5F53\u524D\u884C\u5185\u5BB9="${currentLine}"`);
      console.log(`\u4E0B\u4E00\u884C\u5185\u5BB9="${nextLine}"`);
      const currentCells = currentLine.split("|");
      const nextCells = nextLine.split("|");
      if (colIndex + 1 >= currentCells.length || colIndex + 1 >= nextCells.length) {
        console.log(`\u5217\u7D22\u5F15\u8D85\u51FA\u8303\u56F4: colIndex=${colIndex}, currentCells.length=${currentCells.length}, nextCells.length=${nextCells.length}`);
        new import_obsidian6.Notice("\u65E0\u6CD5\u5408\u5E76\u5355\u5143\u683C\uFF0C\u5217\u7D22\u5F15\u8D85\u51FA\u8303\u56F4");
        return false;
      }
      const mainContent = currentCells[colIndex + 1].trim();
      const targetContent = nextCells[colIndex + 1].trim();
      console.log(`\u4E3B\u5355\u5143\u683C\u5185\u5BB9="${mainContent}", \u76EE\u6807\u5355\u5143\u683C\u5185\u5BB9="${targetContent}"`);
      const isMergeMarker = /^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(targetContent);
      console.log(`\u76EE\u6807\u5355\u5143\u683C\u662F\u5426\u4E3A\u5408\u5E76\u6807\u8BB0: ${isMergeMarker}`);
      let mergeAction = "replace";
      if (targetContent && !isMergeMarker) {
        if (this.plugin.settings.confirmMergeNonEmpty) {
          mergeAction = await this.showMergeCellOptionsDialog(mainContent, targetContent);
          console.log(`\u7528\u6237\u9009\u62E9\u7684\u5408\u5E76\u64CD\u4F5C: ${mergeAction}`);
          if (mergeAction === "cancel") {
            console.log("\u7528\u6237\u53D6\u6D88\u4E86\u5408\u5E76\u64CD\u4F5C");
            return false;
          }
        }
      }
      if (mergeAction === "merge" && mainContent && targetContent && !isMergeMarker) {
        currentCells[colIndex + 1] = ` ${mainContent} ${targetContent} `;
        console.log(`\u5408\u5E76\u5185\u5BB9: \u65B0\u4E3B\u5355\u5143\u683C\u5185\u5BB9="${currentCells[colIndex + 1]}"`);
        editor.replaceRange(
          currentCells.join("|"),
          { line: currentLineIndex, ch: 0 },
          { line: currentLineIndex, ch: currentLine.length }
        );
      }
      const mergeDistance = mergeCount + 1;
      const mergeMarker = "^".repeat(mergeDistance);
      console.log(`\u751F\u6210\u5408\u5E76\u6807\u8BB0: \u8DDD\u79BB=${mergeDistance}, \u6807\u8BB0="${mergeMarker}"`);
      nextCells[colIndex + 1] = ` ${mergeMarker} `;
      const newNextLine = nextCells.join("|");
      console.log(`\u65B0\u4E0B\u4E00\u884C\u5185\u5BB9="${newNextLine}"`);
      editor.replaceRange(
        newNextLine,
        { line: nextLineIndex, ch: 0 },
        { line: nextLineIndex, ch: nextLine.length }
      );
      if (nextLineIndex + 1 <= tableInfo.endLine) {
        const nextNextLine = editor.getLine(nextLineIndex + 1);
        if (nextNextLine) {
          const nextNextCells = nextNextLine.split("|");
          if (colIndex + 1 < nextNextCells.length) {
            const nextNextCellContent = nextNextCells[colIndex + 1].trim();
            console.log(`\u68C0\u67E5\u4E0B\u4E00\u884C\u5355\u5143\u683C\u662F\u5426\u4E3A\u5408\u5E76\u6807\u8BB0: \u5185\u5BB9="${nextNextCellContent}"`);
            if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(nextNextCellContent)) {
              console.log("\u68C0\u6D4B\u5230\u4E0B\u65B9\u6709\u8FDE\u7EED\u5408\u5E76\u5355\u5143\u683C\uFF0C\u7EE7\u7EED\u5408\u5E76");
              await this.mergeCellsDown(editor, tableInfo, rowIndex + 1, colIndex, mergeDistance);
            }
          }
        }
      }
      new import_obsidian6.Notice("\u5DF2\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C");
      return true;
    } catch (error) {
      console.error("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian6.Notice(`\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  }
  /**
   * 显示确认对话框
   * @param message 确认消息
   * @returns 用户是否确认
   */
  async showConfirmDialog(message) {
    return new Promise((resolve) => {
      const notice = new import_obsidian6.Notice(message, 0);
      const buttonContainer = document.createElement("div");
      buttonContainer.style.display = "flex";
      buttonContainer.style.justifyContent = "space-between";
      buttonContainer.style.marginTop = "10px";
      const cancelButton = document.createElement("button");
      cancelButton.textContent = "\u53D6\u6D88";
      cancelButton.onclick = () => {
        notice.hide();
        resolve(false);
      };
      const confirmButton = document.createElement("button");
      confirmButton.textContent = "\u786E\u5B9A";
      confirmButton.style.marginLeft = "10px";
      confirmButton.onclick = () => {
        notice.hide();
        resolve(true);
      };
      buttonContainer.appendChild(cancelButton);
      buttonContainer.appendChild(confirmButton);
      notice.noticeEl.appendChild(buttonContainer);
    });
  }
  /**
   * 显示合并单元格选项对话框
   * @param mainContent 主单元格内容
   * @param targetContent 目标单元格内容
   * @returns 选择的操作：'merge'=合并并保留两个内容, 'replace'=仅使用合并标记, 'cancel'=取消操作
   */
  async showMergeCellOptionsDialog(mainContent, targetContent) {
    return new Promise((resolve) => {
      const notice = new import_obsidian6.Notice("\u5408\u5E76\u5355\u5143\u683C\u9009\u9879", 0);
      const contentContainer = document.createElement("div");
      contentContainer.style.marginBottom = "10px";
      contentContainer.innerHTML = `
                <p>\u76EE\u6807\u5355\u5143\u683C\u5305\u542B\u5185\u5BB9\uFF1A"${targetContent}"</p>
                <p>\u8BF7\u9009\u62E9\u5408\u5E76\u65B9\u5F0F\uFF1A</p>
            `;
      const buttonContainer = document.createElement("div");
      buttonContainer.style.display = "flex";
      buttonContainer.style.flexDirection = "column";
      buttonContainer.style.gap = "5px";
      const mergeButton = document.createElement("button");
      mergeButton.textContent = "\u5408\u5E76\u5E76\u4FDD\u7559\u5185\u5BB9";
      mergeButton.onclick = () => {
        notice.hide();
        resolve("merge");
      };
      const replaceButton = document.createElement("button");
      replaceButton.textContent = "\u4EC5\u4F7F\u7528\u5408\u5E76\u6807\u8BB0";
      replaceButton.onclick = () => {
        notice.hide();
        resolve("replace");
      };
      const cancelButton = document.createElement("button");
      cancelButton.textContent = "\u53D6\u6D88";
      cancelButton.onclick = () => {
        notice.hide();
        resolve("cancel");
      };
      buttonContainer.appendChild(mergeButton);
      buttonContainer.appendChild(replaceButton);
      buttonContainer.appendChild(cancelButton);
      notice.noticeEl.appendChild(contentContainer);
      notice.noticeEl.appendChild(buttonContainer);
    });
  }
  /**
   * 检测并修复表格合并标记
   * @returns 是否进行了修复
   */
  async detectAndFixMergeMarkers() {
    try {
      const editor = this.getActiveEditor();
      if (!editor) {
        new import_obsidian6.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return false;
      }
      const tableInfo = this.locateTableInMarkdown(editor);
      if (!tableInfo) {
        new import_obsidian6.Notice("\u672A\u627E\u5230\u8868\u683C\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return false;
      }
      let hasFixedMarkers = false;
      for (let i = tableInfo.startLine; i <= tableInfo.endLine; i++) {
        const line = editor.getLine(i);
        if (!line)
          continue;
        const cells = line.split("|");
        let hasChanges = false;
        for (let j = 1; j < cells.length - 1; j++) {
          const cell = cells[j];
          const trimmedCell = cell.trim();
          if (trimmedCell === "\\<" || trimmedCell === "<") {
            cells[j] = " < ";
            hasChanges = true;
          } else if (trimmedCell === "\\^" || trimmedCell === "^") {
            cells[j] = " ^ ";
            hasChanges = true;
          }
        }
        if (hasChanges) {
          const updatedLine = cells.join("|");
          editor.replaceRange(
            updatedLine,
            { line: i, ch: 0 },
            { line: i, ch: line.length }
          );
          hasFixedMarkers = true;
        }
      }
      if (hasFixedMarkers) {
        new import_obsidian6.Notice("\u5DF2\u7EDF\u4E00\u8868\u683C\u5408\u5E76\u6807\u8BB0\u683C\u5F0F");
      } else {
        new import_obsidian6.Notice("\u672A\u53D1\u73B0\u9700\u8981\u4FEE\u590D\u7684\u5408\u5E76\u6807\u8BB0");
      }
      return hasFixedMarkers;
    } catch (error) {
      console.error("\u68C0\u6D4B\u548C\u4FEE\u590D\u8868\u683C\u5408\u5E76\u6807\u8BB0\u65F6\u51FA\u9519:", error);
      return false;
    }
  }
  /**
   * 拆分合并的单元格
   * @returns 是否成功
   */
  async splitMergedCells() {
    try {
      const editor = this.getActiveEditor();
      if (!editor) {
        new import_obsidian6.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return false;
      }
      const cellPosition = this.getCellPosition(editor);
      if (!cellPosition) {
        new import_obsidian6.Notice("\u672A\u627E\u5230\u8868\u683C\u6216\u65E0\u6CD5\u786E\u5B9A\u5355\u5143\u683C\u4F4D\u7F6E\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return false;
      }
      const { tableInfo, rowIndex, colIndex } = cellPosition;
      const lineIndex = tableInfo.startLine + rowIndex;
      console.log(`\u5C1D\u8BD5\u62C6\u5206\u5355\u5143\u683C: \u884C=${rowIndex}, \u5217=${colIndex}, \u8868\u683C\u8303\u56F4=${tableInfo.startLine}-${tableInfo.endLine}`);
      const line = editor.getLine(lineIndex);
      if (!line)
        return false;
      let hasSplitCells = false;
      if (colIndex + 1 < line.split("|").length - 1) {
        const cells = line.split("|");
        const rightCell = cells[colIndex + 2];
        const rightCellTrimmed = rightCell.trim();
        console.log(`\u53F3\u4FA7\u5355\u5143\u683C\u5185\u5BB9: "${rightCellTrimmed}"`);
        if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(rightCellTrimmed)) {
          cells[colIndex + 2] = "  ";
          editor.replaceRange(
            cells.join("|"),
            { line: lineIndex, ch: 0 },
            { line: lineIndex, ch: line.length }
          );
          console.log("\u5DF2\u62C6\u5206\u53F3\u4FA7\u5408\u5E76\u5355\u5143\u683C");
          hasSplitCells = true;
        }
      }
      if (lineIndex < tableInfo.endLine) {
        const belowLine = editor.getLine(lineIndex + 1);
        if (belowLine) {
          const belowCells = belowLine.split("|");
          if (colIndex + 1 < belowCells.length) {
            const belowCell = belowCells[colIndex + 1];
            const belowCellTrimmed = belowCell.trim();
            console.log(`\u4E0B\u65B9\u5355\u5143\u683C\u5185\u5BB9: "${belowCellTrimmed}"`);
            if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(belowCellTrimmed)) {
              belowCells[colIndex + 1] = "  ";
              editor.replaceRange(
                belowCells.join("|"),
                { line: lineIndex + 1, ch: 0 },
                { line: lineIndex + 1, ch: belowLine.length }
              );
              console.log("\u5DF2\u62C6\u5206\u4E0B\u65B9\u5408\u5E76\u5355\u5143\u683C");
              hasSplitCells = true;
            }
          }
        }
      }
      const recursiveSplit = await this.recursiveSplitMergedCells(editor, tableInfo, rowIndex, colIndex);
      if (recursiveSplit) {
        hasSplitCells = true;
      }
      if (hasSplitCells) {
        new import_obsidian6.Notice("\u5DF2\u6210\u529F\u62C6\u5206\u5408\u5E76\u5355\u5143\u683C");
        return true;
      } else {
        new import_obsidian6.Notice("\u672A\u627E\u5230\u53EF\u62C6\u5206\u7684\u5408\u5E76\u5355\u5143\u683C\uFF0C\u8BF7\u786E\u4FDD\u5149\u6807\u4F4D\u4E8E\u5408\u5E76\u5355\u5143\u683C\u5185");
        return false;
      }
    } catch (error) {
      console.error("\u62C6\u5206\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
      new import_obsidian6.Notice(`\u62C6\u5206\u5408\u5E76\u5355\u5143\u683C\u5931\u8D25: ${error.message || "\u672A\u77E5\u9519\u8BEF"}`);
      return false;
    }
  }
  /**
   * 递归拆分合并单元格
   * 查找与当前单元格相关的所有合并单元格并拆分它们
   * @param editor 编辑器实例
   * @param tableInfo 表格信息
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @returns 是否进行了拆分
   */
  async recursiveSplitMergedCells(editor, tableInfo, rowIndex, colIndex) {
    let hasSplitCells = false;
    const maxSearchDepth = 10;
    for (let col = colIndex + 1; col < colIndex + maxSearchDepth; col++) {
      const lineIndex = tableInfo.startLine + rowIndex;
      const line = editor.getLine(lineIndex);
      if (!line)
        break;
      const cells = line.split("|");
      if (col + 1 >= cells.length)
        break;
      const cellContent = cells[col + 1].trim();
      if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(cellContent)) {
        cells[col + 1] = "  ";
        editor.replaceRange(
          cells.join("|"),
          { line: lineIndex, ch: 0 },
          { line: lineIndex, ch: line.length }
        );
        hasSplitCells = true;
        console.log(`\u5DF2\u62C6\u5206\u4F4D\u4E8E (${rowIndex}, ${col}) \u7684\u6C34\u5E73\u5408\u5E76\u5355\u5143\u683C`);
      } else {
        break;
      }
    }
    for (let row = rowIndex + 1; row < rowIndex + maxSearchDepth && row + tableInfo.startLine <= tableInfo.endLine; row++) {
      const lineIndex = tableInfo.startLine + row;
      const line = editor.getLine(lineIndex);
      if (!line)
        break;
      const cells = line.split("|");
      if (colIndex + 1 >= cells.length)
        break;
      const cellContent = cells[colIndex + 1].trim();
      if (/^(<+|\^+|\\<|\\^|\s*<+\s*|\s*\^+\s*)$/.test(cellContent)) {
        cells[colIndex + 1] = "  ";
        editor.replaceRange(
          cells.join("|"),
          { line: lineIndex, ch: 0 },
          { line: lineIndex, ch: line.length }
        );
        hasSplitCells = true;
        console.log(`\u5DF2\u62C6\u5206\u4F4D\u4E8E (${row}, ${colIndex}) \u7684\u5782\u76F4\u5408\u5E76\u5355\u5143\u683C`);
      } else {
        break;
      }
    }
    return hasSplitCells;
  }
  /**
   * 获取当前光标所在表格的ID
   * @returns 表格ID或null
   */
  async getCurrentTableId() {
    try {
      const editor = this.getActiveEditor();
      if (!editor) {
        console.warn("\u672A\u627E\u5230\u6D3B\u52A8\u7F16\u8F91\u5668");
        return null;
      }
      const tableInfo = this.locateTableInMarkdown(editor);
      if (!tableInfo) {
        console.warn("\u672A\u627E\u5230\u8868\u683C\uFF0C\u8BF7\u5C06\u5149\u6807\u653E\u5728\u8868\u683C\u5185");
        return null;
      }
      let tableId = tableInfo.tableId;
      if (!tableId) {
        console.log("\u5728tableInfo\u4E2D\u672A\u627E\u5230ID\uFF0C\u5C1D\u8BD5\u4F7F\u7528checkExistingTableId\u67E5\u627E");
        tableId = this.checkExistingTableId(editor, tableInfo.startLine) || void 0;
      }
      if (tableId) {
        console.log(`\u627E\u5230\u8868\u683CID: ${tableId}`);
        return tableId;
      }
      console.warn("\u672A\u627E\u5230\u8868\u683CID");
      return null;
    } catch (error) {
      console.error("\u83B7\u53D6\u5F53\u524D\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
};

// src/icons.ts
var import_obsidian7 = require("obsidian");
function loadIcons() {
  (0, import_obsidian7.addIcon)("align-left", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M25,30 L75,30 M25,50 L60,50 M25,70 L70,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("align-center", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M25,30 L75,30 M35,50 L65,50 M30,70 L70,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("align-right", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M25,30 L75,30 M40,50 L75,50 M30,70 L75,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("align-top", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M30,25 L30,75 M50,25 L50,60 M70,25 L70,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("align-middle", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M30,25 L30,75 M50,35 L50,65 M70,30 L70,70" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("align-bottom", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="2" stroke-opacity="0.3"/>
        <path d="M30,25 L30,75 M50,40 L50,75 M70,30 L70,75" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("align-all", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="20" width="60" height="60" fill="none" stroke="currentColor" stroke-width="3"/>
        <circle cx="50" cy="50" r="15" fill="none" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("merge-cells", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="10" y="10" width="30" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="60" y="10" width="30" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="10" y="60" width="30" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="60" y="60" width="30" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M50,45 L50,55 M45,50 L55,50" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("merge-right", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="30" width="30" height="40" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="55" y="30" width="30" height="40" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M45,50 L55,50 M50,45 L55,50 L50,55" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("merge-down", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="30" y="15" width="40" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <rect x="30" y="55" width="40" height="30" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M50,45 L50,55 M45,50 L50,55 L55,50" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("split", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="20" width="60" height="60" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M50,20 L50,80 M20,50 L80,50" stroke="currentColor" stroke-width="3"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("table-id", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="30" width="60" height="50" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M20,30 L80,30" stroke="currentColor" stroke-width="5"/>
        <rect x="35" y="15" width="30" height="15" fill="none" stroke="currentColor" stroke-width="2"/>
        <path d="M45,45 L45,65 M55,45 L55,65 M45,55 L55,55" stroke="currentColor" stroke-width="2"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("table-row-add", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="20" width="60" height="60" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M20,50 L80,50" stroke="currentColor" stroke-width="3"/>
        <circle cx="85" cy="50" r="10" fill="none" stroke="currentColor" stroke-width="2"/>
        <path d="M85,45 L85,55 M80,50 L90,50" stroke="currentColor" stroke-width="2"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("table-style", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="20" y="20" width="60" height="60" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M20,40 L80,40 M20,60 L80,60 M40,20 L40,80 M60,20 L60,80" stroke="currentColor" stroke-width="2"/>
        <path d="M65,25 L75,35 M65,35 L75,25" stroke="currentColor" stroke-width="2"/>
        <path d="M25,45 L35,55 M35,45 L25,55" stroke="currentColor" stroke-width="2"/>
        <circle cx="50" cy="50" r="5" fill="currentColor"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("table-toolbar-toggle", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="15" width="70" height="70" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M15,35 L85,35 M15,65 L85,65" stroke="currentColor" stroke-width="2"/>
        <path d="M35,15 L35,85 M65,15 L65,85" stroke="currentColor" stroke-width="2"/>
        <rect x="40" y="5" width="20" height="10" fill="currentColor"/>
        <rect x="40" y="85" width="20" height="10" fill="currentColor"/>
        <rect x="5" y="40" width="10" height="20" fill="currentColor"/>
        <rect x="85" y="40" width="10" height="20" fill="currentColor"/>
    </svg>`);
  (0, import_obsidian7.addIcon)("table-edit-mode", `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
        <rect x="15" y="25" width="70" height="50" fill="none" stroke="currentColor" stroke-width="3"/>
        <path d="M15,45 L85,45" stroke="currentColor" stroke-width="2"/>
        <path d="M35,25 L35,75" stroke="currentColor" stroke-width="2"/>
        <path d="M55,25 L55,75" stroke="currentColor" stroke-width="2"/>
        <path d="M75,10 L90,25 L80,35 L65,20 Z" fill="none" stroke="currentColor" stroke-width="2"/>
        <path d="M65,20 L80,35" stroke="currentColor" stroke-width="2"/>
    </svg>`);
}

// src/setupPreviewModeTableSelection.ts
var import_obsidian8 = require("obsidian");
function parseMergeMarker(content) {
  const cleanContent = content.trim().replace(/\\/g, "");
  const leftMatch = cleanContent.match(/^(<+)$/);
  if (leftMatch) {
    return {
      type: "left",
      level: leftMatch[1].length
      // 计算<的数量
    };
  }
  const upMatch = cleanContent.match(/^(\^+)$/);
  if (upMatch) {
    return {
      type: "up",
      level: upMatch[1].length
      // 计算^的数量
    };
  }
  return { type: null, level: 0 };
}
function applyMultiLevelMergeCells(table) {
  var _a;
  try {
    if (table.dataset.multiMergeProcessed === "true") {
      return;
    }
    const rows = table.querySelectorAll("tr");
    const domGrid = [];
    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
      domGrid[rowIndex] = [];
      const cells = rows[rowIndex].querySelectorAll("td, th");
      for (let colIndex = 0; colIndex < cells.length; colIndex++) {
        domGrid[rowIndex][colIndex] = cells[colIndex];
      }
    }
    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
      const row = rows[rowIndex];
      const cells = row.querySelectorAll("td, th");
      for (let colIndex = 0; colIndex < cells.length; colIndex++) {
        const cell = cells[colIndex];
        const cellContent = ((_a = cell.textContent) == null ? void 0 : _a.trim()) || "";
        const mergeInfo = parseMergeMarker(cellContent);
        if (mergeInfo.type === "left" && colIndex > 0) {
          const mergeLevel = mergeInfo.level;
          const targetColIndex = colIndex - mergeLevel;
          if (targetColIndex >= 0) {
            const leftCell = domGrid[rowIndex][targetColIndex];
            if (leftCell) {
              const colSpan = mergeLevel + 1;
              leftCell.colSpan = colSpan;
              leftCell.setAttribute("colspan", colSpan.toString());
              cell.style.display = "none";
              leftCell.style.textAlign = "center";
              leftCell.style.verticalAlign = "middle";
              leftCell.classList.add("obs-merged-cell");
            }
          }
        }
        if (mergeInfo.type === "up" && rowIndex > 0) {
          const mergeLevel = mergeInfo.level;
          const targetRowIndex = rowIndex - mergeLevel;
          if (targetRowIndex >= 0) {
            const aboveCell = domGrid[targetRowIndex][colIndex];
            if (aboveCell) {
              const rowSpan = mergeLevel + 1;
              aboveCell.rowSpan = rowSpan;
              aboveCell.setAttribute("rowspan", rowSpan.toString());
              cell.style.display = "none";
              aboveCell.style.textAlign = "center";
              aboveCell.style.verticalAlign = "middle";
              aboveCell.classList.add("obs-merged-cell");
            }
          }
        }
      }
    }
    table.dataset.multiMergeProcessed = "true";
  } catch (error) {
    console.error("\u5E94\u7528\u591A\u7EA7\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
  }
}
function setupPreviewModeTableSelection(plugin) {
  try {
    plugin.currentEditingTable = null;
    const tables = document.querySelectorAll("table");
    if (!tables.length)
      return;
    console.log(`\u9884\u89C8\u6A21\u5F0F\u4E0B\u627E\u5230 ${tables.length} \u4E2A\u8868\u683C`);
    tables.forEach((table) => {
      table.removeEventListener("click", plugin.handleTableClick);
      table.addEventListener("click", plugin.handleTableClick);
      plugin.tableDetector.setupTableIndices(table);
      if (plugin.settings.enableCellMerging) {
        if (plugin.settings.enableMultiLevelMerge) {
          applyMultiLevelMergeCells(table);
        }
        plugin.tableDetector.applyMergeCellsMarkers(table);
      }
      if (plugin.settings.enableTableIds) {
        plugin.tableIdManager.ensureTableHasId(table);
      }
    });
    console.log("\u9884\u89C8\u6A21\u5F0F\u8868\u683C\u5904\u7406\u5B8C\u6210");
  } catch (error) {
    console.error("\u8BBE\u7F6E\u9884\u89C8\u6A21\u5F0F\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
    new import_obsidian8.Notice("\u8868\u683C\u5904\u7406\u51FA\u9519\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u65E5\u5FD7");
  }
}

// src/tableStyleRenderer.ts
var import_obsidian9 = require("obsidian");
var TableStyleRenderer = class extends import_obsidian9.MarkdownRenderChild {
  /**
   * 构造函数
   * @param el 表格元素
   * @param tableId 表格ID
   * @param styling 样式数据
   * @param plugin 插件实例
   */
  constructor(el, tableId, styling, plugin) {
    super(el);
    this.tableId = tableId;
    this.styling = styling;
    this.plugin = plugin;
  }
  /**
   * 加载时应用样式
   */
  onload() {
    console.log(`\u8868\u683C\u6837\u5F0F\u6E32\u67D3\u5668\u52A0\u8F7D: \u8868\u683CID=${this.tableId}`);
    this.applyStyles();
    this.containerEl.classList.add(`table-${this.tableId}`);
    this.containerEl.setAttribute("data-table-styles-applied", "true");
  }
  /**
   * 应用所有样式
   */
  applyStyles() {
    if (!this.styling)
      return;
    if (this.styling.alignment && Array.isArray(this.styling.alignment)) {
      this.applyColumnAlignment(this.styling.alignment);
    }
    if (this.styling.cellStyles && Array.isArray(this.styling.cellStyles)) {
      this.applyCellStyles(this.styling.cellStyles);
    }
    if (this.styling.rowHeights && Array.isArray(this.styling.rowHeights)) {
      this.applyRowHeights(this.styling.rowHeights);
    }
    if (this.styling.colWidths && Array.isArray(this.styling.colWidths)) {
      this.applyColumnWidths(this.styling.colWidths);
    }
  }
  /**
   * 应用列对齐样式
   * @param alignments 列对齐数据
   */
  applyColumnAlignment(alignments) {
    const rows = this.containerEl.querySelectorAll("tr");
    rows.forEach((row) => {
      const cells = row.querySelectorAll("td, th");
      cells.forEach((cell, colIndex) => {
        if (alignments[colIndex]) {
          cell.style.textAlign = alignments[colIndex];
        }
      });
    });
  }
  /**
   * 应用单元格样式
   * @param cellStyles 单元格样式数据
   */
  applyCellStyles(cellStyles) {
    cellStyles.forEach((style) => {
      if (typeof style.row !== "number" || typeof style.col !== "number") {
        return;
      }
      const cell = this.findCell(style.row, style.col);
      if (!cell)
        return;
      if (style.textAlign)
        cell.style.textAlign = style.textAlign;
      if (style.verticalAlign)
        cell.style.verticalAlign = style.verticalAlign;
      if (style.backgroundColor)
        cell.style.backgroundColor = style.backgroundColor;
      if (style.color)
        cell.style.color = style.color;
      if (style.fontWeight)
        cell.style.fontWeight = style.fontWeight;
      if (style.fontStyle)
        cell.style.fontStyle = style.fontStyle;
    });
  }
  /**
   * 应用行高
   * @param heights 行高数据
   */
  applyRowHeights(heights) {
    const rows = this.containerEl.querySelectorAll("tr");
    rows.forEach((row, rowIndex) => {
      if (heights[rowIndex] && heights[rowIndex] !== "auto") {
        row.style.height = heights[rowIndex];
      }
    });
  }
  /**
   * 应用列宽
   * @param widths 列宽数据
   */
  applyColumnWidths(widths) {
    let colgroup = this.containerEl.querySelector("colgroup");
    if (!colgroup) {
      colgroup = document.createElement("colgroup");
      this.containerEl.prepend(colgroup);
    } else {
      colgroup.innerHTML = "";
    }
    widths.forEach((width) => {
      const col = document.createElement("col");
      if (width && width !== "auto") {
        col.style.width = width;
      }
      if (colgroup) {
        colgroup.appendChild(col);
      }
    });
  }
  /**
   * 查找特定位置的单元格
   * @param rowIndex 行索引
   * @param colIndex 列索引
   * @returns 单元格元素或null
   */
  findCell(rowIndex, colIndex) {
    const rows = this.containerEl.querySelectorAll("tr");
    if (!rows || rows.length <= rowIndex)
      return null;
    const cells = rows[rowIndex].querySelectorAll("td, th");
    if (!cells || cells.length <= colIndex)
      return null;
    return cells[colIndex];
  }
  /**
   * 卸载时的清理工作
   */
  onunload() {
    console.log(`\u8868\u683C ${this.tableId} \u7684\u6837\u5F0F\u6E32\u67D3\u5668\u5DF2\u5378\u8F7D`);
  }
};
async function renderTablesWithStoredStyles(plugin) {
  console.log("\u9884\u89C8\u6A21\u5F0F\u6FC0\u6D3B\uFF0C\u5F00\u59CB\u5E94\u7528\u4FDD\u5B58\u7684\u8868\u683C\u6837\u5F0F");
  try {
    const tables = document.querySelectorAll('table:not([data-table-styles-applied="true"])');
    if (!tables.length) {
      console.log("\u6CA1\u6709\u627E\u5230\u9700\u8981\u5E94\u7528\u6837\u5F0F\u7684\u8868\u683C");
      return;
    }
    console.log(`\u627E\u5230 ${tables.length} \u4E2A\u8868\u683C\u9700\u8981\u5E94\u7528\u6837\u5F0F`);
    const allData = await plugin.loadData();
    if (!allData || !allData.tables) {
      console.log("\u6CA1\u6709\u4FDD\u5B58\u7684\u8868\u683C\u6837\u5F0F\u6570\u636E\u6216\u6570\u636E\u7ED3\u6784\u4E0D\u5B8C\u6574");
      if (!allData) {
        await plugin.saveData({ tables: {} });
      } else if (!allData.tables) {
        allData.tables = {};
        await plugin.saveData(allData);
      }
      return;
    }
    const renderQueue = [];
    const activeFile = plugin.app.workspace.getActiveFile();
    const filePath = activeFile ? activeFile.path : null;
    for (const table of Array.from(tables)) {
      if (plugin.settings.enableTableResize) {
        plugin.tableResizeHandler.applySavedSizes(table);
      }
      const tableId = table.getAttribute("data-table-id");
      if (!tableId) {
        console.log("\u8868\u683C\u6CA1\u6709ID\uFF0C\u5C1D\u8BD5\u901A\u8FC7\u4F4D\u7F6E\u8BC6\u522B");
        if (filePath) {
          const allDocTables = document.querySelectorAll("table");
          const tableIndex = Array.from(allDocTables).indexOf(table);
          if (tableIndex !== -1) {
            console.log(`\u8868\u683C\u4F4D\u4E8E\u6587\u6863\u4E2D\u7684\u7B2C ${tableIndex} \u4E2A\u4F4D\u7F6E`);
            for (const [id, data] of Object.entries(allData.tables)) {
              if (data.locations && data.locations.some((loc) => loc.path === filePath && loc.index === tableIndex)) {
                console.log(`\u901A\u8FC7\u4F4D\u7F6E\u5339\u914D\u5230\u8868\u683CID: ${id}`);
                table.setAttribute("data-table-id", id);
                renderQueue.push({ table, tableId: id, tableData: data });
                break;
              }
            }
          }
        }
        continue;
      }
      const tableData = allData.tables[tableId];
      if (!tableData || !tableData.styling) {
        console.log(`\u8868\u683C ${tableId} \u6CA1\u6709\u6837\u5F0F\u6570\u636E\u6216\u6570\u636E\u7ED3\u6784\u4E0D\u5B8C\u6574`);
        continue;
      }
      renderQueue.push({ table, tableId, tableData });
    }
    if (renderQueue.length > 0) {
      console.log(`\u5F00\u59CB\u5904\u7406 ${renderQueue.length} \u4E2A\u8868\u683C\u7684\u6837\u5F0F\u6E32\u67D3`);
      await processRenderQueue(renderQueue, plugin);
    } else {
      console.log("\u6CA1\u6709\u627E\u5230\u9700\u8981\u6E32\u67D3\u7684\u8868\u683C");
    }
  } catch (error) {
    console.error("\u6E32\u67D3\u8868\u683C\u6837\u5F0F\u65F6\u51FA\u9519:", error);
  }
}
async function processRenderQueue(queue, plugin) {
  const batchSize = 5;
  let processedCount = 0;
  const processBatch = async () => {
    const endIndex = Math.min(processedCount + batchSize, queue.length);
    for (let i = processedCount; i < endIndex; i++) {
      const { table, tableId, tableData } = queue[i];
      await renderTableWithStyles(table, tableId, tableData, plugin);
    }
    processedCount = endIndex;
    if (processedCount < queue.length) {
      return new Promise((resolve) => {
        window.requestAnimationFrame(() => {
          processBatch().then(resolve);
        });
      });
    }
  };
  await processBatch();
  console.log(`\u5B8C\u6210\u4E86 ${processedCount} \u4E2A\u8868\u683C\u7684\u6837\u5F0F\u5E94\u7528`);
}
async function renderTableWithStyles(table, tableId, tableData, plugin) {
  try {
    if (!tableData.styling) {
      console.log(`\u8868\u683C ${tableId} \u6CA1\u6709\u6837\u5F0F\u6570\u636E`);
      return false;
    }
    const ctx = getContextForTable(table, plugin);
    if (ctx) {
      ctx.addChild(new TableStyleRenderer(table, tableId, tableData.styling, plugin));
      console.log(`\u8868\u683C ${tableId} \u5DF2\u4F7F\u7528RenderChild\u5E94\u7528\u6837\u5F0F`);
    } else {
      applyStylesDirectly(table, tableData.styling);
      console.log(`\u8868\u683C ${tableId} \u5DF2\u76F4\u63A5\u5E94\u7528\u6837\u5F0F`);
    }
    table.setAttribute("data-table-styles-applied", "true");
    return true;
  } catch (error) {
    console.error(`\u4E3A\u8868\u683C ${tableId} \u5E94\u7528\u6837\u5F0F\u65F6\u51FA\u9519:`, error);
    return false;
  }
}
function getContextForTable(table, plugin) {
  var _a, _b, _c;
  const activeView = plugin.app.workspace.getActiveViewOfType(import_obsidian9.MarkdownView);
  if (!activeView || activeView.getMode() !== "preview")
    return null;
  try {
    const sectionEl = table.closest("[data-section-id]");
    if (sectionEl) {
      const sectionId = sectionEl.getAttribute("data-section-id");
      if (sectionId && activeView.previewMode) {
        const sections = (_a = activeView.previewMode.renderer) == null ? void 0 : _a.sections;
        if (sections && sections[sectionId]) {
          return sections[sectionId];
        }
      }
    }
    if (activeView.previewMode) {
      const sectionInfo = (_c = (_b = activeView.previewMode.renderer) == null ? void 0 : _b.getSectionInfo) == null ? void 0 : _c.call(_b, table);
      if (sectionInfo && sectionInfo.section) {
        return sectionInfo.section;
      }
    }
    return null;
  } catch (e) {
    console.warn("\u83B7\u53D6\u8868\u683C\u6E32\u67D3\u4E0A\u4E0B\u6587\u5931\u8D25:", e);
    return null;
  }
}
function applyStylesDirectly(table, styling) {
  if (!styling)
    return;
  if (styling.alignment && Array.isArray(styling.alignment)) {
    const rows = table.querySelectorAll("tr");
    rows.forEach((row) => {
      const cells = row.querySelectorAll("td, th");
      cells.forEach((cell, colIndex) => {
        if (styling.alignment[colIndex]) {
          cell.style.textAlign = styling.alignment[colIndex];
        }
      });
    });
  }
  if (styling.cellStyles && Array.isArray(styling.cellStyles)) {
    styling.cellStyles.forEach((style) => {
      if (typeof style.row !== "number" || typeof style.col !== "number") {
        return;
      }
      const rows = table.querySelectorAll("tr");
      if (!rows || rows.length <= style.row)
        return;
      const cells = rows[style.row].querySelectorAll("td, th");
      if (!cells || cells.length <= style.col)
        return;
      const cell = cells[style.col];
      if (style.textAlign)
        cell.style.textAlign = style.textAlign;
      if (style.verticalAlign)
        cell.style.verticalAlign = style.verticalAlign;
      if (style.backgroundColor)
        cell.style.backgroundColor = style.backgroundColor;
      if (style.color)
        cell.style.color = style.color;
      if (style.fontWeight)
        cell.style.fontWeight = style.fontWeight;
      if (style.fontStyle)
        cell.style.fontStyle = style.fontStyle;
    });
  }
  const tableId = table.getAttribute("data-table-id");
  if (tableId) {
    table.classList.add(`table-${tableId}`);
  }
}

// src/tableStateManager.ts
var TableStateManager = class {
  /**
   * 构造函数
   * @param plugin 插件实例
   */
  constructor(plugin) {
    this.fileCacheMap = /* @__PURE__ */ new Map();
    this.tableStylesMap = /* @__PURE__ */ new Map();
    this.plugin = plugin;
    console.log("TableStateManager initialized");
    this.loadCacheData();
  }
  /**
   * 加载缓存数据
   */
  async loadCacheData() {
    try {
      const data = await this.plugin.loadData();
      if (data && data.fileCache) {
        for (const [path, cache] of Object.entries(data.fileCache)) {
          this.fileCacheMap.set(path, cache);
        }
        console.log(`\u5DF2\u52A0\u8F7D ${this.fileCacheMap.size} \u4E2A\u6587\u4EF6\u7F13\u5B58`);
      }
      if (data && data.tables) {
        for (const [id, tableData] of Object.entries(data.tables)) {
          if (tableData.styling) {
            this.tableStylesMap.set(id, tableData.styling);
          }
        }
        console.log(`\u5DF2\u52A0\u8F7D ${this.tableStylesMap.size} \u4E2A\u8868\u683C\u6837\u5F0F`);
      }
    } catch (error) {
      console.error("\u52A0\u8F7D\u7F13\u5B58\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 保存缓存数据
   */
  async saveCacheData() {
    try {
      const data = await this.plugin.loadData() || { tables: {} };
      if (!data.tables)
        data.tables = {};
      data.fileCache = {};
      for (const [path, cache] of this.fileCacheMap.entries()) {
        data.fileCache[path] = cache;
      }
      await this.plugin.saveData(data);
      console.log("\u7F13\u5B58\u6570\u636E\u5DF2\u4FDD\u5B58");
    } catch (error) {
      console.error("\u4FDD\u5B58\u7F13\u5B58\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 索引文件中的所有表格
   * @param filePath 文件路径
   * @param fileContent 文件内容
   * @returns 表格标识符数组
   */
  indexTablesInFile(filePath, fileContent) {
    const tables = [];
    const tableRegex = /^\s*\|(.+\|)+\s*\n\s*\|(\s*:?-+:?\s*\|)+\s*\n(\s*\|(.+\|)+\s*\n)*?/gm;
    const lines = fileContent.split("\n");
    let match;
    let tableIndex = 0;
    let lastIndex = 0;
    while ((match = tableRegex.exec(fileContent)) !== null) {
      const matchContent = match[0];
      const startPos = match.index;
      let startLine = 0;
      let charCount = 0;
      for (let i = 0; i < lines.length; i++) {
        if (charCount + lines[i].length + 1 > startPos) {
          startLine = i;
          break;
        }
        charCount += lines[i].length + 1;
      }
      const lineCount = matchContent.split("\n").length - 1;
      const endLine = startLine + lineCount;
      const headerLine = matchContent.split("\n")[0].trim();
      const headerHash = this.createHash(headerLine);
      tables.push({
        filePath,
        tableIndex: tableIndex++,
        headerHash,
        position: {
          startLine,
          endLine
        }
      });
      lastIndex = match.index + match[0].length;
      if (tableRegex.lastIndex <= lastIndex) {
        tableRegex.lastIndex = lastIndex + 1;
      }
    }
    return tables;
  }
  /**
   * 创建字符串哈希
   * @param str 要哈希的字符串
   * @returns 哈希值
   */
  createHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return hash.toString(16);
  }
  /**
   * 检查ID是否为新格式 (tbl-YYYYMMDD-xxxxxxxx)
   * @param id 表格ID
   * @returns 是否为新格式
   */
  isNewFormatId(id) {
    return /^tbl-\d{8}-[a-z0-9]{8}$/.test(id);
  }
  /**
   * 获取表格的唯一键
   * @param identifier 表格标识符或ID字符串
   * @returns 唯一键
   */
  getTableKey(identifier) {
    if (typeof identifier === "string") {
      if (this.isNewFormatId(identifier)) {
        return identifier;
      }
      return identifier;
    }
    return `${identifier.filePath}#${identifier.tableIndex}#${identifier.headerHash}`;
  }
  /**
   * 保存表格样式
   * @param identifier 表格标识符或ID字符串
   * @param styleData 样式数据
   * @param fileInfo 可选的文件信息，当identifier是字符串ID时需要提供
   */
  async saveTableStyle(identifier, styleData, fileInfo) {
    try {
      const key = this.getTableKey(identifier);
      this.tableStylesMap.set(key, styleData);
      const data = await this.plugin.loadData() || { tables: {} };
      if (!data.tables)
        data.tables = {};
      let tableData = data.tables[key];
      if (!tableData) {
        if (typeof identifier === "string" && this.isNewFormatId(identifier)) {
          if (!fileInfo) {
            console.warn(`\u4FDD\u5B58\u65B0\u683C\u5F0FID (${key}) \u9700\u8981\u63D0\u4F9BfileInfo`);
            fileInfo = { path: "unknown" };
          }
          tableData = {
            id: key,
            locations: [{
              path: fileInfo.path,
              index: fileInfo.index,
              startLine: fileInfo.startLine,
              endLine: fileInfo.endLine
            }],
            lastUpdated: Date.now()
          };
        } else {
          tableData = {
            id: key,
            locations: [{
              path: identifier.filePath,
              index: identifier.tableIndex,
              startLine: identifier.position.startLine,
              endLine: identifier.position.endLine
            }],
            headerHash: identifier.headerHash,
            lastUpdated: Date.now()
          };
        }
        data.tables[key] = tableData;
      }
      tableData.styling = styleData;
      tableData.lastUpdated = Date.now();
      await this.plugin.saveData(data);
      console.log(`\u8868\u683C\u6837\u5F0F\u5DF2\u4FDD\u5B58: ${key}`);
    } catch (error) {
      console.error("\u4FDD\u5B58\u8868\u683C\u6837\u5F0F\u65F6\u51FA\u9519:", error);
      throw error;
    }
  }
  /**
   * 获取表格样式
   * @param identifier 表格标识符或ID字符串
   * @returns 样式数据或null
   */
  getTableStyle(identifier) {
    const key = this.getTableKey(identifier);
    return this.tableStylesMap.get(key) || null;
  }
  /**
   * 获取文件缓存
   * @param filePath 文件路径
   * @returns 文件缓存或null
   */
  getFileCache(filePath) {
    return this.fileCacheMap.get(filePath) || null;
  }
  /**
   * 更新文件缓存
   * @param filePath 文件路径
   * @param content 文件内容
   */
  async updateFileCache(filePath, content) {
    try {
      const tables = this.indexTablesInFile(filePath, content);
      this.fileCacheMap.set(filePath, {
        content,
        tables,
        lastUpdated: Date.now()
      });
      await this.saveCacheData();
      console.log(`\u6587\u4EF6\u7F13\u5B58\u5DF2\u66F4\u65B0: ${filePath}`);
    } catch (error) {
      console.error("\u66F4\u65B0\u6587\u4EF6\u7F13\u5B58\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 检测表格变化
   * @param oldContent 旧内容
   * @param newContent 新内容
   * @param filePath 文件路径
   * @returns 表格变化
   */
  detectTableChanges(oldContent, newContent, filePath) {
    const oldTables = this.indexTablesInFile(filePath, oldContent);
    const newTables = this.indexTablesInFile(filePath, newContent);
    const changes = {
      added: [],
      removed: [],
      modified: []
    };
    for (const oldTable of oldTables) {
      const matchingNewTable = newTables.find((t) => t.headerHash === oldTable.headerHash);
      if (!matchingNewTable) {
        changes.removed.push(oldTable);
      }
    }
    for (const newTable of newTables) {
      const matchingOldTable = oldTables.find((t) => t.headerHash === newTable.headerHash);
      if (!matchingOldTable) {
        changes.added.push(newTable);
      } else {
        const oldTableContent = this.extractTableContent(oldContent, matchingOldTable);
        const newTableContent = this.extractTableContent(newContent, newTable);
        if (oldTableContent !== newTableContent) {
          changes.modified.push({ old: matchingOldTable, new: newTable });
        }
      }
    }
    return changes;
  }
  /**
   * 提取表格内容
   * @param content 文件内容
   * @param table 表格标识符
   * @returns 表格内容
   */
  extractTableContent(content, table) {
    const lines = content.split("\n");
    return lines.slice(table.position.startLine, table.position.endLine + 1).join("\n");
  }
  /**
   * 处理表格变化
   * @param changes 表格变化
   * @param filePath 文件路径
   */
  async handleTableChanges(changes, filePath) {
    try {
      const data = await this.plugin.loadData() || { tables: {} };
      if (!data.tables)
        data.tables = {};
      let hasChanges = false;
      for (const removedTable of changes.removed) {
        const key = this.getTableKey(removedTable);
        this.tableStylesMap.delete(key);
        if (data.tables[key]) {
          delete data.tables[key];
          hasChanges = true;
        }
      }
      for (const { old, new: newTable } of changes.modified) {
        const oldKey = this.getTableKey(old);
        const newKey = this.getTableKey(newTable);
        if (oldKey !== newKey && this.tableStylesMap.has(oldKey)) {
          const styleData = this.tableStylesMap.get(oldKey);
          if (styleData) {
            this.tableStylesMap.set(newKey, styleData);
          }
          this.tableStylesMap.delete(oldKey);
          if (data.tables[oldKey]) {
            data.tables[newKey] = {
              ...data.tables[oldKey],
              id: newKey,
              headerHash: newTable.headerHash,
              locations: [{
                path: newTable.filePath,
                index: newTable.tableIndex,
                startLine: newTable.position.startLine,
                endLine: newTable.position.endLine
              }],
              lastUpdated: Date.now()
            };
            delete data.tables[oldKey];
            hasChanges = true;
          }
        }
      }
      if (hasChanges) {
        await this.plugin.saveData(data);
        console.log(`\u8868\u683C\u53D8\u5316\u5DF2\u5904\u7406: ${filePath}`);
      }
    } catch (error) {
      console.error("\u5904\u7406\u8868\u683C\u53D8\u5316\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置编辑器变化监听
   */
  setupEditorChangeListener() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("editor-change", (editor, markdownView) => {
        var _a;
        if (!markdownView)
          return;
        const file = markdownView.file;
        if (!file)
          return;
        const currentContent = editor.getValue();
        const previousContent = ((_a = this.getFileCache(file.path)) == null ? void 0 : _a.content) || "";
        const changes = this.detectTableChanges(previousContent, currentContent, file.path);
        if (changes.added.length > 0 || changes.removed.length > 0 || changes.modified.length > 0) {
          console.log("\u68C0\u6D4B\u5230\u8868\u683C\u53D8\u5316:", changes);
          this.updateFileCache(file.path, currentContent);
          this.handleTableChanges(changes, file.path);
        }
      })
    );
    console.log("\u5DF2\u8BBE\u7F6E\u7F16\u8F91\u5668\u53D8\u5316\u76D1\u542C\u5668");
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  nativeProcessing: true,
  paragraphs: false,
  enableCellMerging: true,
  enableMultiLevelMerge: true,
  // 默认启用多级合并
  confirmMergeNonEmpty: true,
  enableTableIds: true,
  idPrefix: "table",
  autoCenterMergedCells: true,
  toolbarEnabled: true,
  enableEditModeOperations: true,
  enableTableResize: true
  // 默认启用表格大小调整
};
var ObsidianSpreadsheet = class extends import_obsidian10.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    // 新增：表格大小调整处理器
    this.currentEditingTable = null;
    // 添加视图模式状态跟踪
    this.lastPreviewModeState = false;
    this.handleTableClick = this.handleTableClick.bind(this);
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
  }
  // 移除文档点击事件处理函数
  async onload() {
    try {
      console.log("Loading Advanced Table XT plugin");
      await this.loadSettings();
      if (this.settings.toolbarEnabled === void 0) {
        this.settings.toolbarEnabled = true;
        await this.saveSettings();
      }
      if (this.settings.enableEditModeOperations === void 0) {
        this.settings.enableEditModeOperations = true;
        await this.saveSettings();
      }
      if (this.settings.enableTableResize === void 0) {
        this.settings.enableTableResize = true;
        await this.saveSettings();
      }
      loadIcons();
      console.log("Initializing plugin components");
      this.tableIdManager = new TableIdManager(this);
      this.markdownSourceEditor = new MarkdownSourceEditor(this);
      this.tableDetector = new MarkdownTableDetector(this);
      this.tableStateManager = new TableStateManager(this);
      this.tableToolbar = new TableToolbar(this);
      this.tableResizeHandler = new TableResizeHandler(this);
      this.tableStateManager.setupEditorChangeListener();
      if (this.settings.enableTableResize) {
        addTableResizeStyles();
      }
      this.ribbonIcon = this.addRibbonIcon("table-toolbar-toggle", "\u8868\u683C\u5DE5\u5177\u680F", (evt) => {
        this.toggleToolbarState();
      });
      this.addRibbonIcon("table-edit-mode", "\u7F16\u8F91\u6A21\u5F0F\u8868\u683C\u64CD\u4F5C", (evt) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
        if (!activeView) {
          new import_obsidian10.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u89C6\u56FE");
          return;
        }
        const isEditMode = activeView.getMode() === "source";
        if (!isEditMode) {
          new import_obsidian10.Notice("\u8BF7\u5207\u6362\u5230\u7F16\u8F91\u6A21\u5F0F\u4F7F\u7528\u6B64\u529F\u80FD");
          return;
        }
        const menu = new import_obsidian10.Menu();
        menu.addItem((item) => {
          item.setTitle("\u4E3A\u8868\u683C\u6DFB\u52A0ID").setIcon("table-id").onClick(async () => {
            await this.markdownSourceEditor.addTableIdToMarkdown();
          });
        });
        menu.addItem((item) => {
          item.setTitle("\u5411\u53F3\u5408\u5E76\u5355\u5143\u683C").setIcon("merge-right").onClick(async () => {
            await this.markdownSourceEditor.mergeCells("right");
          });
        });
        menu.addItem((item) => {
          item.setTitle("\u5411\u4E0B\u5408\u5E76\u5355\u5143\u683C").setIcon("merge-down").onClick(async () => {
            await this.markdownSourceEditor.mergeCells("down");
          });
        });
        menu.showAtMouseEvent(evt);
      });
      this.updateRibbonIcon();
      if (this.settings.toolbarEnabled) {
        this.createToolbar();
      }
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", () => {
          if (this.settings.toolbarEnabled) {
            setTimeout(() => {
              this.setupTableSelection();
            }, 300);
          }
        })
      );
      this.registerEvent(
        this.app.workspace.on("layout-change", () => {
          if (this.settings.toolbarEnabled) {
            setTimeout(() => {
              this.setupTableSelection();
            }, 300);
          }
        })
      );
      this.registerEvent(
        this.app.workspace.on("editor-change", (editor, view) => {
          if (this.settings.toolbarEnabled && this.settings.enableEditModeOperations) {
            if (view instanceof import_obsidian10.MarkdownView && view.getMode() === "source") {
              this.debounce(() => {
                const tableInfo = this.markdownSourceEditor.locateTableInMarkdown(editor);
                if (tableInfo) {
                  this.setupEditModeTableSelection(editor);
                }
              }, 500)();
            }
          }
        })
      );
      this.addSettingTab(new SheetSettingsTab(this.app, this));
      this.setupViewModeChangeListener();
      this.checkAndRenderTables();
      console.log("Advanced Table XT plugin loaded");
    } catch (error) {
      console.error("Error loading Advanced Table XT plugin:", error);
    }
  }
  /**
   * 防抖函数
   * @param func 要执行的函数
   * @param wait 等待时间（毫秒）
   */
  debounce(func, wait) {
    let timeout = null;
    return function(...args) {
      const context = this;
      const later = function() {
        timeout = null;
        func.apply(context, args);
      };
      if (timeout)
        clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  // 创建工具栏 - 新方法，只在需要时创建工具栏
  createToolbar() {
    try {
      document.querySelectorAll(".advanced-table-toolbar-container").forEach((container) => {
        container.remove();
      });
      const toolbarContainer = document.createElement("div");
      toolbarContainer.className = "advanced-table-toolbar-container";
      document.body.appendChild(toolbarContainer);
      this.tableToolbar.createToolbar(toolbarContainer);
      document.addEventListener("click", this.handleDocumentClick);
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (activeView) {
        const isEditMode = activeView.getMode() === "source";
        if (isEditMode) {
          const tableInfo = this.markdownSourceEditor.locateTableInMarkdown(activeView.editor);
          if (tableInfo) {
            this.setupEditModeTableSelection(activeView.editor);
          }
        } else {
          this.setupPreviewModeTableSelection();
        }
      }
      console.log("\u5DE5\u5177\u680F\u5DF2\u521B\u5EFA");
    } catch (error) {
      console.error("\u521B\u5EFA\u5DE5\u5177\u680F\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置表格选择
   */
  setupTableSelection() {
    try {
      document.removeEventListener("click", this.handleTableClick);
      document.removeEventListener("click", this.handleDocumentClick);
      document.addEventListener("click", this.handleTableClick);
      document.addEventListener("click", this.handleDocumentClick);
      console.log("\u8868\u683C\u9009\u62E9\u4E8B\u4EF6\u5DF2\u8BBE\u7F6E");
    } catch (error) {
      console.error("\u8BBE\u7F6E\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置编辑模式下的表格选择功能
   * @param editor 编辑器实例
   */
  setupEditModeTableSelection(editor) {
    try {
      const cursor = editor.getCursor();
      console.log(`\u7F16\u8F91\u6A21\u5F0F\u4E0B\u5149\u6807\u4F4D\u7F6E: \u884C=${cursor.line}, \u5217=${cursor.ch}`);
      const tableInfo = this.markdownSourceEditor.locateTableInMarkdown(editor);
      if (!tableInfo) {
        console.log("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u672A\u627E\u5230\u8868\u683C");
        if (this.currentEditingTable) {
          this.currentEditingTable = null;
          if (this.tableToolbar) {
            this.tableToolbar.clearSelection();
          }
        }
        return;
      }
      console.log(`\u7F16\u8F91\u6A21\u5F0F\u4E0B\u627E\u5230\u8868\u683C: \u8303\u56F4=${tableInfo.startLine}-${tableInfo.endLine}`);
      if (!document.querySelector(".advanced-table-toolbar-container")) {
        this.createToolbar();
      }
      this.currentEditingTable = {
        startLine: tableInfo.startLine,
        endLine: tableInfo.endLine,
        content: tableInfo.content
      };
      this.tableToolbar.setActiveEditModeTable(this.currentEditingTable);
      const cellPosition = this.markdownSourceEditor.getCellPosition(editor);
      if (cellPosition) {
        console.log(`\u7F16\u8F91\u6A21\u5F0F\u4E0B\u5149\u6807\u4F4D\u4E8E\u5355\u5143\u683C: \u884C=${cellPosition.rowIndex}, \u5217=${cellPosition.colIndex}`);
      } else {
        console.log("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u65E0\u6CD5\u786E\u5B9A\u5149\u6807\u6240\u5728\u5355\u5143\u683C");
      }
      console.log("\u7F16\u8F91\u6A21\u5F0F\u4E0B\u9009\u62E9\u4E86\u8868\u683C:", this.currentEditingTable);
    } catch (error) {
      console.error("\u8BBE\u7F6E\u7F16\u8F91\u6A21\u5F0F\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 设置预览模式下的表格选择功能
   */
  setupPreviewModeTableSelection() {
    try {
      setupPreviewModeTableSelection(this);
    } catch (error) {
      console.error("\u8BBE\u7F6E\u9884\u89C8\u6A21\u5F0F\u8868\u683C\u9009\u62E9\u65F6\u51FA\u9519:", error);
    }
  }
  onunload() {
    console.log("\u5378\u8F7D Advanced Table XT \u63D2\u4EF6");
    document.querySelectorAll(".advanced-table-toolbar-container").forEach((container) => {
      container.remove();
    });
    this.removeAllTableHighlights();
    document.querySelectorAll("table[data-table-processed]").forEach((table) => {
      const tableEl = table;
      delete tableEl.dataset.tableProcessed;
      delete tableEl.dataset.tableSelected;
      tableEl.style.outline = "";
      tableEl.style.outlineOffset = "";
      tableEl.onclick = null;
    });
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  highlightSelectedTable(table) {
    this.removeAllTableHighlights();
    table.style.outline = "2px solid var(--interactive-accent)";
    table.style.outlineOffset = "2px";
    table.dataset.tableSelected = "true";
  }
  removeAllTableHighlights() {
    document.querySelectorAll('table[data-table-selected="true"]').forEach((table) => {
      const tableEl = table;
      tableEl.style.outline = "";
      tableEl.style.outlineOffset = "";
      delete tableEl.dataset.tableSelected;
    });
  }
  createTableData(table, tableId) {
    var _a;
    try {
      const commentId = this.tableIdManager.getTableIdentifier(table);
      if (!commentId || commentId !== tableId) {
        console.warn(`\u8868\u683CID\u9A8C\u8BC1\u5931\u8D25: \u4F20\u5165ID=${tableId}, HTML\u6CE8\u91CAID=${commentId || "\u65E0"}`);
        console.warn("\u53EA\u6709\u5728HTML\u6CE8\u91CA\u4E2D\u660E\u786E\u5B9A\u4E49\u7684\u8868\u683CID\u624D\u80FD\u521B\u5EFA\u6570\u636E");
        return;
      }
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (!activeView) {
        console.warn("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u89C6\u56FE\uFF0C\u4E0D\u521B\u5EFA\u8868\u683C\u6570\u636E");
        return;
      }
      const filePath = (_a = activeView.file) == null ? void 0 : _a.path;
      if (!filePath) {
        console.warn("\u65E0\u6CD5\u83B7\u53D6\u6587\u4EF6\u8DEF\u5F84\uFF0C\u4E0D\u521B\u5EFA\u8868\u683C\u6570\u636E");
        return;
      }
      console.log(`\u4E3A\u6709\u6548\u7684HTML\u6CE8\u91CAID\u521B\u5EFA\u8868\u683C\u6570\u636E: ${tableId}`);
      this.tableToolbar.extractAndStoreTableInfo(tableId, table, filePath);
    } catch (error) {
      console.error("\u521B\u5EFA\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  async saveTableData(tableData) {
    try {
      if (!tableData || !tableData.id) {
        console.warn("\u65E0\u6548\u7684\u8868\u683C\u6570\u636E\uFF0C\u7F3A\u5C11ID");
        return;
      }
      console.log(`\u51C6\u5907\u4FDD\u5B58\u8868\u683C\u6570\u636E: ${tableData.id}`);
      const existingData = await this.loadData() || {};
      if (!existingData.tables) {
        existingData.tables = {};
      }
      existingData.tables[tableData.id] = tableData;
      await this.saveData(existingData);
      console.log(`\u5DF2\u4FDD\u5B58\u8868\u683C\u6570\u636E: ${tableData.id}`);
    } catch (error) {
      console.error("\u4FDD\u5B58\u8868\u683C\u6570\u636E\u65F6\u51FA\u9519:", error);
    }
  }
  updateRibbonIcon() {
    if (!this.ribbonIcon)
      return;
    this.ribbonIcon.empty();
    if (this.settings.toolbarEnabled) {
      const iconEl = this.ribbonIcon.createEl("div", {
        cls: "ribbon-icon-active"
      });
      iconEl.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="3" y1="15" x2="21" y2="15"></line><line x1="9" y1="3" x2="9" y2="21"></line><line x1="15" y1="3" x2="15" y2="21"></line></svg>`;
      iconEl.style.color = "var(--interactive-accent)";
    } else {
      const iconEl = this.ribbonIcon.createEl("div");
      iconEl.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="3" y1="15" x2="21" y2="15"></line><line x1="9" y1="3" x2="9" y2="21"></line><line x1="15" y1="3" x2="15" y2="21"></line></svg>`;
    }
  }
  toggleToolbarState() {
    this.settings.toolbarEnabled = !this.settings.toolbarEnabled;
    this.saveSettings();
    this.updateRibbonIcon();
    if (this.settings.toolbarEnabled) {
      this.createToolbar();
      new import_obsidian10.Notice("\u8868\u683C\u5DE5\u5177\u680F\u5DF2\u542F\u7528");
    } else {
      document.querySelectorAll(".advanced-table-toolbar-container").forEach((container) => {
        container.remove();
      });
      new import_obsidian10.Notice("\u8868\u683C\u5DE5\u5177\u680F\u5DF2\u7981\u7528");
    }
  }
  /**
   * 处理表格点击事件
   * @param event 点击事件
   */
  handleTableClick(event2) {
    try {
      if (!this.settings.toolbarEnabled)
        return;
      let target = event2.target;
      let table = null;
      while (target && target !== document.body) {
        if (target.tagName === "TABLE") {
          table = target;
          break;
        }
        target = target.parentElement;
      }
      if (table) {
        event2.stopPropagation();
        this.tableToolbar.setActiveTable(table);
        if (this.settings.enableTableResize) {
          this.tableResizeHandler.setActiveTable(table);
        }
        console.log("\u8868\u683C\u88AB\u9009\u4E2D");
      }
    } catch (error) {
      console.error("\u5904\u7406\u8868\u683C\u70B9\u51FB\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 处理文档点击事件
   * @param event 点击事件
   */
  handleDocumentClick(event2) {
    try {
      if (!this.settings.toolbarEnabled)
        return;
      let target = event2.target;
      let isToolbarClick = false;
      let isTableClick = false;
      while (target && target !== document.body) {
        if (target.classList.contains("advanced-table-toolbar")) {
          isToolbarClick = true;
          break;
        }
        if (target.tagName === "TABLE") {
          isTableClick = true;
          break;
        }
        target = target.parentElement;
      }
      if (!isToolbarClick && !isTableClick) {
        this.tableToolbar.clearSelection();
        if (this.settings.enableTableResize) {
          this.tableResizeHandler.setActiveTable(null);
        }
        console.log("\u8868\u683C\u9009\u62E9\u5DF2\u6E05\u9664");
      }
    } catch (error) {
      console.error("\u5904\u7406\u6587\u6863\u70B9\u51FB\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 显示当前表格ID
   */
  async showCurrentTableId() {
    try {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (!activeView) {
        new import_obsidian10.Notice("\u672A\u627E\u5230\u6D3B\u52A8\u89C6\u56FE");
        return;
      }
      const isEditMode = activeView.getMode() === "source";
      let tableId = null;
      if (isEditMode) {
        tableId = await this.markdownSourceEditor.getCurrentTableId();
      } else {
        if (this.tableToolbar.activeTable) {
          tableId = this.tableIdManager.getTableIdentifier(this.tableToolbar.activeTable);
        }
      }
      if (tableId) {
        new import_obsidian10.Notice(`\u5F53\u524D\u8868\u683CID: ${tableId}`);
        console.log("\u5F53\u524D\u8868\u683CID:", tableId);
      } else {
        new import_obsidian10.Notice("\u672A\u627E\u5230\u8868\u683CID\uFF0C\u8BF7\u786E\u4FDD\u5149\u6807\u5728\u8868\u683C\u5185\u6216\u5DF2\u9009\u62E9\u8868\u683C");
      }
    } catch (error) {
      console.error("\u663E\u793A\u5F53\u524D\u8868\u683CID\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 渲染合并单元格
   * @param tableEl 表格元素
   * @param ctx Markdown处理上下文
   */
  renderMergedCells(tableEl, ctx) {
    var _a;
    try {
      if (tableEl.dataset.tableMergeProcessed === "true") {
        return;
      }
      const rawMarkdown = ((_a = ctx.getSectionInfo(tableEl)) == null ? void 0 : _a.text) || (0, import_obsidian10.htmlToMarkdown)(tableEl);
      if (!rawMarkdown)
        return;
      const lines = rawMarkdown.split("\n");
      const tableLines = lines.filter((line) => line.trim().startsWith("|") && line.trim().endsWith("|"));
      if (tableLines.length < 2)
        return;
      const contentLines = [tableLines[0]].concat(tableLines.slice(2));
      const rows = [];
      for (const line of contentLines) {
        const cells = line.split("|").filter((_, i, arr) => i > 0 && i < arr.length - 1).map((cell) => cell.trim());
        rows.push(cells);
      }
      const domRows = tableEl.querySelectorAll("tr");
      if (domRows.length !== rows.length)
        return;
      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
        const rowCells = rows[rowIndex];
        const domRow = domRows[rowIndex];
        const domCells = domRow.querySelectorAll("th, td");
        if (domCells.length !== rowCells.length)
          continue;
        for (let colIndex = 0; colIndex < rowCells.length; colIndex++) {
          const cellContent = rowCells[colIndex];
          const domCell = domCells[colIndex];
          if ((cellContent === "<" || cellContent === "\\<" || cellContent === " < " || cellContent === " \\< ") && colIndex > 0) {
            const leftCell = domCells[colIndex - 1];
            leftCell.colSpan = (leftCell.colSpan || 1) + 1;
            domCell.style.display = "none";
            if (this.settings.autoCenterMergedCells) {
              leftCell.style.textAlign = "center";
              leftCell.style.verticalAlign = "middle";
            }
            leftCell.classList.add("obs-merged-cell");
          } else if ((cellContent === "^" || cellContent === "\\^" || cellContent === " ^ " || cellContent === " \\^ ") && rowIndex > 0) {
            const aboveRow = domRows[rowIndex - 1];
            const aboveCells = aboveRow.querySelectorAll("th, td");
            if (colIndex < aboveCells.length) {
              const aboveCell = aboveCells[colIndex];
              aboveCell.rowSpan = (aboveCell.rowSpan || 1) + 1;
              domCell.style.display = "none";
              if (this.settings.autoCenterMergedCells) {
                aboveCell.style.textAlign = "center";
                aboveCell.style.verticalAlign = "middle";
              }
              aboveCell.classList.add("obs-merged-cell");
            }
          }
        }
      }
      tableEl.dataset.tableMergeProcessed = "true";
      console.log("\u5DF2\u6E32\u67D3\u8868\u683C\u5408\u5E76\u5355\u5143\u683C");
    } catch (error) {
      console.error("\u6E32\u67D3\u5408\u5E76\u5355\u5143\u683C\u65F6\u51FA\u9519:", error);
    }
  }
  /**
   * 从Markdown文件中读取表格ID
   * 这是一个更可靠的方法，因为它不依赖于DOM结构
   * @param table 表格元素
   * @returns Promise<string | null>
   */
  async readTableIdFromMarkdown(table) {
    var _a, _b;
    try {
      const existingId = table.getAttribute("data-table-id");
      if (existingId) {
        console.log(`\u4ECE\u8868\u683C\u5143\u7D20\u5C5E\u6027\u4E2D\u83B7\u53D6ID: ${existingId}`);
        return existingId;
      }
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (!activeView) {
        console.log("\u672A\u627E\u5230\u6D3B\u52A8\u89C6\u56FE");
        return null;
      }
      if (activeView.getMode() === "preview") {
        const sectionInfo = (_b = (_a = activeView.previewMode.renderer) == null ? void 0 : _a.getSectionInfo) == null ? void 0 : _b.call(_a, table);
        if (sectionInfo && sectionInfo.text) {
          const text = sectionInfo.text;
          const idMatch = text.match(/<!--\s*table[-_]?id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || text.match(/<!--\s*tableid:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || text.match(/<!--\s*id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || text.match(/<!--\s*(tbl|table):\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || text.match(/<!--table-id:([a-zA-Z0-9_\-:.]+)-->/i);
          if (idMatch) {
            const id = idMatch[1] || idMatch[2];
            console.log(`\u4ECE\u9884\u89C8\u6A21\u5F0F\u6E32\u67D3\u4E0A\u4E0B\u6587\u4E2D\u627E\u5230\u8868\u683CID: ${id}`);
            return id;
          }
        }
      }
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        console.log("\u672A\u627E\u5230\u6D3B\u52A8\u6587\u4EF6");
        return null;
      }
      console.log(`\u5C1D\u8BD5\u4ECE\u6587\u4EF6\u5185\u5BB9\u4E2D\u67E5\u627E\u8868\u683CID: ${activeFile.path}`);
      const allTables = Array.from(document.querySelectorAll("table"));
      const tableIndex = allTables.indexOf(table);
      if (tableIndex === -1) {
        console.log("\u672A\u627E\u5230\u8868\u683C\u7D22\u5F15");
        return null;
      }
      console.log(`\u8868\u683C\u4F4D\u7F6E: \u7B2C${tableIndex}\u4E2A\u8868\u683C`);
      const content = await this.app.vault.read(activeFile);
      const lines = content.split("\n");
      let tableCount = 0;
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].trim().startsWith("|") && lines[i].trim().endsWith("|")) {
          if (i + 1 < lines.length && lines[i + 1].trim().match(/^\|[-:\s|]*\|$/)) {
            if (tableCount === tableIndex) {
              for (let j = i - 1; j >= Math.max(0, i - 10); j--) {
                const line = lines[j].trim();
                const idMatch = line.match(/<!--\s*table[-_]?id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || line.match(/<!--\s*tableid:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || line.match(/<!--\s*id:\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || line.match(/<!--\s*(tbl|table):\s*([a-zA-Z0-9_\-:.]+)\s*-->/i) || line.match(/<!--table-id:([a-zA-Z0-9_\-:.]+)-->/i);
                if (idMatch) {
                  const id = idMatch[1] || idMatch[2];
                  console.log(`\u4ECEMarkdown\u5185\u5BB9\u4E2D\u627E\u5230\u8868\u683CID: ${id}`);
                  table.setAttribute("data-table-id", id);
                  return id;
                }
                if (line !== "" && !line.startsWith("<!--") && !line.startsWith("//")) {
                  break;
                }
              }
              if (this.settings.enableTableIds) {
                const newId = this.tableIdManager.generateTableId();
                console.log(`\u672A\u627E\u5230\u8868\u683CID\uFF0C\u751F\u6210\u65B0ID: ${newId}`);
                table.setAttribute("data-table-id", newId);
                return newId;
              }
              console.log("\u672A\u5728Markdown\u5185\u5BB9\u4E2D\u627E\u5230\u8868\u683CID\uFF0C\u4E14\u8868\u683CID\u529F\u80FD\u5DF2\u7981\u7528");
              return null;
            }
            tableCount++;
          }
        }
      }
      console.log(`\u5728\u6587\u4EF6\u4E2D\u53EA\u627E\u5230 ${tableCount} \u4E2A\u8868\u683C\uFF0C\u7D22\u5F15 ${tableIndex} \u8D85\u51FA\u8303\u56F4`);
      return null;
    } catch (error) {
      console.error("\u4ECEMarkdown\u5185\u5BB9\u8BFB\u53D6\u8868\u683CID\u65F6\u51FA\u9519:", error);
      return null;
    }
  }
  /**
   * 设置视图模式变化监听
   */
  setupViewModeChangeListener() {
    if (this.viewModeChangeHandler) {
      this.app.workspace.off("active-leaf-change", this.viewModeChangeHandler);
      this.app.workspace.off("layout-change", this.viewModeChangeHandler);
    }
    this.viewModeChangeHandler = () => {
      this.checkAndRenderTables();
    };
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", this.viewModeChangeHandler)
    );
    this.registerEvent(
      this.app.workspace.on("layout-change", this.viewModeChangeHandler)
    );
    console.log("\u5DF2\u8BBE\u7F6E\u89C6\u56FE\u6A21\u5F0F\u53D8\u5316\u76D1\u542C\u5668");
  }
  /**
   * 检查当前视图模式并渲染表格
   */
  async checkAndRenderTables() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
    if (!activeView)
      return;
    const isPreviewMode = activeView.getMode() === "preview";
    console.log(`\u5F53\u524D\u89C6\u56FE\u6A21\u5F0F: ${isPreviewMode ? "\u9884\u89C8\u6A21\u5F0F" : "\u7F16\u8F91\u6A21\u5F0F"}`);
    if (isPreviewMode) {
      await renderTablesWithStoredStyles(this);
      if (this.settings.toolbarEnabled) {
        this.setupTableSelection();
      }
      this.lastPreviewModeState = true;
    } else {
      this.lastPreviewModeState = false;
      if (this.settings.toolbarEnabled && this.settings.enableEditModeOperations) {
        const editor = activeView.editor;
        this.setupEditModeTableSelection(editor);
      }
    }
  }
};
var main_default = ObsidianSpreadsheet;
